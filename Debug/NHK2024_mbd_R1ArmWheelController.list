
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008988  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000078  08008a00  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008a00  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6ee  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003018  00000000  00000000  0003a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0003d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127e  00000000  00000000  0003efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029041  00000000  00000000  00040246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0c2  00000000  00000000  00069287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a9dc  00000000  00000000  00083349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071ac  00000000  00000000  0019dd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001a4ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008878 	.word	0x08008878

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08008878 	.word	0x08008878

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b970 	b.w	8000f54 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	460f      	mov	r7, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0xe2>
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	b143      	cbz	r3, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	f1c3 0220 	rsb	r2, r3, #32
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cbe:	fa1f f58c 	uxth.w	r5, ip
 8000cc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc6:	0c22      	lsrs	r2, r4, #16
 8000cc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	fb01 f005 	mul.w	r0, r1, r5
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ce0:	f080 811c 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f240 8119 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000cea:	3902      	subs	r1, #2
 8000cec:	4462      	add	r2, ip
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	b2a4      	uxth	r4, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfe:	fb00 f505 	mul.w	r5, r0, r5
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x90>
 8000d06:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0e:	f080 8107 	bcs.w	8000f20 <__udivmoddi4+0x294>
 8000d12:	42a5      	cmp	r5, r4
 8000d14:	f240 8104 	bls.w	8000f20 <__udivmoddi4+0x294>
 8000d18:	4464      	add	r4, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11e      	cbz	r6, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0xbc>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80ed 	beq.w	8000f16 <__udivmoddi4+0x28a>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d149      	bne.n	8000de4 <__udivmoddi4+0x158>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d302      	bcc.n	8000d5a <__udivmoddi4+0xce>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	f200 80f8 	bhi.w	8000f4a <__udivmoddi4+0x2be>
 8000d5a:	1a84      	subs	r4, r0, r2
 8000d5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	4617      	mov	r7, r2
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d0e2      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	e9c6 4700 	strd	r4, r7, [r6]
 8000d6c:	e7df      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xe6>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f382 	clz	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	2101      	movs	r1, #1
 8000d88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d90:	0c22      	lsrs	r2, r4, #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb0e f005 	mul.w	r0, lr, r5
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 80cb 	bhi.w	8000f44 <__udivmoddi4+0x2b8>
 8000dae:	4645      	mov	r5, r8
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x14e>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x14c>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 80bb 	bhi.w	8000f4e <__udivmoddi4+0x2c2>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000de2:	e79f      	b.n	8000d24 <__udivmoddi4+0x98>
 8000de4:	f1c1 0720 	rsb	r7, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df2:	fa05 f401 	lsl.w	r4, r5, r1
 8000df6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfa:	40fd      	lsrs	r5, r7
 8000dfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb08 f50e 	mul.w	r5, r8, lr
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e2c:	f080 8088 	bcs.w	8000f40 <__udivmoddi4+0x2b4>
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	f240 8085 	bls.w	8000f40 <__udivmoddi4+0x2b4>
 8000e36:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3a:	4464      	add	r4, ip
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	b29d      	uxth	r5, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e5c:	d26c      	bcs.n	8000f38 <__udivmoddi4+0x2ac>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	d96a      	bls.n	8000f38 <__udivmoddi4+0x2ac>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	42ac      	cmp	r4, r5
 8000e74:	46c8      	mov	r8, r9
 8000e76:	46ae      	mov	lr, r5
 8000e78:	d356      	bcc.n	8000f28 <__udivmoddi4+0x29c>
 8000e7a:	d053      	beq.n	8000f24 <__udivmoddi4+0x298>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x208>
 8000e7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e82:	eb64 040e 	sbc.w	r4, r4, lr
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40ca      	lsrs	r2, r1
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4317      	orrs	r7, r2
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eac:	409d      	lsls	r5, r3
 8000eae:	432a      	orrs	r2, r5
 8000eb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb4:	fa1f fe8c 	uxth.w	lr, ip
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ec0:	0c11      	lsrs	r1, r2, #16
 8000ec2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eca:	428d      	cmp	r5, r1
 8000ecc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x258>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eda:	d22f      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d92d      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	1b49      	subs	r1, r1, r5
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eec:	fb07 1115 	mls	r1, r7, r5, r1
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x282>
 8000efc:	eb1c 0202 	adds.w	r2, ip, r2
 8000f00:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f04:	d216      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d914      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a52      	subs	r2, r2, r1
 8000f10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f14:	e738      	b.n	8000d88 <__udivmoddi4+0xfc>
 8000f16:	4631      	mov	r1, r6
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	e6e6      	b.n	8000cee <__udivmoddi4+0x62>
 8000f20:	4610      	mov	r0, r2
 8000f22:	e6fb      	b.n	8000d1c <__udivmoddi4+0x90>
 8000f24:	4548      	cmp	r0, r9
 8000f26:	d2a9      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f28:	ebb9 0802 	subs.w	r8, r9, r2
 8000f2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f30:	3b01      	subs	r3, #1
 8000f32:	e7a3      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f34:	4645      	mov	r5, r8
 8000f36:	e7ea      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f38:	462b      	mov	r3, r5
 8000f3a:	e794      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e7d1      	b.n	8000ee4 <__udivmoddi4+0x258>
 8000f40:	46d0      	mov	r8, sl
 8000f42:	e77b      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e732      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e70a      	b.n	8000d64 <__udivmoddi4+0xd8>
 8000f4e:	4464      	add	r4, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e742      	b.n	8000dda <__udivmoddi4+0x14e>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <pid_init>:
    PID *pid,
    double control_cycle,
    double kp, float kd, float ki,
    double setpoint,
    double integral_min, double integral_max
) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	; 0x38
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f60:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000f64:	ed87 1b08 	vstr	d1, [r7, #32]
 8000f68:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8000f6c:	edc7 2a07 	vstr	s5, [r7, #28]
 8000f70:	ed87 3b04 	vstr	d3, [r7, #16]
 8000f74:	ed87 4b02 	vstr	d4, [r7, #8]
 8000f78:	ed87 5b00 	vstr	d5, [r7]
    pid -> control_cycle = control_cycle;
 8000f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]
    pid -> kp = kp;
 8000f86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid -> kd = kd;
 8000f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f92:	f7ff faf9 	bl	8000588 <__aeabi_f2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid -> ki = ki;
 8000fa0:	69f8      	ldr	r0, [r7, #28]
 8000fa2:	f7ff faf1 	bl	8000588 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fac:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid -> setpoint = setpoint;
 8000fb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral_max = integral_max;
 8000fba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid -> integral_min = integral_min;
 8000fc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid -> integral = 0;
 8000fce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0;
 8000fdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000fea:	bf00      	nop
 8000fec:	3738      	adds	r7, #56	; 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <pid_compute>:

double pid_compute(
    PID *pid,
    double input
) {
 8000ff2:	b5b0      	push	{r4, r5, r7, lr}
 8000ff4:	b08a      	sub	sp, #40	; 0x28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	ed87 0b00 	vstr	d0, [r7]
    double error = pid -> setpoint - input;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001008:	f7ff f95e 	bl	80002c8 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid -> integral += error * pid -> control_cycle;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001024:	f7ff fb08 	bl	8000638 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff f94c 	bl	80002cc <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	68f9      	ldr	r1, [r7, #12]
 800103a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    // アンチワインドアップ
    if (pid -> integral > pid -> integral_max) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800104a:	f7ff fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <pid_compute+0x70>
        pid -> integral = pid -> integral_max;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001060:	e010      	b.n	8001084 <pid_compute+0x92>
    } else if (pid -> integral < pid -> integral_min) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800106e:	f7ff fd55 	bl	8000b1c <__aeabi_dcmplt>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <pid_compute+0x92>
        pid -> integral = pid -> integral_min;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    double derivative = (error - pid->last_error) / pid -> control_cycle;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800108a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800108e:	f7ff f91b 	bl	80002c8 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fbf4 	bl	800088c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // PID出力の計算
    double output = (pid -> kp * error) + (pid -> ki * pid -> integral) + (pid -> kd * derivative);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010b6:	f7ff fabf 	bl	8000638 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4614      	mov	r4, r2
 80010c0:	461d      	mov	r5, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010ce:	f7ff fab3 	bl	8000638 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f7ff f8f7 	bl	80002cc <__adddf3>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4614      	mov	r4, r2
 80010e4:	461d      	mov	r5, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010f0:	f7ff faa2 	bl	8000638 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // 更新
    pid -> last_error = error;
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800110e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return output;
 8001112:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001116:	ec43 2b17 	vmov	d7, r2, r3
}
 800111a:	eeb0 0a47 	vmov.f32	s0, s14
 800111e:	eef0 0a67 	vmov.f32	s1, s15
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bdb0      	pop	{r4, r5, r7, pc}

08001128 <pid_reset_setpoint>:

void pid_reset_setpoint(
    PID *pid,
    double setpoint
) {
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	ed87 0b00 	vstr	d0, [r7]
    pid -> setpoint = setpoint;
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral = 0; // TODO: check if this is necessary
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0; // TODO: check if this is necessary
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <int32_t_pid_compute>:

int int32_t_pid_compute(
    PID *pid,
    double input
) {
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	ed87 0b00 	vstr	d0, [r7]
    return (int)pid_compute(pid, input);
 8001172:	ed97 0b00 	vldr	d0, [r7]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff ff3b 	bl	8000ff2 <pid_compute>
 800117c:	ec53 2b10 	vmov	r2, r3, d0
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fcf2 	bl	8000b6c <__aeabi_d2iz>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Set timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	// For arm position adc
	if (htim == &htim6) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0x14>
//			printf("%d\r\n", arm_positions[1]);
			ARM_Position_PID_Cycle();
 80011a4:	f000 f954 	bl	8001450 <ARM_Position_PID_Cycle>
	}

}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002bc 	.word	0x200002bc
 80011b4:	00000000 	.word	0x00000000

080011b8 <HAL_FDCAN_RxFifo0Callback>:

// Set Interrupt Handler for FDCAN1 (raspberrypi, other stm ..)
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint8_t FDCAN1_RxData[2] = {0};
 80011c2:	2300      	movs	r3, #0
 80011c4:	813b      	strh	r3, [r7, #8]

  printf("FIFO0 callback\r\n");
 80011c6:	484e      	ldr	r0, [pc, #312]	; (8001300 <HAL_FDCAN_RxFifo0Callback+0x148>)
 80011c8:	f006 fd98 	bl	8007cfc <puts>

  // Error Handling
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d07f      	beq.n	80012d6 <HAL_FDCAN_RxFifo0Callback+0x11e>
  if (hfdcan != &hfdcan1) return;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d17d      	bne.n	80012da <HAL_FDCAN_RxFifo0Callback+0x122>

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN1_RxHeader, FDCAN1_RxData) != HAL_OK) {
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4a49      	ldr	r2, [pc, #292]	; (8001308 <HAL_FDCAN_RxFifo0Callback+0x150>)
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f003 fadc 	bl	80047a4 <HAL_FDCAN_GetRxMessage>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_FDCAN_RxFifo0Callback+0x4a>
      printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	4844      	ldr	r0, [pc, #272]	; (800130c <HAL_FDCAN_RxFifo0Callback+0x154>)
 80011fa:	f006 fd19 	bl	8007c30 <iprintf>
      Error_Handler();
 80011fe:	f000 fce9 	bl	8001bd4 <Error_Handler>
  }

  switch(FDCAN1_RxHeader.Identifier) {
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_FDCAN_RxFifo0Callback+0x150>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800120a:	d168      	bne.n	80012de <HAL_FDCAN_RxFifo0Callback+0x126>
    case CANID_ARM1:
      printf("CANID_ARM %d %d\r\n", FDCAN1_RxData[0]);
 800120c:	7a3b      	ldrb	r3, [r7, #8]
 800120e:	4619      	mov	r1, r3
 8001210:	483f      	ldr	r0, [pc, #252]	; (8001310 <HAL_FDCAN_RxFifo0Callback+0x158>)
 8001212:	f006 fd0d 	bl	8007c30 <iprintf>
      //TODO : Update ARM position setpoint

      switch(FDCAN1_RxData[0]) {
 8001216:	7a3b      	ldrb	r3, [r7, #8]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d03e      	beq.n	800129a <HAL_FDCAN_RxFifo0Callback+0xe2>
 800121c:	2b02      	cmp	r3, #2
 800121e:	dc58      	bgt.n	80012d2 <HAL_FDCAN_RxFifo0Callback+0x11a>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_FDCAN_RxFifo0Callback+0x72>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d01c      	beq.n	8001262 <HAL_FDCAN_RxFifo0Callback+0xaa>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], 2100);
          }
          break;
        default:
          break; // TODO : send RuntimeError to raspbeerypi
 8001228:	e053      	b.n	80012d2 <HAL_FDCAN_RxFifo0Callback+0x11a>
          printf("setpoint is %d\r\n", 2000); // TODO ; delete
 800122a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800122e:	4839      	ldr	r0, [pc, #228]	; (8001314 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8001230:	f006 fcfe 	bl	8007c30 <iprintf>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00f      	b.n	800125a <HAL_FDCAN_RxFifo0Callback+0xa2>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], 2000);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_FDCAN_RxFifo0Callback+0x160>)
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80012e8 <HAL_FDCAN_RxFifo0Callback+0x130>
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff6a 	bl	8001128 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b03      	cmp	r3, #3
 800125e:	ddec      	ble.n	800123a <HAL_FDCAN_RxFifo0Callback+0x82>
          break;
 8001260:	e038      	b.n	80012d4 <HAL_FDCAN_RxFifo0Callback+0x11c>
          printf("setpoint is %d\r\n", 1900); // TODO : delete
 8001262:	f240 716c 	movw	r1, #1900	; 0x76c
 8001266:	482b      	ldr	r0, [pc, #172]	; (8001314 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8001268:	f006 fce2 	bl	8007c30 <iprintf>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	e00f      	b.n	8001292 <HAL_FDCAN_RxFifo0Callback+0xda>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], 1900);
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_FDCAN_RxFifo0Callback+0x160>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80012f0 <HAL_FDCAN_RxFifo0Callback+0x138>
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff4e 	bl	8001128 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3301      	adds	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b03      	cmp	r3, #3
 8001296:	ddec      	ble.n	8001272 <HAL_FDCAN_RxFifo0Callback+0xba>
          break;
 8001298:	e01c      	b.n	80012d4 <HAL_FDCAN_RxFifo0Callback+0x11c>
          printf("setpoint is %d\r\n", 2100); // TODO : delete
 800129a:	f640 0134 	movw	r1, #2100	; 0x834
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80012a0:	f006 fcc6 	bl	8007c30 <iprintf>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e00f      	b.n	80012ca <HAL_FDCAN_RxFifo0Callback+0x112>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], 2100);
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80012ac:	6819      	ldr	r1, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80012f8 <HAL_FDCAN_RxFifo0Callback+0x140>
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff32 	bl	8001128 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	ddec      	ble.n	80012aa <HAL_FDCAN_RxFifo0Callback+0xf2>
          break;
 80012d0:	e000      	b.n	80012d4 <HAL_FDCAN_RxFifo0Callback+0x11c>
          break; // TODO : send RuntimeError to raspbeerypi
 80012d2:	bf00      	nop
      }

      break;
 80012d4:	e004      	b.n	80012e0 <HAL_FDCAN_RxFifo0Callback+0x128>
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <HAL_FDCAN_RxFifo0Callback+0x128>
  if (hfdcan != &hfdcan1) return;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <HAL_FDCAN_RxFifo0Callback+0x128>
    default:
      break;
 80012de:	bf00      	nop
  }
}
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	00000000 	.word	0x00000000
 80012ec:	409f4000 	.word	0x409f4000
 80012f0:	00000000 	.word	0x00000000
 80012f4:	409db000 	.word	0x409db000
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40a06800 	.word	0x40a06800
 8001300:	08008890 	.word	0x08008890
 8001304:	20000160 	.word	0x20000160
 8001308:	2000032c 	.word	0x2000032c
 800130c:	080088a0 	.word	0x080088a0
 8001310:	080088b4 	.word	0x080088b4
 8001314:	080088c8 	.word	0x080088c8
 8001318:	200003a8 	.word	0x200003a8

0800131c <HAL_FDCAN_RxFifo1Callback>:

// Set Interrupt Handler For FDCAN3 (motor at wheel and arm)
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	uint8_t FDCAN3_RxData[8];
	// Error Handling
//	printf("FIFO1 callback\r\n");
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d016      	beq.n	800135e <HAL_FDCAN_RxFifo1Callback+0x42>
	if (hfdcan != &hfdcan3) return;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_FDCAN_RxFifo1Callback+0x50>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d114      	bne.n	8001362 <HAL_FDCAN_RxFifo1Callback+0x46>

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &FDCAN3_RxHeader, FDCAN3_RxData) != HAL_OK) {
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_FDCAN_RxFifo1Callback+0x54>)
 800133e:	2141      	movs	r1, #65	; 0x41
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f003 fa2f 	bl	80047a4 <HAL_FDCAN_GetRxMessage>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <HAL_FDCAN_RxFifo1Callback+0x48>
		printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001350:	4619      	mov	r1, r3
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <HAL_FDCAN_RxFifo1Callback+0x58>)
 8001354:	f006 fc6c 	bl	8007c30 <iprintf>
		Error_Handler();
 8001358:	f000 fc3c 	bl	8001bd4 <Error_Handler>
 800135c:	e002      	b.n	8001364 <HAL_FDCAN_RxFifo1Callback+0x48>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 800135e:	bf00      	nop
 8001360:	e000      	b.n	8001364 <HAL_FDCAN_RxFifo1Callback+0x48>
	if (hfdcan != &hfdcan3) return;
 8001362:	bf00      	nop
	// TODO : Add wheel controller
//	switch(FDCAN3_RxHeader.Identifier) {
//		default:
//			printf("CAN ID %" PRIu32 "is not cached from FIFO1 callback\r\n", FDCAN3_RxHeader.Identifier);
//	}
}
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001c4 	.word	0x200001c4
 8001370:	20000378 	.word	0x20000378
 8001374:	080088a0 	.word	0x080088a0

08001378 <ARM_Position_PID_Init>:


/* For ARM PID */
static void ARM_Position_PID_Init(void) {
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	ed2d 8b02 	vpush	{d8}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

	PID_For_ARM_POS = (struct PID *)malloc(4 * sizeof(struct PID));
 8001382:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001386:	f006 fadd 	bl	8007944 <malloc>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <ARM_Position_PID_Init+0xc8>)
 8001390:	601a      	str	r2, [r3, #0]
	if (PID_For_ARM_POS == NULL) {
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <ARM_Position_PID_Init+0xc8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d104      	bne.n	80013a4 <ARM_Position_PID_Init+0x2c>
	    write_error_message(MEMORY_ERROR);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 f8b8 	bl	8001510 <write_error_message>
			Error_Handler();
 80013a0:	f000 fc18 	bl	8001bd4 <Error_Handler>
	}

	// initialize element
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	e030      	b.n	800140c <ARM_Position_PID_Init+0x94>
			 * ki : 0
			 * setpoint : 1500
			 * -500 : integral_min
			 * 500: integral_max
			 */
			pid_init(&PID_For_ARM_POS[arm_index], 1e-3, P_GAIN_FOR_ARM_POS, D_GAIN_FOR_ARM_POS, I_GAIN_FOR_ARM_POS, 1900, -500, 500);
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <ARM_Position_PID_Init+0xc8>)
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	18cc      	adds	r4, r1, r3
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <ARM_Position_PID_Init+0xcc>)
 80013bc:	ed93 8b00 	vldr	d8, [r3]
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <ARM_Position_PID_Init+0xd0>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbf7 	bl	8000bbc <__aeabi_d2f>
 80013ce:	4605      	mov	r5, r0
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <ARM_Position_PID_Init+0xd4>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbef 	bl	8000bbc <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001420 <ARM_Position_PID_Init+0xa8>
 80013e4:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8001428 <ARM_Position_PID_Init+0xb0>
 80013e8:	ed9f 3b11 	vldr	d3, [pc, #68]	; 8001430 <ARM_Position_PID_Init+0xb8>
 80013ec:	ee02 3a90 	vmov	s5, r3
 80013f0:	ee02 5a10 	vmov	s4, r5
 80013f4:	eeb0 1a48 	vmov.f32	s2, s16
 80013f8:	eef0 1a68 	vmov.f32	s3, s17
 80013fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001438 <ARM_Position_PID_Init+0xc0>
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fda9 	bl	8000f58 <pid_init>
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b03      	cmp	r3, #3
 8001410:	ddcb      	ble.n	80013aa <ARM_Position_PID_Init+0x32>
	}
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	ecbd 8b02 	vpop	{d8}
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	00000000 	.word	0x00000000
 8001424:	407f4000 	.word	0x407f4000
 8001428:	00000000 	.word	0x00000000
 800142c:	c07f4000 	.word	0xc07f4000
 8001430:	00000000 	.word	0x00000000
 8001434:	409db000 	.word	0x409db000
 8001438:	d2f1a9fc 	.word	0xd2f1a9fc
 800143c:	3f50624d 	.word	0x3f50624d
 8001440:	200003a8 	.word	0x200003a8
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	200003b0 	.word	0x200003b0

08001450 <ARM_Position_PID_Cycle>:

static void ARM_Position_PID_Cycle(void) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
	// Automatically set adc value to DMA, so don't need to read ADC
	if (PID_For_ARM_POS == NULL) {
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <ARM_Position_PID_Cycle+0xb0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <ARM_Position_PID_Cycle+0x18>
	    write_error_message(NULL_POINTER_ERROR);
 800145e:	2002      	movs	r0, #2
 8001460:	f000 f856 	bl	8001510 <write_error_message>
			Error_Handler();
 8001464:	f000 fbb6 	bl	8001bd4 <Error_Handler>


	uint8_t pid_controller_value[8];

	// update controller output
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e02f      	b.n	80014ce <ARM_Position_PID_Cycle+0x7e>
			uint16_t pid_for_arm_output = (uint16_t)(-int32_t_pid_compute(&PID_For_ARM_POS[arm_index], arm_positions[arm_index]));
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <ARM_Position_PID_Cycle+0xb0>)
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	18cc      	adds	r4, r1, r3
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <ARM_Position_PID_Cycle+0xb4>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f85c 	bl	8000544 <__aeabi_ui2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	ec43 2b10 	vmov	d0, r2, r3
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fe66 	bl	8001166 <int32_t_pid_compute>
 800149a:	4603      	mov	r3, r0
 800149c:	b29b      	uxth	r3, r3
 800149e:	425b      	negs	r3, r3
 80014a0:	817b      	strh	r3, [r7, #10]
			pid_controller_value[arm_index*2] = pid_for_arm_output >> 8;
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	3310      	adds	r3, #16
 80014b0:	443b      	add	r3, r7
 80014b2:	f803 2c10 	strb.w	r2, [r3, #-16]
			pid_controller_value[arm_index*2+1] = pid_for_arm_output & 0xFF;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3301      	adds	r3, #1
 80014bc:	897a      	ldrh	r2, [r7, #10]
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	3310      	adds	r3, #16
 80014c2:	443b      	add	r3, r7
 80014c4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	ddcc      	ble.n	800146e <ARM_Position_PID_Cycle+0x1e>
	}

	// write new controller value with can
	FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <ARM_Position_PID_Cycle+0xb8>)
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	601a      	str	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, pid_controller_value) != HAL_OK) {
 80014dc:	463b      	mov	r3, r7
 80014de:	461a      	mov	r2, r3
 80014e0:	4909      	ldr	r1, [pc, #36]	; (8001508 <ARM_Position_PID_Cycle+0xb8>)
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <ARM_Position_PID_Cycle+0xbc>)
 80014e4:	f003 f919 	bl	800471a <HAL_FDCAN_AddMessageToTxFifoQ>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <ARM_Position_PID_Cycle+0xa8>
	    write_error_message(FDCAN3_ERROR);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f80e 	bl	8001510 <write_error_message>
	    Error_Handler();
 80014f4:	f000 fb6e 	bl	8001bd4 <Error_Handler>
	}
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	200003a8 	.word	0x200003a8
 8001504:	200003a0 	.word	0x200003a0
 8001508:	20000354 	.word	0x20000354
 800150c:	200001c4 	.word	0x200001c4

08001510 <write_error_message>:

// send error message to raspberrypi
static void write_error_message(uint8_t error_code) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  /*
   * LSB ----------------- MSB
   * | micon ID | error_code |
   */
  uint8_t error_data = (error_code << 4) | ArmWheelController;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73fb      	strb	r3, [r7, #15]
  FDCAN1_TxHeader.Identifier = CANID_RUNTIME_ERROR;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <write_error_message+0x40>)
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
  FDCAN1_TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <write_error_message+0x40>)
 800152a:	2201      	movs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1_TxHeader, &error_data) != HAL_OK) {
 800152e:	f107 030f 	add.w	r3, r7, #15
 8001532:	461a      	mov	r2, r3
 8001534:	4906      	ldr	r1, [pc, #24]	; (8001550 <write_error_message+0x40>)
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <write_error_message+0x44>)
 8001538:	f003 f8ef 	bl	800471a <HAL_FDCAN_AddMessageToTxFifoQ>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <write_error_message+0x36>
          Error_Handler();
 8001542:	f000 fb47 	bl	8001bd4 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000308 	.word	0x20000308
 8001554:	20000160 	.word	0x20000160

08001558 <_write>:

int _write(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b29a      	uxth	r2, r3
 8001568:	2308      	movs	r3, #8
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <_write+0x24>)
 800156e:	f005 fb3d 	bl	8006bec <HAL_UART_Transmit>
    return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000228 	.word	0x20000228

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f000 fe51 	bl	800222a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001588:	f000 f828 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158c:	f000 fafe 	bl	8001b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001590:	f000 fad2 	bl	8001b38 <MX_DMA_Init>
  MX_ADC1_Init();
 8001594:	f000 f86e 	bl	8001674 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001598:	f000 fa4e 	bl	8001a38 <MX_LPUART1_UART_Init>
  MX_FDCAN3_Init();
 800159c:	f000 f9b2 	bl	8001904 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 80015a0:	f000 fa94 	bl	8001acc <MX_TIM6_Init>
  MX_FDCAN1_Init();
 80015a4:	f000 f90e 	bl	80017c4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize PID library
  ARM_Position_PID_Init();
 80015a8:	f7ff fee6 	bl	8001378 <ARM_Position_PID_Init>
  // Start ADC and save at DMA
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80015ac:	217f      	movs	r1, #127	; 0x7f
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <main+0x4c>)
 80015b0:	f002 f9ba 	bl	8003928 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
 80015b4:	2204      	movs	r2, #4
 80015b6:	4906      	ldr	r1, [pc, #24]	; (80015d0 <main+0x50>)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <main+0x4c>)
 80015ba:	f001 faa7 	bl	8002b0c <HAL_ADC_Start_DMA>

	printf("Complete Initialize\r\n");
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <main+0x54>)
 80015c0:	f006 fb9c 	bl	8007cfc <puts>

	// Start timer interrupt (1kHz)
	HAL_TIM_Base_Start_IT(&htim6);
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <main+0x58>)
 80015c6:	f004 ff41 	bl	800644c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <main+0x4a>
 80015cc:	20000094 	.word	0x20000094
 80015d0:	200003a0 	.word	0x200003a0
 80015d4:	080088dc 	.word	0x080088dc
 80015d8:	200002bc 	.word	0x200002bc

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	2238      	movs	r2, #56	; 0x38
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 fb8e 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001602:	f003 feab 	bl	800535c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800161c:	2301      	movs	r3, #1
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001620:	230a      	movs	r3, #10
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f003 ff35 	bl	80054a4 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001640:	f000 fac8 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2303      	movs	r3, #3
 800164a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2102      	movs	r1, #2
 800165c:	4618      	mov	r0, r3
 800165e:	f004 fa33 	bl	8005ac8 <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001668:	f000 fab4 	bl	8001bd4 <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	3750      	adds	r7, #80	; 0x50
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f006 fb3d 	bl	8007d0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <MX_ADC1_Init+0x13c>)
 8001694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001698:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <MX_ADC1_Init+0x13c>)
 800169c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a8:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016ae:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016bc:	2204      	movs	r2, #4
 80016be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016c0:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016e6:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <MX_ADC1_Init+0x13c>)
 80016fe:	f001 f849 	bl	8002794 <HAL_ADC_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001708:	f000 fa64 	bl	8001bd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4826      	ldr	r0, [pc, #152]	; (80017b0 <MX_ADC1_Init+0x13c>)
 8001718:	f002 f968 	bl	80039ec <HAL_ADCEx_MultiModeConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001722:	f000 fa57 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_ADC1_Init+0x140>)
 8001728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2306      	movs	r3, #6
 800172c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800172e:	2307      	movs	r3, #7
 8001730:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001732:	237f      	movs	r3, #127	; 0x7f
 8001734:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001736:	2304      	movs	r3, #4
 8001738:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	481b      	ldr	r0, [pc, #108]	; (80017b0 <MX_ADC1_Init+0x13c>)
 8001744:	f001 fad4 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800174e:	f000 fa41 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MX_ADC1_Init+0x144>)
 8001754:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001756:	230c      	movs	r3, #12
 8001758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4814      	ldr	r0, [pc, #80]	; (80017b0 <MX_ADC1_Init+0x13c>)
 8001760:	f001 fac6 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800176a:	f000 fa33 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_ADC1_Init+0x148>)
 8001770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001772:	2312      	movs	r3, #18
 8001774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_ADC1_Init+0x13c>)
 800177c:	f001 fab8 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001786:	f000 fa25 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_ADC1_Init+0x14c>)
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800178e:	2318      	movs	r3, #24
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_ADC1_Init+0x13c>)
 8001798:	f001 faaa 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80017a2:	f000 fa17 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	; 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000094 	.word	0x20000094
 80017b4:	04300002 	.word	0x04300002
 80017b8:	08600004 	.word	0x08600004
 80017bc:	19200040 	.word	0x19200040
 80017c0:	1d500080 	.word	0x1d500080

080017c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <MX_FDCAN1_Init+0x138>)
 80017ce:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d0:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017f8:	2204      	movs	r2, #4
 80017fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80017fe:	2201      	movs	r2, #1
 8001800:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001804:	220f      	movs	r2, #15
 8001806:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 800180a:	2204      	movs	r2, #4
 800180c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001810:	2202      	movs	r2, #2
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001816:	2201      	movs	r2, #1
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 800181c:	220f      	movs	r2, #15
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001822:	2204      	movs	r2, #4
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001828:	2201      	movs	r2, #1
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001838:	482f      	ldr	r0, [pc, #188]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 800183a:	f002 fd61 	bl	8004300 <HAL_FDCAN_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8001844:	f000 f9c6 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN1_TxHeader.Identifier = 0x000;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  FDCAN1_TxHeader.IdType = FDCAN_STANDARD_ID;
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  FDCAN1_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  FDCAN1_TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 800185c:	2201      	movs	r2, #1
 800185e:	60da      	str	r2, [r3, #12]
  FDCAN1_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  FDCAN1_TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001868:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800186c:	615a      	str	r2, [r3, #20]
  FDCAN1_TxHeader.FDFormat = FDCAN_FD_CAN;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001870:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001874:	619a      	str	r2, [r3, #24]
  FDCAN1_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
  FDCAN1_TxHeader.MessageMarker = 0;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_FDCAN1_Init+0x13c>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef FDCAN1_sFilterConfig;
  FDCAN1_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
  FDCAN1_sFilterConfig.FilterIndex = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  FDCAN1_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  FDCAN1_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800188e:	2301      	movs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
  FDCAN1_sFilterConfig.FilterID1 = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  FDCAN1_sFilterConfig.FilterID2 = 0x7ff;
 8001896:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800189a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN1_sFilterConfig) != HAL_OK) {
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4815      	ldr	r0, [pc, #84]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80018a2:	f002 fe87 	bl	80045b4 <HAL_FDCAN_ConfigFilter>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80018ac:	f000 f992 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) !=
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2202      	movs	r2, #2
 80018b8:	2102      	movs	r1, #2
 80018ba:	480f      	ldr	r0, [pc, #60]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80018bc:	f002 fed4 	bl	8004668 <HAL_FDCAN_ConfigGlobalFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_FDCAN1_Init+0x106>
      HAL_OK) {
      Error_Handler();
 80018c6:	f000 f985 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80018cc:	f002 fefd 	bl	80046ca <HAL_FDCAN_Start>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_FDCAN1_Init+0x116>
      Error_Handler();
 80018d6:	f000 f97d 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_FDCAN1_Init+0x134>)
 80018e0:	f003 f868 	bl	80049b4 <HAL_FDCAN_ActivateNotification>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_FDCAN1_Init+0x12a>
      Error_Handler();
 80018ea:	f000 f973 	bl	8001bd4 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000160 	.word	0x20000160
 80018fc:	40006400 	.word	0x40006400
 8001900:	20000308 	.word	0x20000308

08001904 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800190a:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <MX_FDCAN3_Init+0x12c>)
 800190e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001922:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001924:	2200      	movs	r2, #0
 8001926:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001928:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800192a:	2200      	movs	r2, #0
 800192c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001930:	2200      	movs	r2, #0
 8001932:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8001934:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001936:	2204      	movs	r2, #4
 8001938:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800193c:	2201      	movs	r2, #1
 800193e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001940:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001942:	220f      	movs	r2, #15
 8001944:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001948:	2204      	movs	r2, #4
 800194a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800194c:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800194e:	2201      	movs	r2, #1
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001954:	2201      	movs	r2, #1
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800195a:	2201      	movs	r2, #1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001960:	2201      	movs	r2, #1
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001966:	2201      	movs	r2, #1
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 800196c:	2200      	movs	r2, #0
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001972:	2200      	movs	r2, #0
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001976:	482d      	ldr	r0, [pc, #180]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001978:	f002 fcc2 	bl	8004300 <HAL_FDCAN_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8001982:	f000 f927 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  // Set TXHeader
	FDCAN3_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
	FDCAN3_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
	FDCAN3_TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001992:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 8001994:	2208      	movs	r2, #8
 8001996:	60da      	str	r2, [r3, #12]
	FDCAN3_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
	FDCAN3_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
	FDCAN3_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
	FDCAN3_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
	FDCAN3_TxHeader.MessageMarker = 0;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <MX_FDCAN3_Init+0x130>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]

	// Set FDCAN3 filter config
	FDCAN_FilterTypeDef FDCAN3_sFilterConfig;
	FDCAN3_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
	FDCAN3_sFilterConfig.FilterIndex = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
	FDCAN3_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
	FDCAN3_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80019c2:	2302      	movs	r3, #2
 80019c4:	60fb      	str	r3, [r7, #12]
	FDCAN3_sFilterConfig.FilterID1 = 0x000;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
	FDCAN3_sFilterConfig.FilterID2 = 0x7ff;
 80019ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019ce:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN3_sFilterConfig) != HAL_OK) {
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4815      	ldr	r0, [pc, #84]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 80019d6:	f002 fded 	bl	80045b4 <HAL_FDCAN_ConfigFilter>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_FDCAN3_Init+0xe0>
		Error_Handler();
 80019e0:	f000 f8f8 	bl	8001bd4 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	2202      	movs	r2, #2
 80019ec:	2102      	movs	r1, #2
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 80019f0:	f002 fe3a 	bl	8004668 <HAL_FDCAN_ConfigGlobalFilter>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_FDCAN3_Init+0xfa>
		Error_Handler();
 80019fa:	f000 f8eb 	bl	8001bd4 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001a00:	f002 fe63 	bl	80046ca <HAL_FDCAN_Start>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_FDCAN3_Init+0x10a>
		Error_Handler();
 8001a0a:	f000 f8e3 	bl	8001bd4 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2108      	movs	r1, #8
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_FDCAN3_Init+0x128>)
 8001a14:	f002 ffce 	bl	80049b4 <HAL_FDCAN_ActivateNotification>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_FDCAN3_Init+0x11e>
		Error_Handler();
 8001a1e:	f000 f8d9 	bl	8001bd4 <Error_Handler>
	}
  /* USER CODE END FDCAN3_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001c4 	.word	0x200001c4
 8001a30:	40006c00 	.word	0x40006c00
 8001a34:	20000354 	.word	0x20000354

08001a38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <MX_LPUART1_UART_Init+0x90>)
 8001a40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a7c:	f005 f866 	bl	8006b4c <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a86:	f000 f8a5 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001a8e:	f005 fe8f 	bl	80077b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a98:	f000 f89c 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001aa0:	f005 fec4 	bl	800782c <HAL_UARTEx_SetRxFifoThreshold>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001aaa:	f000 f893 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_LPUART1_UART_Init+0x8c>)
 8001ab0:	f005 fe45 	bl	800773e <HAL_UARTEx_DisableFifoMode>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001aba:	f000 f88b 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000228 	.word	0x20000228
 8001ac8:	40008000 	.word	0x40008000

08001acc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <MX_TIM6_Init+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001ae4:	2250      	movs	r2, #80	; 0x50
 8001ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001afe:	f004 fc4d 	bl	800639c <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b08:	f000 f864 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001b1a:	f004 ff3b 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 f856 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200002bc 	.word	0x200002bc
 8001b34:	40001000 	.word	0x40001000

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6493      	str	r3, [r2, #72]	; 0x48
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6493      	str	r3, [r2, #72]	; 0x48
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_DMA_Init+0x50>)
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	200b      	movs	r0, #11
 8001b74:	f002 f91d 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b78:	200b      	movs	r0, #11
 8001b7a:	f002 f934 	bl	8003de6 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_GPIO_Init+0x44>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_MspInit+0x44>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_MspInit+0x44>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x44>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x44>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0a0      	sub	sp, #128	; 0x80
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2254      	movs	r2, #84	; 0x54
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f006 f85f 	bl	8007d0c <memset>
  if(hadc->Instance==ADC1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c56:	d177      	bne.n	8001d48 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f949 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c74:	f7ff ffae 	bl	8001bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_ADC_MspInit+0x128>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4820      	ldr	r0, [pc, #128]	; (8001d54 <HAL_ADC_MspInit+0x12c>)
 8001cd4:	f003 f9c0 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f003 f9b3 	bl	8005058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_ADC_MspInit+0x134>)
 8001cf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d22:	2220      	movs	r2, #32
 8001d24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d2c:	480a      	ldr	r0, [pc, #40]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d2e:	f002 f875 	bl	8003e1c <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001d38:	f7ff ff4c 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_ADC_MspInit+0x130>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3780      	adds	r7, #128	; 0x80
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48000800 	.word	0x48000800
 8001d58:	20000100 	.word	0x20000100
 8001d5c:	40020008 	.word	0x40020008

08001d60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0a0      	sub	sp, #128	; 0x80
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	2254      	movs	r2, #84	; 0x54
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f005 ffc3 	bl	8007d0c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a55      	ldr	r2, [pc, #340]	; (8001ee0 <HAL_FDCAN_MspInit+0x180>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d14b      	bne.n	8001e28 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 f8ad 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001dac:	f7ff ff12 	bl	8001bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001db8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10b      	bne.n	8001dda <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a42      	ldr	r2, [pc, #264]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001df2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001df6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e04:	2309      	movs	r3, #9
 8001e06:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f003 f921 	bl	8005058 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2015      	movs	r0, #21
 8001e1c:	f001 ffc9 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001e20:	2015      	movs	r0, #21
 8001e22:	f001 ffe0 	bl	8003de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001e26:	e057      	b.n	8001ed8 <HAL_FDCAN_MspInit+0x178>
  else if(hfdcan->Instance==FDCAN3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <HAL_FDCAN_MspInit+0x18c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d152      	bne.n	8001ed8 <HAL_FDCAN_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f85c 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8001e4e:	f7ff fec1 	bl	8001bd4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001e5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_FDCAN_MspInit+0x184>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10b      	bne.n	8001e7c <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_FDCAN_MspInit+0x188>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001e94:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001e98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f003 f8d0 	bl	8005058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2058      	movs	r0, #88	; 0x58
 8001ebe:	f001 ff78 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001ec2:	2058      	movs	r0, #88	; 0x58
 8001ec4:	f001 ff8f 	bl	8003de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2059      	movs	r0, #89	; 0x59
 8001ece:	f001 ff70 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8001ed2:	2059      	movs	r0, #89	; 0x59
 8001ed4:	f001 ff87 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 8001ed8:	bf00      	nop
 8001eda:	3780      	adds	r7, #128	; 0x80
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40006400 	.word	0x40006400
 8001ee4:	200003b8 	.word	0x200003b8
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40006c00 	.word	0x40006c00

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b09e      	sub	sp, #120	; 0x78
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2254      	movs	r2, #84	; 0x54
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f005 fefb 	bl	8007d0c <memset>
  if(huart->Instance==LPUART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_UART_MspInit+0xa8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d136      	bne.n	8001f8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f20:	2320      	movs	r3, #32
 8001f22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ffe7 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f38:	f7ff fe4c 	bl	8001bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0xac>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f003 f865 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3778      	adds	r7, #120	; 0x78
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40008000 	.word	0x40008000
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_TIM_Base_MspInit+0x44>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d113      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_TIM_Base_MspInit+0x48>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_TIM_Base_MspInit+0x48>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_TIM_Base_MspInit+0x48>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2036      	movs	r0, #54	; 0x36
 8001fd0:	f001 feef 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fd4:	2036      	movs	r0, #54	; 0x36
 8001fd6:	f001 ff06 	bl	8003de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40001000 	.word	0x40001000
 8001fe8:	40021000 	.word	0x40021000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler+0x4>

0800200a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002038:	f000 f94a 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA1_Channel1_IRQHandler+0x10>)
 8002046:	f002 f80c 	bl	8004062 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000100 	.word	0x20000100

08002054 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <FDCAN1_IT0_IRQHandler+0x10>)
 800205a:	f002 fd91 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000160 	.word	0x20000160

08002068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM6_DAC_IRQHandler+0x10>)
 800206e:	f004 fa65 	bl	800653c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002bc 	.word	0x200002bc

0800207c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <FDCAN3_IT0_IRQHandler+0x10>)
 8002082:	f002 fd7d 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200001c4 	.word	0x200001c4

08002090 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <FDCAN3_IT1_IRQHandler+0x10>)
 8002096:	f002 fd73 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200001c4 	.word	0x200001c4

080020a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e00a      	b.n	80020cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b6:	f3af 8000 	nop.w
 80020ba:	4601      	mov	r1, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbf0      	blt.n	80020b6 <_read+0x12>
  }

  return len;
 80020d4:	687b      	ldr	r3, [r7, #4]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_close>:
  }
  return len;
}

int _close(int file)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002106:	605a      	str	r2, [r3, #4]
  return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_isatty>:

int _isatty(int file)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <_sbrk+0x5c>)
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <_sbrk+0x60>)
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <_sbrk+0x64>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <_sbrk+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d207      	bcs.n	8002188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002178:	f005 fde0 	bl	8007d3c <__errno>
 800217c:	4603      	mov	r3, r0
 800217e:	220c      	movs	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002186:	e009      	b.n	800219c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <_sbrk+0x64>)
 8002198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20020000 	.word	0x20020000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	200003bc 	.word	0x200003bc
 80021b0:	20000510 	.word	0x20000510

080021b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SystemInit+0x20>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <SystemInit+0x20>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021dc:	f7ff ffea 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <LoopForever+0xe>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <LoopForever+0x16>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f005 fd9f 	bl	8007d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220a:	f7ff f9b9 	bl	8001580 <main>

0800220e <LoopForever>:

LoopForever:
    b LoopForever
 800220e:	e7fe      	b.n	800220e <LoopForever>
  ldr   r0, =_estack
 8002210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800221c:	08008988 	.word	0x08008988
  ldr r2, =_sbss
 8002220:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002224:	20000510 	.word	0x20000510

08002228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC1_2_IRQHandler>

0800222a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f001 fdb1 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f80e 	bl	800225c <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	71fb      	strb	r3, [r7, #7]
 800224a:	e001      	b.n	8002250 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800224c:	f7ff fcc8 	bl	8001be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002250:	79fb      	ldrb	r3, [r7, #7]

}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_InitTick+0x68>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_InitTick+0x6c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_InitTick+0x68>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800227c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	4618      	mov	r0, r3
 8002286:	f001 fdbc 	bl	8003e02 <HAL_SYSTICK_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d809      	bhi.n	80022aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002296:	2200      	movs	r2, #0
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800229e:	f001 fd88 	bl	8003db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_InitTick+0x70>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e007      	b.n	80022ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e004      	b.n	80022ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e001      	b.n	80022ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000018 	.word	0x20000018
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000014 	.word	0x20000014

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x1c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_IncTick+0x20>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_IncTick+0x1c>)
 80022e0:	6013      	str	r3, [r2, #0]
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	200003c0 	.word	0x200003c0
 80022f0:	20000018 	.word	0x20000018

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200003c0 	.word	0x200003c0

0800230c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3360      	adds	r3, #96	; 0x60
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LL_ADC_SetOffset+0x44>)
 8002396:	4013      	ands	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	03fff000 	.word	0x03fff000

080023bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3360      	adds	r3, #96	; 0x60
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	431a      	orrs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800241e:	b480      	push	{r7}
 8002420:	b087      	sub	sp, #28
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3360      	adds	r3, #96	; 0x60
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	615a      	str	r2, [r3, #20]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3330      	adds	r3, #48	; 0x30
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	4413      	add	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	211f      	movs	r1, #31
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	f003 011f 	and.w	r1, r3, #31
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	431a      	orrs	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800252e:	b480      	push	{r7}
 8002530:	b087      	sub	sp, #28
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3314      	adds	r3, #20
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	0e5b      	lsrs	r3, r3, #25
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	0d1b      	lsrs	r3, r3, #20
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2107      	movs	r1, #7
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0d1b      	lsrs	r3, r3, #20
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	431a      	orrs	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	43db      	mvns	r3, r3
 800259e:	401a      	ands	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0318 	and.w	r3, r3, #24
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025a8:	40d9      	lsrs	r1, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	400b      	ands	r3, r1
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	0007ffff 	.word	0x0007ffff

080025cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6093      	str	r3, [r2, #8]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800261c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002620:	d101      	bne.n	8002626 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002670:	d101      	bne.n	8002676 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c0:	f043 0202 	orr.w	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <LL_ADC_IsEnabled+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_IsEnabled+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d101      	bne.n	8002712 <LL_ADC_IsDisableOngoing+0x18>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_ADC_IsDisableOngoing+0x1a>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002730:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d101      	bne.n	8002760 <LL_ADC_REG_IsConversionOngoing+0x18>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d101      	bne.n	8002786 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1a9      	b.n	8002b02 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fa33 	bl	8001c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff19 	bl	800260c <LL_ADC_IsDeepPowerDownEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff feff 	bl	80025e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff34 	bl	800265c <LL_ADC_IsInternalRegulatorEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff18 	bl	8002634 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002804:	4b9c      	ldr	r3, [pc, #624]	; (8002a78 <HAL_ADC_Init+0x2e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	4a9c      	ldr	r2, [pc, #624]	; (8002a7c <HAL_ADC_Init+0x2e8>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff16 	bl	800265c <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff76 	bl	8002748 <LL_ADC_REG_IsConversionOngoing>
 800285c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8142 	bne.w	8002af0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 813e 	bne.w	8002af0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800287c:	f043 0202 	orr.w	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff23 	bl	80026d4 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d141      	bne.n	8002918 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADC_Init+0x114>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a77      	ldr	r2, [pc, #476]	; (8002a80 <HAL_ADC_Init+0x2ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADC_Init+0x134>
 80028a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028ac:	f7ff ff12 	bl	80026d4 <LL_ADC_IsEnabled>
 80028b0:	4604      	mov	r4, r0
 80028b2:	4873      	ldr	r0, [pc, #460]	; (8002a80 <HAL_ADC_Init+0x2ec>)
 80028b4:	f7ff ff0e 	bl	80026d4 <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4323      	orrs	r3, r4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e012      	b.n	80028ee <HAL_ADC_Init+0x15a>
 80028c8:	486e      	ldr	r0, [pc, #440]	; (8002a84 <HAL_ADC_Init+0x2f0>)
 80028ca:	f7ff ff03 	bl	80026d4 <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	486d      	ldr	r0, [pc, #436]	; (8002a88 <HAL_ADC_Init+0x2f4>)
 80028d2:	f7ff feff 	bl	80026d4 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	486c      	ldr	r0, [pc, #432]	; (8002a8c <HAL_ADC_Init+0x2f8>)
 80028dc:	f7ff fefa 	bl	80026d4 <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_Init+0x172>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_ADC_Init+0x2ec>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_ADC_Init+0x176>
 8002906:	4a62      	ldr	r2, [pc, #392]	; (8002a90 <HAL_ADC_Init+0x2fc>)
 8002908:	e000      	b.n	800290c <HAL_ADC_Init+0x178>
 800290a:	4a62      	ldr	r2, [pc, #392]	; (8002a94 <HAL_ADC_Init+0x300>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7ff fcfa 	bl	800230c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800292e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	045b      	lsls	r3, r3, #17
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_ADC_Init+0x304>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	430b      	orrs	r3, r1
 8002982:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fee5 	bl	800276e <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d17f      	bne.n	8002aac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d17c      	bne.n	8002aac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ce:	f023 0302 	bic.w	r3, r3, #2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6911      	ldr	r1, [r2, #16]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a12:	e013      	b.n	8002a3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a38:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12a      	bne.n	8002a9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e019      	b.n	8002aac <HAL_ADC_Init+0x318>
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000400 	.word	0x50000400
 8002a88:	50000500 	.word	0x50000500
 8002a8c:	50000600 	.word	0x50000600
 8002a90:	50000300 	.word	0x50000300
 8002a94:	50000700 	.word	0x50000700
 8002a98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10c      	bne.n	8002ace <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f023 010f 	bic.w	r1, r3, #15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020f 	bic.w	r2, r2, #15
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aee:	e007      	b.n	8002b00 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	f043 0210 	orr.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop

08002b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_Start_DMA+0x20>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5a      	ldr	r2, [pc, #360]	; (8002c90 <HAL_ADC_Start_DMA+0x184>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_Start_DMA+0x24>
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_ADC_Start_DMA+0x188>)
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_Start_DMA+0x26>
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_ADC_Start_DMA+0x18c>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd4a 	bl	80025cc <LL_ADC_GetMultimode>
 8002b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe02 	bl	8002748 <LL_ADC_REG_IsConversionOngoing>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 809b 	bne.w	8002c82 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Start_DMA+0x4e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e096      	b.n	8002c88 <HAL_ADC_Start_DMA+0x17c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_ADC_Start_DMA+0x190>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d008      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d002      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d17a      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fcf6 	bl	8003570 <ADC_Enable>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d16d      	bne.n	8002c6a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <HAL_ADC_Start_DMA+0x184>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0xb4>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_ADC_Start_DMA+0x194>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_Start_DMA+0xb0>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xb8>
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_ADC_Start_DMA+0x198>)
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xb8>
 8002bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	f023 0206 	bic.w	r2, r3, #6
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	661a      	str	r2, [r3, #96]	; 0x60
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_ADC_Start_DMA+0x19c>)
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	4a28      	ldr	r2, [pc, #160]	; (8002cac <HAL_ADC_Start_DMA+0x1a0>)
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <HAL_ADC_Start_DMA+0x1a4>)
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	221c      	movs	r2, #28
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3340      	adds	r3, #64	; 0x40
 8002c50:	4619      	mov	r1, r3
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f001 f989 	bl	8003f6c <HAL_DMA_Start_IT>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd5c 	bl	8002720 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c68:	e00d      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c72:	e008      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c80:	e001      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
 8002c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	50000100 	.word	0x50000100
 8002c94:	50000300 	.word	0x50000300
 8002c98:	50000700 	.word	0x50000700
 8002c9c:	50000600 	.word	0x50000600
 8002ca0:	50000500 	.word	0x50000500
 8002ca4:	50000400 	.word	0x50000400
 8002ca8:	0800375b 	.word	0x0800375b
 8002cac:	08003833 	.word	0x08003833
 8002cb0:	0800384f 	.word	0x0800384f

08002cb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0b6      	sub	sp, #216	; 0xd8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x24>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f000 bc13 	b.w	800353a <HAL_ADC_ConfigChannel+0x84a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fd11 	bl	8002748 <LL_ADC_REG_IsConversionOngoing>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 83f3 	bne.w	8003514 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff fbcb 	bl	80024d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fcff 	bl	8002748 <LL_ADC_REG_IsConversionOngoing>
 8002d4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd0b 	bl	800276e <LL_ADC_INJ_IsConversionOngoing>
 8002d58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 81d9 	bne.w	8003118 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 81d4 	bne.w	8003118 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d78:	d10f      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7ff fbd2 	bl	800252e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fb79 	bl	800248a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d98:	e00e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff fbc1 	bl	800252e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fb69 	bl	800248a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d022      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dea:	f7ff fac3 	bl	8002374 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6919      	ldr	r1, [r3, #16]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f7ff fb0f 	bl	800241e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d102      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x126>
 8002e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e14:	e000      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x128>
 8002e16:	2300      	movs	r3, #0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f7ff fb1b 	bl	8002454 <LL_ADC_SetOffsetSaturation>
 8002e1e:	e17b      	b.n	8003118 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fac8 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x15c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fabd 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x19a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fab2 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e018      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x1e4>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d106      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fa81 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fa65 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x222>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fa5a 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	e01e      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x260>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fa4f 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x278>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	e018      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x2aa>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e004      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d106      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fa1e 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fa02 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x2e8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f9f7 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	f003 021f 	and.w	r2, r3, #31
 8002fd6:	e01e      	b.n	8003016 <HAL_ADC_ConfigChannel+0x326>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2102      	movs	r1, #2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f9ec 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e004      	b.n	8003014 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800300a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_ADC_ConfigChannel+0x33e>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	e016      	b.n	800305c <HAL_ADC_ConfigChannel+0x36c>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f9bd 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2103      	movs	r1, #3
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f9a1 	bl	80023bc <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x3aa>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2103      	movs	r1, #3
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f996 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	e017      	b.n	80030ca <HAL_ADC_ConfigChannel+0x3da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2103      	movs	r1, #3
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f98b 	bl	80023bc <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80030bc:	2320      	movs	r3, #32
 80030be:	e003      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80030c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x3f2>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	e011      	b.n	8003106 <HAL_ADC_ConfigChannel+0x416>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003106:	429a      	cmp	r2, r3
 8003108:	d106      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2103      	movs	r1, #3
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f968 	bl	80023e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fad9 	bl	80026d4 <LL_ADC_IsEnabled>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 813d 	bne.w	80033a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f7ff fa24 	bl	8002584 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4aa2      	ldr	r2, [pc, #648]	; (80033cc <HAL_ADC_ConfigChannel+0x6dc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f040 812e 	bne.w	80033a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x480>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	3301      	adds	r3, #1
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b09      	cmp	r3, #9
 8003166:	bf94      	ite	ls
 8003168:	2301      	movls	r3, #1
 800316a:	2300      	movhi	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e019      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x4b4>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800317e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e003      	b.n	8003194 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800318c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2b09      	cmp	r3, #9
 800319c:	bf94      	ite	ls
 800319e:	2301      	movls	r3, #1
 80031a0:	2300      	movhi	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d079      	beq.n	800329c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x4d4>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0e9b      	lsrs	r3, r3, #26
 80031ba:	3301      	adds	r3, #1
 80031bc:	069b      	lsls	r3, r3, #26
 80031be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031c2:	e015      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x500>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031dc:	2320      	movs	r3, #32
 80031de:	e003      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x520>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	3301      	adds	r3, #1
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	e017      	b.n	8003240 <HAL_ADC_ConfigChannel+0x550>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800321e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003220:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	ea42 0103 	orr.w	r1, r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x576>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	3301      	adds	r3, #1
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	051b      	lsls	r3, r3, #20
 8003264:	e018      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5a8>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003298:	430b      	orrs	r3, r1
 800329a:	e07e      	b.n	800339a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x5c8>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0e9b      	lsrs	r3, r3, #26
 80032ae:	3301      	adds	r3, #1
 80032b0:	069b      	lsls	r3, r3, #26
 80032b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b6:	e015      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5f4>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e003      	b.n	80032dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x614>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	3301      	adds	r3, #1
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	e017      	b.n	8003334 <HAL_ADC_ConfigChannel+0x644>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	61fb      	str	r3, [r7, #28]
  return result;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x670>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	3301      	adds	r3, #1
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	3b1e      	subs	r3, #30
 8003358:	051b      	lsls	r3, r3, #20
 800335a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800335e:	e01b      	b.n	8003398 <HAL_ADC_ConfigChannel+0x6a8>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	613b      	str	r3, [r7, #16]
  return result;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f003 021f 	and.w	r2, r3, #31
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b1e      	subs	r3, #30
 8003392:	051b      	lsls	r3, r3, #20
 8003394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003398:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339e:	4619      	mov	r1, r3
 80033a0:	f7ff f8c5 	bl	800252e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80be 	beq.w	800352e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ba:	d004      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x6d6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x6ec>
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80033c8:	e009      	b.n	80033de <HAL_ADC_ConfigChannel+0x6ee>
 80033ca:	bf00      	nop
 80033cc:	407f0000 	.word	0x407f0000
 80033d0:	80080000 	.word	0x80080000
 80033d4:	50000100 	.word	0x50000100
 80033d8:	50000300 	.word	0x50000300
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_ADC_ConfigChannel+0x854>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe ffba 	bl	8002358 <LL_ADC_GetCommonPathInternalCh>
 80033e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a56      	ldr	r2, [pc, #344]	; (8003548 <HAL_ADC_ConfigChannel+0x858>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x70c>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a55      	ldr	r2, [pc, #340]	; (800354c <HAL_ADC_ConfigChannel+0x85c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d13a      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d134      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003410:	d005      	beq.n	800341e <HAL_ADC_ConfigChannel+0x72e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a4e      	ldr	r2, [pc, #312]	; (8003550 <HAL_ADC_ConfigChannel+0x860>)
 8003418:	4293      	cmp	r3, r2
 800341a:	f040 8085 	bne.w	8003528 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003426:	d004      	beq.n	8003432 <HAL_ADC_ConfigChannel+0x742>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_ADC_ConfigChannel+0x864>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x746>
 8003432:	4a49      	ldr	r2, [pc, #292]	; (8003558 <HAL_ADC_ConfigChannel+0x868>)
 8003434:	e000      	b.n	8003438 <HAL_ADC_ConfigChannel+0x748>
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <HAL_ADC_ConfigChannel+0x854>)
 8003438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800343c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7fe ff75 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003448:	4b44      	ldr	r3, [pc, #272]	; (800355c <HAL_ADC_ConfigChannel+0x86c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	4a44      	ldr	r2, [pc, #272]	; (8003560 <HAL_ADC_ConfigChannel+0x870>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003462:	e002      	b.n	800346a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003470:	e05a      	b.n	8003528 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <HAL_ADC_ConfigChannel+0x874>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11f      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a31      	ldr	r2, [pc, #196]	; (8003554 <HAL_ADC_ConfigChannel+0x864>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d104      	bne.n	800349c <HAL_ADC_ConfigChannel+0x7ac>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a34      	ldr	r2, [pc, #208]	; (8003568 <HAL_ADC_ConfigChannel+0x878>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d047      	beq.n	800352c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a4:	d004      	beq.n	80034b0 <HAL_ADC_ConfigChannel+0x7c0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2a      	ldr	r2, [pc, #168]	; (8003554 <HAL_ADC_ConfigChannel+0x864>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x7c4>
 80034b0:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_ADC_ConfigChannel+0x868>)
 80034b2:	e000      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x7c6>
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_ADC_ConfigChannel+0x854>)
 80034b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe ff36 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c6:	e031      	b.n	800352c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_ADC_ConfigChannel+0x87c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12d      	bne.n	800352e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d127      	bne.n	800352e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_ADC_ConfigChannel+0x864>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d022      	beq.n	800352e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_ConfigChannel+0x80c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_ADC_ConfigChannel+0x864>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x810>
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <HAL_ADC_ConfigChannel+0x868>)
 80034fe:	e000      	b.n	8003502 <HAL_ADC_ConfigChannel+0x812>
 8003500:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_ADC_ConfigChannel+0x854>)
 8003502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fe ff10 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
 8003512:	e00c      	b.n	800352e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003526:	e002      	b.n	800352e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800352c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003536:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800353a:	4618      	mov	r0, r3
 800353c:	37d8      	adds	r7, #216	; 0xd8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	50000700 	.word	0x50000700
 8003548:	c3210000 	.word	0xc3210000
 800354c:	90c00010 	.word	0x90c00010
 8003550:	50000600 	.word	0x50000600
 8003554:	50000100 	.word	0x50000100
 8003558:	50000300 	.word	0x50000300
 800355c:	20000010 	.word	0x20000010
 8003560:	053e2d63 	.word	0x053e2d63
 8003564:	c7520000 	.word	0xc7520000
 8003568:	50000500 	.word	0x50000500
 800356c:	cb840000 	.word	0xcb840000

08003570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff f8a7 	bl	80026d4 <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d176      	bne.n	800367a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <ADC_Enable+0x114>)
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f043 0210 	orr.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e062      	b.n	800367c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f862 	bl	8002684 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c8:	d004      	beq.n	80035d4 <ADC_Enable+0x64>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <ADC_Enable+0x118>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <ADC_Enable+0x68>
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <ADC_Enable+0x11c>)
 80035d6:	e000      	b.n	80035da <ADC_Enable+0x6a>
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <ADC_Enable+0x120>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe febc 	bl	8002358 <LL_ADC_GetCommonPathInternalCh>
 80035e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <ADC_Enable+0x124>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <ADC_Enable+0x128>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003604:	e002      	b.n	800360c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003612:	f7fe fe6f 	bl	80022f4 <HAL_GetTick>
 8003616:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003618:	e028      	b.n	800366c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f858 	bl	80026d4 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f828 	bl	8002684 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003634:	f7fe fe5e 	bl	80022f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d914      	bls.n	800366c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d00d      	beq.n	800366c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f043 0210 	orr.w	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d1cf      	bne.n	800361a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	8000003f 	.word	0x8000003f
 8003688:	50000100 	.word	0x50000100
 800368c:	50000300 	.word	0x50000300
 8003690:	50000700 	.word	0x50000700
 8003694:	20000010 	.word	0x20000010
 8003698:	053e2d63 	.word	0x053e2d63

0800369c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f826 	bl	80026fa <LL_ADC_IsDisableOngoing>
 80036ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f80d 	bl	80026d4 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d047      	beq.n	8003750 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d144      	bne.n	8003750 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030d 	and.w	r3, r3, #13
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d10c      	bne.n	80036ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ffe7 	bl	80026ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2203      	movs	r2, #3
 80036e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036e6:	f7fe fe05 	bl	80022f4 <HAL_GetTick>
 80036ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036ec:	e029      	b.n	8003742 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e023      	b.n	8003752 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800370a:	f7fe fdf3 	bl	80022f4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d914      	bls.n	8003742 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e007      	b.n	8003752 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1dc      	bne.n	800370a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14b      	bne.n	800380c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d021      	beq.n	80037d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fe8c 	bl	80024b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d032      	beq.n	8003804 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d12b      	bne.n	8003804 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11f      	bne.n	8003804 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80037d0:	e018      	b.n	8003804 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d111      	bne.n	8003804 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fa55 	bl	8002cb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800380a:	e00e      	b.n	800382a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fa5f 	bl	8002cdc <HAL_ADC_ErrorCallback>
}
 800381e:	e004      	b.n	800382a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fa41 	bl	8002cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386c:	f043 0204 	orr.w	r2, r3, #4
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff fa31 	bl	8002cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <LL_ADC_IsEnabled>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <LL_ADC_IsEnabled+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_ADC_IsEnabled+0x1a>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_StartCalibration>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80038ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_ADC_IsCalibrationOnGoing>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ee:	d101      	bne.n	80038f4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_ADC_REG_IsConversionOngoing>:
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d101      	bne.n	800391a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_ADCEx_Calibration_Start+0x1c>
 8003940:	2302      	movs	r3, #2
 8003942:	e04d      	b.n	80039e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fea5 	bl	800369c <ADC_Disable>
 8003952:	4603      	mov	r3, r0
 8003954:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d136      	bne.n	80039ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003964:	f023 0302 	bic.w	r3, r3, #2
 8003968:	f043 0202 	orr.w	r2, r3, #2
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff96 	bl	80038a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800397c:	e014      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d90d      	bls.n	80039a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	f023 0312 	bic.w	r3, r3, #18
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01b      	b.n	80039e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff94 	bl	80038da <LL_ADC_IsCalibrationOnGoing>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e2      	bne.n	800397e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f023 0303 	bic.w	r3, r3, #3
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80039c8:	e005      	b.n	80039d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0004de01 	.word	0x0004de01

080039ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b0a1      	sub	sp, #132	; 0x84
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0e7      	b.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a12:	2300      	movs	r3, #0
 8003a14:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a16:	2300      	movs	r3, #0
 8003a18:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a22:	d102      	bne.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a24:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e009      	b.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d102      	bne.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a34:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	e001      	b.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0be      	b.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff4f 	bl	8003902 <LL_ADC_REG_IsConversionOngoing>
 8003a64:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff49 	bl	8003902 <LL_ADC_REG_IsConversionOngoing>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 80a0 	bne.w	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 809c 	bne.w	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a88:	d004      	beq.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a94:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a96:	e000      	b.n	8003a9a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d04b      	beq.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ab6:	035b      	lsls	r3, r3, #13
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac8:	d004      	beq.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a45      	ldr	r2, [pc, #276]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d10f      	bne.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ad4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ad8:	f7ff fed3 	bl	8003882 <LL_ADC_IsEnabled>
 8003adc:	4604      	mov	r4, r0
 8003ade:	4841      	ldr	r0, [pc, #260]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ae0:	f7ff fecf 	bl	8003882 <LL_ADC_IsEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4323      	orrs	r3, r4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003af4:	483c      	ldr	r0, [pc, #240]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003af6:	f7ff fec4 	bl	8003882 <LL_ADC_IsEnabled>
 8003afa:	4604      	mov	r4, r0
 8003afc:	483b      	ldr	r0, [pc, #236]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003afe:	f7ff fec0 	bl	8003882 <LL_ADC_IsEnabled>
 8003b02:	4603      	mov	r3, r0
 8003b04:	431c      	orrs	r4, r3
 8003b06:	483c      	ldr	r0, [pc, #240]	; (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b08:	f7ff febb 	bl	8003882 <LL_ADC_IsEnabled>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4323      	orrs	r3, r4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d056      	beq.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b26:	f023 030f 	bic.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6811      	ldr	r1, [r2, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	6892      	ldr	r2, [r2, #8]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3a:	e047      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b50:	d004      	beq.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10f      	bne.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b60:	f7ff fe8f 	bl	8003882 <LL_ADC_IsEnabled>
 8003b64:	4604      	mov	r4, r0
 8003b66:	481f      	ldr	r0, [pc, #124]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b68:	f7ff fe8b 	bl	8003882 <LL_ADC_IsEnabled>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4323      	orrs	r3, r4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e012      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b7c:	481a      	ldr	r0, [pc, #104]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b7e:	f7ff fe80 	bl	8003882 <LL_ADC_IsEnabled>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4819      	ldr	r0, [pc, #100]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b86:	f7ff fe7c 	bl	8003882 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	431c      	orrs	r4, r3
 8003b8e:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b90:	f7ff fe77 	bl	8003882 <LL_ADC_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4323      	orrs	r3, r4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb6:	e009      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bca:	e000      	b.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3784      	adds	r7, #132	; 0x84
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	bf00      	nop
 8003be4:	50000100 	.word	0x50000100
 8003be8:	50000400 	.word	0x50000400
 8003bec:	50000500 	.word	0x50000500
 8003bf0:	50000300 	.word	0x50000300
 8003bf4:	50000700 	.word	0x50000700
 8003bf8:	50000600 	.word	0x50000600

08003bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <__NVIC_GetPriorityGrouping+0x18>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 0307 	and.w	r3, r3, #7
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0b      	blt.n	8003c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4907      	ldr	r1, [pc, #28]	; (8003c98 <__NVIC_EnableIRQ+0x38>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db0a      	blt.n	8003cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	490c      	ldr	r1, [pc, #48]	; (8003ce8 <__NVIC_SetPriority+0x4c>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc4:	e00a      	b.n	8003cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4908      	ldr	r1, [pc, #32]	; (8003cec <__NVIC_SetPriority+0x50>)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	0112      	lsls	r2, r2, #4
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	440b      	add	r3, r1
 8003cda:	761a      	strb	r2, [r3, #24]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000e100 	.word	0xe000e100
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f1c3 0307 	rsb	r3, r3, #7
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	bf28      	it	cs
 8003d0e:	2304      	movcs	r3, #4
 8003d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d902      	bls.n	8003d20 <NVIC_EncodePriority+0x30>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3b03      	subs	r3, #3
 8003d1e:	e000      	b.n	8003d22 <NVIC_EncodePriority+0x32>
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	43d9      	mvns	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	4313      	orrs	r3, r2
         );
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	; 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d68:	d301      	bcc.n	8003d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00f      	b.n	8003d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <SysTick_Config+0x40>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d76:	210f      	movs	r1, #15
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d7c:	f7ff ff8e 	bl	8003c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <SysTick_Config+0x40>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <SysTick_Config+0x40>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff29 	bl	8003bfc <__NVIC_SetPriorityGrouping>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc0:	f7ff ff40 	bl	8003c44 <__NVIC_GetPriorityGrouping>
 8003dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	6978      	ldr	r0, [r7, #20]
 8003dcc:	f7ff ff90 	bl	8003cf0 <NVIC_EncodePriority>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff5f 	bl	8003c9c <__NVIC_SetPriority>
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff33 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ffa4 	bl	8003d58 <SysTick_Config>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e08d      	b.n	8003f4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_DMA_Init+0x138>)
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d80f      	bhi.n	8003e5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b45      	ldr	r3, [pc, #276]	; (8003f58 <HAL_DMA_Init+0x13c>)
 8003e42:	4413      	add	r3, r2
 8003e44:	4a45      	ldr	r2, [pc, #276]	; (8003f5c <HAL_DMA_Init+0x140>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a42      	ldr	r2, [pc, #264]	; (8003f60 <HAL_DMA_Init+0x144>)
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
 8003e58:	e00e      	b.n	8003e78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <HAL_DMA_Init+0x148>)
 8003e62:	4413      	add	r3, r2
 8003e64:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <HAL_DMA_Init+0x140>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_DMA_Init+0x14c>)
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9b6 	bl	800423c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed8:	d102      	bne.n	8003ee0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ef4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <HAL_DMA_Init+0x104>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d80c      	bhi.n	8003f20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9d6 	bl	80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	e008      	b.n	8003f32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40020407 	.word	0x40020407
 8003f58:	bffdfff8 	.word	0xbffdfff8
 8003f5c:	cccccccd 	.word	0xcccccccd
 8003f60:	40020000 	.word	0x40020000
 8003f64:	bffdfbf8 	.word	0xbffdfbf8
 8003f68:	40020400 	.word	0x40020400

08003f6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_DMA_Start_IT+0x20>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e066      	b.n	800405a <HAL_DMA_Start_IT+0xee>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d155      	bne.n	800404c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f8fb 	bl	80041c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 020e 	orr.w	r2, r2, #14
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e00f      	b.n	8004004 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 020a 	orr.w	r2, r2, #10
 8004002:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004038:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e005      	b.n	8004058 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004054:	2302      	movs	r3, #2
 8004056:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2204      	movs	r2, #4
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d026      	beq.n	80040dc <HAL_DMA_IRQHandler+0x7a>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d021      	beq.n	80040dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0204 	bic.w	r2, r2, #4
 80040b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f003 021f 	and.w	r2, r3, #31
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2104      	movs	r1, #4
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d071      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040da:	e06c      	b.n	80041b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2202      	movs	r2, #2
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02e      	beq.n	800414e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d029      	beq.n	800414e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 020a 	bic.w	r2, r2, #10
 8004116:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2102      	movs	r1, #2
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d038      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800414c:	e033      	b.n	80041b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2208      	movs	r2, #8
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d02a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d025      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 020e 	bic.w	r2, r2, #14
 800417a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f202 	lsl.w	r2, r1, r2
 800418e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
}
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b10      	cmp	r3, #16
 800420c:	d108      	bne.n	8004220 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800421e:	e007      	b.n	8004230 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d802      	bhi.n	8004256 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e001      	b.n	800425a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004258:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b08      	subs	r3, #8
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004286:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	409a      	lsls	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40020407 	.word	0x40020407
 80042a8:	40020800 	.word	0x40020800
 80042ac:	40020820 	.word	0x40020820
 80042b0:	cccccccd 	.word	0xcccccccd
 80042b4:	40020880 	.word	0x40020880

080042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042da:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	1000823f 	.word	0x1000823f
 80042fc:	40020940 	.word	0x40020940

08004300 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e147      	b.n	80045a2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fd1a 	bl	8001d60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0210 	bic.w	r2, r2, #16
 800433a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800433c:	f7fd ffda 	bl	80022f4 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004342:	e012      	b.n	800436a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004344:	f7fd ffd6 	bl	80022f4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b0a      	cmp	r3, #10
 8004350:	d90b      	bls.n	800436a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2203      	movs	r2, #3
 8004362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e11b      	b.n	80045a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d0e5      	beq.n	8004344 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004388:	f7fd ffb4 	bl	80022f4 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800438e:	e012      	b.n	80043b6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004390:	f7fd ffb0 	bl	80022f4 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b0a      	cmp	r3, #10
 800439c:	d90b      	bls.n	80043b6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	f043 0201 	orr.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2203      	movs	r2, #3
 80043ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0f5      	b.n	80045a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0e5      	beq.n	8004390 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0202 	orr.w	r2, r2, #2
 80043d2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a74      	ldr	r2, [pc, #464]	; (80045ac <HAL_FDCAN_Init+0x2ac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d103      	bne.n	80043e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80043de:	4a74      	ldr	r2, [pc, #464]	; (80045b0 <HAL_FDCAN_Init+0x2b0>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7c1b      	ldrb	r3, [r3, #16]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d108      	bne.n	8004400 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fc:	619a      	str	r2, [r3, #24]
 80043fe:	e007      	b.n	8004410 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7c5b      	ldrb	r3, [r3, #17]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004426:	619a      	str	r2, [r3, #24]
 8004428:	e007      	b.n	800443a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004438:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7c9b      	ldrb	r3, [r3, #18]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004450:	619a      	str	r2, [r3, #24]
 8004452:	e007      	b.n	8004464 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004462:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004488:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0210 	bic.w	r2, r2, #16
 8004498:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d108      	bne.n	80044b4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0204 	orr.w	r2, r2, #4
 80044b0:	619a      	str	r2, [r3, #24]
 80044b2:	e02c      	b.n	800450e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d028      	beq.n	800450e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d01c      	beq.n	80044fe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0210 	orr.w	r2, r2, #16
 80044e2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d110      	bne.n	800450e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	619a      	str	r2, [r3, #24]
 80044fc:	e007      	b.n	800450e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0220 	orr.w	r2, r2, #32
 800450c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	3b01      	subs	r3, #1
 8004514:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	3b01      	subs	r3, #1
 800451c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800451e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004526:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	3b01      	subs	r3, #1
 8004530:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004536:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004538:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004542:	d115      	bne.n	8004570 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	3b01      	subs	r3, #1
 8004550:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004552:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	3b01      	subs	r3, #1
 800455a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800455c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	3b01      	subs	r3, #1
 8004566:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800456c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800456e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fc7e 	bl	8004e88 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40006400 	.word	0x40006400
 80045b0:	40006500 	.word	0x40006500

080045b4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045c4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d002      	beq.n	80045d2 <HAL_FDCAN_ConfigFilter+0x1e>
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d13d      	bne.n	800464e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d119      	bne.n	800460e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045e6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80045ee:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e01d      	b.n	800464a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	075a      	lsls	r2, r3, #29
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	079a      	lsls	r2, r3, #30
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3304      	adds	r3, #4
 8004642:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e006      	b.n	800465c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d116      	bne.n	80046b0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	011a      	lsls	r2, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	431a      	orrs	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	431a      	orrs	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e006      	b.n	80046be <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d110      	bne.n	8004700 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e006      	b.n	800470e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d12c      	bne.n	800478c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800473a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e023      	b.n	800479a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fbf9 	bl	8004f60 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	fa01 f202 	lsl.w	r2, r1, r2
 800477a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800477e:	2201      	movs	r2, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e006      	b.n	800479a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	f043 0208 	orr.w	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047bc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80047be:	7efb      	ldrb	r3, [r7, #27]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 80e8 	bne.w	8004996 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d137      	bne.n	800483c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0db      	b.n	80049a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	0e1b      	lsrs	r3, r3, #24
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10a      	bne.n	8004814 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004806:	0a5b      	lsrs	r3, r3, #9
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004810:	2301      	movs	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e036      	b.n	80048aa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0a3      	b.n	80049a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10a      	bne.n	8004884 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	440b      	add	r3, r1
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	0c9b      	lsrs	r3, r3, #18
 80048c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e005      	b.n	80048da <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	3304      	adds	r3, #4
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0fda      	lsrs	r2, r3, #31
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	3304      	adds	r3, #4
 8004944:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	e00a      	b.n	8004966 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	441a      	add	r2, r3
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	440b      	add	r3, r1
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	3301      	adds	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800496c:	5cd3      	ldrb	r3, [r2, r3]
 800496e:	461a      	mov	r2, r3
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	4293      	cmp	r3, r2
 8004974:	d3ec      	bcc.n	8004950 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d105      	bne.n	8004988 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004986:	e004      	b.n	8004992 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e006      	b.n	80049a4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	372c      	adds	r7, #44	; 0x2c
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	0800890c 	.word	0x0800890c

080049b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d003      	beq.n	80049d6 <HAL_FDCAN_ActivateNotification+0x22>
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	f040 80c8 	bne.w	8004b66 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d03b      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d031      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d027      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01d      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d13b      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d131      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d127      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11d      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d113      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0202 	orr.w	r2, r2, #2
 8004b14:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e006      	b.n	8004b74 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	4013      	ands	r3, r2
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004bda:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4013      	ands	r3, r2
 8004be6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004bf2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2240      	movs	r2, #64	; 0x40
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f90b 	bl	8004e48 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d014      	beq.n	8004c70 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c4e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004c68:	6939      	ldr	r1, [r7, #16]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8cd 	bl	8004e0a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8a2 	bl	8004dca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c92:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fa8e 	bl	80011b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fc fb35 	bl	800131c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f885 	bl	8004de0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d018      	beq.n	8004d12 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d013      	beq.n	8004d12 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004cf2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f871 	bl	8004df4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f875 	bl	8004e20 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f86d 	bl	8004e34 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00f      	beq.n	8004d84 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004d92:	69f9      	ldr	r1, [r7, #28]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f86b 	bl	8004e70 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f84d 	bl	8004e5c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3730      	adds	r7, #48	; 0x30
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004e90:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004e92:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d103      	bne.n	8004ea6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ea4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004eb6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	041a      	lsls	r2, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eec:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e005      	b.n	8004f3a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d3f3      	bcc.n	8004f2e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	4000a400 	.word	0x4000a400
 8004f58:	40006800 	.word	0x40006800
 8004f5c:	40006c00 	.word	0x40006c00

08004f60 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004f7e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e00a      	b.n	8004fa2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004f94:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004f9a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004fb2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004fb8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	440b      	add	r3, r1
 8004fd4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	3304      	adds	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e020      	b.n	8005036 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3303      	adds	r3, #3
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3302      	adds	r3, #2
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	440b      	add	r3, r1
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800500c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3301      	adds	r3, #1
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	440b      	add	r3, r1
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800501a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	440a      	add	r2, r1
 8005022:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005024:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3304      	adds	r3, #4
 800502e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3304      	adds	r3, #4
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a06      	ldr	r2, [pc, #24]	; (8005054 <FDCAN_CopyMessageToRAM+0xf4>)
 800503c:	5cd3      	ldrb	r3, [r2, r3]
 800503e:	461a      	mov	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4293      	cmp	r3, r2
 8005044:	d3d6      	bcc.n	8004ff4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	3724      	adds	r7, #36	; 0x24
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	0800890c 	.word	0x0800890c

08005058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005066:	e15a      	b.n	800531e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 814c 	beq.w	8005318 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d005      	beq.n	8005098 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005094:	2b02      	cmp	r3, #2
 8005096:	d130      	bne.n	80050fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ce:	2201      	movs	r2, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	f003 0201 	and.w	r2, r3, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d017      	beq.n	8005136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	2203      	movs	r2, #3
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d123      	bne.n	800518a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	08da      	lsrs	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	08da      	lsrs	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3208      	adds	r2, #8
 8005184:	6939      	ldr	r1, [r7, #16]
 8005186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0203 	and.w	r2, r3, #3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80a6 	beq.w	8005318 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051cc:	4b5b      	ldr	r3, [pc, #364]	; (800533c <HAL_GPIO_Init+0x2e4>)
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	4a5a      	ldr	r2, [pc, #360]	; (800533c <HAL_GPIO_Init+0x2e4>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6613      	str	r3, [r2, #96]	; 0x60
 80051d8:	4b58      	ldr	r3, [pc, #352]	; (800533c <HAL_GPIO_Init+0x2e4>)
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051e4:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_GPIO_Init+0x2e8>)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	220f      	movs	r2, #15
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800520e:	d01f      	beq.n	8005250 <HAL_GPIO_Init+0x1f8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a4c      	ldr	r2, [pc, #304]	; (8005344 <HAL_GPIO_Init+0x2ec>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d019      	beq.n	800524c <HAL_GPIO_Init+0x1f4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a4b      	ldr	r2, [pc, #300]	; (8005348 <HAL_GPIO_Init+0x2f0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_GPIO_Init+0x1f0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_GPIO_Init+0x2f4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00d      	beq.n	8005244 <HAL_GPIO_Init+0x1ec>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a49      	ldr	r2, [pc, #292]	; (8005350 <HAL_GPIO_Init+0x2f8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <HAL_GPIO_Init+0x1e8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a48      	ldr	r2, [pc, #288]	; (8005354 <HAL_GPIO_Init+0x2fc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_GPIO_Init+0x1e4>
 8005238:	2305      	movs	r3, #5
 800523a:	e00a      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 800523c:	2306      	movs	r3, #6
 800523e:	e008      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005240:	2304      	movs	r3, #4
 8005242:	e006      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005244:	2303      	movs	r3, #3
 8005246:	e004      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005248:	2302      	movs	r3, #2
 800524a:	e002      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005250:	2300      	movs	r3, #0
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	f002 0203 	and.w	r2, r2, #3
 8005258:	0092      	lsls	r2, r2, #2
 800525a:	4093      	lsls	r3, r2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005262:	4937      	ldr	r1, [pc, #220]	; (8005340 <HAL_GPIO_Init+0x2e8>)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	3302      	adds	r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005270:	4b39      	ldr	r3, [pc, #228]	; (8005358 <HAL_GPIO_Init+0x300>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	43db      	mvns	r3, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005294:	4a30      	ldr	r2, [pc, #192]	; (8005358 <HAL_GPIO_Init+0x300>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800529a:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <HAL_GPIO_Init+0x300>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <HAL_GPIO_Init+0x300>)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <HAL_GPIO_Init+0x300>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_GPIO_Init+0x300>)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_GPIO_Init+0x300>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005312:	4a11      	ldr	r2, [pc, #68]	; (8005358 <HAL_GPIO_Init+0x300>)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3301      	adds	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f ae9d 	bne.w	8005068 <HAL_GPIO_Init+0x10>
  }
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	40010000 	.word	0x40010000
 8005344:	48000400 	.word	0x48000400
 8005348:	48000800 	.word	0x48000800
 800534c:	48000c00 	.word	0x48000c00
 8005350:	48001000 	.word	0x48001000
 8005354:	48001400 	.word	0x48001400
 8005358:	40010400 	.word	0x40010400

0800535c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d141      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800536a:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d131      	bne.n	80053dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005378:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a46      	ldr	r2, [pc, #280]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005388:	4b43      	ldr	r3, [pc, #268]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005390:	4a41      	ldr	r2, [pc, #260]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005398:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2232      	movs	r2, #50	; 0x32
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ae:	e002      	b.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c2:	d102      	bne.n	80053ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f2      	bne.n	80053b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d158      	bne.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e057      	b.n	800548c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053dc:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e2:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053ec:	e04d      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f4:	d141      	bne.n	800547a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f6:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d131      	bne.n	8005468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540a:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005424:	4b1d      	ldr	r3, [pc, #116]	; (800549c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2232      	movs	r2, #50	; 0x32
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	0c9b      	lsrs	r3, r3, #18
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543a:	e002      	b.n	8005442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d102      	bne.n	8005456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f2      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005462:	d112      	bne.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e011      	b.n	800548c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005478:	e007      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40007000 	.word	0x40007000
 800549c:	20000010 	.word	0x20000010
 80054a0:	431bde83 	.word	0x431bde83

080054a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e2fe      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d075      	beq.n	80055ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c2:	4b97      	ldr	r3, [pc, #604]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054cc:	4b94      	ldr	r3, [pc, #592]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	d102      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d002      	beq.n	80054e8 <HAL_RCC_OscConfig+0x44>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d10b      	bne.n	8005500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	4b8d      	ldr	r3, [pc, #564]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d05b      	beq.n	80055ac <HAL_RCC_OscConfig+0x108>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d157      	bne.n	80055ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e2d9      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d106      	bne.n	8005518 <HAL_RCC_OscConfig+0x74>
 800550a:	4b85      	ldr	r3, [pc, #532]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a84      	ldr	r2, [pc, #528]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e01d      	b.n	8005554 <HAL_RCC_OscConfig+0xb0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0x98>
 8005522:	4b7f      	ldr	r3, [pc, #508]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7e      	ldr	r2, [pc, #504]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b7c      	ldr	r3, [pc, #496]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7b      	ldr	r2, [pc, #492]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0xb0>
 800553c:	4b78      	ldr	r3, [pc, #480]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a77      	ldr	r2, [pc, #476]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b75      	ldr	r3, [pc, #468]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a74      	ldr	r2, [pc, #464]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800554e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fc feca 	bl	80022f4 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005564:	f7fc fec6 	bl	80022f4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	; 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e29e      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005576:	4b6a      	ldr	r3, [pc, #424]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0xc0>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc feb6 	bl	80022f4 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558c:	f7fc feb2 	bl	80022f4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e28a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559e:	4b60      	ldr	r3, [pc, #384]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0xe8>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d075      	beq.n	80056a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ba:	4b59      	ldr	r3, [pc, #356]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c4:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d102      	bne.n	80055da <HAL_RCC_OscConfig+0x136>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_OscConfig+0x13c>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d11f      	bne.n	8005620 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e0:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_OscConfig+0x154>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e25d      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f8:	4b49      	ldr	r3, [pc, #292]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	4946      	ldr	r1, [pc, #280]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800560c:	4b45      	ldr	r3, [pc, #276]	; (8005724 <HAL_RCC_OscConfig+0x280>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fc fe23 	bl	800225c <HAL_InitTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d043      	beq.n	80056a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e249      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005628:	4b3d      	ldr	r3, [pc, #244]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a3c      	ldr	r2, [pc, #240]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fc fe5e 	bl	80022f4 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800563c:	f7fc fe5a 	bl	80022f4 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e232      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800564e:	4b34      	ldr	r3, [pc, #208]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	492d      	ldr	r1, [pc, #180]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 800566a:	4313      	orrs	r3, r2
 800566c:	604b      	str	r3, [r1, #4]
 800566e:	e01a      	b.n	80056a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc fe3a 	bl	80022f4 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005684:	f7fc fe36 	bl	80022f4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e20e      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x1e0>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d041      	beq.n	8005736 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80056bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c0:	4a17      	ldr	r2, [pc, #92]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7fc fe13 	bl	80022f4 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d2:	f7fc fe0f 	bl	80022f4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1e7      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80056e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ef      	beq.n	80056d2 <HAL_RCC_OscConfig+0x22e>
 80056f2:	e020      	b.n	8005736 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80056f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <HAL_RCC_OscConfig+0x27c>)
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc fdf6 	bl	80022f4 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800570a:	e00d      	b.n	8005728 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc fdf2 	bl	80022f4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d906      	bls.n	8005728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1ca      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005728:	4b8c      	ldr	r3, [pc, #560]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ea      	bne.n	800570c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80a6 	beq.w	8005890 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005744:	2300      	movs	r3, #0
 8005746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005748:	4b84      	ldr	r3, [pc, #528]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_OscConfig+0x2b4>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x2b6>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	4b7f      	ldr	r3, [pc, #508]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	4a7e      	ldr	r2, [pc, #504]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	6593      	str	r3, [r2, #88]	; 0x58
 800576a:	4b7c      	ldr	r3, [pc, #496]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005776:	2301      	movs	r3, #1
 8005778:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800577a:	4b79      	ldr	r3, [pc, #484]	; (8005960 <HAL_RCC_OscConfig+0x4bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d118      	bne.n	80057b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005786:	4b76      	ldr	r3, [pc, #472]	; (8005960 <HAL_RCC_OscConfig+0x4bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a75      	ldr	r2, [pc, #468]	; (8005960 <HAL_RCC_OscConfig+0x4bc>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005792:	f7fc fdaf 	bl	80022f4 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579a:	f7fc fdab 	bl	80022f4 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e183      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ac:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <HAL_RCC_OscConfig+0x4bc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d108      	bne.n	80057d2 <HAL_RCC_OscConfig+0x32e>
 80057c0:	4b66      	ldr	r3, [pc, #408]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d0:	e024      	b.n	800581c <HAL_RCC_OscConfig+0x378>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d110      	bne.n	80057fc <HAL_RCC_OscConfig+0x358>
 80057da:	4b60      	ldr	r3, [pc, #384]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	4a5e      	ldr	r2, [pc, #376]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057ea:	4b5c      	ldr	r3, [pc, #368]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	4a5a      	ldr	r2, [pc, #360]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057fa:	e00f      	b.n	800581c <HAL_RCC_OscConfig+0x378>
 80057fc:	4b57      	ldr	r3, [pc, #348]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	4a56      	ldr	r2, [pc, #344]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800580c:	4b53      	ldr	r3, [pc, #332]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	4a52      	ldr	r2, [pc, #328]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fc fd66 	bl	80022f4 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	e00a      	b.n	8005842 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fc fd62 	bl	80022f4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e138      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005842:	4b46      	ldr	r3, [pc, #280]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ed      	beq.n	800582c <HAL_RCC_OscConfig+0x388>
 8005850:	e015      	b.n	800587e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fc fd4f 	bl	80022f4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc fd4b 	bl	80022f4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e121      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005870:	4b3a      	ldr	r3, [pc, #232]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ed      	bne.n	800585a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d105      	bne.n	8005890 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005884:	4b35      	ldr	r3, [pc, #212]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	4a34      	ldr	r2, [pc, #208]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800588a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800588e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d03c      	beq.n	8005916 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01c      	beq.n	80058de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80058a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058aa:	4a2c      	ldr	r2, [pc, #176]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fc fd1e 	bl	80022f4 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058bc:	f7fc fd1a 	bl	80022f4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e0f2      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80058d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ef      	beq.n	80058bc <HAL_RCC_OscConfig+0x418>
 80058dc:	e01b      	b.n	8005916 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058de:	4b1f      	ldr	r3, [pc, #124]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80058e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fc fd01 	bl	80022f4 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058f6:	f7fc fcfd 	bl	80022f4 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0d5      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005908:	4b14      	ldr	r3, [pc, #80]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ef      	bne.n	80058f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80c9 	beq.w	8005ab2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005920:	4b0e      	ldr	r3, [pc, #56]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b0c      	cmp	r3, #12
 800592a:	f000 8083 	beq.w	8005a34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d15e      	bne.n	80059f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <HAL_RCC_OscConfig+0x4b8>)
 800593c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fc fcd7 	bl	80022f4 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005948:	e00c      	b.n	8005964 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594a:	f7fc fcd3 	bl	80022f4 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d905      	bls.n	8005964 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e0ab      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
 800595c:	40021000 	.word	0x40021000
 8005960:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005964:	4b55      	ldr	r3, [pc, #340]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ec      	bne.n	800594a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005970:	4b52      	ldr	r3, [pc, #328]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <HAL_RCC_OscConfig+0x61c>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6a11      	ldr	r1, [r2, #32]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005980:	3a01      	subs	r2, #1
 8005982:	0112      	lsls	r2, r2, #4
 8005984:	4311      	orrs	r1, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800598a:	0212      	lsls	r2, r2, #8
 800598c:	4311      	orrs	r1, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005992:	0852      	lsrs	r2, r2, #1
 8005994:	3a01      	subs	r2, #1
 8005996:	0552      	lsls	r2, r2, #21
 8005998:	4311      	orrs	r1, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800599e:	0852      	lsrs	r2, r2, #1
 80059a0:	3a01      	subs	r2, #1
 80059a2:	0652      	lsls	r2, r2, #25
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059aa:	06d2      	lsls	r2, r2, #27
 80059ac:	430a      	orrs	r2, r1
 80059ae:	4943      	ldr	r1, [pc, #268]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a40      	ldr	r2, [pc, #256]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c0:	4b3e      	ldr	r3, [pc, #248]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fc92 	bl	80022f4 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fc fc8e 	bl	80022f4 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e066      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x530>
 80059f2:	e05e      	b.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b31      	ldr	r3, [pc, #196]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a30      	ldr	r2, [pc, #192]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fc fc78 	bl	80022f4 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fc fc74 	bl	80022f4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04c      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a1a:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a26:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	4924      	ldr	r1, [pc, #144]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <HAL_RCC_OscConfig+0x620>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
 8005a32:	e03e      	b.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e039      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a40:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f003 0203 	and.w	r2, r3, #3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d12c      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d123      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d11b      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d113      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d109      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	019f800c 	.word	0x019f800c
 8005ac4:	feeefffc 	.word	0xfeeefffc

08005ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e11e      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b91      	ldr	r3, [pc, #580]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d910      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 020f 	bic.w	r2, r3, #15
 8005af6:	498c      	ldr	r1, [pc, #560]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b8a      	ldr	r3, [pc, #552]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e106      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d073      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d129      	bne.n	8005b78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b24:	4b81      	ldr	r3, [pc, #516]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0f4      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b34:	f000 f99e 	bl	8005e74 <RCC_GetSysClockFreqFromPLLSource>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4a7c      	ldr	r2, [pc, #496]	; (8005d30 <HAL_RCC_ClockConfig+0x268>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d93f      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b42:	4b7a      	ldr	r3, [pc, #488]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d033      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d12f      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b62:	4b72      	ldr	r3, [pc, #456]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6a:	4a70      	ldr	r2, [pc, #448]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e024      	b.n	8005bc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b80:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0c6      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b90:	4b66      	ldr	r3, [pc, #408]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0be      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ba0:	f000 f8ce 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4a61      	ldr	r2, [pc, #388]	; (8005d30 <HAL_RCC_ClockConfig+0x268>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d909      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bae:	4b5f      	ldr	r3, [pc, #380]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb6:	4a5d      	ldr	r2, [pc, #372]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bc2:	4b5a      	ldr	r3, [pc, #360]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f023 0203 	bic.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4957      	ldr	r1, [pc, #348]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd4:	f7fc fb8e 	bl	80022f4 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fc fb8a 	bl	80022f4 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e095      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b4e      	ldr	r3, [pc, #312]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 020c 	and.w	r2, r3, #12
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1eb      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d023      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c1c:	4b43      	ldr	r3, [pc, #268]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a42      	ldr	r2, [pc, #264]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c34:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c3c:	4a3b      	ldr	r2, [pc, #236]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c44:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4936      	ldr	r1, [pc, #216]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d105      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c6a:	4b2f      	ldr	r3, [pc, #188]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d21d      	bcs.n	8005cb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c78:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f023 020f 	bic.w	r2, r3, #15
 8005c80:	4929      	ldr	r1, [pc, #164]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c88:	f7fc fb34 	bl	80022f4 <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c90:	f7fc fb30 	bl	80022f4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e03b      	b.n	8005d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_RCC_ClockConfig+0x260>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d1ed      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4917      	ldr	r1, [pc, #92]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	490f      	ldr	r1, [pc, #60]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cf2:	f000 f825 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	490c      	ldr	r1, [pc, #48]	; (8005d34 <HAL_RCC_ClockConfig+0x26c>)
 8005d04:	5ccb      	ldrb	r3, [r1, r3]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <HAL_RCC_ClockConfig+0x270>)
 8005d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <HAL_RCC_ClockConfig+0x274>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fc faa0 	bl	800225c <HAL_InitTick>
 8005d1c:	4603      	mov	r3, r0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	04c4b400 	.word	0x04c4b400
 8005d34:	080088f4 	.word	0x080088f4
 8005d38:	20000010 	.word	0x20000010
 8005d3c:	20000014 	.word	0x20000014

08005d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d46:	4b2c      	ldr	r3, [pc, #176]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d102      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e047      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d58:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d102      	bne.n	8005d6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d64:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	e03e      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d6a:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d136      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d10c      	bne.n	8005dae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d9e:	68d2      	ldr	r2, [r2, #12]
 8005da0:	0a12      	lsrs	r2, r2, #8
 8005da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
      break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dae:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005db8:	68d2      	ldr	r2, [r2, #12]
 8005dba:	0a12      	lsrs	r2, r2, #8
 8005dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
      break;
 8005dc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	0e5b      	lsrs	r3, r3, #25
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e001      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005de8:	693b      	ldr	r3, [r7, #16]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	00f42400 	.word	0x00f42400
 8005e00:	007a1200 	.word	0x007a1200

08005e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e08:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000010 	.word	0x20000010

08005e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e20:	f7ff fff0 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005e24:	4602      	mov	r2, r0
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e32:	5ccb      	ldrb	r3, [r1, r3]
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40021000 	.word	0x40021000
 8005e44:	08008904 	.word	0x08008904

08005e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e4c:	f7ff ffda 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0adb      	lsrs	r3, r3, #11
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	08008904 	.word	0x08008904

08005e74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e7a:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d10c      	bne.n	8005eb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e98:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ea2:	68d2      	ldr	r2, [r2, #12]
 8005ea4:	0a12      	lsrs	r2, r2, #8
 8005ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	617b      	str	r3, [r7, #20]
    break;
 8005eb0:	e00c      	b.n	8005ecc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ebc:	68d2      	ldr	r2, [r2, #12]
 8005ebe:	0a12      	lsrs	r2, r2, #8
 8005ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
    break;
 8005eca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0e5b      	lsrs	r3, r3, #25
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ee6:	687b      	ldr	r3, [r7, #4]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	007a1200 	.word	0x007a1200
 8005efc:	00f42400 	.word	0x00f42400

08005f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f08:	2300      	movs	r3, #0
 8005f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8098 	beq.w	800604e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f22:	4b43      	ldr	r3, [pc, #268]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10d      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a3f      	ldr	r2, [pc, #252]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4a:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a39      	ldr	r2, [pc, #228]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f56:	f7fc f9cd 	bl	80022f4 <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f5c:	e009      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fc f9c9 	bl	80022f4 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d902      	bls.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	74fb      	strb	r3, [r7, #19]
        break;
 8005f70:	e005      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ef      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d159      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01e      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d019      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fa0:	4b23      	ldr	r3, [pc, #140]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbc:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fcc:	4a18      	ldr	r2, [pc, #96]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fc f989 	bl	80022f4 <HAL_GetTick>
 8005fe2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe4:	e00b      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f7fc f985 	bl	80022f4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d902      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	74fb      	strb	r3, [r7, #19]
            break;
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0ec      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	4903      	ldr	r1, [pc, #12]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006028:	e008      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	74bb      	strb	r3, [r7, #18]
 800602e:	e005      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006030:	40021000 	.word	0x40021000
 8006034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800603c:	7c7b      	ldrb	r3, [r7, #17]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d105      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006042:	4ba7      	ldr	r3, [pc, #668]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	4aa6      	ldr	r2, [pc, #664]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800605a:	4ba1      	ldr	r3, [pc, #644]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f023 0203 	bic.w	r2, r3, #3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	499d      	ldr	r1, [pc, #628]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800607c:	4b98      	ldr	r3, [pc, #608]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f023 020c 	bic.w	r2, r3, #12
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4995      	ldr	r1, [pc, #596]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800609e:	4b90      	ldr	r3, [pc, #576]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	498c      	ldr	r1, [pc, #560]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c0:	4b87      	ldr	r3, [pc, #540]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	4984      	ldr	r1, [pc, #528]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060e2:	4b7f      	ldr	r3, [pc, #508]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	497b      	ldr	r1, [pc, #492]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006104:	4b76      	ldr	r3, [pc, #472]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	4973      	ldr	r1, [pc, #460]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006126:	4b6e      	ldr	r3, [pc, #440]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	496a      	ldr	r1, [pc, #424]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006148:	4b65      	ldr	r3, [pc, #404]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	4962      	ldr	r1, [pc, #392]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800616a:	4b5d      	ldr	r3, [pc, #372]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	4959      	ldr	r1, [pc, #356]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800618c:	4b54      	ldr	r3, [pc, #336]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006192:	f023 0203 	bic.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	4951      	ldr	r1, [pc, #324]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ae:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4948      	ldr	r1, [pc, #288]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d0:	4b43      	ldr	r3, [pc, #268]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	4940      	ldr	r1, [pc, #256]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ee:	d105      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f0:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a3a      	ldr	r2, [pc, #232]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	4932      	ldr	r1, [pc, #200]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006226:	d105      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006232:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d015      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006240:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4924      	ldr	r1, [pc, #144]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800625e:	d105      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800626a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	4916      	ldr	r1, [pc, #88]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006296:	d105      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	4908      	ldr	r1, [pc, #32]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ce:	d109      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4a02      	ldr	r2, [pc, #8]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062da:	60d3      	str	r3, [r2, #12]
 80062dc:	e002      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062f0:	4b29      	ldr	r3, [pc, #164]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	4926      	ldr	r1, [pc, #152]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006310:	4b21      	ldr	r3, [pc, #132]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a20      	ldr	r2, [pc, #128]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006336:	4918      	ldr	r1, [pc, #96]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a12      	ldr	r2, [pc, #72]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	490a      	ldr	r1, [pc, #40]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800638a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800638c:	7cbb      	ldrb	r3, [r7, #18]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000

0800639c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e049      	b.n	8006442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb fdec 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f000 fa26 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d001      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e054      	b.n	800650e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a26      	ldr	r2, [pc, #152]	; (800651c <HAL_TIM_Base_Start_IT+0xd0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d022      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648e:	d01d      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_TIM_Base_Start_IT+0xd4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d018      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_TIM_Base_Start_IT+0xd8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d013      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_TIM_Base_Start_IT+0xdc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00e      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_TIM_Base_Start_IT+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d009      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <HAL_TIM_Base_Start_IT+0xe4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x80>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_TIM_Base_Start_IT+0xe8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d115      	bne.n	80064f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	4b19      	ldr	r3, [pc, #100]	; (8006538 <HAL_TIM_Base_Start_IT+0xec>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b06      	cmp	r3, #6
 80064dc:	d015      	beq.n	800650a <HAL_TIM_Base_Start_IT+0xbe>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e4:	d011      	beq.n	800650a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f6:	e008      	b.n	800650a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e000      	b.n	800650c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40013400 	.word	0x40013400
 8006530:	40014000 	.word	0x40014000
 8006534:	40015000 	.word	0x40015000
 8006538:	00010007 	.word	0x00010007

0800653c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0202 	mvn.w	r2, #2
 8006570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f931 	bl	80067ee <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f923 	bl	80067da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f934 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0204 	mvn.w	r2, #4
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f90b 	bl	80067ee <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8fd 	bl	80067da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f90e 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0208 	mvn.w	r2, #8
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8e5 	bl	80067ee <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f8d7 	bl	80067da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8e8 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b00      	cmp	r3, #0
 8006640:	d020      	beq.n	8006684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0210 	mvn.w	r2, #16
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2208      	movs	r2, #8
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8bf 	bl	80067ee <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8b1 	bl	80067da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8c2 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0201 	mvn.w	r2, #1
 80066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fa fd76 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80066ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f9ff 	bl	8006ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f9f7 	bl	8006ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f87c 	bl	8006816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00c      	beq.n	8006742 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0220 	mvn.w	r2, #32
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f9bf 	bl	8006ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800675e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9cb 	bl	8006afc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f9c3 	bl	8006b10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00c      	beq.n	80067ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80067a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f9bb 	bl	8006b24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9b3 	bl	8006b38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a4c      	ldr	r2, [pc, #304]	; (8006970 <TIM_Base_SetConfig+0x144>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d017      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684a:	d013      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a49      	ldr	r2, [pc, #292]	; (8006974 <TIM_Base_SetConfig+0x148>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00f      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a48      	ldr	r2, [pc, #288]	; (8006978 <TIM_Base_SetConfig+0x14c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a47      	ldr	r2, [pc, #284]	; (800697c <TIM_Base_SetConfig+0x150>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a46      	ldr	r2, [pc, #280]	; (8006980 <TIM_Base_SetConfig+0x154>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_Base_SetConfig+0x48>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a45      	ldr	r2, [pc, #276]	; (8006984 <TIM_Base_SetConfig+0x158>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d108      	bne.n	8006886 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a39      	ldr	r2, [pc, #228]	; (8006970 <TIM_Base_SetConfig+0x144>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d023      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006894:	d01f      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a36      	ldr	r2, [pc, #216]	; (8006974 <TIM_Base_SetConfig+0x148>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01b      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a35      	ldr	r2, [pc, #212]	; (8006978 <TIM_Base_SetConfig+0x14c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d017      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a34      	ldr	r2, [pc, #208]	; (800697c <TIM_Base_SetConfig+0x150>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a33      	ldr	r2, [pc, #204]	; (8006980 <TIM_Base_SetConfig+0x154>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a33      	ldr	r2, [pc, #204]	; (8006988 <TIM_Base_SetConfig+0x15c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a32      	ldr	r2, [pc, #200]	; (800698c <TIM_Base_SetConfig+0x160>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a31      	ldr	r2, [pc, #196]	; (8006990 <TIM_Base_SetConfig+0x164>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0xaa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <TIM_Base_SetConfig+0x158>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a18      	ldr	r2, [pc, #96]	; (8006970 <TIM_Base_SetConfig+0x144>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <TIM_Base_SetConfig+0x110>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1a      	ldr	r2, [pc, #104]	; (8006980 <TIM_Base_SetConfig+0x154>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00f      	beq.n	800693c <TIM_Base_SetConfig+0x110>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <TIM_Base_SetConfig+0x15c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x110>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a19      	ldr	r2, [pc, #100]	; (800698c <TIM_Base_SetConfig+0x160>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x110>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a18      	ldr	r2, [pc, #96]	; (8006990 <TIM_Base_SetConfig+0x164>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x110>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a13      	ldr	r2, [pc, #76]	; (8006984 <TIM_Base_SetConfig+0x158>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d103      	bne.n	8006944 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]
  }
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40015000 	.word	0x40015000
 8006988:	40014000 	.word	0x40014000
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800

08006994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e074      	b.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a34      	ldr	r2, [pc, #208]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a33      	ldr	r2, [pc, #204]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a31      	ldr	r2, [pc, #196]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a21      	ldr	r2, [pc, #132]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d01d      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d10c      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40015000 	.word	0x40015000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40014000 	.word	0x40014000

08006ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e042      	b.n	8006be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fb f9bd 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2224      	movs	r2, #36	; 0x24
 8006b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0201 	bic.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fbb2 	bl	8007300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8b3 	bl	8006d08 <UART_SetConfig>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e01b      	b.n	8006be4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc31 	bl	8007444 <UART_CheckIdleState>
 8006be2:	4603      	mov	r3, r0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d17b      	bne.n	8006cfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_UART_Transmit+0x26>
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e074      	b.n	8006d00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2221      	movs	r2, #33	; 0x21
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c26:	f7fb fb65 	bl	80022f4 <HAL_GetTick>
 8006c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	d108      	bne.n	8006c58 <HAL_UART_Transmit+0x6c>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	e003      	b.n	8006c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c60:	e030      	b.n	8006cc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2180      	movs	r1, #128	; 0x80
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc93 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e03d      	b.n	8006d00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10b      	bne.n	8006ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e007      	b.n	8006cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1c8      	bne.n	8006c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fc5c 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e006      	b.n	8006d00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d0c:	b08c      	sub	sp, #48	; 0x30
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4baa      	ldr	r3, [pc, #680]	; (8006fe0 <UART_SetConfig+0x2d8>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a9f      	ldr	r2, [pc, #636]	; (8006fe4 <UART_SetConfig+0x2dc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d70:	4313      	orrs	r3, r2
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	f023 010f 	bic.w	r1, r3, #15
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a90      	ldr	r2, [pc, #576]	; (8006fe8 <UART_SetConfig+0x2e0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d125      	bne.n	8006df8 <UART_SetConfig+0xf0>
 8006dac:	4b8f      	ldr	r3, [pc, #572]	; (8006fec <UART_SetConfig+0x2e4>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d81a      	bhi.n	8006df0 <UART_SetConfig+0xe8>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0xb8>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006dd1 	.word	0x08006dd1
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd6:	e116      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dde:	e112      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e10e      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e10a      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e106      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7c      	ldr	r2, [pc, #496]	; (8006ff0 <UART_SetConfig+0x2e8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d138      	bne.n	8006e74 <UART_SetConfig+0x16c>
 8006e02:	4b7a      	ldr	r3, [pc, #488]	; (8006fec <UART_SetConfig+0x2e4>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	f003 030c 	and.w	r3, r3, #12
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d82d      	bhi.n	8006e6c <UART_SetConfig+0x164>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x110>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e4d 	.word	0x08006e4d
 8006e1c:	08006e6d 	.word	0x08006e6d
 8006e20:	08006e6d 	.word	0x08006e6d
 8006e24:	08006e6d 	.word	0x08006e6d
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e6d 	.word	0x08006e6d
 8006e30:	08006e6d 	.word	0x08006e6d
 8006e34:	08006e6d 	.word	0x08006e6d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e0d8      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e0d4      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e0d0      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e0cc      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e0c8      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a5e      	ldr	r2, [pc, #376]	; (8006ff4 <UART_SetConfig+0x2ec>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d125      	bne.n	8006eca <UART_SetConfig+0x1c2>
 8006e7e:	4b5b      	ldr	r3, [pc, #364]	; (8006fec <UART_SetConfig+0x2e4>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d016      	beq.n	8006eba <UART_SetConfig+0x1b2>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d818      	bhi.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d00a      	beq.n	8006eaa <UART_SetConfig+0x1a2>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d814      	bhi.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <UART_SetConfig+0x19a>
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d008      	beq.n	8006eb2 <UART_SetConfig+0x1aa>
 8006ea0:	e00f      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea8:	e0ad      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb0:	e0a9      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006eb2:	2304      	movs	r3, #4
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	e0a5      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006eba:	2308      	movs	r3, #8
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec0:	e0a1      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006ec2:	2310      	movs	r3, #16
 8006ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec8:	e09d      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a4a      	ldr	r2, [pc, #296]	; (8006ff8 <UART_SetConfig+0x2f0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d125      	bne.n	8006f20 <UART_SetConfig+0x218>
 8006ed4:	4b45      	ldr	r3, [pc, #276]	; (8006fec <UART_SetConfig+0x2e4>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ede:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee0:	d016      	beq.n	8006f10 <UART_SetConfig+0x208>
 8006ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee4:	d818      	bhi.n	8006f18 <UART_SetConfig+0x210>
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d00a      	beq.n	8006f00 <UART_SetConfig+0x1f8>
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d814      	bhi.n	8006f18 <UART_SetConfig+0x210>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <UART_SetConfig+0x1f0>
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d008      	beq.n	8006f08 <UART_SetConfig+0x200>
 8006ef6:	e00f      	b.n	8006f18 <UART_SetConfig+0x210>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efe:	e082      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f00:	2302      	movs	r3, #2
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f06:	e07e      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e07a      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e076      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e072      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a35      	ldr	r2, [pc, #212]	; (8006ffc <UART_SetConfig+0x2f4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d12a      	bne.n	8006f80 <UART_SetConfig+0x278>
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <UART_SetConfig+0x2e4>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f38:	d01a      	beq.n	8006f70 <UART_SetConfig+0x268>
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3e:	d81b      	bhi.n	8006f78 <UART_SetConfig+0x270>
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f44:	d00c      	beq.n	8006f60 <UART_SetConfig+0x258>
 8006f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4a:	d815      	bhi.n	8006f78 <UART_SetConfig+0x270>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <UART_SetConfig+0x250>
 8006f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f54:	d008      	beq.n	8006f68 <UART_SetConfig+0x260>
 8006f56:	e00f      	b.n	8006f78 <UART_SetConfig+0x270>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5e:	e052      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f60:	2302      	movs	r3, #2
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f66:	e04e      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e04a      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e046      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e042      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <UART_SetConfig+0x2dc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d13a      	bne.n	8007000 <UART_SetConfig+0x2f8>
 8006f8a:	4b18      	ldr	r3, [pc, #96]	; (8006fec <UART_SetConfig+0x2e4>)
 8006f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f98:	d01a      	beq.n	8006fd0 <UART_SetConfig+0x2c8>
 8006f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f9e:	d81b      	bhi.n	8006fd8 <UART_SetConfig+0x2d0>
 8006fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa4:	d00c      	beq.n	8006fc0 <UART_SetConfig+0x2b8>
 8006fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006faa:	d815      	bhi.n	8006fd8 <UART_SetConfig+0x2d0>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <UART_SetConfig+0x2b0>
 8006fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb4:	d008      	beq.n	8006fc8 <UART_SetConfig+0x2c0>
 8006fb6:	e00f      	b.n	8006fd8 <UART_SetConfig+0x2d0>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e022      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	e01e      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fce:	e01a      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd6:	e016      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fde:	e012      	b.n	8007006 <UART_SetConfig+0x2fe>
 8006fe0:	cfff69f3 	.word	0xcfff69f3
 8006fe4:	40008000 	.word	0x40008000
 8006fe8:	40013800 	.word	0x40013800
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	40004400 	.word	0x40004400
 8006ff4:	40004800 	.word	0x40004800
 8006ff8:	40004c00 	.word	0x40004c00
 8006ffc:	40005000 	.word	0x40005000
 8007000:	2310      	movs	r3, #16
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4aae      	ldr	r2, [pc, #696]	; (80072c4 <UART_SetConfig+0x5bc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	f040 8097 	bne.w	8007140 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007016:	2b08      	cmp	r3, #8
 8007018:	d823      	bhi.n	8007062 <UART_SetConfig+0x35a>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0x318>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007045 	.word	0x08007045
 8007024:	08007063 	.word	0x08007063
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007063 	.word	0x08007063
 8007030:	08007053 	.word	0x08007053
 8007034:	08007063 	.word	0x08007063
 8007038:	08007063 	.word	0x08007063
 800703c:	08007063 	.word	0x08007063
 8007040:	0800705b 	.word	0x0800705b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007044:	f7fe feea 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800704a:	e010      	b.n	800706e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800704c:	4b9e      	ldr	r3, [pc, #632]	; (80072c8 <UART_SetConfig+0x5c0>)
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007050:	e00d      	b.n	800706e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007052:	f7fe fe75 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8007056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007058:	e009      	b.n	800706e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007060:	e005      	b.n	800706e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800706c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8130 	beq.w	80072d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	4a94      	ldr	r2, [pc, #592]	; (80072cc <UART_SetConfig+0x5c4>)
 800707c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007080:	461a      	mov	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	fbb3 f3f2 	udiv	r3, r3, r2
 8007088:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	429a      	cmp	r2, r3
 8007098:	d305      	bcc.n	80070a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d903      	bls.n	80070ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070ac:	e113      	b.n	80072d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	2200      	movs	r2, #0
 80070b2:	60bb      	str	r3, [r7, #8]
 80070b4:	60fa      	str	r2, [r7, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4a84      	ldr	r2, [pc, #528]	; (80072cc <UART_SetConfig+0x5c4>)
 80070bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2200      	movs	r2, #0
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d0:	f7f9 fdc4 	bl	8000c5c <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4610      	mov	r0, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	020b      	lsls	r3, r1, #8
 80070e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070ea:	0202      	lsls	r2, r0, #8
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	6849      	ldr	r1, [r1, #4]
 80070f0:	0849      	lsrs	r1, r1, #1
 80070f2:	2000      	movs	r0, #0
 80070f4:	460c      	mov	r4, r1
 80070f6:	4605      	mov	r5, r0
 80070f8:	eb12 0804 	adds.w	r8, r2, r4
 80070fc:	eb43 0905 	adc.w	r9, r3, r5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	469a      	mov	sl, r3
 8007108:	4693      	mov	fp, r2
 800710a:	4652      	mov	r2, sl
 800710c:	465b      	mov	r3, fp
 800710e:	4640      	mov	r0, r8
 8007110:	4649      	mov	r1, r9
 8007112:	f7f9 fda3 	bl	8000c5c <__aeabi_uldivmod>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4613      	mov	r3, r2
 800711c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007124:	d308      	bcc.n	8007138 <UART_SetConfig+0x430>
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712c:	d204      	bcs.n	8007138 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e0ce      	b.n	80072d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800713e:	e0ca      	b.n	80072d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	d166      	bne.n	8007218 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800714a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800714e:	2b08      	cmp	r3, #8
 8007150:	d827      	bhi.n	80071a2 <UART_SetConfig+0x49a>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x450>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	0800717d 	.word	0x0800717d
 800715c:	08007185 	.word	0x08007185
 8007160:	0800718d 	.word	0x0800718d
 8007164:	080071a3 	.word	0x080071a3
 8007168:	08007193 	.word	0x08007193
 800716c:	080071a3 	.word	0x080071a3
 8007170:	080071a3 	.word	0x080071a3
 8007174:	080071a3 	.word	0x080071a3
 8007178:	0800719b 	.word	0x0800719b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fe fe4e 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8007180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007182:	e014      	b.n	80071ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe fe60 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 8007188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800718a:	e010      	b.n	80071ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4b4e      	ldr	r3, [pc, #312]	; (80072c8 <UART_SetConfig+0x5c0>)
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007190:	e00d      	b.n	80071ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007192:	f7fe fdd5 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8007196:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007198:	e009      	b.n	80071ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071a0:	e005      	b.n	80071ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8090 	beq.w	80072d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	4a44      	ldr	r2, [pc, #272]	; (80072cc <UART_SetConfig+0x5c4>)
 80071bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071c0:	461a      	mov	r2, r3
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c8:	005a      	lsls	r2, r3, #1
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	441a      	add	r2, r3
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	2b0f      	cmp	r3, #15
 80071e0:	d916      	bls.n	8007210 <UART_SetConfig+0x508>
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e8:	d212      	bcs.n	8007210 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f023 030f 	bic.w	r3, r3, #15
 80071f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	b29a      	uxth	r2, r3
 8007200:	8bfb      	ldrh	r3, [r7, #30]
 8007202:	4313      	orrs	r3, r2
 8007204:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	8bfa      	ldrh	r2, [r7, #30]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	e062      	b.n	80072d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007216:	e05e      	b.n	80072d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800721c:	2b08      	cmp	r3, #8
 800721e:	d828      	bhi.n	8007272 <UART_SetConfig+0x56a>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x520>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800724d 	.word	0x0800724d
 800722c:	08007255 	.word	0x08007255
 8007230:	0800725d 	.word	0x0800725d
 8007234:	08007273 	.word	0x08007273
 8007238:	08007263 	.word	0x08007263
 800723c:	08007273 	.word	0x08007273
 8007240:	08007273 	.word	0x08007273
 8007244:	08007273 	.word	0x08007273
 8007248:	0800726b 	.word	0x0800726b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fe fde6 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007252:	e014      	b.n	800727e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007254:	f7fe fdf8 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800725a:	e010      	b.n	800727e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800725c:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <UART_SetConfig+0x5c0>)
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007260:	e00d      	b.n	800727e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007262:	f7fe fd6d 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8007266:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007268:	e009      	b.n	800727e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007270:	e005      	b.n	800727e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800727c:	bf00      	nop
    }

    if (pclk != 0U)
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d028      	beq.n	80072d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	4a10      	ldr	r2, [pc, #64]	; (80072cc <UART_SetConfig+0x5c4>)
 800728a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800728e:	461a      	mov	r2, r3
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	fbb3 f2f2 	udiv	r2, r3, r2
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	441a      	add	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d910      	bls.n	80072d0 <UART_SetConfig+0x5c8>
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b4:	d20c      	bcs.n	80072d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e009      	b.n	80072d6 <UART_SetConfig+0x5ce>
 80072c2:	bf00      	nop
 80072c4:	40008000 	.word	0x40008000
 80072c8:	00f42400 	.word	0x00f42400
 80072cc:	0800891c 	.word	0x0800891c
      }
      else
      {
        ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2201      	movs	r2, #1
 80072da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2200      	movs	r2, #0
 80072f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80072f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3730      	adds	r7, #48	; 0x30
 80072fa:	46bd      	mov	sp, r7
 80072fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073fe:	d10a      	bne.n	8007416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b098      	sub	sp, #96	; 0x60
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007454:	f7fa ff4e 	bl	80022f4 <HAL_GetTick>
 8007458:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b08      	cmp	r3, #8
 8007466:	d12f      	bne.n	80074c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007470:	2200      	movs	r2, #0
 8007472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f88e 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d022      	beq.n	80074c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007496:	653b      	str	r3, [r7, #80]	; 0x50
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a0:	647b      	str	r3, [r7, #68]	; 0x44
 80074a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e063      	b.n	8007590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d149      	bne.n	800756a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074de:	2200      	movs	r2, #0
 80074e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f857 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d03c      	beq.n	800756a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	623b      	str	r3, [r7, #32]
   return(result);
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
 8007510:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	60fb      	str	r3, [r7, #12]
   return(result);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	64bb      	str	r3, [r7, #72]	; 0x48
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007542:	61fa      	str	r2, [r7, #28]
 8007544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	69b9      	ldr	r1, [r7, #24]
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	617b      	str	r3, [r7, #20]
   return(result);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e5      	bne.n	8007522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e012      	b.n	8007590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3758      	adds	r7, #88	; 0x58
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a8:	e04f      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b0:	d04b      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b2:	f7fa fe9f 	bl	80022f4 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d302      	bcc.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e04e      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d037      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b80      	cmp	r3, #128	; 0x80
 80075de:	d034      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d031      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d110      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2208      	movs	r2, #8
 80075fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f838 	bl	8007672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2208      	movs	r2, #8
 8007606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e029      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d111      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800762e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f81e 	bl	8007672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e00f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	429a      	cmp	r2, r3
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	429a      	cmp	r2, r3
 8007666:	d0a0      	beq.n	80075aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007672:	b480      	push	{r7}
 8007674:	b095      	sub	sp, #84	; 0x54
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800768e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	643b      	str	r3, [r7, #64]	; 0x40
 800769a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800769e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e3      	bne.n	80076ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d118      	bne.n	800771e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f023 0310 	bic.w	r3, r3, #16
 8007700:	647b      	str	r3, [r7, #68]	; 0x44
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	613b      	str	r3, [r7, #16]
   return(result);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e6      	bne.n	80076ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007732:	bf00      	nop
 8007734:	3754      	adds	r7, #84	; 0x54
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_UARTEx_DisableFifoMode+0x16>
 8007750:	2302      	movs	r3, #2
 8007752:	e027      	b.n	80077a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007782:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e02d      	b.n	8007824 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2224      	movs	r2, #36	; 0x24
 80077d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f84f 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007840:	2302      	movs	r3, #2
 8007842:	e02d      	b.n	80078a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	; 0x24
 8007850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f811 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d108      	bne.n	80078ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078c8:	e031      	b.n	800792e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078ca:	2308      	movs	r3, #8
 80078cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ce:	2308      	movs	r3, #8
 80078d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	0e5b      	lsrs	r3, r3, #25
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	0f5b      	lsrs	r3, r3, #29
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	7b3a      	ldrb	r2, [r7, #12]
 80078f6:	4911      	ldr	r1, [pc, #68]	; (800793c <UARTEx_SetNbDataToProcess+0x94>)
 80078f8:	5c8a      	ldrb	r2, [r1, r2]
 80078fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078fe:	7b3a      	ldrb	r2, [r7, #12]
 8007900:	490f      	ldr	r1, [pc, #60]	; (8007940 <UARTEx_SetNbDataToProcess+0x98>)
 8007902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007904:	fb93 f3f2 	sdiv	r3, r3, r2
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	7b7a      	ldrb	r2, [r7, #13]
 8007914:	4909      	ldr	r1, [pc, #36]	; (800793c <UARTEx_SetNbDataToProcess+0x94>)
 8007916:	5c8a      	ldrb	r2, [r1, r2]
 8007918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800791c:	7b7a      	ldrb	r2, [r7, #13]
 800791e:	4908      	ldr	r1, [pc, #32]	; (8007940 <UARTEx_SetNbDataToProcess+0x98>)
 8007920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007922:	fb93 f3f2 	sdiv	r3, r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	08008934 	.word	0x08008934
 8007940:	0800893c 	.word	0x0800893c

08007944 <malloc>:
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <malloc+0xc>)
 8007946:	4601      	mov	r1, r0
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f000 b823 	b.w	8007994 <_malloc_r>
 800794e:	bf00      	nop
 8007950:	20000074 	.word	0x20000074

08007954 <sbrk_aligned>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4e0e      	ldr	r6, [pc, #56]	; (8007990 <sbrk_aligned+0x3c>)
 8007958:	460c      	mov	r4, r1
 800795a:	6831      	ldr	r1, [r6, #0]
 800795c:	4605      	mov	r5, r0
 800795e:	b911      	cbnz	r1, 8007966 <sbrk_aligned+0x12>
 8007960:	f000 f9dc 	bl	8007d1c <_sbrk_r>
 8007964:	6030      	str	r0, [r6, #0]
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f9d7 	bl	8007d1c <_sbrk_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d00a      	beq.n	8007988 <sbrk_aligned+0x34>
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d007      	beq.n	800798c <sbrk_aligned+0x38>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4628      	mov	r0, r5
 8007980:	f000 f9cc 	bl	8007d1c <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d101      	bne.n	800798c <sbrk_aligned+0x38>
 8007988:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800798c:	4620      	mov	r0, r4
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	200003c8 	.word	0x200003c8

08007994 <_malloc_r>:
 8007994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007998:	1ccd      	adds	r5, r1, #3
 800799a:	f025 0503 	bic.w	r5, r5, #3
 800799e:	3508      	adds	r5, #8
 80079a0:	2d0c      	cmp	r5, #12
 80079a2:	bf38      	it	cc
 80079a4:	250c      	movcc	r5, #12
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	4607      	mov	r7, r0
 80079aa:	db01      	blt.n	80079b0 <_malloc_r+0x1c>
 80079ac:	42a9      	cmp	r1, r5
 80079ae:	d905      	bls.n	80079bc <_malloc_r+0x28>
 80079b0:	230c      	movs	r3, #12
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	2600      	movs	r6, #0
 80079b6:	4630      	mov	r0, r6
 80079b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a90 <_malloc_r+0xfc>
 80079c0:	f000 f868 	bl	8007a94 <__malloc_lock>
 80079c4:	f8d8 3000 	ldr.w	r3, [r8]
 80079c8:	461c      	mov	r4, r3
 80079ca:	bb5c      	cbnz	r4, 8007a24 <_malloc_r+0x90>
 80079cc:	4629      	mov	r1, r5
 80079ce:	4638      	mov	r0, r7
 80079d0:	f7ff ffc0 	bl	8007954 <sbrk_aligned>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	4604      	mov	r4, r0
 80079d8:	d155      	bne.n	8007a86 <_malloc_r+0xf2>
 80079da:	f8d8 4000 	ldr.w	r4, [r8]
 80079de:	4626      	mov	r6, r4
 80079e0:	2e00      	cmp	r6, #0
 80079e2:	d145      	bne.n	8007a70 <_malloc_r+0xdc>
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d048      	beq.n	8007a7a <_malloc_r+0xe6>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	4631      	mov	r1, r6
 80079ec:	4638      	mov	r0, r7
 80079ee:	eb04 0903 	add.w	r9, r4, r3
 80079f2:	f000 f993 	bl	8007d1c <_sbrk_r>
 80079f6:	4581      	cmp	r9, r0
 80079f8:	d13f      	bne.n	8007a7a <_malloc_r+0xe6>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	1a6d      	subs	r5, r5, r1
 80079fe:	4629      	mov	r1, r5
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7ff ffa7 	bl	8007954 <sbrk_aligned>
 8007a06:	3001      	adds	r0, #1
 8007a08:	d037      	beq.n	8007a7a <_malloc_r+0xe6>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	442b      	add	r3, r5
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	f8d8 3000 	ldr.w	r3, [r8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d038      	beq.n	8007a8a <_malloc_r+0xf6>
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	42a2      	cmp	r2, r4
 8007a1c:	d12b      	bne.n	8007a76 <_malloc_r+0xe2>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	e00f      	b.n	8007a44 <_malloc_r+0xb0>
 8007a24:	6822      	ldr	r2, [r4, #0]
 8007a26:	1b52      	subs	r2, r2, r5
 8007a28:	d41f      	bmi.n	8007a6a <_malloc_r+0xd6>
 8007a2a:	2a0b      	cmp	r2, #11
 8007a2c:	d917      	bls.n	8007a5e <_malloc_r+0xca>
 8007a2e:	1961      	adds	r1, r4, r5
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	6025      	str	r5, [r4, #0]
 8007a34:	bf18      	it	ne
 8007a36:	6059      	strne	r1, [r3, #4]
 8007a38:	6863      	ldr	r3, [r4, #4]
 8007a3a:	bf08      	it	eq
 8007a3c:	f8c8 1000 	streq.w	r1, [r8]
 8007a40:	5162      	str	r2, [r4, r5]
 8007a42:	604b      	str	r3, [r1, #4]
 8007a44:	4638      	mov	r0, r7
 8007a46:	f104 060b 	add.w	r6, r4, #11
 8007a4a:	f000 f829 	bl	8007aa0 <__malloc_unlock>
 8007a4e:	f026 0607 	bic.w	r6, r6, #7
 8007a52:	1d23      	adds	r3, r4, #4
 8007a54:	1af2      	subs	r2, r6, r3
 8007a56:	d0ae      	beq.n	80079b6 <_malloc_r+0x22>
 8007a58:	1b9b      	subs	r3, r3, r6
 8007a5a:	50a3      	str	r3, [r4, r2]
 8007a5c:	e7ab      	b.n	80079b6 <_malloc_r+0x22>
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	6862      	ldr	r2, [r4, #4]
 8007a62:	d1dd      	bne.n	8007a20 <_malloc_r+0x8c>
 8007a64:	f8c8 2000 	str.w	r2, [r8]
 8007a68:	e7ec      	b.n	8007a44 <_malloc_r+0xb0>
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	6864      	ldr	r4, [r4, #4]
 8007a6e:	e7ac      	b.n	80079ca <_malloc_r+0x36>
 8007a70:	4634      	mov	r4, r6
 8007a72:	6876      	ldr	r6, [r6, #4]
 8007a74:	e7b4      	b.n	80079e0 <_malloc_r+0x4c>
 8007a76:	4613      	mov	r3, r2
 8007a78:	e7cc      	b.n	8007a14 <_malloc_r+0x80>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f000 f80e 	bl	8007aa0 <__malloc_unlock>
 8007a84:	e797      	b.n	80079b6 <_malloc_r+0x22>
 8007a86:	6025      	str	r5, [r4, #0]
 8007a88:	e7dc      	b.n	8007a44 <_malloc_r+0xb0>
 8007a8a:	605b      	str	r3, [r3, #4]
 8007a8c:	deff      	udf	#255	; 0xff
 8007a8e:	bf00      	nop
 8007a90:	200003c4 	.word	0x200003c4

08007a94 <__malloc_lock>:
 8007a94:	4801      	ldr	r0, [pc, #4]	; (8007a9c <__malloc_lock+0x8>)
 8007a96:	f000 b97c 	b.w	8007d92 <__retarget_lock_acquire_recursive>
 8007a9a:	bf00      	nop
 8007a9c:	20000508 	.word	0x20000508

08007aa0 <__malloc_unlock>:
 8007aa0:	4801      	ldr	r0, [pc, #4]	; (8007aa8 <__malloc_unlock+0x8>)
 8007aa2:	f000 b977 	b.w	8007d94 <__retarget_lock_release_recursive>
 8007aa6:	bf00      	nop
 8007aa8:	20000508 	.word	0x20000508

08007aac <std>:
 8007aac:	2300      	movs	r3, #0
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aba:	6083      	str	r3, [r0, #8]
 8007abc:	8181      	strh	r1, [r0, #12]
 8007abe:	6643      	str	r3, [r0, #100]	; 0x64
 8007ac0:	81c2      	strh	r2, [r0, #14]
 8007ac2:	6183      	str	r3, [r0, #24]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	305c      	adds	r0, #92	; 0x5c
 8007aca:	f000 f91f 	bl	8007d0c <memset>
 8007ace:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <std+0x58>)
 8007ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <std+0x5c>)
 8007ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <std+0x60>)
 8007ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <std+0x64>)
 8007adc:	6323      	str	r3, [r4, #48]	; 0x30
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <std+0x68>)
 8007ae0:	6224      	str	r4, [r4, #32]
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d006      	beq.n	8007af4 <std+0x48>
 8007ae6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007aea:	4294      	cmp	r4, r2
 8007aec:	d002      	beq.n	8007af4 <std+0x48>
 8007aee:	33d0      	adds	r3, #208	; 0xd0
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d105      	bne.n	8007b00 <std+0x54>
 8007af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f000 b948 	b.w	8007d90 <__retarget_lock_init_recursive>
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	08008535 	.word	0x08008535
 8007b08:	08008557 	.word	0x08008557
 8007b0c:	0800858f 	.word	0x0800858f
 8007b10:	080085b3 	.word	0x080085b3
 8007b14:	200003cc 	.word	0x200003cc

08007b18 <stdio_exit_handler>:
 8007b18:	4a02      	ldr	r2, [pc, #8]	; (8007b24 <stdio_exit_handler+0xc>)
 8007b1a:	4903      	ldr	r1, [pc, #12]	; (8007b28 <stdio_exit_handler+0x10>)
 8007b1c:	4803      	ldr	r0, [pc, #12]	; (8007b2c <stdio_exit_handler+0x14>)
 8007b1e:	f000 b869 	b.w	8007bf4 <_fwalk_sglue>
 8007b22:	bf00      	nop
 8007b24:	2000001c 	.word	0x2000001c
 8007b28:	080084e5 	.word	0x080084e5
 8007b2c:	20000028 	.word	0x20000028

08007b30 <cleanup_stdio>:
 8007b30:	6841      	ldr	r1, [r0, #4]
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <cleanup_stdio+0x34>)
 8007b34:	4299      	cmp	r1, r3
 8007b36:	b510      	push	{r4, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	d001      	beq.n	8007b40 <cleanup_stdio+0x10>
 8007b3c:	f000 fcd2 	bl	80084e4 <_fflush_r>
 8007b40:	68a1      	ldr	r1, [r4, #8]
 8007b42:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <cleanup_stdio+0x38>)
 8007b44:	4299      	cmp	r1, r3
 8007b46:	d002      	beq.n	8007b4e <cleanup_stdio+0x1e>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fccb 	bl	80084e4 <_fflush_r>
 8007b4e:	68e1      	ldr	r1, [r4, #12]
 8007b50:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <cleanup_stdio+0x3c>)
 8007b52:	4299      	cmp	r1, r3
 8007b54:	d004      	beq.n	8007b60 <cleanup_stdio+0x30>
 8007b56:	4620      	mov	r0, r4
 8007b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b5c:	f000 bcc2 	b.w	80084e4 <_fflush_r>
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	bf00      	nop
 8007b64:	200003cc 	.word	0x200003cc
 8007b68:	20000434 	.word	0x20000434
 8007b6c:	2000049c 	.word	0x2000049c

08007b70 <global_stdio_init.part.0>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <global_stdio_init.part.0+0x30>)
 8007b74:	4c0b      	ldr	r4, [pc, #44]	; (8007ba4 <global_stdio_init.part.0+0x34>)
 8007b76:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <global_stdio_init.part.0+0x38>)
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2104      	movs	r1, #4
 8007b80:	f7ff ff94 	bl	8007aac <std>
 8007b84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b88:	2201      	movs	r2, #1
 8007b8a:	2109      	movs	r1, #9
 8007b8c:	f7ff ff8e 	bl	8007aac <std>
 8007b90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b94:	2202      	movs	r2, #2
 8007b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b9a:	2112      	movs	r1, #18
 8007b9c:	f7ff bf86 	b.w	8007aac <std>
 8007ba0:	20000504 	.word	0x20000504
 8007ba4:	200003cc 	.word	0x200003cc
 8007ba8:	08007b19 	.word	0x08007b19

08007bac <__sfp_lock_acquire>:
 8007bac:	4801      	ldr	r0, [pc, #4]	; (8007bb4 <__sfp_lock_acquire+0x8>)
 8007bae:	f000 b8f0 	b.w	8007d92 <__retarget_lock_acquire_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	20000509 	.word	0x20000509

08007bb8 <__sfp_lock_release>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	; (8007bc0 <__sfp_lock_release+0x8>)
 8007bba:	f000 b8eb 	b.w	8007d94 <__retarget_lock_release_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	20000509 	.word	0x20000509

08007bc4 <__sinit>:
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	f7ff fff0 	bl	8007bac <__sfp_lock_acquire>
 8007bcc:	6a23      	ldr	r3, [r4, #32]
 8007bce:	b11b      	cbz	r3, 8007bd8 <__sinit+0x14>
 8007bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd4:	f7ff bff0 	b.w	8007bb8 <__sfp_lock_release>
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <__sinit+0x28>)
 8007bda:	6223      	str	r3, [r4, #32]
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <__sinit+0x2c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f5      	bne.n	8007bd0 <__sinit+0xc>
 8007be4:	f7ff ffc4 	bl	8007b70 <global_stdio_init.part.0>
 8007be8:	e7f2      	b.n	8007bd0 <__sinit+0xc>
 8007bea:	bf00      	nop
 8007bec:	08007b31 	.word	0x08007b31
 8007bf0:	20000504 	.word	0x20000504

08007bf4 <_fwalk_sglue>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	4688      	mov	r8, r1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	2600      	movs	r6, #0
 8007c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c04:	f1b9 0901 	subs.w	r9, r9, #1
 8007c08:	d505      	bpl.n	8007c16 <_fwalk_sglue+0x22>
 8007c0a:	6824      	ldr	r4, [r4, #0]
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	d1f7      	bne.n	8007c00 <_fwalk_sglue+0xc>
 8007c10:	4630      	mov	r0, r6
 8007c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d907      	bls.n	8007c2c <_fwalk_sglue+0x38>
 8007c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c20:	3301      	adds	r3, #1
 8007c22:	d003      	beq.n	8007c2c <_fwalk_sglue+0x38>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	4306      	orrs	r6, r0
 8007c2c:	3568      	adds	r5, #104	; 0x68
 8007c2e:	e7e9      	b.n	8007c04 <_fwalk_sglue+0x10>

08007c30 <iprintf>:
 8007c30:	b40f      	push	{r0, r1, r2, r3}
 8007c32:	b507      	push	{r0, r1, r2, lr}
 8007c34:	4906      	ldr	r1, [pc, #24]	; (8007c50 <iprintf+0x20>)
 8007c36:	ab04      	add	r3, sp, #16
 8007c38:	6808      	ldr	r0, [r1, #0]
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	6881      	ldr	r1, [r0, #8]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	f000 f91f 	bl	8007e84 <_vfiprintf_r>
 8007c46:	b003      	add	sp, #12
 8007c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4c:	b004      	add	sp, #16
 8007c4e:	4770      	bx	lr
 8007c50:	20000074 	.word	0x20000074

08007c54 <_puts_r>:
 8007c54:	6a03      	ldr	r3, [r0, #32]
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	6884      	ldr	r4, [r0, #8]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	460e      	mov	r6, r1
 8007c5e:	b90b      	cbnz	r3, 8007c64 <_puts_r+0x10>
 8007c60:	f7ff ffb0 	bl	8007bc4 <__sinit>
 8007c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c66:	07db      	lsls	r3, r3, #31
 8007c68:	d405      	bmi.n	8007c76 <_puts_r+0x22>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	0598      	lsls	r0, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_puts_r+0x22>
 8007c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c72:	f000 f88e 	bl	8007d92 <__retarget_lock_acquire_recursive>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	0719      	lsls	r1, r3, #28
 8007c7a:	d513      	bpl.n	8007ca4 <_puts_r+0x50>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b18b      	cbz	r3, 8007ca4 <_puts_r+0x50>
 8007c80:	3e01      	subs	r6, #1
 8007c82:	68a3      	ldr	r3, [r4, #8]
 8007c84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	60a3      	str	r3, [r4, #8]
 8007c8c:	b9e9      	cbnz	r1, 8007cca <_puts_r+0x76>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da2e      	bge.n	8007cf0 <_puts_r+0x9c>
 8007c92:	4622      	mov	r2, r4
 8007c94:	210a      	movs	r1, #10
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fc8f 	bl	80085ba <__swbuf_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d007      	beq.n	8007cb0 <_puts_r+0x5c>
 8007ca0:	250a      	movs	r5, #10
 8007ca2:	e007      	b.n	8007cb4 <_puts_r+0x60>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fcc4 	bl	8008634 <__swsetup_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0e7      	beq.n	8007c80 <_puts_r+0x2c>
 8007cb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007cb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cb6:	07da      	lsls	r2, r3, #31
 8007cb8:	d405      	bmi.n	8007cc6 <_puts_r+0x72>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	059b      	lsls	r3, r3, #22
 8007cbe:	d402      	bmi.n	8007cc6 <_puts_r+0x72>
 8007cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cc2:	f000 f867 	bl	8007d94 <__retarget_lock_release_recursive>
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da04      	bge.n	8007cd8 <_puts_r+0x84>
 8007cce:	69a2      	ldr	r2, [r4, #24]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	dc06      	bgt.n	8007ce2 <_puts_r+0x8e>
 8007cd4:	290a      	cmp	r1, #10
 8007cd6:	d004      	beq.n	8007ce2 <_puts_r+0x8e>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	7019      	strb	r1, [r3, #0]
 8007ce0:	e7cf      	b.n	8007c82 <_puts_r+0x2e>
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 fc68 	bl	80085ba <__swbuf_r>
 8007cea:	3001      	adds	r0, #1
 8007cec:	d1c9      	bne.n	8007c82 <_puts_r+0x2e>
 8007cee:	e7df      	b.n	8007cb0 <_puts_r+0x5c>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	250a      	movs	r5, #10
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	701d      	strb	r5, [r3, #0]
 8007cfa:	e7db      	b.n	8007cb4 <_puts_r+0x60>

08007cfc <puts>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <puts+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f7ff bfa7 	b.w	8007c54 <_puts_r>
 8007d06:	bf00      	nop
 8007d08:	20000074 	.word	0x20000074

08007d0c <memset>:
 8007d0c:	4402      	add	r2, r0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <_sbrk_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d06      	ldr	r5, [pc, #24]	; (8007d38 <_sbrk_r+0x1c>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7fa fa0e 	bl	8002148 <_sbrk>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_sbrk_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_sbrk_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	2000050c 	.word	0x2000050c

08007d3c <__errno>:
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <__errno+0x8>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000074 	.word	0x20000074

08007d48 <__libc_init_array>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4d0d      	ldr	r5, [pc, #52]	; (8007d80 <__libc_init_array+0x38>)
 8007d4c:	4c0d      	ldr	r4, [pc, #52]	; (8007d84 <__libc_init_array+0x3c>)
 8007d4e:	1b64      	subs	r4, r4, r5
 8007d50:	10a4      	asrs	r4, r4, #2
 8007d52:	2600      	movs	r6, #0
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	d109      	bne.n	8007d6c <__libc_init_array+0x24>
 8007d58:	4d0b      	ldr	r5, [pc, #44]	; (8007d88 <__libc_init_array+0x40>)
 8007d5a:	4c0c      	ldr	r4, [pc, #48]	; (8007d8c <__libc_init_array+0x44>)
 8007d5c:	f000 fd8c 	bl	8008878 <_init>
 8007d60:	1b64      	subs	r4, r4, r5
 8007d62:	10a4      	asrs	r4, r4, #2
 8007d64:	2600      	movs	r6, #0
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	d105      	bne.n	8007d76 <__libc_init_array+0x2e>
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d70:	4798      	blx	r3
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7ee      	b.n	8007d54 <__libc_init_array+0xc>
 8007d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7a:	4798      	blx	r3
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7f2      	b.n	8007d66 <__libc_init_array+0x1e>
 8007d80:	08008980 	.word	0x08008980
 8007d84:	08008980 	.word	0x08008980
 8007d88:	08008980 	.word	0x08008980
 8007d8c:	08008984 	.word	0x08008984

08007d90 <__retarget_lock_init_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <__retarget_lock_acquire_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <__retarget_lock_release_recursive>:
 8007d94:	4770      	bx	lr
	...

08007d98 <_free_r>:
 8007d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d044      	beq.n	8007e28 <_free_r+0x90>
 8007d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da2:	9001      	str	r0, [sp, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f1a1 0404 	sub.w	r4, r1, #4
 8007daa:	bfb8      	it	lt
 8007dac:	18e4      	addlt	r4, r4, r3
 8007dae:	f7ff fe71 	bl	8007a94 <__malloc_lock>
 8007db2:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <_free_r+0x94>)
 8007db4:	9801      	ldr	r0, [sp, #4]
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	b933      	cbnz	r3, 8007dc8 <_free_r+0x30>
 8007dba:	6063      	str	r3, [r4, #4]
 8007dbc:	6014      	str	r4, [r2, #0]
 8007dbe:	b003      	add	sp, #12
 8007dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc4:	f7ff be6c 	b.w	8007aa0 <__malloc_unlock>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d908      	bls.n	8007dde <_free_r+0x46>
 8007dcc:	6825      	ldr	r5, [r4, #0]
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf01      	itttt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	1949      	addeq	r1, r1, r5
 8007dda:	6021      	streq	r1, [r4, #0]
 8007ddc:	e7ed      	b.n	8007dba <_free_r+0x22>
 8007dde:	461a      	mov	r2, r3
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	b10b      	cbz	r3, 8007de8 <_free_r+0x50>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d9fa      	bls.n	8007dde <_free_r+0x46>
 8007de8:	6811      	ldr	r1, [r2, #0]
 8007dea:	1855      	adds	r5, r2, r1
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d10b      	bne.n	8007e08 <_free_r+0x70>
 8007df0:	6824      	ldr	r4, [r4, #0]
 8007df2:	4421      	add	r1, r4
 8007df4:	1854      	adds	r4, r2, r1
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	d1e0      	bne.n	8007dbe <_free_r+0x26>
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	440c      	add	r4, r1
 8007e04:	6014      	str	r4, [r2, #0]
 8007e06:	e7da      	b.n	8007dbe <_free_r+0x26>
 8007e08:	d902      	bls.n	8007e10 <_free_r+0x78>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	6003      	str	r3, [r0, #0]
 8007e0e:	e7d6      	b.n	8007dbe <_free_r+0x26>
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf04      	itt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	bf04      	itt	eq
 8007e20:	1949      	addeq	r1, r1, r5
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	6054      	str	r4, [r2, #4]
 8007e26:	e7ca      	b.n	8007dbe <_free_r+0x26>
 8007e28:	b003      	add	sp, #12
 8007e2a:	bd30      	pop	{r4, r5, pc}
 8007e2c:	200003c4 	.word	0x200003c4

08007e30 <__sfputc_r>:
 8007e30:	6893      	ldr	r3, [r2, #8]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	b410      	push	{r4}
 8007e38:	6093      	str	r3, [r2, #8]
 8007e3a:	da08      	bge.n	8007e4e <__sfputc_r+0x1e>
 8007e3c:	6994      	ldr	r4, [r2, #24]
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	db01      	blt.n	8007e46 <__sfputc_r+0x16>
 8007e42:	290a      	cmp	r1, #10
 8007e44:	d103      	bne.n	8007e4e <__sfputc_r+0x1e>
 8007e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4a:	f000 bbb6 	b.w	80085ba <__swbuf_r>
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	1c58      	adds	r0, r3, #1
 8007e52:	6010      	str	r0, [r2, #0]
 8007e54:	7019      	strb	r1, [r3, #0]
 8007e56:	4608      	mov	r0, r1
 8007e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <__sfputs_r>:
 8007e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	18d5      	adds	r5, r2, r3
 8007e68:	42ac      	cmp	r4, r5
 8007e6a:	d101      	bne.n	8007e70 <__sfputs_r+0x12>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e007      	b.n	8007e80 <__sfputs_r+0x22>
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	463a      	mov	r2, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7ff ffda 	bl	8007e30 <__sfputc_r>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d1f3      	bne.n	8007e68 <__sfputs_r+0xa>
 8007e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e84 <_vfiprintf_r>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	460d      	mov	r5, r1
 8007e8a:	b09d      	sub	sp, #116	; 0x74
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	4698      	mov	r8, r3
 8007e90:	4606      	mov	r6, r0
 8007e92:	b118      	cbz	r0, 8007e9c <_vfiprintf_r+0x18>
 8007e94:	6a03      	ldr	r3, [r0, #32]
 8007e96:	b90b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x18>
 8007e98:	f7ff fe94 	bl	8007bc4 <__sinit>
 8007e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e9e:	07d9      	lsls	r1, r3, #31
 8007ea0:	d405      	bmi.n	8007eae <_vfiprintf_r+0x2a>
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	059a      	lsls	r2, r3, #22
 8007ea6:	d402      	bmi.n	8007eae <_vfiprintf_r+0x2a>
 8007ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eaa:	f7ff ff72 	bl	8007d92 <__retarget_lock_acquire_recursive>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	071b      	lsls	r3, r3, #28
 8007eb2:	d501      	bpl.n	8007eb8 <_vfiprintf_r+0x34>
 8007eb4:	692b      	ldr	r3, [r5, #16]
 8007eb6:	b99b      	cbnz	r3, 8007ee0 <_vfiprintf_r+0x5c>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 fbba 	bl	8008634 <__swsetup_r>
 8007ec0:	b170      	cbz	r0, 8007ee0 <_vfiprintf_r+0x5c>
 8007ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ec4:	07dc      	lsls	r4, r3, #31
 8007ec6:	d504      	bpl.n	8007ed2 <_vfiprintf_r+0x4e>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	b01d      	add	sp, #116	; 0x74
 8007ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed2:	89ab      	ldrh	r3, [r5, #12]
 8007ed4:	0598      	lsls	r0, r3, #22
 8007ed6:	d4f7      	bmi.n	8007ec8 <_vfiprintf_r+0x44>
 8007ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eda:	f7ff ff5b 	bl	8007d94 <__retarget_lock_release_recursive>
 8007ede:	e7f3      	b.n	8007ec8 <_vfiprintf_r+0x44>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee4:	2320      	movs	r3, #32
 8007ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eee:	2330      	movs	r3, #48	; 0x30
 8007ef0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80080a4 <_vfiprintf_r+0x220>
 8007ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ef8:	f04f 0901 	mov.w	r9, #1
 8007efc:	4623      	mov	r3, r4
 8007efe:	469a      	mov	sl, r3
 8007f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f04:	b10a      	cbz	r2, 8007f0a <_vfiprintf_r+0x86>
 8007f06:	2a25      	cmp	r2, #37	; 0x25
 8007f08:	d1f9      	bne.n	8007efe <_vfiprintf_r+0x7a>
 8007f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f0e:	d00b      	beq.n	8007f28 <_vfiprintf_r+0xa4>
 8007f10:	465b      	mov	r3, fp
 8007f12:	4622      	mov	r2, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ffa1 	bl	8007e5e <__sfputs_r>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f000 80a9 	beq.w	8008074 <_vfiprintf_r+0x1f0>
 8007f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f24:	445a      	add	r2, fp
 8007f26:	9209      	str	r2, [sp, #36]	; 0x24
 8007f28:	f89a 3000 	ldrb.w	r3, [sl]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80a1 	beq.w	8008074 <_vfiprintf_r+0x1f0>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f3c:	f10a 0a01 	add.w	sl, sl, #1
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	9307      	str	r3, [sp, #28]
 8007f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f48:	931a      	str	r3, [sp, #104]	; 0x68
 8007f4a:	4654      	mov	r4, sl
 8007f4c:	2205      	movs	r2, #5
 8007f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f52:	4854      	ldr	r0, [pc, #336]	; (80080a4 <_vfiprintf_r+0x220>)
 8007f54:	f7f8 f964 	bl	8000220 <memchr>
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	b9d8      	cbnz	r0, 8007f94 <_vfiprintf_r+0x110>
 8007f5c:	06d1      	lsls	r1, r2, #27
 8007f5e:	bf44      	itt	mi
 8007f60:	2320      	movmi	r3, #32
 8007f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f66:	0713      	lsls	r3, r2, #28
 8007f68:	bf44      	itt	mi
 8007f6a:	232b      	movmi	r3, #43	; 0x2b
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f70:	f89a 3000 	ldrb.w	r3, [sl]
 8007f74:	2b2a      	cmp	r3, #42	; 0x2a
 8007f76:	d015      	beq.n	8007fa4 <_vfiprintf_r+0x120>
 8007f78:	9a07      	ldr	r2, [sp, #28]
 8007f7a:	4654      	mov	r4, sl
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f04f 0c0a 	mov.w	ip, #10
 8007f82:	4621      	mov	r1, r4
 8007f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f88:	3b30      	subs	r3, #48	; 0x30
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d94d      	bls.n	800802a <_vfiprintf_r+0x1a6>
 8007f8e:	b1b0      	cbz	r0, 8007fbe <_vfiprintf_r+0x13a>
 8007f90:	9207      	str	r2, [sp, #28]
 8007f92:	e014      	b.n	8007fbe <_vfiprintf_r+0x13a>
 8007f94:	eba0 0308 	sub.w	r3, r0, r8
 8007f98:	fa09 f303 	lsl.w	r3, r9, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	46a2      	mov	sl, r4
 8007fa2:	e7d2      	b.n	8007f4a <_vfiprintf_r+0xc6>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	1d19      	adds	r1, r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	9103      	str	r1, [sp, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfbb      	ittet	lt
 8007fb0:	425b      	neglt	r3, r3
 8007fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8007fb6:	9307      	strge	r3, [sp, #28]
 8007fb8:	9307      	strlt	r3, [sp, #28]
 8007fba:	bfb8      	it	lt
 8007fbc:	9204      	strlt	r2, [sp, #16]
 8007fbe:	7823      	ldrb	r3, [r4, #0]
 8007fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8007fc2:	d10c      	bne.n	8007fde <_vfiprintf_r+0x15a>
 8007fc4:	7863      	ldrb	r3, [r4, #1]
 8007fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc8:	d134      	bne.n	8008034 <_vfiprintf_r+0x1b0>
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	1d1a      	adds	r2, r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	9203      	str	r2, [sp, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfb8      	it	lt
 8007fd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fda:	3402      	adds	r4, #2
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80080b4 <_vfiprintf_r+0x230>
 8007fe2:	7821      	ldrb	r1, [r4, #0]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	f7f8 f91a 	bl	8000220 <memchr>
 8007fec:	b138      	cbz	r0, 8007ffe <_vfiprintf_r+0x17a>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	eba0 000a 	sub.w	r0, r0, sl
 8007ff4:	2240      	movs	r2, #64	; 0x40
 8007ff6:	4082      	lsls	r2, r0
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	3401      	adds	r4, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008002:	4829      	ldr	r0, [pc, #164]	; (80080a8 <_vfiprintf_r+0x224>)
 8008004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008008:	2206      	movs	r2, #6
 800800a:	f7f8 f909 	bl	8000220 <memchr>
 800800e:	2800      	cmp	r0, #0
 8008010:	d03f      	beq.n	8008092 <_vfiprintf_r+0x20e>
 8008012:	4b26      	ldr	r3, [pc, #152]	; (80080ac <_vfiprintf_r+0x228>)
 8008014:	bb1b      	cbnz	r3, 800805e <_vfiprintf_r+0x1da>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	3307      	adds	r3, #7
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	3308      	adds	r3, #8
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008024:	443b      	add	r3, r7
 8008026:	9309      	str	r3, [sp, #36]	; 0x24
 8008028:	e768      	b.n	8007efc <_vfiprintf_r+0x78>
 800802a:	fb0c 3202 	mla	r2, ip, r2, r3
 800802e:	460c      	mov	r4, r1
 8008030:	2001      	movs	r0, #1
 8008032:	e7a6      	b.n	8007f82 <_vfiprintf_r+0xfe>
 8008034:	2300      	movs	r3, #0
 8008036:	3401      	adds	r4, #1
 8008038:	9305      	str	r3, [sp, #20]
 800803a:	4619      	mov	r1, r3
 800803c:	f04f 0c0a 	mov.w	ip, #10
 8008040:	4620      	mov	r0, r4
 8008042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008046:	3a30      	subs	r2, #48	; 0x30
 8008048:	2a09      	cmp	r2, #9
 800804a:	d903      	bls.n	8008054 <_vfiprintf_r+0x1d0>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0c6      	beq.n	8007fde <_vfiprintf_r+0x15a>
 8008050:	9105      	str	r1, [sp, #20]
 8008052:	e7c4      	b.n	8007fde <_vfiprintf_r+0x15a>
 8008054:	fb0c 2101 	mla	r1, ip, r1, r2
 8008058:	4604      	mov	r4, r0
 800805a:	2301      	movs	r3, #1
 800805c:	e7f0      	b.n	8008040 <_vfiprintf_r+0x1bc>
 800805e:	ab03      	add	r3, sp, #12
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	462a      	mov	r2, r5
 8008064:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <_vfiprintf_r+0x22c>)
 8008066:	a904      	add	r1, sp, #16
 8008068:	4630      	mov	r0, r6
 800806a:	f3af 8000 	nop.w
 800806e:	4607      	mov	r7, r0
 8008070:	1c78      	adds	r0, r7, #1
 8008072:	d1d6      	bne.n	8008022 <_vfiprintf_r+0x19e>
 8008074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d405      	bmi.n	8008086 <_vfiprintf_r+0x202>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	059a      	lsls	r2, r3, #22
 800807e:	d402      	bmi.n	8008086 <_vfiprintf_r+0x202>
 8008080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008082:	f7ff fe87 	bl	8007d94 <__retarget_lock_release_recursive>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	065b      	lsls	r3, r3, #25
 800808a:	f53f af1d 	bmi.w	8007ec8 <_vfiprintf_r+0x44>
 800808e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008090:	e71c      	b.n	8007ecc <_vfiprintf_r+0x48>
 8008092:	ab03      	add	r3, sp, #12
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	462a      	mov	r2, r5
 8008098:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <_vfiprintf_r+0x22c>)
 800809a:	a904      	add	r1, sp, #16
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f879 	bl	8008194 <_printf_i>
 80080a2:	e7e4      	b.n	800806e <_vfiprintf_r+0x1ea>
 80080a4:	08008944 	.word	0x08008944
 80080a8:	0800894e 	.word	0x0800894e
 80080ac:	00000000 	.word	0x00000000
 80080b0:	08007e5f 	.word	0x08007e5f
 80080b4:	0800894a 	.word	0x0800894a

080080b8 <_printf_common>:
 80080b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	4616      	mov	r6, r2
 80080be:	4699      	mov	r9, r3
 80080c0:	688a      	ldr	r2, [r1, #8]
 80080c2:	690b      	ldr	r3, [r1, #16]
 80080c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	bfb8      	it	lt
 80080cc:	4613      	movlt	r3, r2
 80080ce:	6033      	str	r3, [r6, #0]
 80080d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d4:	4607      	mov	r7, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b10a      	cbz	r2, 80080de <_printf_common+0x26>
 80080da:	3301      	adds	r3, #1
 80080dc:	6033      	str	r3, [r6, #0]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	0699      	lsls	r1, r3, #26
 80080e2:	bf42      	ittt	mi
 80080e4:	6833      	ldrmi	r3, [r6, #0]
 80080e6:	3302      	addmi	r3, #2
 80080e8:	6033      	strmi	r3, [r6, #0]
 80080ea:	6825      	ldr	r5, [r4, #0]
 80080ec:	f015 0506 	ands.w	r5, r5, #6
 80080f0:	d106      	bne.n	8008100 <_printf_common+0x48>
 80080f2:	f104 0a19 	add.w	sl, r4, #25
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	6832      	ldr	r2, [r6, #0]
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	42ab      	cmp	r3, r5
 80080fe:	dc26      	bgt.n	800814e <_printf_common+0x96>
 8008100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008104:	1e13      	subs	r3, r2, #0
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	bf18      	it	ne
 800810a:	2301      	movne	r3, #1
 800810c:	0692      	lsls	r2, r2, #26
 800810e:	d42b      	bmi.n	8008168 <_printf_common+0xb0>
 8008110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008114:	4649      	mov	r1, r9
 8008116:	4638      	mov	r0, r7
 8008118:	47c0      	blx	r8
 800811a:	3001      	adds	r0, #1
 800811c:	d01e      	beq.n	800815c <_printf_common+0xa4>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	6922      	ldr	r2, [r4, #16]
 8008122:	f003 0306 	and.w	r3, r3, #6
 8008126:	2b04      	cmp	r3, #4
 8008128:	bf02      	ittt	eq
 800812a:	68e5      	ldreq	r5, [r4, #12]
 800812c:	6833      	ldreq	r3, [r6, #0]
 800812e:	1aed      	subeq	r5, r5, r3
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	bf0c      	ite	eq
 8008134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008138:	2500      	movne	r5, #0
 800813a:	4293      	cmp	r3, r2
 800813c:	bfc4      	itt	gt
 800813e:	1a9b      	subgt	r3, r3, r2
 8008140:	18ed      	addgt	r5, r5, r3
 8008142:	2600      	movs	r6, #0
 8008144:	341a      	adds	r4, #26
 8008146:	42b5      	cmp	r5, r6
 8008148:	d11a      	bne.n	8008180 <_printf_common+0xc8>
 800814a:	2000      	movs	r0, #0
 800814c:	e008      	b.n	8008160 <_printf_common+0xa8>
 800814e:	2301      	movs	r3, #1
 8008150:	4652      	mov	r2, sl
 8008152:	4649      	mov	r1, r9
 8008154:	4638      	mov	r0, r7
 8008156:	47c0      	blx	r8
 8008158:	3001      	adds	r0, #1
 800815a:	d103      	bne.n	8008164 <_printf_common+0xac>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008164:	3501      	adds	r5, #1
 8008166:	e7c6      	b.n	80080f6 <_printf_common+0x3e>
 8008168:	18e1      	adds	r1, r4, r3
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	2030      	movs	r0, #48	; 0x30
 800816e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008172:	4422      	add	r2, r4
 8008174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800817c:	3302      	adds	r3, #2
 800817e:	e7c7      	b.n	8008110 <_printf_common+0x58>
 8008180:	2301      	movs	r3, #1
 8008182:	4622      	mov	r2, r4
 8008184:	4649      	mov	r1, r9
 8008186:	4638      	mov	r0, r7
 8008188:	47c0      	blx	r8
 800818a:	3001      	adds	r0, #1
 800818c:	d0e6      	beq.n	800815c <_printf_common+0xa4>
 800818e:	3601      	adds	r6, #1
 8008190:	e7d9      	b.n	8008146 <_printf_common+0x8e>
	...

08008194 <_printf_i>:
 8008194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	7e0f      	ldrb	r7, [r1, #24]
 800819a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800819c:	2f78      	cmp	r7, #120	; 0x78
 800819e:	4691      	mov	r9, r2
 80081a0:	4680      	mov	r8, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	469a      	mov	sl, r3
 80081a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081aa:	d807      	bhi.n	80081bc <_printf_i+0x28>
 80081ac:	2f62      	cmp	r7, #98	; 0x62
 80081ae:	d80a      	bhi.n	80081c6 <_printf_i+0x32>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	f000 80d4 	beq.w	800835e <_printf_i+0x1ca>
 80081b6:	2f58      	cmp	r7, #88	; 0x58
 80081b8:	f000 80c0 	beq.w	800833c <_printf_i+0x1a8>
 80081bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081c4:	e03a      	b.n	800823c <_printf_i+0xa8>
 80081c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081ca:	2b15      	cmp	r3, #21
 80081cc:	d8f6      	bhi.n	80081bc <_printf_i+0x28>
 80081ce:	a101      	add	r1, pc, #4	; (adr r1, 80081d4 <_printf_i+0x40>)
 80081d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	08008241 	.word	0x08008241
 80081dc:	080081bd 	.word	0x080081bd
 80081e0:	080081bd 	.word	0x080081bd
 80081e4:	080081bd 	.word	0x080081bd
 80081e8:	080081bd 	.word	0x080081bd
 80081ec:	08008241 	.word	0x08008241
 80081f0:	080081bd 	.word	0x080081bd
 80081f4:	080081bd 	.word	0x080081bd
 80081f8:	080081bd 	.word	0x080081bd
 80081fc:	080081bd 	.word	0x080081bd
 8008200:	08008345 	.word	0x08008345
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080082ff 	.word	0x080082ff
 800820c:	080081bd 	.word	0x080081bd
 8008210:	080081bd 	.word	0x080081bd
 8008214:	08008367 	.word	0x08008367
 8008218:	080081bd 	.word	0x080081bd
 800821c:	0800826d 	.word	0x0800826d
 8008220:	080081bd 	.word	0x080081bd
 8008224:	080081bd 	.word	0x080081bd
 8008228:	08008307 	.word	0x08008307
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	602a      	str	r2, [r5, #0]
 8008234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800823c:	2301      	movs	r3, #1
 800823e:	e09f      	b.n	8008380 <_printf_i+0x1ec>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	0607      	lsls	r7, r0, #24
 8008246:	f103 0104 	add.w	r1, r3, #4
 800824a:	6029      	str	r1, [r5, #0]
 800824c:	d501      	bpl.n	8008252 <_printf_i+0xbe>
 800824e:	681e      	ldr	r6, [r3, #0]
 8008250:	e003      	b.n	800825a <_printf_i+0xc6>
 8008252:	0646      	lsls	r6, r0, #25
 8008254:	d5fb      	bpl.n	800824e <_printf_i+0xba>
 8008256:	f9b3 6000 	ldrsh.w	r6, [r3]
 800825a:	2e00      	cmp	r6, #0
 800825c:	da03      	bge.n	8008266 <_printf_i+0xd2>
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	4276      	negs	r6, r6
 8008262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008266:	485a      	ldr	r0, [pc, #360]	; (80083d0 <_printf_i+0x23c>)
 8008268:	230a      	movs	r3, #10
 800826a:	e012      	b.n	8008292 <_printf_i+0xfe>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	1d19      	adds	r1, r3, #4
 8008272:	6029      	str	r1, [r5, #0]
 8008274:	0605      	lsls	r5, r0, #24
 8008276:	d501      	bpl.n	800827c <_printf_i+0xe8>
 8008278:	681e      	ldr	r6, [r3, #0]
 800827a:	e002      	b.n	8008282 <_printf_i+0xee>
 800827c:	0641      	lsls	r1, r0, #25
 800827e:	d5fb      	bpl.n	8008278 <_printf_i+0xe4>
 8008280:	881e      	ldrh	r6, [r3, #0]
 8008282:	4853      	ldr	r0, [pc, #332]	; (80083d0 <_printf_i+0x23c>)
 8008284:	2f6f      	cmp	r7, #111	; 0x6f
 8008286:	bf0c      	ite	eq
 8008288:	2308      	moveq	r3, #8
 800828a:	230a      	movne	r3, #10
 800828c:	2100      	movs	r1, #0
 800828e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008292:	6865      	ldr	r5, [r4, #4]
 8008294:	60a5      	str	r5, [r4, #8]
 8008296:	2d00      	cmp	r5, #0
 8008298:	bfa2      	ittt	ge
 800829a:	6821      	ldrge	r1, [r4, #0]
 800829c:	f021 0104 	bicge.w	r1, r1, #4
 80082a0:	6021      	strge	r1, [r4, #0]
 80082a2:	b90e      	cbnz	r6, 80082a8 <_printf_i+0x114>
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	d04b      	beq.n	8008340 <_printf_i+0x1ac>
 80082a8:	4615      	mov	r5, r2
 80082aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80082ae:	fb03 6711 	mls	r7, r3, r1, r6
 80082b2:	5dc7      	ldrb	r7, [r0, r7]
 80082b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082b8:	4637      	mov	r7, r6
 80082ba:	42bb      	cmp	r3, r7
 80082bc:	460e      	mov	r6, r1
 80082be:	d9f4      	bls.n	80082aa <_printf_i+0x116>
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d10b      	bne.n	80082dc <_printf_i+0x148>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	07de      	lsls	r6, r3, #31
 80082c8:	d508      	bpl.n	80082dc <_printf_i+0x148>
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	6861      	ldr	r1, [r4, #4]
 80082ce:	4299      	cmp	r1, r3
 80082d0:	bfde      	ittt	le
 80082d2:	2330      	movle	r3, #48	; 0x30
 80082d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082dc:	1b52      	subs	r2, r2, r5
 80082de:	6122      	str	r2, [r4, #16]
 80082e0:	f8cd a000 	str.w	sl, [sp]
 80082e4:	464b      	mov	r3, r9
 80082e6:	aa03      	add	r2, sp, #12
 80082e8:	4621      	mov	r1, r4
 80082ea:	4640      	mov	r0, r8
 80082ec:	f7ff fee4 	bl	80080b8 <_printf_common>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d14a      	bne.n	800838a <_printf_i+0x1f6>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f8:	b004      	add	sp, #16
 80082fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	f043 0320 	orr.w	r3, r3, #32
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	4833      	ldr	r0, [pc, #204]	; (80083d4 <_printf_i+0x240>)
 8008308:	2778      	movs	r7, #120	; 0x78
 800830a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	6829      	ldr	r1, [r5, #0]
 8008312:	061f      	lsls	r7, r3, #24
 8008314:	f851 6b04 	ldr.w	r6, [r1], #4
 8008318:	d402      	bmi.n	8008320 <_printf_i+0x18c>
 800831a:	065f      	lsls	r7, r3, #25
 800831c:	bf48      	it	mi
 800831e:	b2b6      	uxthmi	r6, r6
 8008320:	07df      	lsls	r7, r3, #31
 8008322:	bf48      	it	mi
 8008324:	f043 0320 	orrmi.w	r3, r3, #32
 8008328:	6029      	str	r1, [r5, #0]
 800832a:	bf48      	it	mi
 800832c:	6023      	strmi	r3, [r4, #0]
 800832e:	b91e      	cbnz	r6, 8008338 <_printf_i+0x1a4>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	f023 0320 	bic.w	r3, r3, #32
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	2310      	movs	r3, #16
 800833a:	e7a7      	b.n	800828c <_printf_i+0xf8>
 800833c:	4824      	ldr	r0, [pc, #144]	; (80083d0 <_printf_i+0x23c>)
 800833e:	e7e4      	b.n	800830a <_printf_i+0x176>
 8008340:	4615      	mov	r5, r2
 8008342:	e7bd      	b.n	80082c0 <_printf_i+0x12c>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	6826      	ldr	r6, [r4, #0]
 8008348:	6961      	ldr	r1, [r4, #20]
 800834a:	1d18      	adds	r0, r3, #4
 800834c:	6028      	str	r0, [r5, #0]
 800834e:	0635      	lsls	r5, r6, #24
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	d501      	bpl.n	8008358 <_printf_i+0x1c4>
 8008354:	6019      	str	r1, [r3, #0]
 8008356:	e002      	b.n	800835e <_printf_i+0x1ca>
 8008358:	0670      	lsls	r0, r6, #25
 800835a:	d5fb      	bpl.n	8008354 <_printf_i+0x1c0>
 800835c:	8019      	strh	r1, [r3, #0]
 800835e:	2300      	movs	r3, #0
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	4615      	mov	r5, r2
 8008364:	e7bc      	b.n	80082e0 <_printf_i+0x14c>
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	602a      	str	r2, [r5, #0]
 800836c:	681d      	ldr	r5, [r3, #0]
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	2100      	movs	r1, #0
 8008372:	4628      	mov	r0, r5
 8008374:	f7f7 ff54 	bl	8000220 <memchr>
 8008378:	b108      	cbz	r0, 800837e <_printf_i+0x1ea>
 800837a:	1b40      	subs	r0, r0, r5
 800837c:	6060      	str	r0, [r4, #4]
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	2300      	movs	r3, #0
 8008384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008388:	e7aa      	b.n	80082e0 <_printf_i+0x14c>
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	462a      	mov	r2, r5
 800838e:	4649      	mov	r1, r9
 8008390:	4640      	mov	r0, r8
 8008392:	47d0      	blx	sl
 8008394:	3001      	adds	r0, #1
 8008396:	d0ad      	beq.n	80082f4 <_printf_i+0x160>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	079b      	lsls	r3, r3, #30
 800839c:	d413      	bmi.n	80083c6 <_printf_i+0x232>
 800839e:	68e0      	ldr	r0, [r4, #12]
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	4298      	cmp	r0, r3
 80083a4:	bfb8      	it	lt
 80083a6:	4618      	movlt	r0, r3
 80083a8:	e7a6      	b.n	80082f8 <_printf_i+0x164>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4632      	mov	r2, r6
 80083ae:	4649      	mov	r1, r9
 80083b0:	4640      	mov	r0, r8
 80083b2:	47d0      	blx	sl
 80083b4:	3001      	adds	r0, #1
 80083b6:	d09d      	beq.n	80082f4 <_printf_i+0x160>
 80083b8:	3501      	adds	r5, #1
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	9903      	ldr	r1, [sp, #12]
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dcf2      	bgt.n	80083aa <_printf_i+0x216>
 80083c4:	e7eb      	b.n	800839e <_printf_i+0x20a>
 80083c6:	2500      	movs	r5, #0
 80083c8:	f104 0619 	add.w	r6, r4, #25
 80083cc:	e7f5      	b.n	80083ba <_printf_i+0x226>
 80083ce:	bf00      	nop
 80083d0:	08008955 	.word	0x08008955
 80083d4:	08008966 	.word	0x08008966

080083d8 <__sflush_r>:
 80083d8:	898a      	ldrh	r2, [r1, #12]
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	0710      	lsls	r0, r2, #28
 80083e2:	460c      	mov	r4, r1
 80083e4:	d458      	bmi.n	8008498 <__sflush_r+0xc0>
 80083e6:	684b      	ldr	r3, [r1, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc05      	bgt.n	80083f8 <__sflush_r+0x20>
 80083ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x20>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0f9      	beq.n	80083f2 <__sflush_r+0x1a>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	6a21      	ldr	r1, [r4, #32]
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	d032      	beq.n	8008472 <__sflush_r+0x9a>
 800840c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	075a      	lsls	r2, r3, #29
 8008412:	d505      	bpl.n	8008420 <__sflush_r+0x48>
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	1ac0      	subs	r0, r0, r3
 8008418:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800841a:	b10b      	cbz	r3, 8008420 <__sflush_r+0x48>
 800841c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841e:	1ac0      	subs	r0, r0, r3
 8008420:	2300      	movs	r3, #0
 8008422:	4602      	mov	r2, r0
 8008424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008426:	6a21      	ldr	r1, [r4, #32]
 8008428:	4628      	mov	r0, r5
 800842a:	47b0      	blx	r6
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	d106      	bne.n	8008440 <__sflush_r+0x68>
 8008432:	6829      	ldr	r1, [r5, #0]
 8008434:	291d      	cmp	r1, #29
 8008436:	d82b      	bhi.n	8008490 <__sflush_r+0xb8>
 8008438:	4a29      	ldr	r2, [pc, #164]	; (80084e0 <__sflush_r+0x108>)
 800843a:	410a      	asrs	r2, r1
 800843c:	07d6      	lsls	r6, r2, #31
 800843e:	d427      	bmi.n	8008490 <__sflush_r+0xb8>
 8008440:	2200      	movs	r2, #0
 8008442:	6062      	str	r2, [r4, #4]
 8008444:	04d9      	lsls	r1, r3, #19
 8008446:	6922      	ldr	r2, [r4, #16]
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	d504      	bpl.n	8008456 <__sflush_r+0x7e>
 800844c:	1c42      	adds	r2, r0, #1
 800844e:	d101      	bne.n	8008454 <__sflush_r+0x7c>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b903      	cbnz	r3, 8008456 <__sflush_r+0x7e>
 8008454:	6560      	str	r0, [r4, #84]	; 0x54
 8008456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008458:	602f      	str	r7, [r5, #0]
 800845a:	2900      	cmp	r1, #0
 800845c:	d0c9      	beq.n	80083f2 <__sflush_r+0x1a>
 800845e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008462:	4299      	cmp	r1, r3
 8008464:	d002      	beq.n	800846c <__sflush_r+0x94>
 8008466:	4628      	mov	r0, r5
 8008468:	f7ff fc96 	bl	8007d98 <_free_r>
 800846c:	2000      	movs	r0, #0
 800846e:	6360      	str	r0, [r4, #52]	; 0x34
 8008470:	e7c0      	b.n	80083f4 <__sflush_r+0x1c>
 8008472:	2301      	movs	r3, #1
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	1c41      	adds	r1, r0, #1
 800847a:	d1c8      	bne.n	800840e <__sflush_r+0x36>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c5      	beq.n	800840e <__sflush_r+0x36>
 8008482:	2b1d      	cmp	r3, #29
 8008484:	d001      	beq.n	800848a <__sflush_r+0xb2>
 8008486:	2b16      	cmp	r3, #22
 8008488:	d101      	bne.n	800848e <__sflush_r+0xb6>
 800848a:	602f      	str	r7, [r5, #0]
 800848c:	e7b1      	b.n	80083f2 <__sflush_r+0x1a>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7ad      	b.n	80083f4 <__sflush_r+0x1c>
 8008498:	690f      	ldr	r7, [r1, #16]
 800849a:	2f00      	cmp	r7, #0
 800849c:	d0a9      	beq.n	80083f2 <__sflush_r+0x1a>
 800849e:	0793      	lsls	r3, r2, #30
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	600f      	str	r7, [r1, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2300      	movne	r3, #0
 80084ac:	eba6 0807 	sub.w	r8, r6, r7
 80084b0:	608b      	str	r3, [r1, #8]
 80084b2:	f1b8 0f00 	cmp.w	r8, #0
 80084b6:	dd9c      	ble.n	80083f2 <__sflush_r+0x1a>
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dc06      	bgt.n	80084d6 <__sflush_r+0xfe>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d4:	e78e      	b.n	80083f4 <__sflush_r+0x1c>
 80084d6:	4407      	add	r7, r0
 80084d8:	eba8 0800 	sub.w	r8, r8, r0
 80084dc:	e7e9      	b.n	80084b2 <__sflush_r+0xda>
 80084de:	bf00      	nop
 80084e0:	dfbffffe 	.word	0xdfbffffe

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6a03      	ldr	r3, [r0, #32]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f7ff fb63 	bl	8007bc4 <__sinit>
 80084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f3      	beq.n	80084ee <_fflush_r+0xa>
 8008506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008508:	07d0      	lsls	r0, r2, #31
 800850a:	d404      	bmi.n	8008516 <_fflush_r+0x32>
 800850c:	0599      	lsls	r1, r3, #22
 800850e:	d402      	bmi.n	8008516 <_fflush_r+0x32>
 8008510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008512:	f7ff fc3e 	bl	8007d92 <__retarget_lock_acquire_recursive>
 8008516:	4628      	mov	r0, r5
 8008518:	4621      	mov	r1, r4
 800851a:	f7ff ff5d 	bl	80083d8 <__sflush_r>
 800851e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008520:	07da      	lsls	r2, r3, #31
 8008522:	4605      	mov	r5, r0
 8008524:	d4e4      	bmi.n	80084f0 <_fflush_r+0xc>
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	059b      	lsls	r3, r3, #22
 800852a:	d4e1      	bmi.n	80084f0 <_fflush_r+0xc>
 800852c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800852e:	f7ff fc31 	bl	8007d94 <__retarget_lock_release_recursive>
 8008532:	e7dd      	b.n	80084f0 <_fflush_r+0xc>

08008534 <__sread>:
 8008534:	b510      	push	{r4, lr}
 8008536:	460c      	mov	r4, r1
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 f978 	bl	8008830 <_read_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	bfab      	itete	ge
 8008544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008546:	89a3      	ldrhlt	r3, [r4, #12]
 8008548:	181b      	addge	r3, r3, r0
 800854a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800854e:	bfac      	ite	ge
 8008550:	6563      	strge	r3, [r4, #84]	; 0x54
 8008552:	81a3      	strhlt	r3, [r4, #12]
 8008554:	bd10      	pop	{r4, pc}

08008556 <__swrite>:
 8008556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855a:	461f      	mov	r7, r3
 800855c:	898b      	ldrh	r3, [r1, #12]
 800855e:	05db      	lsls	r3, r3, #23
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4616      	mov	r6, r2
 8008566:	d505      	bpl.n	8008574 <__swrite+0x1e>
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	2302      	movs	r3, #2
 800856e:	2200      	movs	r2, #0
 8008570:	f000 f94c 	bl	800880c <_lseek_r>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	4632      	mov	r2, r6
 8008582:	463b      	mov	r3, r7
 8008584:	4628      	mov	r0, r5
 8008586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	f000 b963 	b.w	8008854 <_write_r>

0800858e <__sseek>:
 800858e:	b510      	push	{r4, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008596:	f000 f939 	bl	800880c <_lseek_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	bf15      	itete	ne
 80085a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80085a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085aa:	81a3      	strheq	r3, [r4, #12]
 80085ac:	bf18      	it	ne
 80085ae:	81a3      	strhne	r3, [r4, #12]
 80085b0:	bd10      	pop	{r4, pc}

080085b2 <__sclose>:
 80085b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b6:	f000 b8f7 	b.w	80087a8 <_close_r>

080085ba <__swbuf_r>:
 80085ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085bc:	460e      	mov	r6, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	4605      	mov	r5, r0
 80085c2:	b118      	cbz	r0, 80085cc <__swbuf_r+0x12>
 80085c4:	6a03      	ldr	r3, [r0, #32]
 80085c6:	b90b      	cbnz	r3, 80085cc <__swbuf_r+0x12>
 80085c8:	f7ff fafc 	bl	8007bc4 <__sinit>
 80085cc:	69a3      	ldr	r3, [r4, #24]
 80085ce:	60a3      	str	r3, [r4, #8]
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	071a      	lsls	r2, r3, #28
 80085d4:	d525      	bpl.n	8008622 <__swbuf_r+0x68>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	b31b      	cbz	r3, 8008622 <__swbuf_r+0x68>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	6922      	ldr	r2, [r4, #16]
 80085de:	1a98      	subs	r0, r3, r2
 80085e0:	6963      	ldr	r3, [r4, #20]
 80085e2:	b2f6      	uxtb	r6, r6
 80085e4:	4283      	cmp	r3, r0
 80085e6:	4637      	mov	r7, r6
 80085e8:	dc04      	bgt.n	80085f4 <__swbuf_r+0x3a>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff ff79 	bl	80084e4 <_fflush_r>
 80085f2:	b9e0      	cbnz	r0, 800862e <__swbuf_r+0x74>
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	701e      	strb	r6, [r3, #0]
 8008602:	6962      	ldr	r2, [r4, #20]
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	429a      	cmp	r2, r3
 8008608:	d004      	beq.n	8008614 <__swbuf_r+0x5a>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	07db      	lsls	r3, r3, #31
 800860e:	d506      	bpl.n	800861e <__swbuf_r+0x64>
 8008610:	2e0a      	cmp	r6, #10
 8008612:	d104      	bne.n	800861e <__swbuf_r+0x64>
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f7ff ff64 	bl	80084e4 <_fflush_r>
 800861c:	b938      	cbnz	r0, 800862e <__swbuf_r+0x74>
 800861e:	4638      	mov	r0, r7
 8008620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008622:	4621      	mov	r1, r4
 8008624:	4628      	mov	r0, r5
 8008626:	f000 f805 	bl	8008634 <__swsetup_r>
 800862a:	2800      	cmp	r0, #0
 800862c:	d0d5      	beq.n	80085da <__swbuf_r+0x20>
 800862e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008632:	e7f4      	b.n	800861e <__swbuf_r+0x64>

08008634 <__swsetup_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <__swsetup_r+0xac>)
 8008638:	4605      	mov	r5, r0
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	460c      	mov	r4, r1
 800863e:	b118      	cbz	r0, 8008648 <__swsetup_r+0x14>
 8008640:	6a03      	ldr	r3, [r0, #32]
 8008642:	b90b      	cbnz	r3, 8008648 <__swsetup_r+0x14>
 8008644:	f7ff fabe 	bl	8007bc4 <__sinit>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800864e:	0718      	lsls	r0, r3, #28
 8008650:	d422      	bmi.n	8008698 <__swsetup_r+0x64>
 8008652:	06d9      	lsls	r1, r3, #27
 8008654:	d407      	bmi.n	8008666 <__swsetup_r+0x32>
 8008656:	2309      	movs	r3, #9
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008664:	e034      	b.n	80086d0 <__swsetup_r+0x9c>
 8008666:	0758      	lsls	r0, r3, #29
 8008668:	d512      	bpl.n	8008690 <__swsetup_r+0x5c>
 800866a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800866c:	b141      	cbz	r1, 8008680 <__swsetup_r+0x4c>
 800866e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008672:	4299      	cmp	r1, r3
 8008674:	d002      	beq.n	800867c <__swsetup_r+0x48>
 8008676:	4628      	mov	r0, r5
 8008678:	f7ff fb8e 	bl	8007d98 <_free_r>
 800867c:	2300      	movs	r3, #0
 800867e:	6363      	str	r3, [r4, #52]	; 0x34
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	2300      	movs	r3, #0
 800868a:	6063      	str	r3, [r4, #4]
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f043 0308 	orr.w	r3, r3, #8
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	b94b      	cbnz	r3, 80086b0 <__swsetup_r+0x7c>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a6:	d003      	beq.n	80086b0 <__swsetup_r+0x7c>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f840 	bl	8008730 <__smakebuf_r>
 80086b0:	89a0      	ldrh	r0, [r4, #12]
 80086b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086b6:	f010 0301 	ands.w	r3, r0, #1
 80086ba:	d00a      	beq.n	80086d2 <__swsetup_r+0x9e>
 80086bc:	2300      	movs	r3, #0
 80086be:	60a3      	str	r3, [r4, #8]
 80086c0:	6963      	ldr	r3, [r4, #20]
 80086c2:	425b      	negs	r3, r3
 80086c4:	61a3      	str	r3, [r4, #24]
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	b943      	cbnz	r3, 80086dc <__swsetup_r+0xa8>
 80086ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086ce:	d1c4      	bne.n	800865a <__swsetup_r+0x26>
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	0781      	lsls	r1, r0, #30
 80086d4:	bf58      	it	pl
 80086d6:	6963      	ldrpl	r3, [r4, #20]
 80086d8:	60a3      	str	r3, [r4, #8]
 80086da:	e7f4      	b.n	80086c6 <__swsetup_r+0x92>
 80086dc:	2000      	movs	r0, #0
 80086de:	e7f7      	b.n	80086d0 <__swsetup_r+0x9c>
 80086e0:	20000074 	.word	0x20000074

080086e4 <__swhatbuf_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	460c      	mov	r4, r1
 80086e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ec:	2900      	cmp	r1, #0
 80086ee:	b096      	sub	sp, #88	; 0x58
 80086f0:	4615      	mov	r5, r2
 80086f2:	461e      	mov	r6, r3
 80086f4:	da0d      	bge.n	8008712 <__swhatbuf_r+0x2e>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086fc:	f04f 0100 	mov.w	r1, #0
 8008700:	bf0c      	ite	eq
 8008702:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008706:	2340      	movne	r3, #64	; 0x40
 8008708:	2000      	movs	r0, #0
 800870a:	6031      	str	r1, [r6, #0]
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	b016      	add	sp, #88	; 0x58
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	466a      	mov	r2, sp
 8008714:	f000 f858 	bl	80087c8 <_fstat_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	dbec      	blt.n	80086f6 <__swhatbuf_r+0x12>
 800871c:	9901      	ldr	r1, [sp, #4]
 800871e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008722:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008726:	4259      	negs	r1, r3
 8008728:	4159      	adcs	r1, r3
 800872a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800872e:	e7eb      	b.n	8008708 <__swhatbuf_r+0x24>

08008730 <__smakebuf_r>:
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008734:	079d      	lsls	r5, r3, #30
 8008736:	4606      	mov	r6, r0
 8008738:	460c      	mov	r4, r1
 800873a:	d507      	bpl.n	800874c <__smakebuf_r+0x1c>
 800873c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	2301      	movs	r3, #1
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	b002      	add	sp, #8
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	ab01      	add	r3, sp, #4
 800874e:	466a      	mov	r2, sp
 8008750:	f7ff ffc8 	bl	80086e4 <__swhatbuf_r>
 8008754:	9900      	ldr	r1, [sp, #0]
 8008756:	4605      	mov	r5, r0
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff f91b 	bl	8007994 <_malloc_r>
 800875e:	b948      	cbnz	r0, 8008774 <__smakebuf_r+0x44>
 8008760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008764:	059a      	lsls	r2, r3, #22
 8008766:	d4ef      	bmi.n	8008748 <__smakebuf_r+0x18>
 8008768:	f023 0303 	bic.w	r3, r3, #3
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	e7e3      	b.n	800873c <__smakebuf_r+0xc>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	6020      	str	r0, [r4, #0]
 8008778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	9b00      	ldr	r3, [sp, #0]
 8008780:	6163      	str	r3, [r4, #20]
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	6120      	str	r0, [r4, #16]
 8008786:	b15b      	cbz	r3, 80087a0 <__smakebuf_r+0x70>
 8008788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878c:	4630      	mov	r0, r6
 800878e:	f000 f82d 	bl	80087ec <_isatty_r>
 8008792:	b128      	cbz	r0, 80087a0 <__smakebuf_r+0x70>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	431d      	orrs	r5, r3
 80087a4:	81a5      	strh	r5, [r4, #12]
 80087a6:	e7cf      	b.n	8008748 <__smakebuf_r+0x18>

080087a8 <_close_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d06      	ldr	r5, [pc, #24]	; (80087c4 <_close_r+0x1c>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	f7f9 fc93 	bl	80020de <_close>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_close_r+0x1a>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_close_r+0x1a>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	2000050c 	.word	0x2000050c

080087c8 <_fstat_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_fstat_r+0x20>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f7f9 fc8e 	bl	80020f6 <_fstat>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d102      	bne.n	80087e4 <_fstat_r+0x1c>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b103      	cbz	r3, 80087e4 <_fstat_r+0x1c>
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	2000050c 	.word	0x2000050c

080087ec <_isatty_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_isatty_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f9 fc8d 	bl	8002116 <_isatty>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_isatty_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_isatty_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	2000050c 	.word	0x2000050c

0800880c <_lseek_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_lseek_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f9 fc86 	bl	800212c <_lseek>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_lseek_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_lseek_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	2000050c 	.word	0x2000050c

08008830 <_read_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_read_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7f9 fc30 	bl	80020a4 <_read>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_read_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_read_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	2000050c 	.word	0x2000050c

08008854 <_write_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_write_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7f8 fe78 	bl	8001558 <_write>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_write_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_write_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	2000050c 	.word	0x2000050c

08008878 <_init>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr

08008884 <_fini>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr
