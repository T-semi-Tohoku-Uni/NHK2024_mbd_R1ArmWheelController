
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008c00  08008c00  00018c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800909c  0800909c  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a4  080090a4  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  080090ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000250  080092f8  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  080092f8  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d7b  00000000  00000000  000202bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f6  00000000  00000000  0003603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f47  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027022  00000000  00000000  0003ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b02  00000000  00000000  00061d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010469b  00000000  00000000  00077843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064c8  00000000  00000000  0017bee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001823a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008be8 	.word	0x08008be8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08008be8 	.word	0x08008be8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <pid_init>:
    PID *pid,
    double control_cycle,
    double kp, float kd, float ki,
    double setpoint,
    double integral_min, double integral_max
) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f9c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000fa0:	ed87 1b08 	vstr	d1, [r7, #32]
 8000fa4:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8000fa8:	edc7 2a07 	vstr	s5, [r7, #28]
 8000fac:	ed87 3b04 	vstr	d3, [r7, #16]
 8000fb0:	ed87 4b02 	vstr	d4, [r7, #8]
 8000fb4:	ed87 5b00 	vstr	d5, [r7]
    pid -> control_cycle = control_cycle;
 8000fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fbe:	e9c1 2300 	strd	r2, r3, [r1]
    pid -> kp = kp;
 8000fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid -> kd = kd;
 8000fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fce:	f7ff fae3 	bl	8000598 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid -> ki = ki;
 8000fdc:	69f8      	ldr	r0, [r7, #28]
 8000fde:	f7ff fadb 	bl	8000598 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fe8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid -> setpoint = setpoint;
 8000fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral_max = integral_max;
 8000ff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid -> integral_min = integral_min;
 8001000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001006:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid -> integral = 0;
 800100a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0;
 8001018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <pid_compute>:

double pid_compute(
    PID *pid,
    double input
) {
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	ed87 0b00 	vstr	d0, [r7]
    double error = pid -> setpoint - input;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001044:	f7ff f948 	bl	80002d8 <__aeabi_dsub>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid -> integral += error * pid -> control_cycle;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001060:	f7ff faf2 	bl	8000648 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f936 	bl	80002dc <__adddf3>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    // アンチワインドアップ
    if (pid -> integral > pid -> integral_max) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001086:	f7ff fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <pid_compute+0x70>
        pid -> integral = pid -> integral_max;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800109c:	e010      	b.n	80010c0 <pid_compute+0x92>
    } else if (pid -> integral < pid -> integral_min) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010aa:	f7ff fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <pid_compute+0x92>
        pid -> integral = pid -> integral_min;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    double derivative = (error - pid->last_error) / pid -> control_cycle;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ca:	f7ff f905 	bl	80002d8 <__aeabi_dsub>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbde 	bl	800089c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // PID出力の計算
    double output = (pid -> kp * error) + (pid -> ki * pid -> integral) + (pid -> kd * derivative);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f2:	f7ff faa9 	bl	8000648 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800110a:	f7ff fa9d 	bl	8000648 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f8e1 	bl	80002dc <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4614      	mov	r4, r2
 8001120:	461d      	mov	r5, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112c:	f7ff fa8c 	bl	8000648 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8d0 	bl	80002dc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // 更新
    pid -> last_error = error;
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800114a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return output;
 800114e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001152:	ec43 2b17 	vmov	d7, r2, r3
}
 8001156:	eeb0 0a47 	vmov.f32	s0, s14
 800115a:	eef0 0a67 	vmov.f32	s1, s15
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bdb0      	pop	{r4, r5, r7, pc}

08001164 <pid_reset_setpoint>:

void pid_reset_setpoint(
    PID *pid,
    double setpoint
) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	ed87 0b00 	vstr	d0, [r7]
    pid -> setpoint = setpoint;
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001176:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral = 0; // TODO: check if this is necessary
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0; // TODO: check if this is necessary
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <int32_t_pid_compute>:

int int32_t_pid_compute(
    PID *pid,
    double input
) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	ed87 0b00 	vstr	d0, [r7]
    return (int)pid_compute(pid, input);
 80011ae:	ed97 0b00 	vldr	d0, [r7]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff3b 	bl	800102e <pid_compute>
 80011b8:	ec53 2b10 	vmov	r2, r3, d0
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcf2 	bl	8000ba8 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <ResetToHomePosition>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* --- アームの原点を取るための関数たち --- */
void ResetToHomePosition() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  // 実行前の初期化
  // PIDの制御を一旦止める
  HAL_TIM_Base_Stop_IT(&htim6);
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <ResetToHomePosition+0xc0>)
 80011d8:	f003 fdaa 	bl	8004d30 <HAL_TIM_Base_Stop_IT>
  // MotorStateの初期化
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e014      	b.n	800120c <ResetToHomePosition+0x3c>
      arm_motor[arm_index].pos = 0;
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <ResetToHomePosition+0xc4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f103 0108 	add.w	r1, r3, #8
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
      arm_motor[arm_index].vel = 0;
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <ResetToHomePosition+0xc4>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	dde7      	ble.n	80011e2 <ResetToHomePosition+0x12>
  }
  // それぞれのスイッチの変数を全てfalseにする
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	e007      	b.n	8001228 <ResetToHomePosition+0x58>
      isPushedRestHomePositionButton[arm_index] = false;
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <ResetToHomePosition+0xc8>)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	ddf4      	ble.n	8001218 <ResetToHomePosition+0x48>
  /*
   * アームをリミットスイッチまで動かす
   * スイッチが押されたら停止する
   * タイマーの切り忘れがないように注意
   */
  HAL_TIM_Base_Start_IT(&htim7);
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <ResetToHomePosition+0xcc>)
 8001230:	f003 fd06 	bl	8004c40 <HAL_TIM_Base_Start_IT>

  // 全部がスイッチにタッチするまで待つ
  printf("while\r\n");
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <ResetToHomePosition+0xd0>)
 8001236:	f005 fdef 	bl	8006e18 <puts>
  while (
 800123a:	bf00      	nop
      !isPushedRestHomePositionButton[0] ||
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <ResetToHomePosition+0xc8>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
      !isPushedRestHomePositionButton[2] ||
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f8      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[1] ||
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <ResetToHomePosition+0xc8>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[0] ||
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f1      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[2] ||
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <ResetToHomePosition+0xc8>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ea      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[3]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <ResetToHomePosition+0xc8>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[2] ||
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e3      	bne.n	800123c <ResetToHomePosition+0x6c>
  ) {

  }

  printf("Complete\r\n");
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <ResetToHomePosition+0xd4>)
 8001276:	f005 fdcf 	bl	8006e18 <puts>

  // PIDの制御を再開
  // 原点初期化用のタイマーを停止して、PIDを再開する
  HAL_TIM_Base_Stop_IT(&htim7);
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <ResetToHomePosition+0xcc>)
 800127c:	f003 fd58 	bl	8004d30 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <ResetToHomePosition+0xc0>)
 8001282:	f003 fcdd 	bl	8004c40 <HAL_TIM_Base_Start_IT>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003d8 	.word	0x200003d8
 8001294:	20000558 	.word	0x20000558
 8001298:	200005ac 	.word	0x200005ac
 800129c:	20000424 	.word	0x20000424
 80012a0:	08008c00 	.word	0x08008c00
 80012a4:	08008c08 	.word	0x08008c08

080012a8 <HAL_GPIO_EXTI_Callback>:

/*
 * 原点調節用のスイッチの割り込み関数
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Arm0Switch_Pin && !isHolPushedFlagForPreventChattering[0])
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b80      	cmp	r3, #128	; 0x80
 80012b6:	d114      	bne.n	80012e2 <HAL_GPIO_EXTI_Callback+0x3a>
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_EXTI_Callback+0x3a>
  {
      printf("Arm 0 initialized\r\n");
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <HAL_GPIO_EXTI_Callback+0xd8>)
 80012c8:	f005 fda6 	bl	8006e18 <puts>
      InitMotorState(0); // motorStateを再初期化する
 80012cc:	2000      	movs	r0, #0
 80012ce:	f000 f861 	bl	8001394 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 80012d2:	f000 f8b7 	bl	8001444 <setMotorVel>
      isPushedRestHomePositionButton[0] = true;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_GPIO_EXTI_Callback+0xdc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
      isHolPushedFlagForPreventChattering[0] = true; // チャタリング防止用
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
  }

  if (GPIO_Pin == Arm1Switch_Pin && !isHolPushedFlagForPreventChattering[1])
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	2b40      	cmp	r3, #64	; 0x40
 80012e6:	d114      	bne.n	8001312 <HAL_GPIO_EXTI_Callback+0x6a>
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	f083 0301 	eor.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_EXTI_Callback+0x6a>
  {
//      printf("[Initialize Position]: ARM 1\r\n");
      printf("Arm 1 initialized\r\n");
 80012f6:	4824      	ldr	r0, [pc, #144]	; (8001388 <HAL_GPIO_EXTI_Callback+0xe0>)
 80012f8:	f005 fd8e 	bl	8006e18 <puts>
      InitMotorState(1); // motorStateを再初期化する
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 f849 	bl	8001394 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001302:	f000 f89f 	bl	8001444 <setMotorVel>
      isPushedRestHomePositionButton[1] = true;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001308:	2201      	movs	r2, #1
 800130a:	705a      	strb	r2, [r3, #1]
      isHolPushedFlagForPreventChattering[1] = true; // チャタリング防止用
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 800130e:	2201      	movs	r2, #1
 8001310:	705a      	strb	r2, [r3, #1]
  }

  if (GPIO_Pin == Arm2Switch_Pin && !isHolPushedFlagForPreventChattering[2])
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d114      	bne.n	8001342 <HAL_GPIO_EXTI_Callback+0x9a>
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_EXTI_Callback+0x9a>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      printf("Arm 2 initialized\r\n");
 8001326:	4819      	ldr	r0, [pc, #100]	; (800138c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001328:	f005 fd76 	bl	8006e18 <puts>
      InitMotorState(2); // motorStateを再初期化する
 800132c:	2002      	movs	r0, #2
 800132e:	f000 f831 	bl	8001394 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001332:	f000 f887 	bl	8001444 <setMotorVel>
      isPushedRestHomePositionButton[2] = true;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001338:	2201      	movs	r2, #1
 800133a:	709a      	strb	r2, [r3, #2]
      isHolPushedFlagForPreventChattering[2] = true; // チャタリング防止用
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 800133e:	2201      	movs	r2, #1
 8001340:	709a      	strb	r2, [r3, #2]
  }

  if (GPIO_Pin == Arm3Switch_Pin && !isHolPushedFlagForPreventChattering[3])
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d114      	bne.n	8001372 <HAL_GPIO_EXTI_Callback+0xca>
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 800134a:	78db      	ldrb	r3, [r3, #3]
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_EXTI_Callback+0xca>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      printf("Arm 3 initialized\r\n");
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001358:	f005 fd5e 	bl	8006e18 <puts>
      InitMotorState(3); // motorStateを再初期化する
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f819 	bl	8001394 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001362:	f000 f86f 	bl	8001444 <setMotorVel>
      isPushedRestHomePositionButton[3] = true;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001368:	2201      	movs	r2, #1
 800136a:	70da      	strb	r2, [r3, #3]
      isHolPushedFlagForPreventChattering[3] = true; // チャタリング防止用
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GPIO_EXTI_Callback+0xd4>)
 800136e:	2201      	movs	r2, #1
 8001370:	70da      	strb	r2, [r3, #3]
  }
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000598 	.word	0x20000598
 8001380:	08008c14 	.word	0x08008c14
 8001384:	200005ac 	.word	0x200005ac
 8001388:	08008c28 	.word	0x08008c28
 800138c:	08008c3c 	.word	0x08008c3c
 8001390:	08008c50 	.word	0x08008c50

08001394 <InitMotorState>:

/*
 * CANIDがmotorIDのモータのarm_positions(アームの位置)情報を初期化する
 */
void InitMotorState(uint8_t motorID) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  arm_motor[motorID].vel = 0;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <InitMotorState+0x3c>)
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	801a      	strh	r2, [r3, #0]
  arm_motor[motorID].pos = ArmInitializeSwitchPosition[motorID];
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	79f9      	ldrb	r1, [r7, #7]
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <InitMotorState+0x40>)
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <InitMotorState+0x3c>)
 80013ba:	0109      	lsls	r1, r1, #4
 80013bc:	4401      	add	r1, r0
 80013be:	3108      	adds	r1, #8
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000558 	.word	0x20000558
 80013d4:	20000000 	.word	0x20000000

080013d8 <MoveToOriginAndHold>:

/*
 * 原点が押されるまでモーターを原点方向に回し続ける関数.
 * 原点到着後はタイマーが止まるまでその場に居続ける
 */
void MoveToOriginAndHold(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
//  int16_t vel_settings[4] = {0, 0, 0, 0};
//
  if (!isPushedRestHomePositionButton[0]) {
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MoveToOriginAndHold+0x64>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <MoveToOriginAndHold+0x1a>
        arm_motor[0].vel = -500;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MoveToOriginAndHold+0x68>)
 80013ec:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80013f0:	801a      	strh	r2, [r3, #0]
  }
  if (!isPushedRestHomePositionButton[1]) {
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <MoveToOriginAndHold+0x64>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	f083 0301 	eor.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <MoveToOriginAndHold+0x30>
      arm_motor[1].vel =  500;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MoveToOriginAndHold+0x68>)
 8001402:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001406:	821a      	strh	r2, [r3, #16]
  }
  if (!isPushedRestHomePositionButton[2]) {
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MoveToOriginAndHold+0x64>)
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <MoveToOriginAndHold+0x46>
      arm_motor[2].vel = -500;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MoveToOriginAndHold+0x68>)
 8001418:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 800141c:	841a      	strh	r2, [r3, #32]
  }
  if (!isPushedRestHomePositionButton[3]) {
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <MoveToOriginAndHold+0x64>)
 8001420:	78db      	ldrb	r3, [r3, #3]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <MoveToOriginAndHold+0x5c>
      arm_motor[3].vel = 500;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <MoveToOriginAndHold+0x68>)
 800142e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001432:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  setMotorVel();
 8001434:	f000 f806 	bl	8001444 <setMotorVel>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200005ac 	.word	0x200005ac
 8001440:	20000558 	.word	0x20000558

08001444 <setMotorVel>:

void setMotorVel() {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
    uint8_t motor_vel_value[8];

    // update controller output
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e01f      	b.n	8001490 <setMotorVel+0x4c>
        motor_vel_value[arm_index*2] = arm_motor[arm_index].vel >> 8;
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <setMotorVel+0x78>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	121b      	asrs	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	3310      	adds	r3, #16
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        motor_vel_value[arm_index*2+1] = arm_motor[arm_index].vel & 0xFF;
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <setMotorVel+0x78>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	f9b3 2000 	ldrsh.w	r2, [r3]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	3301      	adds	r3, #1
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	3310      	adds	r3, #16
 8001484:	443b      	add	r3, r7
 8001486:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b03      	cmp	r3, #3
 8001494:	dddc      	ble.n	8001450 <setMotorVel+0xc>
    }

    FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <setMotorVel+0x7c>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	601a      	str	r2, [r3, #0]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, motor_vel_value) != HAL_OK) {
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	461a      	mov	r2, r3
 80014a2:	4907      	ldr	r1, [pc, #28]	; (80014c0 <setMotorVel+0x7c>)
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <setMotorVel+0x80>)
 80014a6:	f001 fca2 	bl	8002dee <HAL_FDCAN_AddMessageToTxFifoQ>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <setMotorVel+0x70>
        Error_Handler();
 80014b0:	f000 fdcc 	bl	800204c <Error_Handler>
    }
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000558 	.word	0x20000558
 80014c0:	20000508 	.word	0x20000508
 80014c4:	200002d0 	.word	0x200002d0

080014c8 <HAL_TIM_PeriodElapsedCallback>:

// Set timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

	// For arm position adc
	if (htim == &htim6) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x14>
	    // TODO: enable this func to enable PID
			ARM_Position_PID_Cycle();
 80014d8:	f000 fa40 	bl	800195c <ARM_Position_PID_Cycle>
	}
	// アームの原点調節をするときに使用する. それ以外はdisable
	if (htim == &htim7) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>
	    MoveToOriginAndHold();
 80014e4:	f7ff ff78 	bl	80013d8 <MoveToOriginAndHold>
	}

	// チャタリング防止用. 100KHzで回している。10msなったら解除
	if (htim == &htim16) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d12d      	bne.n	800154c <HAL_TIM_PeriodElapsedCallback+0x84>
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e027      	b.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x7e>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 80014f6:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f083 0301 	eor.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11a      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x76>
	        holdTimer[arm_index]++;
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	4914      	ldr	r1, [pc, #80]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        // 10ms立ったら再度初期化
	        if (holdTimer[arm_index] == 1000) {
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	d10b      	bne.n	8001540 <HAL_TIM_PeriodElapsedCallback+0x78>
	            holdTimer[arm_index] = 0;
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2100      	movs	r1, #0
 800152e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	            isHolPushedFlagForPreventChattering[arm_index] = false;
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	e000      	b.n	8001540 <HAL_TIM_PeriodElapsedCallback+0x78>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 800153e:	bf00      	nop
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	ddd4      	ble.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	        }
//	        printf("%d\r\n", isHolPushedFlagForPreventChattering[arm_index]);
	    }
	}
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200003d8 	.word	0x200003d8
 8001558:	20000424 	.word	0x20000424
 800155c:	20000470 	.word	0x20000470
 8001560:	20000598 	.word	0x20000598
 8001564:	2000059c 	.word	0x2000059c

08001568 <HAL_FDCAN_RxFifo0Callback>:

// Set Interrupt Handler for FDCAN1 (raspberrypi, other stm ..)
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint8_t FDCAN1_RxData[2] = {0};
 8001572:	2300      	movs	r3, #0
 8001574:	813b      	strh	r3, [r7, #8]

  // Error Handling
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 809f 	beq.w	80016c0 <HAL_FDCAN_RxFifo0Callback+0x158>
  if (hfdcan != &hfdcan1) return;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8001586:	4293      	cmp	r3, r2
 8001588:	f040 809c 	bne.w	80016c4 <HAL_FDCAN_RxFifo0Callback+0x15c>

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN1_RxHeader, FDCAN1_RxData) != HAL_OK) {
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_FDCAN_RxFifo0Callback+0x16c>)
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 fc6f 	bl	8002e78 <HAL_FDCAN_GetRxMessage>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_FDCAN_RxFifo0Callback+0x48>
      printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a4:	4619      	mov	r1, r3
 80015a6:	484c      	ldr	r0, [pc, #304]	; (80016d8 <HAL_FDCAN_RxFifo0Callback+0x170>)
 80015a8:	f005 fbd0 	bl	8006d4c <iprintf>
      Error_Handler();
 80015ac:	f000 fd4e 	bl	800204c <Error_Handler>
  }

  if (FDCAN1_RxHeader.Identifier == CANID_SEEDLING_SET_ARM_POSITION) {
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_FDCAN_RxFifo0Callback+0x16c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80015b8:	f040 8087 	bne.w	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
      switch(FDCAN1_RxData[0]) {
 80015bc:	7a3b      	ldrb	r3, [r7, #8]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	f200 8082 	bhi.w	80016c8 <HAL_FDCAN_RxFifo0Callback+0x160>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	08001623 	.word	0x08001623
 80015d4:	0800166b 	.word	0x0800166b
 80015d8:	080016b3 	.word	0x080016b3
        case 0:
          printf("PICKUP\r\n");
 80015dc:	483f      	ldr	r0, [pc, #252]	; (80016dc <HAL_FDCAN_RxFifo0Callback+0x174>)
 80015de:	f005 fc1b 	bl	8006e18 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e018      	b.n	800161a <HAL_FDCAN_RxFifo0Callback+0xb2>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[0][arm_index]);
 80015e8:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_FDCAN_RxFifo0Callback+0x178>)
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	18cc      	adds	r4, r1, r3
 80015f8:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <HAL_FDCAN_RxFifo0Callback+0x17c>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffb7 	bl	8000574 <__aeabi_i2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	ec43 2b10 	vmov	d0, r2, r3
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fda8 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b03      	cmp	r3, #3
 800161e:	dde3      	ble.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0x80>
          }
          break;
 8001620:	e053      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
        case 1:
          printf("PUT OUTSIDE\r\n");
 8001622:	4831      	ldr	r0, [pc, #196]	; (80016e8 <HAL_FDCAN_RxFifo0Callback+0x180>)
 8001624:	f005 fbf8 	bl	8006e18 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	e019      	b.n	8001662 <HAL_FDCAN_RxFifo0Callback+0xfa>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[1][arm_index]);
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_FDCAN_RxFifo0Callback+0x178>)
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	18cc      	adds	r4, r1, r3
 800163e:	4a29      	ldr	r2, [pc, #164]	; (80016e4 <HAL_FDCAN_RxFifo0Callback+0x17c>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3304      	adds	r3, #4
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff93 	bl	8000574 <__aeabi_i2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b10 	vmov	d0, r2, r3
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fd84 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	3301      	adds	r3, #1
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b03      	cmp	r3, #3
 8001666:	dde2      	ble.n	800162e <HAL_FDCAN_RxFifo0Callback+0xc6>
          }
          break;
 8001668:	e02f      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
        case 2:
          printf("PUT INSIDE\r\n");
 800166a:	4820      	ldr	r0, [pc, #128]	; (80016ec <HAL_FDCAN_RxFifo0Callback+0x184>)
 800166c:	f005 fbd4 	bl	8006e18 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e019      	b.n	80016aa <HAL_FDCAN_RxFifo0Callback+0x142>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[2][arm_index]);
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_FDCAN_RxFifo0Callback+0x178>)
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	18cc      	adds	r4, r1, r3
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_FDCAN_RxFifo0Callback+0x17c>)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3308      	adds	r3, #8
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff6f 	bl	8000574 <__aeabi_i2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	ec43 2b10 	vmov	d0, r2, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fd60 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dde2      	ble.n	8001676 <HAL_FDCAN_RxFifo0Callback+0x10e>
          }
          break;
 80016b0:	e00b      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
        case 3:
          // TODO: disable FDCAN3 and reset program
          printf("RESET\r\n");
 80016b2:	480f      	ldr	r0, [pc, #60]	; (80016f0 <HAL_FDCAN_RxFifo0Callback+0x188>)
 80016b4:	f005 fbb0 	bl	8006e18 <puts>
          HAL_NVIC_DisableIRQ(FDCAN3_IT1_IRQn);
 80016b8:	2059      	movs	r0, #89	; 0x59
 80016ba:	f001 f970 	bl	800299e <HAL_NVIC_DisableIRQ>
          break;
 80016be:	e004      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 80016c0:	bf00      	nop
 80016c2:	e002      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
  if (hfdcan != &hfdcan1) return;
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x162>
        default:
          break; // TODO : send RuntimeError to raspbeerypi
 80016c8:	bf00      	nop
      }
  }
}
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	2000026c 	.word	0x2000026c
 80016d4:	200004e0 	.word	0x200004e0
 80016d8:	08008c64 	.word	0x08008c64
 80016dc:	08008c78 	.word	0x08008c78
 80016e0:	200005b0 	.word	0x200005b0
 80016e4:	20000048 	.word	0x20000048
 80016e8:	08008c80 	.word	0x08008c80
 80016ec:	08008c90 	.word	0x08008c90
 80016f0:	08008c9c 	.word	0x08008c9c

080016f4 <rpm_to_signed>:

float rpm_to_signed(uint16_t angular_velocity) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  if (angular_velocity <= UINT16_MAX/2) {
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db05      	blt.n	8001712 <rpm_to_signed+0x1e>
      return (float)(angular_velocity);
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001710:	e007      	b.n	8001722 <rpm_to_signed+0x2e>
  } else {
      return (float)(angular_velocity - UINT16_MAX);
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001718:	3bff      	subs	r3, #255	; 0xff
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }
}
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_FDCAN_RxFifo1Callback>:
int to_mechanical_angle(uint16_t angle) {
  return (int)((angle / 8191.0) * 360);
}

// Set Interrupt Handler For FDCAN3 (motor at wheel and arm)
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	uint8_t FDCAN3_RxData[8];
	float rpm;
	uint8_t motorID;

	// Error Handling
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d074      	beq.n	800182e <HAL_FDCAN_RxFifo1Callback+0xfe>
	if (hfdcan != &hfdcan3) return;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d172      	bne.n	8001832 <HAL_FDCAN_RxFifo1Callback+0x102>

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &FDCAN3_RxHeader, FDCAN3_RxData) != HAL_OK) {
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8001752:	2141      	movs	r1, #65	; 0x41
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 fb8f 	bl	8002e78 <HAL_FDCAN_GetRxMessage>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_FDCAN_RxFifo1Callback+0x40>
		printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001764:	4619      	mov	r1, r3
 8001766:	483c      	ldr	r0, [pc, #240]	; (8001858 <HAL_FDCAN_RxFifo1Callback+0x128>)
 8001768:	f005 faf0 	bl	8006d4c <iprintf>
		Error_Handler();
 800176c:	f000 fc6e 	bl	800204c <Error_Handler>
	}

	// Reload IWDG
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8001770:	483a      	ldr	r0, [pc, #232]	; (800185c <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8001772:	f002 f9dc 	bl	8003b2e <HAL_IWDG_Refresh>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_FDCAN_RxFifo1Callback+0x50>
  {
    Error_Handler();
 800177c:	f000 fc66 	bl	800204c <Error_Handler>
  }

//	printf("%d\r\n", motorID);
	motorID = FDCAN3_RxHeader.Identifier - DJI_CANID_TX0 - 1;
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	77fb      	strb	r3, [r7, #31]
	// uint16_t 0 ~ 65535
	rpm = rpm_to_signed(FDCAN3_RxData[2] << 8 | FDCAN3_RxData[3]);
 800178a:	7abb      	ldrb	r3, [r7, #10]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffaa 	bl	80016f4 <rpm_to_signed>
 80017a0:	ed87 0a06 	vstr	s0, [r7, #24]
	double motor_vel = (double)(rpm / 60 / REDUCTIONRATIO * GEARNUM * RACKPITCH);
 80017a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001860 <HAL_FDCAN_RxFifo1Callback+0x130>
 80017ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017b0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001864 <HAL_FDCAN_RxFifo1Callback+0x134>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001868 <HAL_FDCAN_RxFifo1Callback+0x138>
 80017bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c0:	ee17 0a90 	vmov	r0, s15
 80017c4:	f7fe fee8 	bl	8000598 <__aeabi_f2d>
 80017c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001840 <HAL_FDCAN_RxFifo1Callback+0x110>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff3b 	bl	8000648 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	arm_motor[motorID].vel = motor_vel;
 80017da:	7ffc      	ldrb	r4, [r7, #31]
 80017dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017e0:	f7ff f9e2 	bl	8000ba8 <__aeabi_d2iz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b219      	sxth	r1, r3
 80017e8:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_FDCAN_RxFifo1Callback+0x13c>)
 80017ea:	0123      	lsls	r3, r4, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	arm_motor[motorID].pos += (motor_vel * 0.001);
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_FDCAN_RxFifo1Callback+0x13c>)
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	3308      	adds	r3, #8
 80017fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001800:	a311      	add	r3, pc, #68	; (adr r3, 8001848 <HAL_FDCAN_RxFifo1Callback+0x118>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800180a:	f7fe ff1d 	bl	8000648 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	7ffe      	ldrb	r6, [r7, #31]
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fd60 	bl	80002dc <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <HAL_FDCAN_RxFifo1Callback+0x13c>)
 8001822:	0131      	lsls	r1, r6, #4
 8001824:	4401      	add	r1, r0
 8001826:	3108      	adds	r1, #8
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
 800182c:	e002      	b.n	8001834 <HAL_FDCAN_RxFifo1Callback+0x104>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <HAL_FDCAN_RxFifo1Callback+0x104>
	if (hfdcan != &hfdcan3) return;
 8001832:	bf00      	nop
	// TODO : Add wheel controller
//	switch(FDCAN3_RxHeader.Identifier) {
//		default:
//			printf("CAN ID %" PRIu32 "is not cached from FIFO1 callback\r\n", FDCAN3_RxHeader.Identifier);
//	}
}
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	53c8d4f1 	.word	0x53c8d4f1
 8001844:	400921fb 	.word	0x400921fb
 8001848:	d2f1a9fc 	.word	0xd2f1a9fc
 800184c:	3f50624d 	.word	0x3f50624d
 8001850:	200002d0 	.word	0x200002d0
 8001854:	2000052c 	.word	0x2000052c
 8001858:	08008c64 	.word	0x08008c64
 800185c:	20000334 	.word	0x20000334
 8001860:	42700000 	.word	0x42700000
 8001864:	42100000 	.word	0x42100000
 8001868:	42000000 	.word	0x42000000
 800186c:	20000558 	.word	0x20000558

08001870 <ARM_Position_PID_Init>:


/* For ARM PID */
static void ARM_Position_PID_Init(void) {
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	ed2d 8b02 	vpush	{d8}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0

	PID_For_ARM_POS = (struct PID *)malloc(4 * sizeof(struct PID));
 800187a:	f44f 7090 	mov.w	r0, #288	; 0x120
 800187e:	f004 ff5f 	bl	8006740 <malloc>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <ARM_Position_PID_Init+0xd8>)
 8001888:	601a      	str	r2, [r3, #0]
	if (PID_For_ARM_POS == NULL) {
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <ARM_Position_PID_Init+0xd8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <ARM_Position_PID_Init+0x26>
			Error_Handler();
 8001892:	f000 fbdb 	bl	800204c <Error_Handler>
	}

	// initialize element
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	e03c      	b.n	8001916 <ARM_Position_PID_Init+0xa6>
			 * ki : 0
			 * setpoint : 1500
			 * -500 : integral_min
			 * 500: integral_max
			 */
			pid_init(&PID_For_ARM_POS[arm_index], 1e-3, P_GAIN_FOR_ARM_POS_SEQ[arm_index], D_GAIN_FOR_ARM_POS, I_GAIN_FOR_ARM_POS, setpoint[0][arm_index], -500, 500);
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <ARM_Position_PID_Init+0xd8>)
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	18cc      	adds	r4, r1, r3
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <ARM_Position_PID_Init+0xdc>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	ed93 8b00 	vldr	d8, [r3]
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <ARM_Position_PID_Init+0xe0>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f999 	bl	8000bf8 <__aeabi_d2f>
 80018c6:	4605      	mov	r5, r0
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <ARM_Position_PID_Init+0xe4>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f991 	bl	8000bf8 <__aeabi_d2f>
 80018d6:	4606      	mov	r6, r0
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <ARM_Position_PID_Init+0xe8>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe47 	bl	8000574 <__aeabi_i2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8001930 <ARM_Position_PID_Init+0xc0>
 80018ee:	ed9f 4b12 	vldr	d4, [pc, #72]	; 8001938 <ARM_Position_PID_Init+0xc8>
 80018f2:	ec43 2b13 	vmov	d3, r2, r3
 80018f6:	ee02 6a90 	vmov	s5, r6
 80018fa:	ee02 5a10 	vmov	s4, r5
 80018fe:	eeb0 1a48 	vmov.f32	s2, s16
 8001902:	eef0 1a68 	vmov.f32	s3, s17
 8001906:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001940 <ARM_Position_PID_Init+0xd0>
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fb42 	bl	8000f94 <pid_init>
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b03      	cmp	r3, #3
 800191a:	ddbf      	ble.n	800189c <ARM_Position_PID_Init+0x2c>
	}
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	ecbd 8b02 	vpop	{d8}
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	00000000 	.word	0x00000000
 8001934:	407f4000 	.word	0x407f4000
 8001938:	00000000 	.word	0x00000000
 800193c:	c07f4000 	.word	0xc07f4000
 8001940:	d2f1a9fc 	.word	0xd2f1a9fc
 8001944:	3f50624d 	.word	0x3f50624d
 8001948:	200005b0 	.word	0x200005b0
 800194c:	20000020 	.word	0x20000020
 8001950:	20000040 	.word	0x20000040
 8001954:	200005b8 	.word	0x200005b8
 8001958:	20000048 	.word	0x20000048

0800195c <ARM_Position_PID_Cycle>:

static void ARM_Position_PID_Cycle(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	// Automatically set adc value to DMA, so don't need to read ADC
	if (PID_For_ARM_POS == NULL) {
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <ARM_Position_PID_Cycle+0x70>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <ARM_Position_PID_Cycle+0x12>
			Error_Handler();
 800196a:	f000 fb6f 	bl	800204c <Error_Handler>
//	    arm_positions[1],
//	    arm_positions[2]
//	};

	// update controller output
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	e021      	b.n	80019b8 <ARM_Position_PID_Cycle+0x5c>
	    int32_t pid_val = int32_t_pid_compute(&PID_For_ARM_POS[arm_index], arm_motor[arm_index].pos);
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <ARM_Position_PID_Cycle+0x70>)
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	18ca      	adds	r2, r1, r3
 8001984:	4912      	ldr	r1, [pc, #72]	; (80019d0 <ARM_Position_PID_Cycle+0x74>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	440b      	add	r3, r1
 800198c:	3308      	adds	r3, #8
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	4610      	mov	r0, r2
 800199c:	f7ff fc01 	bl	80011a2 <int32_t_pid_compute>
 80019a0:	6038      	str	r0, [r7, #0]
			arm_motor[arm_index].vel = pid_val;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b219      	sxth	r1, r3
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <ARM_Position_PID_Cycle+0x74>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3301      	adds	r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	ddda      	ble.n	8001974 <ARM_Position_PID_Cycle+0x18>
//			pid_controller_value[arm_index*2] = pid_for_arm_output >> 8;
//			pid_controller_value[arm_index*2+1] = pid_for_arm_output & 0xFF;
	}
	setMotorVel();
 80019be:	f7ff fd41 	bl	8001444 <setMotorVel>
////	 write new controller value with can
//	FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
//	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, pid_controller_value) != HAL_OK) {
//	    Error_Handler();
//	}
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200005b0 	.word	0x200005b0
 80019d0:	20000558 	.word	0x20000558

080019d4 <_write>:

int _write(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	2308      	movs	r3, #8
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <_write+0x24>)
 80019ea:	f003 fd27 	bl	800543c <HAL_UART_Transmit>
    return len;
 80019ee:	687b      	ldr	r3, [r7, #4]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000344 	.word	0x20000344

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a00:	f000 fe35 	bl	800266e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a04:	f000 f824 	bl	8001a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a08:	f000 faa2 	bl	8001f50 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001a0c:	f000 f9c4 	bl	8001d98 <MX_LPUART1_UART_Init>
  MX_FDCAN3_Init();
 8001a10:	f000 f90c 	bl	8001c2c <MX_FDCAN3_Init>
  MX_TIM6_Init();
 8001a14:	f000 fa0a 	bl	8001e2c <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8001a18:	f000 f868 	bl	8001aec <MX_FDCAN1_Init>
  MX_TIM7_Init();
 8001a1c:	f000 fa3c 	bl	8001e98 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001a20:	f000 fa70 	bl	8001f04 <MX_TIM16_Init>
  MX_IWDG_Init();
 8001a24:	f000 f99c 	bl	8001d60 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  printf("arm position pid init\r\n");
  // Initialize PID library
  HAL_TIM_Base_Start_IT(&htim16);
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <main+0x48>)
 8001a2a:	f003 f909 	bl	8004c40 <HAL_TIM_Base_Start_IT>
  ARM_Position_PID_Init();
 8001a2e:	f7ff ff1f 	bl	8001870 <ARM_Position_PID_Init>
  // Start ADC and save at DMA
//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
  printf("start rest to home position\r\n");
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <main+0x4c>)
 8001a34:	f005 f9f0 	bl	8006e18 <puts>
  ResetToHomePosition();
 8001a38:	f7ff fbca 	bl	80011d0 <ResetToHomePosition>
	printf("Complete Initialize\r\n");
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <main+0x50>)
 8001a3e:	f005 f9eb 	bl	8006e18 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <main+0x46>
 8001a44:	20000470 	.word	0x20000470
 8001a48:	08008ca4 	.word	0x08008ca4
 8001a4c:	08008cc4 	.word	0x08008cc4

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2238      	movs	r2, #56	; 0x38
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 f9e2 	bl	8006e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a76:	f002 f86b 	bl	8003b50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a98:	230a      	movs	r3, #10
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 f8f3 	bl	8003c98 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001ab8:	f000 fac8 	bl	800204c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fbf1 	bl	80042bc <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae0:	f000 fab4 	bl	800204c <Error_Handler>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3750      	adds	r7, #80	; 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <MX_FDCAN1_Init+0x138>)
 8001af6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001afe:	4b48      	ldr	r3, [pc, #288]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b00:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b44:	220f      	movs	r2, #15
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b60:	482f      	ldr	r0, [pc, #188]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001b62:	f000 ff37 	bl	80029d4 <HAL_FDCAN_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8001b6c:	f000 fa6e 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN1_TxHeader.Identifier = 0x000;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
  FDCAN1_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  FDCAN1_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  FDCAN1_TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	60da      	str	r2, [r3, #12]
  FDCAN1_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  FDCAN1_TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b94:	615a      	str	r2, [r3, #20]
  FDCAN1_TxHeader.FDFormat = FDCAN_FD_CAN;
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b9c:	619a      	str	r2, [r3, #24]
  FDCAN1_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  FDCAN1_TxHeader.MessageMarker = 0;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_FDCAN1_Init+0x13c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef FDCAN1_sFilterConfig;
  FDCAN1_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  FDCAN1_sFilterConfig.FilterIndex = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  FDCAN1_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  FDCAN1_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
  FDCAN1_sFilterConfig.FilterID1 = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  FDCAN1_sFilterConfig.FilterID2 = 0x7ff;
 8001bbe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bc2:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN1_sFilterConfig) != HAL_OK) {
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001bca:	f001 f85d 	bl	8002c88 <HAL_FDCAN_ConfigFilter>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001bd4:	f000 fa3a 	bl	800204c <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) !=
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2202      	movs	r2, #2
 8001be0:	2102      	movs	r1, #2
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001be4:	f001 f8aa 	bl	8002d3c <HAL_FDCAN_ConfigGlobalFilter>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_FDCAN1_Init+0x106>
      HAL_OK) {
      Error_Handler();
 8001bee:	f000 fa2d 	bl	800204c <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001bf4:	f001 f8d3 	bl	8002d9e <HAL_FDCAN_Start>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_FDCAN1_Init+0x116>
      Error_Handler();
 8001bfe:	f000 fa25 	bl	800204c <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001c02:	2200      	movs	r2, #0
 8001c04:	2101      	movs	r1, #1
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_FDCAN1_Init+0x134>)
 8001c08:	f001 fa3e 	bl	8003088 <HAL_FDCAN_ActivateNotification>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_FDCAN1_Init+0x12a>
      Error_Handler();
 8001c12:	f000 fa1b 	bl	800204c <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000026c 	.word	0x2000026c
 8001c24:	40006400 	.word	0x40006400
 8001c28:	200004bc 	.word	0x200004bc

08001c2c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001c32:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <MX_FDCAN3_Init+0x12c>)
 8001c36:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c70:	2204      	movs	r2, #4
 8001c72:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c9e:	482d      	ldr	r0, [pc, #180]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001ca0:	f000 fe98 	bl	80029d4 <HAL_FDCAN_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8001caa:	f000 f9cf 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  // Set TXHeader
	FDCAN3_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
	FDCAN3_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
	FDCAN3_TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	60da      	str	r2, [r3, #12]
	FDCAN3_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
	FDCAN3_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
	FDCAN3_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
	FDCAN3_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
	FDCAN3_TxHeader.MessageMarker = 0;
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_FDCAN3_Init+0x130>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]

	// Set FDCAN3 filter config
	FDCAN_FilterTypeDef FDCAN3_sFilterConfig;
	FDCAN3_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
	FDCAN3_sFilterConfig.FilterIndex = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
	FDCAN3_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
	FDCAN3_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001cea:	2302      	movs	r3, #2
 8001cec:	60fb      	str	r3, [r7, #12]
	FDCAN3_sFilterConfig.FilterID1 = 0x000;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
	FDCAN3_sFilterConfig.FilterID2 = 0x7ff;
 8001cf2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cf6:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN3_sFilterConfig) != HAL_OK) {
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4815      	ldr	r0, [pc, #84]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001cfe:	f000 ffc3 	bl	8002c88 <HAL_FDCAN_ConfigFilter>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_FDCAN3_Init+0xe0>
		Error_Handler();
 8001d08:	f000 f9a0 	bl	800204c <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2300      	movs	r3, #0
 8001d12:	2202      	movs	r2, #2
 8001d14:	2102      	movs	r1, #2
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001d18:	f001 f810 	bl	8002d3c <HAL_FDCAN_ConfigGlobalFilter>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_FDCAN3_Init+0xfa>
		Error_Handler();
 8001d22:	f000 f993 	bl	800204c <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001d28:	f001 f839 	bl	8002d9e <HAL_FDCAN_Start>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_FDCAN3_Init+0x10a>
		Error_Handler();
 8001d32:	f000 f98b 	bl	800204c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001d36:	2200      	movs	r2, #0
 8001d38:	2108      	movs	r1, #8
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_FDCAN3_Init+0x128>)
 8001d3c:	f001 f9a4 	bl	8003088 <HAL_FDCAN_ActivateNotification>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_FDCAN3_Init+0x11e>
		Error_Handler();
 8001d46:	f000 f981 	bl	800204c <Error_Handler>
	}
  /* USER CODE END FDCAN3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002d0 	.word	0x200002d0
 8001d58:	40006c00 	.word	0x40006c00
 8001d5c:	20000508 	.word	0x20000508

08001d60 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_IWDG_Init+0x30>)
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <MX_IWDG_Init+0x34>)
 8001d68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_IWDG_Init+0x30>)
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 99;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_IWDG_Init+0x30>)
 8001d72:	2263      	movs	r2, #99	; 0x63
 8001d74:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 99;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_IWDG_Init+0x30>)
 8001d78:	2263      	movs	r2, #99	; 0x63
 8001d7a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_IWDG_Init+0x30>)
 8001d7e:	f001 fe87 	bl	8003a90 <HAL_IWDG_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001d88:	f000 f960 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000334 	.word	0x20000334
 8001d94:	40003000 	.word	0x40003000

08001d98 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <MX_LPUART1_UART_Init+0x8c>)
 8001da0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <MX_LPUART1_UART_Init+0x90>)
 8001da6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dd8:	4811      	ldr	r0, [pc, #68]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dda:	f003 fadf 	bl	800539c <HAL_UART_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001de4:	f000 f932 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dec:	f004 f908 	bl	8006000 <HAL_UARTEx_SetTxFifoThreshold>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001df6:	f000 f929 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001dfe:	f004 f93d 	bl	800607c <HAL_UARTEx_SetRxFifoThreshold>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001e08:	f000 f920 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_LPUART1_UART_Init+0x88>)
 8001e0e:	f004 f8be 	bl	8005f8e <HAL_UARTEx_DisableFifoMode>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001e18:	f000 f918 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000344 	.word	0x20000344
 8001e24:	40008000 	.word	0x40008000
 8001e28:	001e8480 	.word	0x001e8480

08001e2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <MX_TIM6_Init+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e44:	2250      	movs	r2, #80	; 0x50
 8001e46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e5e:	f002 fe97 	bl	8004b90 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e68:	f000 f8f0 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_TIM6_Init+0x64>)
 8001e7a:	f003 f9b3 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f000 f8e2 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200003d8 	.word	0x200003d8
 8001e94:	40001000 	.word	0x40001000

08001e98 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_TIM7_Init+0x64>)
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <MX_TIM7_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_TIM7_Init+0x64>)
 8001eb0:	2250      	movs	r2, #80	; 0x50
 8001eb2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_TIM7_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_TIM7_Init+0x64>)
 8001ebc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ec0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_TIM7_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM7_Init+0x64>)
 8001eca:	f002 fe61 	bl	8004b90 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f000 f8ba 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_TIM7_Init+0x64>)
 8001ee6:	f003 f97d 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f000 f8ac 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000424 	.word	0x20000424
 8001f00:	40001400 	.word	0x40001400

08001f04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <MX_TIM16_Init+0x48>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f10:	2250      	movs	r2, #80	; 0x50
 8001f12:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f1c:	2209      	movs	r2, #9
 8001f1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_TIM16_Init+0x44>)
 8001f34:	f002 fe2c 	bl	8004b90 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001f3e:	f000 f885 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000470 	.word	0x20000470
 8001f4c:	40014400 	.word	0x40014400

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a35      	ldr	r2, [pc, #212]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <MX_GPIO_Init+0xf0>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	4824      	ldr	r0, [pc, #144]	; (8002044 <MX_GPIO_Init+0xf4>)
 8001fb4:	f001 fd3c 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481f      	ldr	r0, [pc, #124]	; (8002048 <MX_GPIO_Init+0xf8>)
 8001fcc:	f001 fbae 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : Arm3Switch_Pin Arm2Switch_Pin Arm1Switch_Pin Arm0Switch_Pin */
  GPIO_InitStruct.Pin = Arm3Switch_Pin|Arm2Switch_Pin|Arm1Switch_Pin|Arm0Switch_Pin;
 8001fd0:	23c3      	movs	r3, #195	; 0xc3
 8001fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f001 fba0 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : BoardLED_Pin */
  GPIO_InitStruct.Pin = BoardLED_Pin;
 8001fec:	2304      	movs	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BoardLED_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	4810      	ldr	r0, [pc, #64]	; (8002044 <MX_GPIO_Init+0xf4>)
 8002004:	f001 fb92 	bl	800372c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2101      	movs	r1, #1
 800200c:	2006      	movs	r0, #6
 800200e:	f000 fc9e 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002012:	2006      	movs	r0, #6
 8002014:	f000 fcb5 	bl	8002982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2101      	movs	r1, #1
 800201c:	2007      	movs	r0, #7
 800201e:	f000 fc96 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002022:	2007      	movs	r0, #7
 8002024:	f000 fcad 	bl	8002982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2101      	movs	r1, #1
 800202c:	2017      	movs	r0, #23
 800202e:	f000 fc8e 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002032:	2017      	movs	r0, #23
 8002034:	f000 fca5 	bl	8002982 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48000800 	.word	0x48000800

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	2104      	movs	r1, #4
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <Error_Handler+0x14>)
 8002056:	f001 fceb 	bl	8003a30 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205a:	b672      	cpsid	i
}
 800205c:	bf00      	nop
  __disable_irq();
  while (1)
 800205e:	e7fe      	b.n	800205e <Error_Handler+0x12>
 8002060:	48000c00 	.word	0x48000c00

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x44>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_MspInit+0x44>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6613      	str	r3, [r2, #96]	; 0x60
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_MspInit+0x44>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_MspInit+0x44>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_MspInit+0x44>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_MspInit+0x44>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0a0      	sub	sp, #128	; 0x80
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	2254      	movs	r2, #84	; 0x54
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 feab 	bl	8006e28 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a55      	ldr	r2, [pc, #340]	; (800222c <HAL_FDCAN_MspInit+0x180>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d14b      	bne.n	8002174 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0318 	add.w	r3, r7, #24
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fb01 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80020f8:	f7ff ffa8 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020fc:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 8002104:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002106:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10b      	bne.n	8002126 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a48      	ldr	r2, [pc, #288]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 8002114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800213e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002142:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002150:	2309      	movs	r3, #9
 8002152:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215e:	f001 fae5 	bl	800372c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2015      	movs	r0, #21
 8002168:	f000 fbf1 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800216c:	2015      	movs	r0, #21
 800216e:	f000 fc08 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002172:	e057      	b.n	8002224 <HAL_FDCAN_MspInit+0x178>
  else if(hfdcan->Instance==FDCAN3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_FDCAN_MspInit+0x18c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d152      	bne.n	8002224 <HAL_FDCAN_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002188:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218a:	f107 0318 	add.w	r3, r7, #24
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fab0 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 800219a:	f7ff ff57 	bl	800204c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 80021a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_FDCAN_MspInit+0x184>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10b      	bne.n	80021c8 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_FDCAN_MspInit+0x188>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80021e0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80021e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80021f2:	230b      	movs	r3, #11
 80021f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002200:	f001 fa94 	bl	800372c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 2, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2102      	movs	r1, #2
 8002208:	2058      	movs	r0, #88	; 0x58
 800220a:	f000 fba0 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 800220e:	2058      	movs	r0, #88	; 0x58
 8002210:	f000 fbb7 	bl	8002982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 2, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2102      	movs	r1, #2
 8002218:	2059      	movs	r0, #89	; 0x59
 800221a:	f000 fb98 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 800221e:	2059      	movs	r0, #89	; 0x59
 8002220:	f000 fbaf 	bl	8002982 <HAL_NVIC_EnableIRQ>
}
 8002224:	bf00      	nop
 8002226:	3780      	adds	r7, #128	; 0x80
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40006400 	.word	0x40006400
 8002230:	200005c0 	.word	0x200005c0
 8002234:	40021000 	.word	0x40021000
 8002238:	40006c00 	.word	0x40006c00

0800223c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b09e      	sub	sp, #120	; 0x78
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	2254      	movs	r2, #84	; 0x54
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fde3 	bl	8006e28 <memset>
  if(huart->Instance==LPUART1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_UART_MspInit+0xa8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d136      	bne.n	80022da <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800226c:	2320      	movs	r3, #32
 800226e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fa3b 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002284:	f7ff fee2 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_UART_MspInit+0xac>)
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_UART_MspInit+0xac>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0xac>)
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0xac>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_UART_MspInit+0xac>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_UART_MspInit+0xac>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022b8:	230c      	movs	r3, #12
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80022c8:	230c      	movs	r3, #12
 80022ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022d0:	4619      	mov	r1, r3
 80022d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d6:	f001 fa29 	bl	800372c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3778      	adds	r7, #120	; 0x78
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40008000 	.word	0x40008000
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d114      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2103      	movs	r1, #3
 800231a:	2036      	movs	r0, #54	; 0x36
 800231c:	f000 fb17 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002320:	2036      	movs	r0, #54	; 0x36
 8002322:	f000 fb2e 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002326:	e032      	b.n	800238e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_TIM_Base_MspInit+0xb4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d114      	bne.n	800235c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 3, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2103      	movs	r1, #3
 800234e:	2037      	movs	r0, #55	; 0x37
 8002350:	f000 fafd 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002354:	2037      	movs	r0, #55	; 0x37
 8002356:	f000 fb14 	bl	8002982 <HAL_NVIC_EnableIRQ>
}
 800235a:	e018      	b.n	800238e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d113      	bne.n	800238e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	6613      	str	r3, [r2, #96]	; 0x60
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2104      	movs	r1, #4
 8002382:	2019      	movs	r0, #25
 8002384:	f000 fae3 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002388:	2019      	movs	r0, #25
 800238a:	f000 fafa 	bl	8002982 <HAL_NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40001000 	.word	0x40001000
 800239c:	40021000 	.word	0x40021000
 80023a0:	40001400 	.word	0x40001400
 80023a4:	40014400 	.word	0x40014400

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <NMI_Handler+0x4>

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 f98e 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm3Switch_Pin);
 8002400:	2001      	movs	r0, #1
 8002402:	f001 fb2d 	bl	8003a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}

0800240a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm2Switch_Pin);
 800240e:	2002      	movs	r0, #2
 8002410:	f001 fb26 	bl	8003a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <FDCAN1_IT0_IRQHandler+0x10>)
 800241e:	f000 ff19 	bl	8003254 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000026c 	.word	0x2000026c

0800242c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm1Switch_Pin);
 8002430:	2040      	movs	r0, #64	; 0x40
 8002432:	f001 fb15 	bl	8003a60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Arm0Switch_Pin);
 8002436:	2080      	movs	r0, #128	; 0x80
 8002438:	f001 fb12 	bl	8003a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002446:	f002 fca2 	bl	8004d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000470 	.word	0x20000470

08002454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM6_DAC_IRQHandler+0x10>)
 800245a:	f002 fc98 	bl	8004d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003d8 	.word	0x200003d8

08002468 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM7_DAC_IRQHandler+0x10>)
 800246e:	f002 fc8e 	bl	8004d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000424 	.word	0x20000424

0800247c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <FDCAN3_IT0_IRQHandler+0x10>)
 8002482:	f000 fee7 	bl	8003254 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002d0 	.word	0x200002d0

08002490 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <FDCAN3_IT1_IRQHandler+0x10>)
 8002496:	f000 fedd 	bl	8003254 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200002d0 	.word	0x200002d0

080024a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_kill>:

int _kill(int pid, int sig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024be:	f004 fccf 	bl	8006e60 <__errno>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2216      	movs	r2, #22
 80024c6:	601a      	str	r2, [r3, #0]
  return -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_exit>:

void _exit (int status)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ffe7 	bl	80024b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024e6:	e7fe      	b.n	80024e6 <_exit+0x12>

080024e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e00a      	b.n	8002510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024fa:	f3af 8000 	nop.w
 80024fe:	4601      	mov	r1, r0
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	b2ca      	uxtb	r2, r1
 8002508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf0      	blt.n	80024fa <_read+0x12>
  }

  return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	605a      	str	r2, [r3, #4]
  return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_isatty>:

int _isatty(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f004 fc50 	bl	8006e60 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20020000 	.word	0x20020000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	200005c4 	.word	0x200005c4
 80025f4:	20000718 	.word	0x20000718

080025f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800261e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002620:	f7ff ffea 	bl	80025f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002624:	480c      	ldr	r0, [pc, #48]	; (8002658 <LoopForever+0x6>)
  ldr r1, =_edata
 8002626:	490d      	ldr	r1, [pc, #52]	; (800265c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <LoopForever+0xe>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800263c:	4c0a      	ldr	r4, [pc, #40]	; (8002668 <LoopForever+0x16>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264a:	f004 fc0f 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264e:	f7ff f9d5 	bl	80019fc <main>

08002652 <LoopForever>:

LoopForever:
    b LoopForever
 8002652:	e7fe      	b.n	8002652 <LoopForever>
  ldr   r0, =_estack
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002660:	080090ac 	.word	0x080090ac
  ldr r2, =_sbss
 8002664:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002668:	20000718 	.word	0x20000718

0800266c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC1_2_IRQHandler>

0800266e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 f95d 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800267e:	200f      	movs	r0, #15
 8002680:	f000 f80e 	bl	80026a0 <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	e001      	b.n	8002694 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002690:	f7ff fce8 	bl	8002064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002694:	79fb      	ldrb	r3, [r7, #7]

}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_InitTick+0x68>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_InitTick+0x6c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_InitTick+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f976 	bl	80029ba <HAL_SYSTICK_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d809      	bhi.n	80026ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026da:	2200      	movs	r2, #0
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e2:	f000 f934 	bl	800294e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_InitTick+0x70>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e007      	b.n	80026fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e004      	b.n	80026fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e001      	b.n	80026fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000080 	.word	0x20000080
 800270c:	20000078 	.word	0x20000078
 8002710:	2000007c 	.word	0x2000007c

08002714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_IncTick+0x1c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x20>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4413      	add	r3, r2
 8002722:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_IncTick+0x1c>)
 8002724:	6013      	str	r3, [r2, #0]
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	200005c8 	.word	0x200005c8
 8002734:	20000080 	.word	0x20000080

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200005c8 	.word	0x200005c8

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db12      	blt.n	8002828 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	490a      	ldr	r1, [pc, #40]	; (8002834 <__NVIC_DisableIRQ+0x44>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	3320      	adds	r3, #32
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800281c:	f3bf 8f4f 	dsb	sy
}
 8002820:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002822:	f3bf 8f6f 	isb	sy
}
 8002826:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff05 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff1c 	bl	8002798 <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff90 	bl	800288c <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5f 	bl	8002838 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff0f 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff1f 	bl	80027f0 <__NVIC_DisableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff96 	bl	80028f4 <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e147      	b.n	8002c76 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fb56 	bl	80020ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0210 	bic.w	r2, r2, #16
 8002a0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a10:	f7ff fe92 	bl	8002738 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a16:	e012      	b.n	8002a3e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a18:	f7ff fe8e 	bl	8002738 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b0a      	cmp	r3, #10
 8002a24:	d90b      	bls.n	8002a3e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e11b      	b.n	8002c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d0e5      	beq.n	8002a18 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7ff fe6c 	bl	8002738 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a62:	e012      	b.n	8002a8a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a64:	f7ff fe68 	bl	8002738 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b0a      	cmp	r3, #10
 8002a70:	d90b      	bls.n	8002a8a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2203      	movs	r2, #3
 8002a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0f5      	b.n	8002c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0e5      	beq.n	8002a64 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0202 	orr.w	r2, r2, #2
 8002aa6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a74      	ldr	r2, [pc, #464]	; (8002c80 <HAL_FDCAN_Init+0x2ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d103      	bne.n	8002aba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002ab2:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_FDCAN_Init+0x2b0>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7c1b      	ldrb	r3, [r3, #16]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	619a      	str	r2, [r3, #24]
 8002ad2:	e007      	b.n	8002ae4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7c5b      	ldrb	r3, [r3, #17]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b0c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7c9b      	ldrb	r3, [r3, #18]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e007      	b.n	8002b38 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b36:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002b5c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0210 	bic.w	r2, r2, #16
 8002b6c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0204 	orr.w	r2, r2, #4
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e02c      	b.n	8002be2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d028      	beq.n	8002be2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d01c      	beq.n	8002bd2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0210 	orr.w	r2, r2, #16
 8002bb6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d110      	bne.n	8002be2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0220 	orr.w	r2, r2, #32
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	e007      	b.n	8002be2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0220 	orr.w	r2, r2, #32
 8002be0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bf2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002bfa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c0a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c0c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c16:	d115      	bne.n	8002c44 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	3b01      	subs	r3, #1
 8002c24:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c26:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c40:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c42:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fc7e 	bl	800355c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40006400 	.word	0x40006400
 8002c84:	40006500 	.word	0x40006500

08002c88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c98:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d002      	beq.n	8002ca6 <HAL_FDCAN_ConfigFilter+0x1e>
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d13d      	bne.n	8002d22 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002cba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002cc2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e01d      	b.n	8002d1e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	075a      	lsls	r2, r3, #29
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	079a      	lsls	r2, r3, #30
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3304      	adds	r3, #4
 8002d16:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e006      	b.n	8002d30 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d116      	bne.n	8002d84 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	011a      	lsls	r2, r3, #4
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	431a      	orrs	r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e006      	b.n	8002d92 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d110      	bne.n	8002dd4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e006      	b.n	8002de2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d12c      	bne.n	8002e60 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e023      	b.n	8002e6e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fbf9 	bl	8003634 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2101      	movs	r1, #1
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002e52:	2201      	movs	r2, #1
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e006      	b.n	8002e6e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e64:	f043 0208 	orr.w	r2, r3, #8
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e90:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002e92:	7efb      	ldrb	r3, [r7, #27]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	f040 80e8 	bne.w	800306a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d137      	bne.n	8002f10 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0db      	b.n	8003078 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	e036      	b.n	8002f7e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0a3      	b.n	8003078 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f38:	0e1b      	lsrs	r3, r3, #24
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10a      	bne.n	8002f58 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3304      	adds	r3, #4
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e1b      	lsrs	r3, r3, #24
 8003002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0fda      	lsrs	r2, r3, #31
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3304      	adds	r3, #4
 8003018:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	e00a      	b.n	800303a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	441a      	add	r2, r3
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	440b      	add	r3, r1
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	3301      	adds	r3, #1
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a11      	ldr	r2, [pc, #68]	; (8003084 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	461a      	mov	r2, r3
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4293      	cmp	r3, r2
 8003048:	d3ec      	bcc.n	8003024 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d105      	bne.n	800305c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800305a:	e004      	b.n	8003066 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e006      	b.n	8003078 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	f043 0208 	orr.w	r2, r3, #8
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	372c      	adds	r7, #44	; 0x2c
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	08008cf4 	.word	0x08008cf4

08003088 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800309a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d003      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0x22>
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f040 80c8 	bne.w	800323a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03b      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d031      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d027      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d013      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d13b      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d131      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d127      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00c      	beq.n	80031ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0202 	orr.w	r2, r2, #2
 80031e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	430a      	orrs	r2, r1
 8003204:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	430a      	orrs	r2, r1
 8003222:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	430a      	orrs	r2, r1
 8003234:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e006      	b.n	8003248 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08c      	sub	sp, #48	; 0x30
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003270:	4013      	ands	r3, r2
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	4013      	ands	r3, r2
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	4013      	ands	r3, r2
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032aa:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80032ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	4013      	ands	r3, r2
 80032ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2240      	movs	r2, #64	; 0x40
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f90b 	bl	800351c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d019      	beq.n	8003344 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003322:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800333c:	6939      	ldr	r1, [r7, #16]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8cd 	bl	80034de <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003350:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8a2 	bl	800349e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003366:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe f8fc 	bl	8001568 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7fe f9d5 	bl	8001730 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00c      	beq.n	80033aa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f885 	bl	80034b4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d018      	beq.n	80033e6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f871 	bl	80034c8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003402:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f875 	bl	80034f4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003426:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f86d 	bl	8003508 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00f      	beq.n	8003458 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800344a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f86b 	bl	8003544 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f84d 	bl	8003530 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003496:	bf00      	nop
 8003498:	3730      	adds	r7, #48	; 0x30
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003566:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2f      	ldr	r2, [pc, #188]	; (800362c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d103      	bne.n	800357a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003578:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800358a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	041a      	lsls	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	061a      	lsls	r2, r3, #24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e005      	b.n	800360e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3304      	adds	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3f3      	bcc.n	8003602 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	4000a400 	.word	0x4000a400
 800362c:	40006800 	.word	0x40006800
 8003630:	40006c00 	.word	0x40006c00

08003634 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003652:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800365a:	4313      	orrs	r3, r2
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e00a      	b.n	8003676 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003668:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800366e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003674:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003680:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003686:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800368c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	3304      	adds	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	3304      	adds	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e020      	b.n	800370a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3303      	adds	r3, #3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3302      	adds	r3, #2
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	440b      	add	r3, r1
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80036e0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	3301      	adds	r3, #1
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	440b      	add	r3, r1
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80036ee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	440a      	add	r2, r1
 80036f6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80036f8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	3304      	adds	r3, #4
 8003702:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3304      	adds	r3, #4
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a06      	ldr	r2, [pc, #24]	; (8003728 <FDCAN_CopyMessageToRAM+0xf4>)
 8003710:	5cd3      	ldrb	r3, [r2, r3]
 8003712:	461a      	mov	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4293      	cmp	r3, r2
 8003718:	d3d6      	bcc.n	80036c8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	3724      	adds	r7, #36	; 0x24
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	08008cf4 	.word	0x08008cf4

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800373a:	e15a      	b.n	80039f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 814c 	beq.w	80039ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d005      	beq.n	800376c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003768:	2b02      	cmp	r3, #2
 800376a:	d130      	bne.n	80037ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037a2:	2201      	movs	r2, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 0201 	and.w	r2, r3, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d017      	beq.n	800380a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d123      	bne.n	800385e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	6939      	ldr	r1, [r7, #16]
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a0:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <HAL_GPIO_Init+0x2e4>)
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	4a5a      	ldr	r2, [pc, #360]	; (8003a10 <HAL_GPIO_Init+0x2e4>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6613      	str	r3, [r2, #96]	; 0x60
 80038ac:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_GPIO_Init+0x2e4>)
 80038ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038e2:	d01f      	beq.n	8003924 <HAL_GPIO_Init+0x1f8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_GPIO_Init+0x2ec>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d019      	beq.n	8003920 <HAL_GPIO_Init+0x1f4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_GPIO_Init+0x1f0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <HAL_GPIO_Init+0x2f4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00d      	beq.n	8003918 <HAL_GPIO_Init+0x1ec>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a49      	ldr	r2, [pc, #292]	; (8003a24 <HAL_GPIO_Init+0x2f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <HAL_GPIO_Init+0x1e8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a48      	ldr	r2, [pc, #288]	; (8003a28 <HAL_GPIO_Init+0x2fc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_GPIO_Init+0x1e4>
 800390c:	2305      	movs	r3, #5
 800390e:	e00a      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 8003910:	2306      	movs	r3, #6
 8003912:	e008      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 8003914:	2304      	movs	r3, #4
 8003916:	e006      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 8003918:	2303      	movs	r3, #3
 800391a:	e004      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 800391c:	2302      	movs	r3, #2
 800391e:	e002      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_GPIO_Init+0x1fa>
 8003924:	2300      	movs	r3, #0
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	f002 0203 	and.w	r2, r2, #3
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	4093      	lsls	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003936:	4937      	ldr	r1, [pc, #220]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3302      	adds	r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_GPIO_Init+0x300>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <HAL_GPIO_Init+0x300>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_GPIO_Init+0x300>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <HAL_GPIO_Init+0x300>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003998:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_GPIO_Init+0x300>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_GPIO_Init+0x300>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_GPIO_Init+0x300>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_GPIO_Init+0x300>)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3301      	adds	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f ae9d 	bne.w	800373c <HAL_GPIO_Init+0x10>
  }
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40010000 	.word	0x40010000
 8003a18:	48000400 	.word	0x48000400
 8003a1c:	48000800 	.word	0x48000800
 8003a20:	48000c00 	.word	0x48000c00
 8003a24:	48001000 	.word	0x48001000
 8003a28:	48001400 	.word	0x48001400
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fc12 	bl	80012a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40010400 	.word	0x40010400

08003a90 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e041      	b.n	8003b26 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f245 5255 	movw	r2, #21845	; 0x5555
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6852      	ldr	r2, [r2, #4]
 8003abe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003aca:	f7fe fe35 	bl	8002738 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ad0:	e00f      	b.n	8003af2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003ad2:	f7fe fe31 	bl	8002738 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b31      	cmp	r3, #49	; 0x31
 8003ade:	d908      	bls.n	8003af2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e019      	b.n	8003b26 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e8      	bne.n	8003ad2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d005      	beq.n	8003b1a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	611a      	str	r2, [r3, #16]
 8003b18:	e004      	b.n	8003b24 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d141      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d131      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b6c:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b72:	4a46      	ldr	r2, [pc, #280]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7c:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b84:	4a41      	ldr	r2, [pc, #260]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b8c:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2232      	movs	r2, #50	; 0x32
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	4a3f      	ldr	r2, [pc, #252]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba2:	e002      	b.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d102      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d158      	bne.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e057      	b.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003be0:	e04d      	b.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d141      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d131      	bne.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	0c9b      	lsrs	r3, r3, #18
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2e:	e002      	b.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d102      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f2      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d112      	bne.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e011      	b.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c6c:	e007      	b.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	20000078 	.word	0x20000078
 8003c94:	431bde83 	.word	0x431bde83

08003c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e2fe      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d075      	beq.n	8003da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b97      	ldr	r3, [pc, #604]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x3e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_OscConfig+0x44>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4b8d      	ldr	r3, [pc, #564]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d05b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x108>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d157      	bne.n	8003da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2d9      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x74>
 8003cfe:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a84      	ldr	r2, [pc, #528]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e01d      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x98>
 8003d16:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7b      	ldr	r2, [pc, #492]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d30:	4b78      	ldr	r3, [pc, #480]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a77      	ldr	r2, [pc, #476]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b75      	ldr	r3, [pc, #468]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a74      	ldr	r2, [pc, #464]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fcf2 	bl	8002738 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fe fcee 	bl	8002738 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e29e      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0xc0>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fe fcde 	bl	8002738 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fe fcda 	bl	8002738 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e28a      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	4b60      	ldr	r3, [pc, #384]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0xe8>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d075      	beq.n	8003e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db8:	4b56      	ldr	r3, [pc, #344]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_OscConfig+0x136>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x13c>
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d11f      	bne.n	8003e14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_OscConfig+0x154>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e25d      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	4946      	ldr	r1, [pc, #280]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <HAL_RCC_OscConfig+0x280>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fc4b 	bl	80026a0 <HAL_InitTick>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d043      	beq.n	8003e98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e249      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d023      	beq.n	8003e64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe fc86 	bl	8002738 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fe fc82 	bl	8002738 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e232      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	492d      	ldr	r1, [pc, #180]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e01a      	b.n	8003e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fc62 	bl	8002738 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fc5e 	bl	8002738 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e20e      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e8a:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1e0>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d041      	beq.n	8003f2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fc3b 	bl	8002738 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fc37 	bl	8002738 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e1e7      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ef      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x22e>
 8003ee6:	e020      	b.n	8003f2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe fc1e 	bl	8002738 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003efe:	e00d      	b.n	8003f1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fe fc1a 	bl	8002738 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d906      	bls.n	8003f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1ca      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	4b8c      	ldr	r3, [pc, #560]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ea      	bne.n	8003f00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a6 	beq.w	8004084 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3c:	4b84      	ldr	r3, [pc, #528]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2b4>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x2b6>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a7e      	ldr	r2, [pc, #504]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5e:	4b7c      	ldr	r3, [pc, #496]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6e:	4b79      	ldr	r3, [pc, #484]	; (8004154 <HAL_RCC_OscConfig+0x4bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d118      	bne.n	8003fac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCC_OscConfig+0x4bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x4bc>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f86:	f7fe fbd7 	bl	8002738 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8e:	f7fe fbd3 	bl	8002738 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e183      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x4bc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x32e>
 8003fb4:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	4a65      	ldr	r2, [pc, #404]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc4:	e024      	b.n	8004010 <HAL_RCC_OscConfig+0x378>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d110      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x358>
 8003fce:	4b60      	ldr	r3, [pc, #384]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	4a5e      	ldr	r2, [pc, #376]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fde:	4b5c      	ldr	r3, [pc, #368]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	4a5a      	ldr	r2, [pc, #360]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fee:	e00f      	b.n	8004010 <HAL_RCC_OscConfig+0x378>
 8003ff0:	4b57      	ldr	r3, [pc, #348]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	4a56      	ldr	r2, [pc, #344]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe fb8e 	bl	8002738 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fe fb8a 	bl	8002738 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e138      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004036:	4b46      	ldr	r3, [pc, #280]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ed      	beq.n	8004020 <HAL_RCC_OscConfig+0x388>
 8004044:	e015      	b.n	8004072 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fe fb77 	bl	8002738 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fe fb73 	bl	8002738 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e121      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004064:	4b3a      	ldr	r3, [pc, #232]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ed      	bne.n	800404e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	4a34      	ldr	r2, [pc, #208]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d03c      	beq.n	800410a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01c      	beq.n	80040d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe fb46 	bl	8002738 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b0:	f7fe fb42 	bl	8002738 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0f2      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <HAL_RCC_OscConfig+0x418>
 80040d0:	e01b      	b.n	800410a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040d2:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fe fb29 	bl	8002738 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ea:	f7fe fb25 	bl	8002738 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e0d5      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ef      	bne.n	80040ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80c9 	beq.w	80042a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f000 8083 	beq.w	8004228 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d15e      	bne.n	80041e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fe faff 	bl	8002738 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	e00c      	b.n	8004158 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413e:	f7fe fafb 	bl	8002738 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d905      	bls.n	8004158 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0ab      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ec      	bne.n	800413e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004164:	4b52      	ldr	r3, [pc, #328]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_RCC_OscConfig+0x61c>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6a11      	ldr	r1, [r2, #32]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004174:	3a01      	subs	r2, #1
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800417e:	0212      	lsls	r2, r2, #8
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0552      	lsls	r2, r2, #21
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800419e:	06d2      	lsls	r2, r2, #27
 80041a0:	430a      	orrs	r2, r1
 80041a2:	4943      	ldr	r1, [pc, #268]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a3d      	ldr	r2, [pc, #244]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fe faba 	bl	8002738 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fab6 	bl	8002738 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e066      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x530>
 80041e6:	e05e      	b.n	80042a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a30      	ldr	r2, [pc, #192]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe faa0 	bl	8002738 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fa9c 	bl	8002738 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04c      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	4924      	ldr	r1, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_OscConfig+0x620>)
 8004222:	4013      	ands	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
 8004226:	e03e      	b.n	80042a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e039      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004234:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 0203 	and.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	d12c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	3b01      	subs	r3, #1
 8004254:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d123      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11b      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d113      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	3b01      	subs	r3, #1
 8004288:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	019f800c 	.word	0x019f800c
 80042b8:	feeefffc 	.word	0xfeeefffc

080042bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e11e      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b91      	ldr	r3, [pc, #580]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b8e      	ldr	r3, [pc, #568]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 020f 	bic.w	r2, r3, #15
 80042ea:	498c      	ldr	r1, [pc, #560]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b8a      	ldr	r3, [pc, #552]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e106      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d073      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d129      	bne.n	800436c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004318:	4b81      	ldr	r3, [pc, #516]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0f4      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004328:	f000 f99e 	bl	8004668 <RCC_GetSysClockFreqFromPLLSource>
 800432c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4a7c      	ldr	r2, [pc, #496]	; (8004524 <HAL_RCC_ClockConfig+0x268>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d93f      	bls.n	80043b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004336:	4b7a      	ldr	r3, [pc, #488]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800434a:	2b00      	cmp	r3, #0
 800434c:	d033      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12f      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004356:	4b72      	ldr	r3, [pc, #456]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435e:	4a70      	ldr	r2, [pc, #448]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004364:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e024      	b.n	80043b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d107      	bne.n	8004384 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0c6      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004384:	4b66      	ldr	r3, [pc, #408]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0be      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004394:	f000 f8ce 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8004398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4a61      	ldr	r2, [pc, #388]	; (8004524 <HAL_RCC_ClockConfig+0x268>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d909      	bls.n	80043b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043a2:	4b5f      	ldr	r3, [pc, #380]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043aa:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80043ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b5a      	ldr	r3, [pc, #360]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4957      	ldr	r1, [pc, #348]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fe f9b6 	bl	8002738 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fe f9b2 	bl	8002738 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e095      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b4e      	ldr	r3, [pc, #312]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d023      	beq.n	800444c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004410:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a42      	ldr	r2, [pc, #264]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800441a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004428:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004430:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4936      	ldr	r1, [pc, #216]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	e008      	b.n	800445e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d105      	bne.n	800445e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004452:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4a32      	ldr	r2, [pc, #200]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 8004458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d21d      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 020f 	bic.w	r2, r3, #15
 8004474:	4929      	ldr	r1, [pc, #164]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800447c:	f7fe f95c 	bl	8002738 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	e00a      	b.n	800449a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004484:	f7fe f958 	bl	8002738 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e03b      	b.n	8004512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1ed      	bne.n	8004484 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4917      	ldr	r1, [pc, #92]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490f      	ldr	r1, [pc, #60]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044e6:	f000 f825 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	490c      	ldr	r1, [pc, #48]	; (8004528 <HAL_RCC_ClockConfig+0x26c>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <HAL_RCC_ClockConfig+0x270>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_RCC_ClockConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe f8c8 	bl	80026a0 <HAL_InitTick>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40022000 	.word	0x40022000
 8004520:	40021000 	.word	0x40021000
 8004524:	04c4b400 	.word	0x04c4b400
 8004528:	08008cdc 	.word	0x08008cdc
 800452c:	20000078 	.word	0x20000078
 8004530:	2000007c 	.word	0x2000007c

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800453a:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b04      	cmp	r3, #4
 8004544:	d102      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e047      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b08      	cmp	r3, #8
 8004556:	d102      	bne.n	800455e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004558:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e03e      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800455e:	4b23      	ldr	r3, [pc, #140]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d136      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3301      	adds	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004588:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004592:	68d2      	ldr	r2, [r2, #12]
 8004594:	0a12      	lsrs	r2, r2, #8
 8004596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
      break;
 80045a0:	e00c      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a2:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	0a12      	lsrs	r2, r2, #8
 80045b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
      break;
 80045ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0e5b      	lsrs	r3, r3, #25
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e001      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045dc:	693b      	ldr	r3, [r7, #16]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	007a1200 	.word	0x007a1200

080045f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000078 	.word	0x20000078

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4904      	ldr	r1, [pc, #16]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000
 8004638:	08008cec 	.word	0x08008cec

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004640:	f7ff ffda 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0adb      	lsrs	r3, r3, #11
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4904      	ldr	r1, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	08008cec 	.word	0x08008cec

08004668 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d10c      	bne.n	80046a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004696:	68d2      	ldr	r2, [r2, #12]
 8004698:	0a12      	lsrs	r2, r2, #8
 800469a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
    break;
 80046a4:	e00c      	b.n	80046c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046b0:	68d2      	ldr	r2, [r2, #12]
 80046b2:	0a12      	lsrs	r2, r2, #8
 80046b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
    break;
 80046be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	0e5b      	lsrs	r3, r3, #25
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	3301      	adds	r3, #1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046da:	687b      	ldr	r3, [r7, #4]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40021000 	.word	0x40021000
 80046ec:	007a1200 	.word	0x007a1200
 80046f0:	00f42400 	.word	0x00f42400

080046f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046fc:	2300      	movs	r3, #0
 80046fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004700:	2300      	movs	r3, #0
 8004702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8098 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004712:	2300      	movs	r3, #0
 8004714:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004716:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4a3f      	ldr	r2, [pc, #252]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
 800472e:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473e:	4b3a      	ldr	r3, [pc, #232]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a39      	ldr	r2, [pc, #228]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800474a:	f7fd fff5 	bl	8002738 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004750:	e009      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd fff1 	bl	8002738 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d902      	bls.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	74fb      	strb	r3, [r7, #19]
        break;
 8004764:	e005      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004766:	4b30      	ldr	r3, [pc, #192]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ef      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d159      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01e      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	d019      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd ffb1 	bl	8002738 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d8:	e00b      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fd ffad 	bl	8002738 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d902      	bls.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	74fb      	strb	r3, [r7, #19]
            break;
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ec      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800481c:	e008      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	74bb      	strb	r3, [r7, #18]
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004830:	7c7b      	ldrb	r3, [r7, #17]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004836:	4ba7      	ldr	r3, [pc, #668]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	4aa6      	ldr	r2, [pc, #664]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004840:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484e:	4ba1      	ldr	r3, [pc, #644]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f023 0203 	bic.w	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	499d      	ldr	r1, [pc, #628]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f023 020c 	bic.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4995      	ldr	r1, [pc, #596]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004892:	4b90      	ldr	r3, [pc, #576]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	498c      	ldr	r1, [pc, #560]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b4:	4b87      	ldr	r3, [pc, #540]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	4984      	ldr	r1, [pc, #528]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d6:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	497b      	ldr	r1, [pc, #492]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048f8:	4b76      	ldr	r3, [pc, #472]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	4973      	ldr	r1, [pc, #460]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800491a:	4b6e      	ldr	r3, [pc, #440]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	496a      	ldr	r1, [pc, #424]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493c:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4962      	ldr	r1, [pc, #392]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800495e:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	4959      	ldr	r1, [pc, #356]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004980:	4b54      	ldr	r3, [pc, #336]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004986:	f023 0203 	bic.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	4951      	ldr	r1, [pc, #324]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a2:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4948      	ldr	r1, [pc, #288]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c4:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4940      	ldr	r1, [pc, #256]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d105      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a3a      	ldr	r2, [pc, #232]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049fc:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	4932      	ldr	r1, [pc, #200]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	4924      	ldr	r1, [pc, #144]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a52:	d105      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a6c:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	4916      	ldr	r1, [pc, #88]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d019      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4908      	ldr	r1, [pc, #32]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac2:	d109      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a02      	ldr	r2, [pc, #8]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ace:	60d3      	str	r3, [r2, #12]
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	4926      	ldr	r1, [pc, #152]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b02:	d105      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2a:	4918      	ldr	r1, [pc, #96]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d015      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e049      	b.n	8004c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fb98 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 fa54 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e054      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d022      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d01d      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x80>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d115      	bne.n	8004cec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_TIM_Base_Start_IT+0xec>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d015      	beq.n	8004cfe <HAL_TIM_Base_Start_IT+0xbe>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd8:	d011      	beq.n	8004cfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e008      	b.n	8004cfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40015000 	.word	0x40015000
 8004d2c:	00010007 	.word	0x00010007

08004d30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <HAL_TIM_Base_Stop_IT+0x48>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	f244 4344 	movw	r3, #17476	; 0x4444
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_Base_Stop_IT+0x48>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d020      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01b      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0202 	mvn.w	r2, #2
 8004dc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f931 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004dde:	e005      	b.n	8004dec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f923 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f934 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01b      	beq.n	8004e3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0204 	mvn.w	r2, #4
 8004e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f90b 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004e2a:	e005      	b.n	8004e38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f8fd 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f90e 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01b      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0208 	mvn.w	r2, #8
 8004e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2204      	movs	r2, #4
 8004e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8e5 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004e76:	e005      	b.n	8004e84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8d7 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8e8 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01b      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f06f 0210 	mvn.w	r2, #16
 8004ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2208      	movs	r2, #8
 8004eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8bf 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004ec2:	e005      	b.n	8004ed0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8b1 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8c2 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0201 	mvn.w	r2, #1
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fc fae7 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9fe 	bl	8005324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9f6 	bl	8005338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f87c 	bl	8005068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0220 	mvn.w	r2, #32
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9be 	bl	8005310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9ca 	bl	800534c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9c2 	bl	8005360 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00c      	beq.n	8005000 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9ba 	bl	8005374 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9b2 	bl	8005388 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4c      	ldr	r2, [pc, #304]	; (80051c0 <TIM_Base_SetConfig+0x144>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d017      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d013      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a49      	ldr	r2, [pc, #292]	; (80051c4 <TIM_Base_SetConfig+0x148>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a48      	ldr	r2, [pc, #288]	; (80051c8 <TIM_Base_SetConfig+0x14c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a47      	ldr	r2, [pc, #284]	; (80051cc <TIM_Base_SetConfig+0x150>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a46      	ldr	r2, [pc, #280]	; (80051d0 <TIM_Base_SetConfig+0x154>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x48>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a45      	ldr	r2, [pc, #276]	; (80051d4 <TIM_Base_SetConfig+0x158>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a39      	ldr	r2, [pc, #228]	; (80051c0 <TIM_Base_SetConfig+0x144>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d023      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d01f      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a36      	ldr	r2, [pc, #216]	; (80051c4 <TIM_Base_SetConfig+0x148>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01b      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <TIM_Base_SetConfig+0x14c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d017      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a34      	ldr	r2, [pc, #208]	; (80051cc <TIM_Base_SetConfig+0x150>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a33      	ldr	r2, [pc, #204]	; (80051d0 <TIM_Base_SetConfig+0x154>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a33      	ldr	r2, [pc, #204]	; (80051d8 <TIM_Base_SetConfig+0x15c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a32      	ldr	r2, [pc, #200]	; (80051dc <TIM_Base_SetConfig+0x160>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a31      	ldr	r2, [pc, #196]	; (80051e0 <TIM_Base_SetConfig+0x164>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_Base_SetConfig+0x158>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <TIM_Base_SetConfig+0x144>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <TIM_Base_SetConfig+0x110>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <TIM_Base_SetConfig+0x154>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0x110>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <TIM_Base_SetConfig+0x15c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0x110>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <TIM_Base_SetConfig+0x160>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0x110>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <TIM_Base_SetConfig+0x164>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0x110>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <TIM_Base_SetConfig+0x158>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]
  }
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40015000 	.word	0x40015000
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e074      	b.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005240:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d022      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d01d      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10c      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40015000 	.word	0x40015000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40014000 	.word	0x40014000

08005310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e042      	b.n	8005434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fc ff3b 	bl	800223c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2224      	movs	r2, #36	; 0x24
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fbb2 	bl	8005b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8b3 	bl	8005558 <UART_SetConfig>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e01b      	b.n	8005434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fc31 	bl	8005c94 <UART_CheckIdleState>
 8005432:	4603      	mov	r3, r0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	2b20      	cmp	r3, #32
 8005454:	d17b      	bne.n	800554e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_UART_Transmit+0x26>
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e074      	b.n	8005550 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2221      	movs	r2, #33	; 0x21
 8005472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005476:	f7fd f95f 	bl	8002738 <HAL_GetTick>
 800547a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005494:	d108      	bne.n	80054a8 <HAL_UART_Transmit+0x6c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	e003      	b.n	80054b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054b0:	e030      	b.n	8005514 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fc93 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e03d      	b.n	8005550 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	3302      	adds	r3, #2
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e007      	b.n	8005502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	3301      	adds	r3, #1
 8005500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1c8      	bne.n	80054b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fc5c 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e006      	b.n	8005550 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800555c:	b08c      	sub	sp, #48	; 0x30
 800555e:	af00      	add	r7, sp, #0
 8005560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4baa      	ldr	r3, [pc, #680]	; (8005830 <UART_SetConfig+0x2d8>)
 8005588:	4013      	ands	r3, r2
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005590:	430b      	orrs	r3, r1
 8005592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a9f      	ldr	r2, [pc, #636]	; (8005834 <UART_SetConfig+0x2dc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c0:	4313      	orrs	r3, r2
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d8:	430b      	orrs	r3, r1
 80055da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	f023 010f 	bic.w	r1, r3, #15
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a90      	ldr	r2, [pc, #576]	; (8005838 <UART_SetConfig+0x2e0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d125      	bne.n	8005648 <UART_SetConfig+0xf0>
 80055fc:	4b8f      	ldr	r3, [pc, #572]	; (800583c <UART_SetConfig+0x2e4>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d81a      	bhi.n	8005640 <UART_SetConfig+0xe8>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0xb8>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005621 	.word	0x08005621
 8005614:	08005631 	.word	0x08005631
 8005618:	08005629 	.word	0x08005629
 800561c:	08005639 	.word	0x08005639
 8005620:	2301      	movs	r3, #1
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e116      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e112      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e10e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e10a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e106      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <UART_SetConfig+0x2e8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d138      	bne.n	80056c4 <UART_SetConfig+0x16c>
 8005652:	4b7a      	ldr	r3, [pc, #488]	; (800583c <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d82d      	bhi.n	80056bc <UART_SetConfig+0x164>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x110>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800569d 	.word	0x0800569d
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056bd 	.word	0x080056bd
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056bd 	.word	0x080056bd
 8005684:	080056bd 	.word	0x080056bd
 8005688:	080056a5 	.word	0x080056a5
 800568c:	080056bd 	.word	0x080056bd
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056b5 	.word	0x080056b5
 800569c:	2300      	movs	r3, #0
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a2:	e0d8      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e0d4      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e0d0      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e0cc      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e0c8      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <UART_SetConfig+0x2ec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d125      	bne.n	800571a <UART_SetConfig+0x1c2>
 80056ce:	4b5b      	ldr	r3, [pc, #364]	; (800583c <UART_SetConfig+0x2e4>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056d8:	2b30      	cmp	r3, #48	; 0x30
 80056da:	d016      	beq.n	800570a <UART_SetConfig+0x1b2>
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d818      	bhi.n	8005712 <UART_SetConfig+0x1ba>
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d00a      	beq.n	80056fa <UART_SetConfig+0x1a2>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d814      	bhi.n	8005712 <UART_SetConfig+0x1ba>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <UART_SetConfig+0x19a>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d008      	beq.n	8005702 <UART_SetConfig+0x1aa>
 80056f0:	e00f      	b.n	8005712 <UART_SetConfig+0x1ba>
 80056f2:	2300      	movs	r3, #0
 80056f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f8:	e0ad      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056fa:	2302      	movs	r3, #2
 80056fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005700:	e0a9      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005702:	2304      	movs	r3, #4
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005708:	e0a5      	b.n	8005856 <UART_SetConfig+0x2fe>
 800570a:	2308      	movs	r3, #8
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005710:	e0a1      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005712:	2310      	movs	r3, #16
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005718:	e09d      	b.n	8005856 <UART_SetConfig+0x2fe>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4a      	ldr	r2, [pc, #296]	; (8005848 <UART_SetConfig+0x2f0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d125      	bne.n	8005770 <UART_SetConfig+0x218>
 8005724:	4b45      	ldr	r3, [pc, #276]	; (800583c <UART_SetConfig+0x2e4>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800572e:	2bc0      	cmp	r3, #192	; 0xc0
 8005730:	d016      	beq.n	8005760 <UART_SetConfig+0x208>
 8005732:	2bc0      	cmp	r3, #192	; 0xc0
 8005734:	d818      	bhi.n	8005768 <UART_SetConfig+0x210>
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d00a      	beq.n	8005750 <UART_SetConfig+0x1f8>
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d814      	bhi.n	8005768 <UART_SetConfig+0x210>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <UART_SetConfig+0x1f0>
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d008      	beq.n	8005758 <UART_SetConfig+0x200>
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x210>
 8005748:	2300      	movs	r3, #0
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574e:	e082      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005750:	2302      	movs	r3, #2
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005756:	e07e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005758:	2304      	movs	r3, #4
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575e:	e07a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005760:	2308      	movs	r3, #8
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005766:	e076      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005768:	2310      	movs	r3, #16
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576e:	e072      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a35      	ldr	r2, [pc, #212]	; (800584c <UART_SetConfig+0x2f4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d12a      	bne.n	80057d0 <UART_SetConfig+0x278>
 800577a:	4b30      	ldr	r3, [pc, #192]	; (800583c <UART_SetConfig+0x2e4>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005788:	d01a      	beq.n	80057c0 <UART_SetConfig+0x268>
 800578a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578e:	d81b      	bhi.n	80057c8 <UART_SetConfig+0x270>
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d00c      	beq.n	80057b0 <UART_SetConfig+0x258>
 8005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579a:	d815      	bhi.n	80057c8 <UART_SetConfig+0x270>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <UART_SetConfig+0x250>
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d008      	beq.n	80057b8 <UART_SetConfig+0x260>
 80057a6:	e00f      	b.n	80057c8 <UART_SetConfig+0x270>
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e052      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057b0:	2302      	movs	r3, #2
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e04e      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e04a      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e046      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e042      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <UART_SetConfig+0x2dc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d13a      	bne.n	8005850 <UART_SetConfig+0x2f8>
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <UART_SetConfig+0x2e4>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e8:	d01a      	beq.n	8005820 <UART_SetConfig+0x2c8>
 80057ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ee:	d81b      	bhi.n	8005828 <UART_SetConfig+0x2d0>
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f4:	d00c      	beq.n	8005810 <UART_SetConfig+0x2b8>
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d815      	bhi.n	8005828 <UART_SetConfig+0x2d0>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <UART_SetConfig+0x2b0>
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d008      	beq.n	8005818 <UART_SetConfig+0x2c0>
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x2d0>
 8005808:	2300      	movs	r3, #0
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580e:	e022      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005810:	2302      	movs	r3, #2
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e01e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005818:	2304      	movs	r3, #4
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e01a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005820:	2308      	movs	r3, #8
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e016      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005828:	2310      	movs	r3, #16
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e012      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005830:	cfff69f3 	.word	0xcfff69f3
 8005834:	40008000 	.word	0x40008000
 8005838:	40013800 	.word	0x40013800
 800583c:	40021000 	.word	0x40021000
 8005840:	40004400 	.word	0x40004400
 8005844:	40004800 	.word	0x40004800
 8005848:	40004c00 	.word	0x40004c00
 800584c:	40005000 	.word	0x40005000
 8005850:	2310      	movs	r3, #16
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4aae      	ldr	r2, [pc, #696]	; (8005b14 <UART_SetConfig+0x5bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	f040 8097 	bne.w	8005990 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005866:	2b08      	cmp	r3, #8
 8005868:	d823      	bhi.n	80058b2 <UART_SetConfig+0x35a>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0x318>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005895 	.word	0x08005895
 8005874:	080058b3 	.word	0x080058b3
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058a3 	.word	0x080058a3
 8005884:	080058b3 	.word	0x080058b3
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058b3 	.word	0x080058b3
 8005890:	080058ab 	.word	0x080058ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fe febc 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800589a:	e010      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589c:	4b9e      	ldr	r3, [pc, #632]	; (8005b18 <UART_SetConfig+0x5c0>)
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a0:	e00d      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fe fe47 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058a8:	e009      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b0:	e005      	b.n	80058be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8130 	beq.w	8005b26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4a94      	ldr	r2, [pc, #592]	; (8005b1c <UART_SetConfig+0x5c4>)
 80058cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d305      	bcc.n	80058f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d903      	bls.n	80058fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058fc:	e113      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2200      	movs	r2, #0
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	60fa      	str	r2, [r7, #12]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4a84      	ldr	r2, [pc, #528]	; (8005b1c <UART_SetConfig+0x5c4>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	b29b      	uxth	r3, r3
 8005912:	2200      	movs	r2, #0
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005920:	f7fb f9ba 	bl	8000c98 <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	020b      	lsls	r3, r1, #8
 8005936:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800593a:	0202      	lsls	r2, r0, #8
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	6849      	ldr	r1, [r1, #4]
 8005940:	0849      	lsrs	r1, r1, #1
 8005942:	2000      	movs	r0, #0
 8005944:	460c      	mov	r4, r1
 8005946:	4605      	mov	r5, r0
 8005948:	eb12 0804 	adds.w	r8, r2, r4
 800594c:	eb43 0905 	adc.w	r9, r3, r5
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	469a      	mov	sl, r3
 8005958:	4693      	mov	fp, r2
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fb f999 	bl	8000c98 <__aeabi_uldivmod>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4613      	mov	r3, r2
 800596c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d308      	bcc.n	8005988 <UART_SetConfig+0x430>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597c:	d204      	bcs.n	8005988 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	e0ce      	b.n	8005b26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800598e:	e0ca      	b.n	8005b26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005998:	d166      	bne.n	8005a68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800599a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d827      	bhi.n	80059f2 <UART_SetConfig+0x49a>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x450>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fe fe20 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 80059d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059d2:	e014      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fe fe32 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059da:	e010      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <UART_SetConfig+0x5c0>)
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e0:	e00d      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fe fda7 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e8:	e009      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059f0:	e005      	b.n	80059fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8090 	beq.w	8005b26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	4a44      	ldr	r2, [pc, #272]	; (8005b1c <UART_SetConfig+0x5c4>)
 8005a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	005a      	lsls	r2, r3, #1
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d916      	bls.n	8005a60 <UART_SetConfig+0x508>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d212      	bcs.n	8005a60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	8bfb      	ldrh	r3, [r7, #30]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	8bfa      	ldrh	r2, [r7, #30]
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	e062      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a66:	e05e      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d828      	bhi.n	8005ac2 <UART_SetConfig+0x56a>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x520>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac3 	.word	0x08005ac3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005ac3 	.word	0x08005ac3
 8005a98:	08005abb 	.word	0x08005abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fe fdb8 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aa2:	e014      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fe fdca 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aaa:	e010      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aac:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <UART_SetConfig+0x5c0>)
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ab0:	e00d      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab2:	f7fe fd3f 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8005ab6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab8:	e009      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ac0:	e005      	b.n	8005ace <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005acc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <UART_SetConfig+0x5c4>)
 8005ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d910      	bls.n	8005b20 <UART_SetConfig+0x5c8>
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d20c      	bcs.n	8005b20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e009      	b.n	8005b26 <UART_SetConfig+0x5ce>
 8005b12:	bf00      	nop
 8005b14:	40008000 	.word	0x40008000
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	08008d04 	.word	0x08008d04
      }
      else
      {
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3730      	adds	r7, #48	; 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01a      	beq.n	8005c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4e:	d10a      	bne.n	8005c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]
  }
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b098      	sub	sp, #96	; 0x60
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca4:	f7fc fd48 	bl	8002738 <HAL_GetTick>
 8005ca8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d12f      	bne.n	8005d18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f88e 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d022      	beq.n	8005d18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e063      	b.n	8005de0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d149      	bne.n	8005dba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f857 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d03c      	beq.n	8005dba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e6      	bne.n	8005d40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d92:	61fa      	str	r2, [r7, #28]
 8005d94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e012      	b.n	8005de0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3758      	adds	r7, #88	; 0x58
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df8:	e04f      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d04b      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fc fc99 	bl	8002738 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e04e      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d037      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d034      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d031      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d110      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f838 	bl	8005ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2208      	movs	r2, #8
 8005e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e029      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e74:	d111      	bne.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f81e 	bl	8005ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e00f      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d0a0      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b095      	sub	sp, #84	; 0x54
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e6      	bne.n	8005eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e3      	bne.n	8005efc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d118      	bne.n	8005f6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f023 0310 	bic.w	r3, r3, #16
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	613b      	str	r3, [r7, #16]
   return(result);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f82:	bf00      	nop
 8005f84:	3754      	adds	r7, #84	; 0x54
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e027      	b.n	8005ff4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e02d      	b.n	8006074 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2224      	movs	r2, #36	; 0x24
 8006024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f84f 	bl	80060f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e02d      	b.n	80060f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f811 	bl	80060f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006118:	e031      	b.n	800617e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800611a:	2308      	movs	r3, #8
 800611c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800611e:	2308      	movs	r3, #8
 8006120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	0e5b      	lsrs	r3, r3, #25
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	0f5b      	lsrs	r3, r3, #29
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	7b3a      	ldrb	r2, [r7, #12]
 8006146:	4911      	ldr	r1, [pc, #68]	; (800618c <UARTEx_SetNbDataToProcess+0x94>)
 8006148:	5c8a      	ldrb	r2, [r1, r2]
 800614a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800614e:	7b3a      	ldrb	r2, [r7, #12]
 8006150:	490f      	ldr	r1, [pc, #60]	; (8006190 <UARTEx_SetNbDataToProcess+0x98>)
 8006152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006154:	fb93 f3f2 	sdiv	r3, r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	7b7a      	ldrb	r2, [r7, #13]
 8006164:	4909      	ldr	r1, [pc, #36]	; (800618c <UARTEx_SetNbDataToProcess+0x94>)
 8006166:	5c8a      	ldrb	r2, [r1, r2]
 8006168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800616c:	7b7a      	ldrb	r2, [r7, #13]
 800616e:	4908      	ldr	r1, [pc, #32]	; (8006190 <UARTEx_SetNbDataToProcess+0x98>)
 8006170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006172:	fb93 f3f2 	sdiv	r3, r3, r2
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	08008d1c 	.word	0x08008d1c
 8006190:	08008d24 	.word	0x08008d24

08006194 <__cvt>:
 8006194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	ec55 4b10 	vmov	r4, r5, d0
 800619c:	2d00      	cmp	r5, #0
 800619e:	460e      	mov	r6, r1
 80061a0:	4619      	mov	r1, r3
 80061a2:	462b      	mov	r3, r5
 80061a4:	bfbb      	ittet	lt
 80061a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061aa:	461d      	movlt	r5, r3
 80061ac:	2300      	movge	r3, #0
 80061ae:	232d      	movlt	r3, #45	; 0x2d
 80061b0:	700b      	strb	r3, [r1, #0]
 80061b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061b8:	4691      	mov	r9, r2
 80061ba:	f023 0820 	bic.w	r8, r3, #32
 80061be:	bfbc      	itt	lt
 80061c0:	4622      	movlt	r2, r4
 80061c2:	4614      	movlt	r4, r2
 80061c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061c8:	d005      	beq.n	80061d6 <__cvt+0x42>
 80061ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ce:	d100      	bne.n	80061d2 <__cvt+0x3e>
 80061d0:	3601      	adds	r6, #1
 80061d2:	2102      	movs	r1, #2
 80061d4:	e000      	b.n	80061d8 <__cvt+0x44>
 80061d6:	2103      	movs	r1, #3
 80061d8:	ab03      	add	r3, sp, #12
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	ab02      	add	r3, sp, #8
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	ec45 4b10 	vmov	d0, r4, r5
 80061e4:	4653      	mov	r3, sl
 80061e6:	4632      	mov	r2, r6
 80061e8:	f000 fef2 	bl	8006fd0 <_dtoa_r>
 80061ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061f0:	4607      	mov	r7, r0
 80061f2:	d102      	bne.n	80061fa <__cvt+0x66>
 80061f4:	f019 0f01 	tst.w	r9, #1
 80061f8:	d022      	beq.n	8006240 <__cvt+0xac>
 80061fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061fe:	eb07 0906 	add.w	r9, r7, r6
 8006202:	d110      	bne.n	8006226 <__cvt+0x92>
 8006204:	783b      	ldrb	r3, [r7, #0]
 8006206:	2b30      	cmp	r3, #48	; 0x30
 8006208:	d10a      	bne.n	8006220 <__cvt+0x8c>
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa fc81 	bl	8000b18 <__aeabi_dcmpeq>
 8006216:	b918      	cbnz	r0, 8006220 <__cvt+0x8c>
 8006218:	f1c6 0601 	rsb	r6, r6, #1
 800621c:	f8ca 6000 	str.w	r6, [sl]
 8006220:	f8da 3000 	ldr.w	r3, [sl]
 8006224:	4499      	add	r9, r3
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa fc73 	bl	8000b18 <__aeabi_dcmpeq>
 8006232:	b108      	cbz	r0, 8006238 <__cvt+0xa4>
 8006234:	f8cd 900c 	str.w	r9, [sp, #12]
 8006238:	2230      	movs	r2, #48	; 0x30
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	454b      	cmp	r3, r9
 800623e:	d307      	bcc.n	8006250 <__cvt+0xbc>
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006244:	1bdb      	subs	r3, r3, r7
 8006246:	4638      	mov	r0, r7
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	b004      	add	sp, #16
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	9103      	str	r1, [sp, #12]
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e7f0      	b.n	800623a <__cvt+0xa6>

08006258 <__exponent>:
 8006258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625a:	4603      	mov	r3, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	bfb8      	it	lt
 8006260:	4249      	neglt	r1, r1
 8006262:	f803 2b02 	strb.w	r2, [r3], #2
 8006266:	bfb4      	ite	lt
 8006268:	222d      	movlt	r2, #45	; 0x2d
 800626a:	222b      	movge	r2, #43	; 0x2b
 800626c:	2909      	cmp	r1, #9
 800626e:	7042      	strb	r2, [r0, #1]
 8006270:	dd2a      	ble.n	80062c8 <__exponent+0x70>
 8006272:	f10d 0207 	add.w	r2, sp, #7
 8006276:	4617      	mov	r7, r2
 8006278:	260a      	movs	r6, #10
 800627a:	4694      	mov	ip, r2
 800627c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006280:	fb06 1415 	mls	r4, r6, r5, r1
 8006284:	3430      	adds	r4, #48	; 0x30
 8006286:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800628a:	460c      	mov	r4, r1
 800628c:	2c63      	cmp	r4, #99	; 0x63
 800628e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006292:	4629      	mov	r1, r5
 8006294:	dcf1      	bgt.n	800627a <__exponent+0x22>
 8006296:	3130      	adds	r1, #48	; 0x30
 8006298:	f1ac 0402 	sub.w	r4, ip, #2
 800629c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80062a0:	1c41      	adds	r1, r0, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	42ba      	cmp	r2, r7
 80062a6:	d30a      	bcc.n	80062be <__exponent+0x66>
 80062a8:	f10d 0209 	add.w	r2, sp, #9
 80062ac:	eba2 020c 	sub.w	r2, r2, ip
 80062b0:	42bc      	cmp	r4, r7
 80062b2:	bf88      	it	hi
 80062b4:	2200      	movhi	r2, #0
 80062b6:	4413      	add	r3, r2
 80062b8:	1a18      	subs	r0, r3, r0
 80062ba:	b003      	add	sp, #12
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80062c6:	e7ed      	b.n	80062a4 <__exponent+0x4c>
 80062c8:	2330      	movs	r3, #48	; 0x30
 80062ca:	3130      	adds	r1, #48	; 0x30
 80062cc:	7083      	strb	r3, [r0, #2]
 80062ce:	70c1      	strb	r1, [r0, #3]
 80062d0:	1d03      	adds	r3, r0, #4
 80062d2:	e7f1      	b.n	80062b8 <__exponent+0x60>

080062d4 <_printf_float>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	ed2d 8b02 	vpush	{d8}
 80062dc:	b08d      	sub	sp, #52	; 0x34
 80062de:	460c      	mov	r4, r1
 80062e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062e4:	4616      	mov	r6, r2
 80062e6:	461f      	mov	r7, r3
 80062e8:	4605      	mov	r5, r0
 80062ea:	f000 fda5 	bl	8006e38 <_localeconv_r>
 80062ee:	f8d0 a000 	ldr.w	sl, [r0]
 80062f2:	4650      	mov	r0, sl
 80062f4:	f7f9 ffe4 	bl	80002c0 <strlen>
 80062f8:	2300      	movs	r3, #0
 80062fa:	930a      	str	r3, [sp, #40]	; 0x28
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	f8d8 3000 	ldr.w	r3, [r8]
 8006304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006308:	3307      	adds	r3, #7
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	f8c8 2000 	str.w	r2, [r8]
 8006316:	e9d3 8900 	ldrd	r8, r9, [r3]
 800631a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	f8cd 8018 	str.w	r8, [sp, #24]
 8006324:	ee08 0a10 	vmov	s16, r0
 8006328:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800632c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006330:	4b9e      	ldr	r3, [pc, #632]	; (80065ac <_printf_float+0x2d8>)
 8006332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006336:	f7fa fc21 	bl	8000b7c <__aeabi_dcmpun>
 800633a:	bb88      	cbnz	r0, 80063a0 <_printf_float+0xcc>
 800633c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006340:	4b9a      	ldr	r3, [pc, #616]	; (80065ac <_printf_float+0x2d8>)
 8006342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006346:	f7fa fbfb 	bl	8000b40 <__aeabi_dcmple>
 800634a:	bb48      	cbnz	r0, 80063a0 <_printf_float+0xcc>
 800634c:	2200      	movs	r2, #0
 800634e:	2300      	movs	r3, #0
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fbea 	bl	8000b2c <__aeabi_dcmplt>
 8006358:	b110      	cbz	r0, 8006360 <_printf_float+0x8c>
 800635a:	232d      	movs	r3, #45	; 0x2d
 800635c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006360:	4a93      	ldr	r2, [pc, #588]	; (80065b0 <_printf_float+0x2dc>)
 8006362:	4b94      	ldr	r3, [pc, #592]	; (80065b4 <_printf_float+0x2e0>)
 8006364:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006368:	bf94      	ite	ls
 800636a:	4690      	movls	r8, r2
 800636c:	4698      	movhi	r8, r3
 800636e:	2303      	movs	r3, #3
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	f023 0304 	bic.w	r3, r3, #4
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	f04f 0900 	mov.w	r9, #0
 800637e:	9700      	str	r7, [sp, #0]
 8006380:	4633      	mov	r3, r6
 8006382:	aa0b      	add	r2, sp, #44	; 0x2c
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fa82 	bl	8006890 <_printf_common>
 800638c:	3001      	adds	r0, #1
 800638e:	f040 8090 	bne.w	80064b2 <_printf_float+0x1de>
 8006392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006396:	b00d      	add	sp, #52	; 0x34
 8006398:	ecbd 8b02 	vpop	{d8}
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fbe8 	bl	8000b7c <__aeabi_dcmpun>
 80063ac:	b140      	cbz	r0, 80063c0 <_printf_float+0xec>
 80063ae:	464b      	mov	r3, r9
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bfbc      	itt	lt
 80063b4:	232d      	movlt	r3, #45	; 0x2d
 80063b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ba:	4a7f      	ldr	r2, [pc, #508]	; (80065b8 <_printf_float+0x2e4>)
 80063bc:	4b7f      	ldr	r3, [pc, #508]	; (80065bc <_printf_float+0x2e8>)
 80063be:	e7d1      	b.n	8006364 <_printf_float+0x90>
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063c6:	9206      	str	r2, [sp, #24]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	d13f      	bne.n	800644c <_printf_float+0x178>
 80063cc:	2306      	movs	r3, #6
 80063ce:	6063      	str	r3, [r4, #4]
 80063d0:	9b05      	ldr	r3, [sp, #20]
 80063d2:	6861      	ldr	r1, [r4, #4]
 80063d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063d8:	2300      	movs	r3, #0
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	ab0a      	add	r3, sp, #40	; 0x28
 80063de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063e2:	ab09      	add	r3, sp, #36	; 0x24
 80063e4:	ec49 8b10 	vmov	d0, r8, r9
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6022      	str	r2, [r4, #0]
 80063ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7ff fecf 	bl	8006194 <__cvt>
 80063f6:	9b06      	ldr	r3, [sp, #24]
 80063f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063fa:	2b47      	cmp	r3, #71	; 0x47
 80063fc:	4680      	mov	r8, r0
 80063fe:	d108      	bne.n	8006412 <_printf_float+0x13e>
 8006400:	1cc8      	adds	r0, r1, #3
 8006402:	db02      	blt.n	800640a <_printf_float+0x136>
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	4299      	cmp	r1, r3
 8006408:	dd41      	ble.n	800648e <_printf_float+0x1ba>
 800640a:	f1ab 0302 	sub.w	r3, fp, #2
 800640e:	fa5f fb83 	uxtb.w	fp, r3
 8006412:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006416:	d820      	bhi.n	800645a <_printf_float+0x186>
 8006418:	3901      	subs	r1, #1
 800641a:	465a      	mov	r2, fp
 800641c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006420:	9109      	str	r1, [sp, #36]	; 0x24
 8006422:	f7ff ff19 	bl	8006258 <__exponent>
 8006426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006428:	1813      	adds	r3, r2, r0
 800642a:	2a01      	cmp	r2, #1
 800642c:	4681      	mov	r9, r0
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	dc02      	bgt.n	8006438 <_printf_float+0x164>
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	07d2      	lsls	r2, r2, #31
 8006436:	d501      	bpl.n	800643c <_printf_float+0x168>
 8006438:	3301      	adds	r3, #1
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006440:	2b00      	cmp	r3, #0
 8006442:	d09c      	beq.n	800637e <_printf_float+0xaa>
 8006444:	232d      	movs	r3, #45	; 0x2d
 8006446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644a:	e798      	b.n	800637e <_printf_float+0xaa>
 800644c:	9a06      	ldr	r2, [sp, #24]
 800644e:	2a47      	cmp	r2, #71	; 0x47
 8006450:	d1be      	bne.n	80063d0 <_printf_float+0xfc>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1bc      	bne.n	80063d0 <_printf_float+0xfc>
 8006456:	2301      	movs	r3, #1
 8006458:	e7b9      	b.n	80063ce <_printf_float+0xfa>
 800645a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800645e:	d118      	bne.n	8006492 <_printf_float+0x1be>
 8006460:	2900      	cmp	r1, #0
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	dd0b      	ble.n	800647e <_printf_float+0x1aa>
 8006466:	6121      	str	r1, [r4, #16]
 8006468:	b913      	cbnz	r3, 8006470 <_printf_float+0x19c>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	07d0      	lsls	r0, r2, #31
 800646e:	d502      	bpl.n	8006476 <_printf_float+0x1a2>
 8006470:	3301      	adds	r3, #1
 8006472:	440b      	add	r3, r1
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	65a1      	str	r1, [r4, #88]	; 0x58
 8006478:	f04f 0900 	mov.w	r9, #0
 800647c:	e7de      	b.n	800643c <_printf_float+0x168>
 800647e:	b913      	cbnz	r3, 8006486 <_printf_float+0x1b2>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	07d2      	lsls	r2, r2, #31
 8006484:	d501      	bpl.n	800648a <_printf_float+0x1b6>
 8006486:	3302      	adds	r3, #2
 8006488:	e7f4      	b.n	8006474 <_printf_float+0x1a0>
 800648a:	2301      	movs	r3, #1
 800648c:	e7f2      	b.n	8006474 <_printf_float+0x1a0>
 800648e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	4299      	cmp	r1, r3
 8006496:	db05      	blt.n	80064a4 <_printf_float+0x1d0>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	6121      	str	r1, [r4, #16]
 800649c:	07d8      	lsls	r0, r3, #31
 800649e:	d5ea      	bpl.n	8006476 <_printf_float+0x1a2>
 80064a0:	1c4b      	adds	r3, r1, #1
 80064a2:	e7e7      	b.n	8006474 <_printf_float+0x1a0>
 80064a4:	2900      	cmp	r1, #0
 80064a6:	bfd4      	ite	le
 80064a8:	f1c1 0202 	rsble	r2, r1, #2
 80064ac:	2201      	movgt	r2, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	e7e0      	b.n	8006474 <_printf_float+0x1a0>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	055a      	lsls	r2, r3, #21
 80064b6:	d407      	bmi.n	80064c8 <_printf_float+0x1f4>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	4642      	mov	r2, r8
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	d12c      	bne.n	8006520 <_printf_float+0x24c>
 80064c6:	e764      	b.n	8006392 <_printf_float+0xbe>
 80064c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064cc:	f240 80e0 	bls.w	8006690 <_printf_float+0x3bc>
 80064d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d4:	2200      	movs	r2, #0
 80064d6:	2300      	movs	r3, #0
 80064d8:	f7fa fb1e 	bl	8000b18 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d034      	beq.n	800654a <_printf_float+0x276>
 80064e0:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <_printf_float+0x2ec>)
 80064e2:	2301      	movs	r3, #1
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af51 	beq.w	8006392 <_printf_float+0xbe>
 80064f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f4:	429a      	cmp	r2, r3
 80064f6:	db02      	blt.n	80064fe <_printf_float+0x22a>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	07d8      	lsls	r0, r3, #31
 80064fc:	d510      	bpl.n	8006520 <_printf_float+0x24c>
 80064fe:	ee18 3a10 	vmov	r3, s16
 8006502:	4652      	mov	r2, sl
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af41 	beq.w	8006392 <_printf_float+0xbe>
 8006510:	f04f 0800 	mov.w	r8, #0
 8006514:	f104 091a 	add.w	r9, r4, #26
 8006518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651a:	3b01      	subs	r3, #1
 800651c:	4543      	cmp	r3, r8
 800651e:	dc09      	bgt.n	8006534 <_printf_float+0x260>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	f100 8107 	bmi.w	8006736 <_printf_float+0x462>
 8006528:	68e0      	ldr	r0, [r4, #12]
 800652a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800652c:	4298      	cmp	r0, r3
 800652e:	bfb8      	it	lt
 8006530:	4618      	movlt	r0, r3
 8006532:	e730      	b.n	8006396 <_printf_float+0xc2>
 8006534:	2301      	movs	r3, #1
 8006536:	464a      	mov	r2, r9
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af27 	beq.w	8006392 <_printf_float+0xbe>
 8006544:	f108 0801 	add.w	r8, r8, #1
 8006548:	e7e6      	b.n	8006518 <_printf_float+0x244>
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc39      	bgt.n	80065c4 <_printf_float+0x2f0>
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <_printf_float+0x2ec>)
 8006552:	2301      	movs	r3, #1
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f af19 	beq.w	8006392 <_printf_float+0xbe>
 8006560:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006564:	4313      	orrs	r3, r2
 8006566:	d102      	bne.n	800656e <_printf_float+0x29a>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	07d9      	lsls	r1, r3, #31
 800656c:	d5d8      	bpl.n	8006520 <_printf_float+0x24c>
 800656e:	ee18 3a10 	vmov	r3, s16
 8006572:	4652      	mov	r2, sl
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	47b8      	blx	r7
 800657a:	3001      	adds	r0, #1
 800657c:	f43f af09 	beq.w	8006392 <_printf_float+0xbe>
 8006580:	f04f 0900 	mov.w	r9, #0
 8006584:	f104 0a1a 	add.w	sl, r4, #26
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	425b      	negs	r3, r3
 800658c:	454b      	cmp	r3, r9
 800658e:	dc01      	bgt.n	8006594 <_printf_float+0x2c0>
 8006590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006592:	e792      	b.n	80064ba <_printf_float+0x1e6>
 8006594:	2301      	movs	r3, #1
 8006596:	4652      	mov	r2, sl
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f aef7 	beq.w	8006392 <_printf_float+0xbe>
 80065a4:	f109 0901 	add.w	r9, r9, #1
 80065a8:	e7ee      	b.n	8006588 <_printf_float+0x2b4>
 80065aa:	bf00      	nop
 80065ac:	7fefffff 	.word	0x7fefffff
 80065b0:	08008d2c 	.word	0x08008d2c
 80065b4:	08008d30 	.word	0x08008d30
 80065b8:	08008d34 	.word	0x08008d34
 80065bc:	08008d38 	.word	0x08008d38
 80065c0:	08008d3c 	.word	0x08008d3c
 80065c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c8:	429a      	cmp	r2, r3
 80065ca:	bfa8      	it	ge
 80065cc:	461a      	movge	r2, r3
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	4691      	mov	r9, r2
 80065d2:	dc37      	bgt.n	8006644 <_printf_float+0x370>
 80065d4:	f04f 0b00 	mov.w	fp, #0
 80065d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065dc:	f104 021a 	add.w	r2, r4, #26
 80065e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	eba3 0309 	sub.w	r3, r3, r9
 80065e8:	455b      	cmp	r3, fp
 80065ea:	dc33      	bgt.n	8006654 <_printf_float+0x380>
 80065ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f0:	429a      	cmp	r2, r3
 80065f2:	db3b      	blt.n	800666c <_printf_float+0x398>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d438      	bmi.n	800666c <_printf_float+0x398>
 80065fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065fe:	eba2 0903 	sub.w	r9, r2, r3
 8006602:	9b05      	ldr	r3, [sp, #20]
 8006604:	1ad2      	subs	r2, r2, r3
 8006606:	4591      	cmp	r9, r2
 8006608:	bfa8      	it	ge
 800660a:	4691      	movge	r9, r2
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	dc35      	bgt.n	800667e <_printf_float+0x3aa>
 8006612:	f04f 0800 	mov.w	r8, #0
 8006616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800661a:	f104 0a1a 	add.w	sl, r4, #26
 800661e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	eba3 0309 	sub.w	r3, r3, r9
 8006628:	4543      	cmp	r3, r8
 800662a:	f77f af79 	ble.w	8006520 <_printf_float+0x24c>
 800662e:	2301      	movs	r3, #1
 8006630:	4652      	mov	r2, sl
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	47b8      	blx	r7
 8006638:	3001      	adds	r0, #1
 800663a:	f43f aeaa 	beq.w	8006392 <_printf_float+0xbe>
 800663e:	f108 0801 	add.w	r8, r8, #1
 8006642:	e7ec      	b.n	800661e <_printf_float+0x34a>
 8006644:	4613      	mov	r3, r2
 8006646:	4631      	mov	r1, r6
 8006648:	4642      	mov	r2, r8
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	d1c0      	bne.n	80065d4 <_printf_float+0x300>
 8006652:	e69e      	b.n	8006392 <_printf_float+0xbe>
 8006654:	2301      	movs	r3, #1
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	9205      	str	r2, [sp, #20]
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	f43f ae97 	beq.w	8006392 <_printf_float+0xbe>
 8006664:	9a05      	ldr	r2, [sp, #20]
 8006666:	f10b 0b01 	add.w	fp, fp, #1
 800666a:	e7b9      	b.n	80065e0 <_printf_float+0x30c>
 800666c:	ee18 3a10 	vmov	r3, s16
 8006670:	4652      	mov	r2, sl
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	d1be      	bne.n	80065fa <_printf_float+0x326>
 800667c:	e689      	b.n	8006392 <_printf_float+0xbe>
 800667e:	9a05      	ldr	r2, [sp, #20]
 8006680:	464b      	mov	r3, r9
 8006682:	4442      	add	r2, r8
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d1c1      	bne.n	8006612 <_printf_float+0x33e>
 800668e:	e680      	b.n	8006392 <_printf_float+0xbe>
 8006690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006692:	2a01      	cmp	r2, #1
 8006694:	dc01      	bgt.n	800669a <_printf_float+0x3c6>
 8006696:	07db      	lsls	r3, r3, #31
 8006698:	d53a      	bpl.n	8006710 <_printf_float+0x43c>
 800669a:	2301      	movs	r3, #1
 800669c:	4642      	mov	r2, r8
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f ae74 	beq.w	8006392 <_printf_float+0xbe>
 80066aa:	ee18 3a10 	vmov	r3, s16
 80066ae:	4652      	mov	r2, sl
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f ae6b 	beq.w	8006392 <_printf_float+0xbe>
 80066bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066c0:	2200      	movs	r2, #0
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80066c8:	f7fa fa26 	bl	8000b18 <__aeabi_dcmpeq>
 80066cc:	b9d8      	cbnz	r0, 8006706 <_printf_float+0x432>
 80066ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80066d2:	f108 0201 	add.w	r2, r8, #1
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d10e      	bne.n	80066fe <_printf_float+0x42a>
 80066e0:	e657      	b.n	8006392 <_printf_float+0xbe>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae50 	beq.w	8006392 <_printf_float+0xbe>
 80066f2:	f108 0801 	add.w	r8, r8, #1
 80066f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	4543      	cmp	r3, r8
 80066fc:	dcf1      	bgt.n	80066e2 <_printf_float+0x40e>
 80066fe:	464b      	mov	r3, r9
 8006700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006704:	e6da      	b.n	80064bc <_printf_float+0x1e8>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0a1a 	add.w	sl, r4, #26
 800670e:	e7f2      	b.n	80066f6 <_printf_float+0x422>
 8006710:	2301      	movs	r3, #1
 8006712:	4642      	mov	r2, r8
 8006714:	e7df      	b.n	80066d6 <_printf_float+0x402>
 8006716:	2301      	movs	r3, #1
 8006718:	464a      	mov	r2, r9
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae36 	beq.w	8006392 <_printf_float+0xbe>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800672e:	1a5b      	subs	r3, r3, r1
 8006730:	4543      	cmp	r3, r8
 8006732:	dcf0      	bgt.n	8006716 <_printf_float+0x442>
 8006734:	e6f8      	b.n	8006528 <_printf_float+0x254>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	f104 0919 	add.w	r9, r4, #25
 800673e:	e7f4      	b.n	800672a <_printf_float+0x456>

08006740 <malloc>:
 8006740:	4b02      	ldr	r3, [pc, #8]	; (800674c <malloc+0xc>)
 8006742:	4601      	mov	r1, r0
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f000 b823 	b.w	8006790 <_malloc_r>
 800674a:	bf00      	nop
 800674c:	200000dc 	.word	0x200000dc

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0e      	ldr	r6, [pc, #56]	; (800678c <sbrk_aligned+0x3c>)
 8006754:	460c      	mov	r4, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	4605      	mov	r5, r0
 800675a:	b911      	cbnz	r1, 8006762 <sbrk_aligned+0x12>
 800675c:	f000 fb70 	bl	8006e40 <_sbrk_r>
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fb6b 	bl	8006e40 <_sbrk_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d00a      	beq.n	8006784 <sbrk_aligned+0x34>
 800676e:	1cc4      	adds	r4, r0, #3
 8006770:	f024 0403 	bic.w	r4, r4, #3
 8006774:	42a0      	cmp	r0, r4
 8006776:	d007      	beq.n	8006788 <sbrk_aligned+0x38>
 8006778:	1a21      	subs	r1, r4, r0
 800677a:	4628      	mov	r0, r5
 800677c:	f000 fb60 	bl	8006e40 <_sbrk_r>
 8006780:	3001      	adds	r0, #1
 8006782:	d101      	bne.n	8006788 <sbrk_aligned+0x38>
 8006784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006788:	4620      	mov	r0, r4
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	200005d0 	.word	0x200005d0

08006790 <_malloc_r>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	1ccd      	adds	r5, r1, #3
 8006796:	f025 0503 	bic.w	r5, r5, #3
 800679a:	3508      	adds	r5, #8
 800679c:	2d0c      	cmp	r5, #12
 800679e:	bf38      	it	cc
 80067a0:	250c      	movcc	r5, #12
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	4607      	mov	r7, r0
 80067a6:	db01      	blt.n	80067ac <_malloc_r+0x1c>
 80067a8:	42a9      	cmp	r1, r5
 80067aa:	d905      	bls.n	80067b8 <_malloc_r+0x28>
 80067ac:	230c      	movs	r3, #12
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	2600      	movs	r6, #0
 80067b2:	4630      	mov	r0, r6
 80067b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800688c <_malloc_r+0xfc>
 80067bc:	f000 f9f8 	bl	8006bb0 <__malloc_lock>
 80067c0:	f8d8 3000 	ldr.w	r3, [r8]
 80067c4:	461c      	mov	r4, r3
 80067c6:	bb5c      	cbnz	r4, 8006820 <_malloc_r+0x90>
 80067c8:	4629      	mov	r1, r5
 80067ca:	4638      	mov	r0, r7
 80067cc:	f7ff ffc0 	bl	8006750 <sbrk_aligned>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	4604      	mov	r4, r0
 80067d4:	d155      	bne.n	8006882 <_malloc_r+0xf2>
 80067d6:	f8d8 4000 	ldr.w	r4, [r8]
 80067da:	4626      	mov	r6, r4
 80067dc:	2e00      	cmp	r6, #0
 80067de:	d145      	bne.n	800686c <_malloc_r+0xdc>
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d048      	beq.n	8006876 <_malloc_r+0xe6>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	4631      	mov	r1, r6
 80067e8:	4638      	mov	r0, r7
 80067ea:	eb04 0903 	add.w	r9, r4, r3
 80067ee:	f000 fb27 	bl	8006e40 <_sbrk_r>
 80067f2:	4581      	cmp	r9, r0
 80067f4:	d13f      	bne.n	8006876 <_malloc_r+0xe6>
 80067f6:	6821      	ldr	r1, [r4, #0]
 80067f8:	1a6d      	subs	r5, r5, r1
 80067fa:	4629      	mov	r1, r5
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff ffa7 	bl	8006750 <sbrk_aligned>
 8006802:	3001      	adds	r0, #1
 8006804:	d037      	beq.n	8006876 <_malloc_r+0xe6>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	442b      	add	r3, r5
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	f8d8 3000 	ldr.w	r3, [r8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d038      	beq.n	8006886 <_malloc_r+0xf6>
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	42a2      	cmp	r2, r4
 8006818:	d12b      	bne.n	8006872 <_malloc_r+0xe2>
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	e00f      	b.n	8006840 <_malloc_r+0xb0>
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	1b52      	subs	r2, r2, r5
 8006824:	d41f      	bmi.n	8006866 <_malloc_r+0xd6>
 8006826:	2a0b      	cmp	r2, #11
 8006828:	d917      	bls.n	800685a <_malloc_r+0xca>
 800682a:	1961      	adds	r1, r4, r5
 800682c:	42a3      	cmp	r3, r4
 800682e:	6025      	str	r5, [r4, #0]
 8006830:	bf18      	it	ne
 8006832:	6059      	strne	r1, [r3, #4]
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	bf08      	it	eq
 8006838:	f8c8 1000 	streq.w	r1, [r8]
 800683c:	5162      	str	r2, [r4, r5]
 800683e:	604b      	str	r3, [r1, #4]
 8006840:	4638      	mov	r0, r7
 8006842:	f104 060b 	add.w	r6, r4, #11
 8006846:	f000 f9b9 	bl	8006bbc <__malloc_unlock>
 800684a:	f026 0607 	bic.w	r6, r6, #7
 800684e:	1d23      	adds	r3, r4, #4
 8006850:	1af2      	subs	r2, r6, r3
 8006852:	d0ae      	beq.n	80067b2 <_malloc_r+0x22>
 8006854:	1b9b      	subs	r3, r3, r6
 8006856:	50a3      	str	r3, [r4, r2]
 8006858:	e7ab      	b.n	80067b2 <_malloc_r+0x22>
 800685a:	42a3      	cmp	r3, r4
 800685c:	6862      	ldr	r2, [r4, #4]
 800685e:	d1dd      	bne.n	800681c <_malloc_r+0x8c>
 8006860:	f8c8 2000 	str.w	r2, [r8]
 8006864:	e7ec      	b.n	8006840 <_malloc_r+0xb0>
 8006866:	4623      	mov	r3, r4
 8006868:	6864      	ldr	r4, [r4, #4]
 800686a:	e7ac      	b.n	80067c6 <_malloc_r+0x36>
 800686c:	4634      	mov	r4, r6
 800686e:	6876      	ldr	r6, [r6, #4]
 8006870:	e7b4      	b.n	80067dc <_malloc_r+0x4c>
 8006872:	4613      	mov	r3, r2
 8006874:	e7cc      	b.n	8006810 <_malloc_r+0x80>
 8006876:	230c      	movs	r3, #12
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4638      	mov	r0, r7
 800687c:	f000 f99e 	bl	8006bbc <__malloc_unlock>
 8006880:	e797      	b.n	80067b2 <_malloc_r+0x22>
 8006882:	6025      	str	r5, [r4, #0]
 8006884:	e7dc      	b.n	8006840 <_malloc_r+0xb0>
 8006886:	605b      	str	r3, [r3, #4]
 8006888:	deff      	udf	#255	; 0xff
 800688a:	bf00      	nop
 800688c:	200005cc 	.word	0x200005cc

08006890 <_printf_common>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4616      	mov	r6, r2
 8006896:	4699      	mov	r9, r3
 8006898:	688a      	ldr	r2, [r1, #8]
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bfb8      	it	lt
 80068a4:	4613      	movlt	r3, r2
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068ac:	4607      	mov	r7, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	b10a      	cbz	r2, 80068b6 <_printf_common+0x26>
 80068b2:	3301      	adds	r3, #1
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0699      	lsls	r1, r3, #26
 80068ba:	bf42      	ittt	mi
 80068bc:	6833      	ldrmi	r3, [r6, #0]
 80068be:	3302      	addmi	r3, #2
 80068c0:	6033      	strmi	r3, [r6, #0]
 80068c2:	6825      	ldr	r5, [r4, #0]
 80068c4:	f015 0506 	ands.w	r5, r5, #6
 80068c8:	d106      	bne.n	80068d8 <_printf_common+0x48>
 80068ca:	f104 0a19 	add.w	sl, r4, #25
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	6832      	ldr	r2, [r6, #0]
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dc26      	bgt.n	8006926 <_printf_common+0x96>
 80068d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068dc:	1e13      	subs	r3, r2, #0
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	bf18      	it	ne
 80068e2:	2301      	movne	r3, #1
 80068e4:	0692      	lsls	r2, r2, #26
 80068e6:	d42b      	bmi.n	8006940 <_printf_common+0xb0>
 80068e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ec:	4649      	mov	r1, r9
 80068ee:	4638      	mov	r0, r7
 80068f0:	47c0      	blx	r8
 80068f2:	3001      	adds	r0, #1
 80068f4:	d01e      	beq.n	8006934 <_printf_common+0xa4>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	6922      	ldr	r2, [r4, #16]
 80068fa:	f003 0306 	and.w	r3, r3, #6
 80068fe:	2b04      	cmp	r3, #4
 8006900:	bf02      	ittt	eq
 8006902:	68e5      	ldreq	r5, [r4, #12]
 8006904:	6833      	ldreq	r3, [r6, #0]
 8006906:	1aed      	subeq	r5, r5, r3
 8006908:	68a3      	ldr	r3, [r4, #8]
 800690a:	bf0c      	ite	eq
 800690c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006910:	2500      	movne	r5, #0
 8006912:	4293      	cmp	r3, r2
 8006914:	bfc4      	itt	gt
 8006916:	1a9b      	subgt	r3, r3, r2
 8006918:	18ed      	addgt	r5, r5, r3
 800691a:	2600      	movs	r6, #0
 800691c:	341a      	adds	r4, #26
 800691e:	42b5      	cmp	r5, r6
 8006920:	d11a      	bne.n	8006958 <_printf_common+0xc8>
 8006922:	2000      	movs	r0, #0
 8006924:	e008      	b.n	8006938 <_printf_common+0xa8>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4649      	mov	r1, r9
 800692c:	4638      	mov	r0, r7
 800692e:	47c0      	blx	r8
 8006930:	3001      	adds	r0, #1
 8006932:	d103      	bne.n	800693c <_printf_common+0xac>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693c:	3501      	adds	r5, #1
 800693e:	e7c6      	b.n	80068ce <_printf_common+0x3e>
 8006940:	18e1      	adds	r1, r4, r3
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	2030      	movs	r0, #48	; 0x30
 8006946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800694a:	4422      	add	r2, r4
 800694c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006954:	3302      	adds	r3, #2
 8006956:	e7c7      	b.n	80068e8 <_printf_common+0x58>
 8006958:	2301      	movs	r3, #1
 800695a:	4622      	mov	r2, r4
 800695c:	4649      	mov	r1, r9
 800695e:	4638      	mov	r0, r7
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d0e6      	beq.n	8006934 <_printf_common+0xa4>
 8006966:	3601      	adds	r6, #1
 8006968:	e7d9      	b.n	800691e <_printf_common+0x8e>
	...

0800696c <_printf_i>:
 800696c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	7e0f      	ldrb	r7, [r1, #24]
 8006972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006974:	2f78      	cmp	r7, #120	; 0x78
 8006976:	4691      	mov	r9, r2
 8006978:	4680      	mov	r8, r0
 800697a:	460c      	mov	r4, r1
 800697c:	469a      	mov	sl, r3
 800697e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006982:	d807      	bhi.n	8006994 <_printf_i+0x28>
 8006984:	2f62      	cmp	r7, #98	; 0x62
 8006986:	d80a      	bhi.n	800699e <_printf_i+0x32>
 8006988:	2f00      	cmp	r7, #0
 800698a:	f000 80d4 	beq.w	8006b36 <_printf_i+0x1ca>
 800698e:	2f58      	cmp	r7, #88	; 0x58
 8006990:	f000 80c0 	beq.w	8006b14 <_printf_i+0x1a8>
 8006994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800699c:	e03a      	b.n	8006a14 <_printf_i+0xa8>
 800699e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069a2:	2b15      	cmp	r3, #21
 80069a4:	d8f6      	bhi.n	8006994 <_printf_i+0x28>
 80069a6:	a101      	add	r1, pc, #4	; (adr r1, 80069ac <_printf_i+0x40>)
 80069a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006995 	.word	0x08006995
 80069b8:	08006995 	.word	0x08006995
 80069bc:	08006995 	.word	0x08006995
 80069c0:	08006995 	.word	0x08006995
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006995 	.word	0x08006995
 80069cc:	08006995 	.word	0x08006995
 80069d0:	08006995 	.word	0x08006995
 80069d4:	08006995 	.word	0x08006995
 80069d8:	08006b1d 	.word	0x08006b1d
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	08006ad7 	.word	0x08006ad7
 80069e4:	08006995 	.word	0x08006995
 80069e8:	08006995 	.word	0x08006995
 80069ec:	08006b3f 	.word	0x08006b3f
 80069f0:	08006995 	.word	0x08006995
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006995 	.word	0x08006995
 80069fc:	08006995 	.word	0x08006995
 8006a00:	08006adf 	.word	0x08006adf
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	602a      	str	r2, [r5, #0]
 8006a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a14:	2301      	movs	r3, #1
 8006a16:	e09f      	b.n	8006b58 <_printf_i+0x1ec>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	0607      	lsls	r7, r0, #24
 8006a1e:	f103 0104 	add.w	r1, r3, #4
 8006a22:	6029      	str	r1, [r5, #0]
 8006a24:	d501      	bpl.n	8006a2a <_printf_i+0xbe>
 8006a26:	681e      	ldr	r6, [r3, #0]
 8006a28:	e003      	b.n	8006a32 <_printf_i+0xc6>
 8006a2a:	0646      	lsls	r6, r0, #25
 8006a2c:	d5fb      	bpl.n	8006a26 <_printf_i+0xba>
 8006a2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	da03      	bge.n	8006a3e <_printf_i+0xd2>
 8006a36:	232d      	movs	r3, #45	; 0x2d
 8006a38:	4276      	negs	r6, r6
 8006a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3e:	485a      	ldr	r0, [pc, #360]	; (8006ba8 <_printf_i+0x23c>)
 8006a40:	230a      	movs	r3, #10
 8006a42:	e012      	b.n	8006a6a <_printf_i+0xfe>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	6029      	str	r1, [r5, #0]
 8006a4c:	0605      	lsls	r5, r0, #24
 8006a4e:	d501      	bpl.n	8006a54 <_printf_i+0xe8>
 8006a50:	681e      	ldr	r6, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <_printf_i+0xee>
 8006a54:	0641      	lsls	r1, r0, #25
 8006a56:	d5fb      	bpl.n	8006a50 <_printf_i+0xe4>
 8006a58:	881e      	ldrh	r6, [r3, #0]
 8006a5a:	4853      	ldr	r0, [pc, #332]	; (8006ba8 <_printf_i+0x23c>)
 8006a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a5e:	bf0c      	ite	eq
 8006a60:	2308      	moveq	r3, #8
 8006a62:	230a      	movne	r3, #10
 8006a64:	2100      	movs	r1, #0
 8006a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a6a:	6865      	ldr	r5, [r4, #4]
 8006a6c:	60a5      	str	r5, [r4, #8]
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	bfa2      	ittt	ge
 8006a72:	6821      	ldrge	r1, [r4, #0]
 8006a74:	f021 0104 	bicge.w	r1, r1, #4
 8006a78:	6021      	strge	r1, [r4, #0]
 8006a7a:	b90e      	cbnz	r6, 8006a80 <_printf_i+0x114>
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	d04b      	beq.n	8006b18 <_printf_i+0x1ac>
 8006a80:	4615      	mov	r5, r2
 8006a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a86:	fb03 6711 	mls	r7, r3, r1, r6
 8006a8a:	5dc7      	ldrb	r7, [r0, r7]
 8006a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a90:	4637      	mov	r7, r6
 8006a92:	42bb      	cmp	r3, r7
 8006a94:	460e      	mov	r6, r1
 8006a96:	d9f4      	bls.n	8006a82 <_printf_i+0x116>
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d10b      	bne.n	8006ab4 <_printf_i+0x148>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	07de      	lsls	r6, r3, #31
 8006aa0:	d508      	bpl.n	8006ab4 <_printf_i+0x148>
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	6861      	ldr	r1, [r4, #4]
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	bfde      	ittt	le
 8006aaa:	2330      	movle	r3, #48	; 0x30
 8006aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ab0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ab4:	1b52      	subs	r2, r2, r5
 8006ab6:	6122      	str	r2, [r4, #16]
 8006ab8:	f8cd a000 	str.w	sl, [sp]
 8006abc:	464b      	mov	r3, r9
 8006abe:	aa03      	add	r2, sp, #12
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7ff fee4 	bl	8006890 <_printf_common>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d14a      	bne.n	8006b62 <_printf_i+0x1f6>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ad0:	b004      	add	sp, #16
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	f043 0320 	orr.w	r3, r3, #32
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	4833      	ldr	r0, [pc, #204]	; (8006bac <_printf_i+0x240>)
 8006ae0:	2778      	movs	r7, #120	; 0x78
 8006ae2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	061f      	lsls	r7, r3, #24
 8006aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8006af0:	d402      	bmi.n	8006af8 <_printf_i+0x18c>
 8006af2:	065f      	lsls	r7, r3, #25
 8006af4:	bf48      	it	mi
 8006af6:	b2b6      	uxthmi	r6, r6
 8006af8:	07df      	lsls	r7, r3, #31
 8006afa:	bf48      	it	mi
 8006afc:	f043 0320 	orrmi.w	r3, r3, #32
 8006b00:	6029      	str	r1, [r5, #0]
 8006b02:	bf48      	it	mi
 8006b04:	6023      	strmi	r3, [r4, #0]
 8006b06:	b91e      	cbnz	r6, 8006b10 <_printf_i+0x1a4>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	f023 0320 	bic.w	r3, r3, #32
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	2310      	movs	r3, #16
 8006b12:	e7a7      	b.n	8006a64 <_printf_i+0xf8>
 8006b14:	4824      	ldr	r0, [pc, #144]	; (8006ba8 <_printf_i+0x23c>)
 8006b16:	e7e4      	b.n	8006ae2 <_printf_i+0x176>
 8006b18:	4615      	mov	r5, r2
 8006b1a:	e7bd      	b.n	8006a98 <_printf_i+0x12c>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	6826      	ldr	r6, [r4, #0]
 8006b20:	6961      	ldr	r1, [r4, #20]
 8006b22:	1d18      	adds	r0, r3, #4
 8006b24:	6028      	str	r0, [r5, #0]
 8006b26:	0635      	lsls	r5, r6, #24
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	d501      	bpl.n	8006b30 <_printf_i+0x1c4>
 8006b2c:	6019      	str	r1, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <_printf_i+0x1ca>
 8006b30:	0670      	lsls	r0, r6, #25
 8006b32:	d5fb      	bpl.n	8006b2c <_printf_i+0x1c0>
 8006b34:	8019      	strh	r1, [r3, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	4615      	mov	r5, r2
 8006b3c:	e7bc      	b.n	8006ab8 <_printf_i+0x14c>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	602a      	str	r2, [r5, #0]
 8006b44:	681d      	ldr	r5, [r3, #0]
 8006b46:	6862      	ldr	r2, [r4, #4]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7f9 fb68 	bl	8000220 <memchr>
 8006b50:	b108      	cbz	r0, 8006b56 <_printf_i+0x1ea>
 8006b52:	1b40      	subs	r0, r0, r5
 8006b54:	6060      	str	r0, [r4, #4]
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b60:	e7aa      	b.n	8006ab8 <_printf_i+0x14c>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4649      	mov	r1, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	47d0      	blx	sl
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d0ad      	beq.n	8006acc <_printf_i+0x160>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	079b      	lsls	r3, r3, #30
 8006b74:	d413      	bmi.n	8006b9e <_printf_i+0x232>
 8006b76:	68e0      	ldr	r0, [r4, #12]
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	4298      	cmp	r0, r3
 8006b7c:	bfb8      	it	lt
 8006b7e:	4618      	movlt	r0, r3
 8006b80:	e7a6      	b.n	8006ad0 <_printf_i+0x164>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4632      	mov	r2, r6
 8006b86:	4649      	mov	r1, r9
 8006b88:	4640      	mov	r0, r8
 8006b8a:	47d0      	blx	sl
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d09d      	beq.n	8006acc <_printf_i+0x160>
 8006b90:	3501      	adds	r5, #1
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	9903      	ldr	r1, [sp, #12]
 8006b96:	1a5b      	subs	r3, r3, r1
 8006b98:	42ab      	cmp	r3, r5
 8006b9a:	dcf2      	bgt.n	8006b82 <_printf_i+0x216>
 8006b9c:	e7eb      	b.n	8006b76 <_printf_i+0x20a>
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	f104 0619 	add.w	r6, r4, #25
 8006ba4:	e7f5      	b.n	8006b92 <_printf_i+0x226>
 8006ba6:	bf00      	nop
 8006ba8:	08008d3e 	.word	0x08008d3e
 8006bac:	08008d4f 	.word	0x08008d4f

08006bb0 <__malloc_lock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__malloc_lock+0x8>)
 8006bb2:	f000 b980 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20000710 	.word	0x20000710

08006bbc <__malloc_unlock>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__malloc_unlock+0x8>)
 8006bbe:	f000 b97b 	b.w	8006eb8 <__retarget_lock_release_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	20000710 	.word	0x20000710

08006bc8 <std>:
 8006bc8:	2300      	movs	r3, #0
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bd6:	6083      	str	r3, [r0, #8]
 8006bd8:	8181      	strh	r1, [r0, #12]
 8006bda:	6643      	str	r3, [r0, #100]	; 0x64
 8006bdc:	81c2      	strh	r2, [r0, #14]
 8006bde:	6183      	str	r3, [r0, #24]
 8006be0:	4619      	mov	r1, r3
 8006be2:	2208      	movs	r2, #8
 8006be4:	305c      	adds	r0, #92	; 0x5c
 8006be6:	f000 f91f 	bl	8006e28 <memset>
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <std+0x58>)
 8006bec:	6263      	str	r3, [r4, #36]	; 0x24
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <std+0x5c>)
 8006bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <std+0x60>)
 8006bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <std+0x64>)
 8006bf8:	6323      	str	r3, [r4, #48]	; 0x30
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <std+0x68>)
 8006bfc:	6224      	str	r4, [r4, #32]
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	d006      	beq.n	8006c10 <std+0x48>
 8006c02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c06:	4294      	cmp	r4, r2
 8006c08:	d002      	beq.n	8006c10 <std+0x48>
 8006c0a:	33d0      	adds	r3, #208	; 0xd0
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d105      	bne.n	8006c1c <std+0x54>
 8006c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c18:	f000 b94c 	b.w	8006eb4 <__retarget_lock_init_recursive>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	08008729 	.word	0x08008729
 8006c24:	0800874b 	.word	0x0800874b
 8006c28:	08008783 	.word	0x08008783
 8006c2c:	080087a7 	.word	0x080087a7
 8006c30:	200005d4 	.word	0x200005d4

08006c34 <stdio_exit_handler>:
 8006c34:	4a02      	ldr	r2, [pc, #8]	; (8006c40 <stdio_exit_handler+0xc>)
 8006c36:	4903      	ldr	r1, [pc, #12]	; (8006c44 <stdio_exit_handler+0x10>)
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <stdio_exit_handler+0x14>)
 8006c3a:	f000 b869 	b.w	8006d10 <_fwalk_sglue>
 8006c3e:	bf00      	nop
 8006c40:	20000084 	.word	0x20000084
 8006c44:	08007fe1 	.word	0x08007fe1
 8006c48:	20000090 	.word	0x20000090

08006c4c <cleanup_stdio>:
 8006c4c:	6841      	ldr	r1, [r0, #4]
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <cleanup_stdio+0x34>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	d001      	beq.n	8006c5c <cleanup_stdio+0x10>
 8006c58:	f001 f9c2 	bl	8007fe0 <_fflush_r>
 8006c5c:	68a1      	ldr	r1, [r4, #8]
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <cleanup_stdio+0x38>)
 8006c60:	4299      	cmp	r1, r3
 8006c62:	d002      	beq.n	8006c6a <cleanup_stdio+0x1e>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f001 f9bb 	bl	8007fe0 <_fflush_r>
 8006c6a:	68e1      	ldr	r1, [r4, #12]
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <cleanup_stdio+0x3c>)
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	d004      	beq.n	8006c7c <cleanup_stdio+0x30>
 8006c72:	4620      	mov	r0, r4
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f001 b9b2 	b.w	8007fe0 <_fflush_r>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	200005d4 	.word	0x200005d4
 8006c84:	2000063c 	.word	0x2000063c
 8006c88:	200006a4 	.word	0x200006a4

08006c8c <global_stdio_init.part.0>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <global_stdio_init.part.0+0x30>)
 8006c90:	4c0b      	ldr	r4, [pc, #44]	; (8006cc0 <global_stdio_init.part.0+0x34>)
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <global_stdio_init.part.0+0x38>)
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	4620      	mov	r0, r4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2104      	movs	r1, #4
 8006c9c:	f7ff ff94 	bl	8006bc8 <std>
 8006ca0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2109      	movs	r1, #9
 8006ca8:	f7ff ff8e 	bl	8006bc8 <std>
 8006cac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb6:	2112      	movs	r1, #18
 8006cb8:	f7ff bf86 	b.w	8006bc8 <std>
 8006cbc:	2000070c 	.word	0x2000070c
 8006cc0:	200005d4 	.word	0x200005d4
 8006cc4:	08006c35 	.word	0x08006c35

08006cc8 <__sfp_lock_acquire>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__sfp_lock_acquire+0x8>)
 8006cca:	f000 b8f4 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20000711 	.word	0x20000711

08006cd4 <__sfp_lock_release>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sfp_lock_release+0x8>)
 8006cd6:	f000 b8ef 	b.w	8006eb8 <__retarget_lock_release_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000711 	.word	0x20000711

08006ce0 <__sinit>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f7ff fff0 	bl	8006cc8 <__sfp_lock_acquire>
 8006ce8:	6a23      	ldr	r3, [r4, #32]
 8006cea:	b11b      	cbz	r3, 8006cf4 <__sinit+0x14>
 8006cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf0:	f7ff bff0 	b.w	8006cd4 <__sfp_lock_release>
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <__sinit+0x28>)
 8006cf6:	6223      	str	r3, [r4, #32]
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <__sinit+0x2c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f5      	bne.n	8006cec <__sinit+0xc>
 8006d00:	f7ff ffc4 	bl	8006c8c <global_stdio_init.part.0>
 8006d04:	e7f2      	b.n	8006cec <__sinit+0xc>
 8006d06:	bf00      	nop
 8006d08:	08006c4d 	.word	0x08006c4d
 8006d0c:	2000070c 	.word	0x2000070c

08006d10 <_fwalk_sglue>:
 8006d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d14:	4607      	mov	r7, r0
 8006d16:	4688      	mov	r8, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d20:	f1b9 0901 	subs.w	r9, r9, #1
 8006d24:	d505      	bpl.n	8006d32 <_fwalk_sglue+0x22>
 8006d26:	6824      	ldr	r4, [r4, #0]
 8006d28:	2c00      	cmp	r4, #0
 8006d2a:	d1f7      	bne.n	8006d1c <_fwalk_sglue+0xc>
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d32:	89ab      	ldrh	r3, [r5, #12]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d907      	bls.n	8006d48 <_fwalk_sglue+0x38>
 8006d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	d003      	beq.n	8006d48 <_fwalk_sglue+0x38>
 8006d40:	4629      	mov	r1, r5
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	4306      	orrs	r6, r0
 8006d48:	3568      	adds	r5, #104	; 0x68
 8006d4a:	e7e9      	b.n	8006d20 <_fwalk_sglue+0x10>

08006d4c <iprintf>:
 8006d4c:	b40f      	push	{r0, r1, r2, r3}
 8006d4e:	b507      	push	{r0, r1, r2, lr}
 8006d50:	4906      	ldr	r1, [pc, #24]	; (8006d6c <iprintf+0x20>)
 8006d52:	ab04      	add	r3, sp, #16
 8006d54:	6808      	ldr	r0, [r1, #0]
 8006d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5a:	6881      	ldr	r1, [r0, #8]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	f000 ff9f 	bl	8007ca0 <_vfiprintf_r>
 8006d62:	b003      	add	sp, #12
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b004      	add	sp, #16
 8006d6a:	4770      	bx	lr
 8006d6c:	200000dc 	.word	0x200000dc

08006d70 <_puts_r>:
 8006d70:	6a03      	ldr	r3, [r0, #32]
 8006d72:	b570      	push	{r4, r5, r6, lr}
 8006d74:	6884      	ldr	r4, [r0, #8]
 8006d76:	4605      	mov	r5, r0
 8006d78:	460e      	mov	r6, r1
 8006d7a:	b90b      	cbnz	r3, 8006d80 <_puts_r+0x10>
 8006d7c:	f7ff ffb0 	bl	8006ce0 <__sinit>
 8006d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d82:	07db      	lsls	r3, r3, #31
 8006d84:	d405      	bmi.n	8006d92 <_puts_r+0x22>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	0598      	lsls	r0, r3, #22
 8006d8a:	d402      	bmi.n	8006d92 <_puts_r+0x22>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d8e:	f000 f892 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	0719      	lsls	r1, r3, #28
 8006d96:	d513      	bpl.n	8006dc0 <_puts_r+0x50>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	b18b      	cbz	r3, 8006dc0 <_puts_r+0x50>
 8006d9c:	3e01      	subs	r6, #1
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006da4:	3b01      	subs	r3, #1
 8006da6:	60a3      	str	r3, [r4, #8]
 8006da8:	b9e9      	cbnz	r1, 8006de6 <_puts_r+0x76>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da2e      	bge.n	8006e0c <_puts_r+0x9c>
 8006dae:	4622      	mov	r2, r4
 8006db0:	210a      	movs	r1, #10
 8006db2:	4628      	mov	r0, r5
 8006db4:	f001 fcfb 	bl	80087ae <__swbuf_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d007      	beq.n	8006dcc <_puts_r+0x5c>
 8006dbc:	250a      	movs	r5, #10
 8006dbe:	e007      	b.n	8006dd0 <_puts_r+0x60>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f001 fd30 	bl	8008828 <__swsetup_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0e7      	beq.n	8006d9c <_puts_r+0x2c>
 8006dcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d405      	bmi.n	8006de2 <_puts_r+0x72>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	059b      	lsls	r3, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <_puts_r+0x72>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dde:	f000 f86b 	bl	8006eb8 <__retarget_lock_release_recursive>
 8006de2:	4628      	mov	r0, r5
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da04      	bge.n	8006df4 <_puts_r+0x84>
 8006dea:	69a2      	ldr	r2, [r4, #24]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	dc06      	bgt.n	8006dfe <_puts_r+0x8e>
 8006df0:	290a      	cmp	r1, #10
 8006df2:	d004      	beq.n	8006dfe <_puts_r+0x8e>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	7019      	strb	r1, [r3, #0]
 8006dfc:	e7cf      	b.n	8006d9e <_puts_r+0x2e>
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f001 fcd4 	bl	80087ae <__swbuf_r>
 8006e06:	3001      	adds	r0, #1
 8006e08:	d1c9      	bne.n	8006d9e <_puts_r+0x2e>
 8006e0a:	e7df      	b.n	8006dcc <_puts_r+0x5c>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	250a      	movs	r5, #10
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	701d      	strb	r5, [r3, #0]
 8006e16:	e7db      	b.n	8006dd0 <_puts_r+0x60>

08006e18 <puts>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <puts+0xc>)
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f7ff bfa7 	b.w	8006d70 <_puts_r>
 8006e22:	bf00      	nop
 8006e24:	200000dc 	.word	0x200000dc

08006e28 <memset>:
 8006e28:	4402      	add	r2, r0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d100      	bne.n	8006e32 <memset+0xa>
 8006e30:	4770      	bx	lr
 8006e32:	f803 1b01 	strb.w	r1, [r3], #1
 8006e36:	e7f9      	b.n	8006e2c <memset+0x4>

08006e38 <_localeconv_r>:
 8006e38:	4800      	ldr	r0, [pc, #0]	; (8006e3c <_localeconv_r+0x4>)
 8006e3a:	4770      	bx	lr
 8006e3c:	200001d0 	.word	0x200001d0

08006e40 <_sbrk_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	; (8006e5c <_sbrk_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7fb fb9e 	bl	800258c <_sbrk>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_sbrk_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_sbrk_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20000714 	.word	0x20000714

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	; (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	200000dc 	.word	0x200000dc

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	; (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	; (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f001 feb2 	bl	8008be8 <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	080090a4 	.word	0x080090a4
 8006ea8:	080090a4 	.word	0x080090a4
 8006eac:	080090a4 	.word	0x080090a4
 8006eb0:	080090a8 	.word	0x080090a8

08006eb4 <__retarget_lock_init_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_acquire_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <__retarget_lock_release_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <quorem>:
 8006eba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebe:	6903      	ldr	r3, [r0, #16]
 8006ec0:	690c      	ldr	r4, [r1, #16]
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	db7e      	blt.n	8006fc6 <quorem+0x10c>
 8006ec8:	3c01      	subs	r4, #1
 8006eca:	f101 0814 	add.w	r8, r1, #20
 8006ece:	f100 0514 	add.w	r5, r0, #20
 8006ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ef0:	d331      	bcc.n	8006f56 <quorem+0x9c>
 8006ef2:	f04f 0e00 	mov.w	lr, #0
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	46ac      	mov	ip, r5
 8006efa:	46f2      	mov	sl, lr
 8006efc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f00:	b293      	uxth	r3, r2
 8006f02:	fb06 e303 	mla	r3, r6, r3, lr
 8006f06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f0a:	0c1a      	lsrs	r2, r3, #16
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006f12:	f8dc a000 	ldr.w	sl, [ip]
 8006f16:	fa13 f38a 	uxtah	r3, r3, sl
 8006f1a:	fb06 220e 	mla	r2, r6, lr, r2
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	9b00      	ldr	r3, [sp, #0]
 8006f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f26:	b292      	uxth	r2, r2
 8006f28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f30:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f34:	4581      	cmp	r9, r0
 8006f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f42:	d2db      	bcs.n	8006efc <quorem+0x42>
 8006f44:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f48:	b92b      	cbnz	r3, 8006f56 <quorem+0x9c>
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	429d      	cmp	r5, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	d32c      	bcc.n	8006fae <quorem+0xf4>
 8006f54:	613c      	str	r4, [r7, #16]
 8006f56:	4638      	mov	r0, r7
 8006f58:	f001 fae6 	bl	8008528 <__mcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	db22      	blt.n	8006fa6 <quorem+0xec>
 8006f60:	3601      	adds	r6, #1
 8006f62:	4629      	mov	r1, r5
 8006f64:	2000      	movs	r0, #0
 8006f66:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f6a:	f8d1 c000 	ldr.w	ip, [r1]
 8006f6e:	b293      	uxth	r3, r2
 8006f70:	1ac3      	subs	r3, r0, r3
 8006f72:	0c12      	lsrs	r2, r2, #16
 8006f74:	fa13 f38c 	uxtah	r3, r3, ip
 8006f78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f86:	45c1      	cmp	r9, r8
 8006f88:	f841 3b04 	str.w	r3, [r1], #4
 8006f8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f90:	d2e9      	bcs.n	8006f66 <quorem+0xac>
 8006f92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f9a:	b922      	cbnz	r2, 8006fa6 <quorem+0xec>
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	d30a      	bcc.n	8006fba <quorem+0x100>
 8006fa4:	613c      	str	r4, [r7, #16]
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	b003      	add	sp, #12
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	d1ce      	bne.n	8006f54 <quorem+0x9a>
 8006fb6:	3c01      	subs	r4, #1
 8006fb8:	e7c9      	b.n	8006f4e <quorem+0x94>
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <quorem+0xea>
 8006fc2:	3c01      	subs	r4, #1
 8006fc4:	e7eb      	b.n	8006f9e <quorem+0xe4>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e7ee      	b.n	8006fa8 <quorem+0xee>
 8006fca:	0000      	movs	r0, r0
 8006fcc:	0000      	movs	r0, r0
	...

08006fd0 <_dtoa_r>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ed2d 8b04 	vpush	{d8-d9}
 8006fd8:	69c5      	ldr	r5, [r0, #28]
 8006fda:	b093      	sub	sp, #76	; 0x4c
 8006fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fe0:	ec57 6b10 	vmov	r6, r7, d0
 8006fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fe8:	9107      	str	r1, [sp, #28]
 8006fea:	4604      	mov	r4, r0
 8006fec:	920a      	str	r2, [sp, #40]	; 0x28
 8006fee:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff0:	b975      	cbnz	r5, 8007010 <_dtoa_r+0x40>
 8006ff2:	2010      	movs	r0, #16
 8006ff4:	f7ff fba4 	bl	8006740 <malloc>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	61e0      	str	r0, [r4, #28]
 8006ffc:	b920      	cbnz	r0, 8007008 <_dtoa_r+0x38>
 8006ffe:	4bae      	ldr	r3, [pc, #696]	; (80072b8 <_dtoa_r+0x2e8>)
 8007000:	21ef      	movs	r1, #239	; 0xef
 8007002:	48ae      	ldr	r0, [pc, #696]	; (80072bc <_dtoa_r+0x2ec>)
 8007004:	f001 fd40 	bl	8008a88 <__assert_func>
 8007008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800700c:	6005      	str	r5, [r0, #0]
 800700e:	60c5      	str	r5, [r0, #12]
 8007010:	69e3      	ldr	r3, [r4, #28]
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	b151      	cbz	r1, 800702c <_dtoa_r+0x5c>
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	604a      	str	r2, [r1, #4]
 800701a:	2301      	movs	r3, #1
 800701c:	4093      	lsls	r3, r2
 800701e:	608b      	str	r3, [r1, #8]
 8007020:	4620      	mov	r0, r4
 8007022:	f001 f845 	bl	80080b0 <_Bfree>
 8007026:	69e3      	ldr	r3, [r4, #28]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	1e3b      	subs	r3, r7, #0
 800702e:	bfbb      	ittet	lt
 8007030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007034:	9303      	strlt	r3, [sp, #12]
 8007036:	2300      	movge	r3, #0
 8007038:	2201      	movlt	r2, #1
 800703a:	bfac      	ite	ge
 800703c:	f8c8 3000 	strge.w	r3, [r8]
 8007040:	f8c8 2000 	strlt.w	r2, [r8]
 8007044:	4b9e      	ldr	r3, [pc, #632]	; (80072c0 <_dtoa_r+0x2f0>)
 8007046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800704a:	ea33 0308 	bics.w	r3, r3, r8
 800704e:	d11b      	bne.n	8007088 <_dtoa_r+0xb8>
 8007050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007052:	f242 730f 	movw	r3, #9999	; 0x270f
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800705c:	4333      	orrs	r3, r6
 800705e:	f000 8593 	beq.w	8007b88 <_dtoa_r+0xbb8>
 8007062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007064:	b963      	cbnz	r3, 8007080 <_dtoa_r+0xb0>
 8007066:	4b97      	ldr	r3, [pc, #604]	; (80072c4 <_dtoa_r+0x2f4>)
 8007068:	e027      	b.n	80070ba <_dtoa_r+0xea>
 800706a:	4b97      	ldr	r3, [pc, #604]	; (80072c8 <_dtoa_r+0x2f8>)
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	9800      	ldr	r0, [sp, #0]
 8007076:	b013      	add	sp, #76	; 0x4c
 8007078:	ecbd 8b04 	vpop	{d8-d9}
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	4b90      	ldr	r3, [pc, #576]	; (80072c4 <_dtoa_r+0x2f4>)
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	3303      	adds	r3, #3
 8007086:	e7f3      	b.n	8007070 <_dtoa_r+0xa0>
 8007088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	ec51 0b17 	vmov	r0, r1, d7
 8007092:	eeb0 8a47 	vmov.f32	s16, s14
 8007096:	eef0 8a67 	vmov.f32	s17, s15
 800709a:	2300      	movs	r3, #0
 800709c:	f7f9 fd3c 	bl	8000b18 <__aeabi_dcmpeq>
 80070a0:	4681      	mov	r9, r0
 80070a2:	b160      	cbz	r0, 80070be <_dtoa_r+0xee>
 80070a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a6:	2301      	movs	r3, #1
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8568 	beq.w	8007b82 <_dtoa_r+0xbb2>
 80070b2:	4b86      	ldr	r3, [pc, #536]	; (80072cc <_dtoa_r+0x2fc>)
 80070b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	e7da      	b.n	8007074 <_dtoa_r+0xa4>
 80070be:	aa10      	add	r2, sp, #64	; 0x40
 80070c0:	a911      	add	r1, sp, #68	; 0x44
 80070c2:	4620      	mov	r0, r4
 80070c4:	eeb0 0a48 	vmov.f32	s0, s16
 80070c8:	eef0 0a68 	vmov.f32	s1, s17
 80070cc:	f001 fad2 	bl	8008674 <__d2b>
 80070d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070d4:	4682      	mov	sl, r0
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	d07f      	beq.n	80071da <_dtoa_r+0x20a>
 80070da:	ee18 3a90 	vmov	r3, s17
 80070de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070e6:	ec51 0b18 	vmov	r0, r1, d8
 80070ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80070f6:	4619      	mov	r1, r3
 80070f8:	2200      	movs	r2, #0
 80070fa:	4b75      	ldr	r3, [pc, #468]	; (80072d0 <_dtoa_r+0x300>)
 80070fc:	f7f9 f8ec 	bl	80002d8 <__aeabi_dsub>
 8007100:	a367      	add	r3, pc, #412	; (adr r3, 80072a0 <_dtoa_r+0x2d0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 fa9f 	bl	8000648 <__aeabi_dmul>
 800710a:	a367      	add	r3, pc, #412	; (adr r3, 80072a8 <_dtoa_r+0x2d8>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f7f9 f8e4 	bl	80002dc <__adddf3>
 8007114:	4606      	mov	r6, r0
 8007116:	4628      	mov	r0, r5
 8007118:	460f      	mov	r7, r1
 800711a:	f7f9 fa2b 	bl	8000574 <__aeabi_i2d>
 800711e:	a364      	add	r3, pc, #400	; (adr r3, 80072b0 <_dtoa_r+0x2e0>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 fa90 	bl	8000648 <__aeabi_dmul>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f7f9 f8d4 	bl	80002dc <__adddf3>
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	f7f9 fd36 	bl	8000ba8 <__aeabi_d2iz>
 800713c:	2200      	movs	r2, #0
 800713e:	4683      	mov	fp, r0
 8007140:	2300      	movs	r3, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fcf1 	bl	8000b2c <__aeabi_dcmplt>
 800714a:	b148      	cbz	r0, 8007160 <_dtoa_r+0x190>
 800714c:	4658      	mov	r0, fp
 800714e:	f7f9 fa11 	bl	8000574 <__aeabi_i2d>
 8007152:	4632      	mov	r2, r6
 8007154:	463b      	mov	r3, r7
 8007156:	f7f9 fcdf 	bl	8000b18 <__aeabi_dcmpeq>
 800715a:	b908      	cbnz	r0, 8007160 <_dtoa_r+0x190>
 800715c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007160:	f1bb 0f16 	cmp.w	fp, #22
 8007164:	d857      	bhi.n	8007216 <_dtoa_r+0x246>
 8007166:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <_dtoa_r+0x304>)
 8007168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	ec51 0b18 	vmov	r0, r1, d8
 8007174:	f7f9 fcda 	bl	8000b2c <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	d04e      	beq.n	800721a <_dtoa_r+0x24a>
 800717c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007180:	2300      	movs	r3, #0
 8007182:	930c      	str	r3, [sp, #48]	; 0x30
 8007184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007186:	1b5b      	subs	r3, r3, r5
 8007188:	1e5a      	subs	r2, r3, #1
 800718a:	bf45      	ittet	mi
 800718c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007190:	9305      	strmi	r3, [sp, #20]
 8007192:	2300      	movpl	r3, #0
 8007194:	2300      	movmi	r3, #0
 8007196:	9206      	str	r2, [sp, #24]
 8007198:	bf54      	ite	pl
 800719a:	9305      	strpl	r3, [sp, #20]
 800719c:	9306      	strmi	r3, [sp, #24]
 800719e:	f1bb 0f00 	cmp.w	fp, #0
 80071a2:	db3c      	blt.n	800721e <_dtoa_r+0x24e>
 80071a4:	9b06      	ldr	r3, [sp, #24]
 80071a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80071aa:	445b      	add	r3, fp
 80071ac:	9306      	str	r3, [sp, #24]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9308      	str	r3, [sp, #32]
 80071b2:	9b07      	ldr	r3, [sp, #28]
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d868      	bhi.n	800728a <_dtoa_r+0x2ba>
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	bfc4      	itt	gt
 80071bc:	3b04      	subgt	r3, #4
 80071be:	9307      	strgt	r3, [sp, #28]
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	f1a3 0302 	sub.w	r3, r3, #2
 80071c6:	bfcc      	ite	gt
 80071c8:	2500      	movgt	r5, #0
 80071ca:	2501      	movle	r5, #1
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	f200 8085 	bhi.w	80072dc <_dtoa_r+0x30c>
 80071d2:	e8df f003 	tbb	[pc, r3]
 80071d6:	3b2e      	.short	0x3b2e
 80071d8:	5839      	.short	0x5839
 80071da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071de:	441d      	add	r5, r3
 80071e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	bfc1      	itttt	gt
 80071e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80071f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80071f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80071f8:	bfd6      	itet	le
 80071fa:	f1c3 0320 	rsble	r3, r3, #32
 80071fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007202:	fa06 f003 	lslle.w	r0, r6, r3
 8007206:	f7f9 f9a5 	bl	8000554 <__aeabi_ui2d>
 800720a:	2201      	movs	r2, #1
 800720c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007210:	3d01      	subs	r5, #1
 8007212:	920e      	str	r2, [sp, #56]	; 0x38
 8007214:	e76f      	b.n	80070f6 <_dtoa_r+0x126>
 8007216:	2301      	movs	r3, #1
 8007218:	e7b3      	b.n	8007182 <_dtoa_r+0x1b2>
 800721a:	900c      	str	r0, [sp, #48]	; 0x30
 800721c:	e7b2      	b.n	8007184 <_dtoa_r+0x1b4>
 800721e:	9b05      	ldr	r3, [sp, #20]
 8007220:	eba3 030b 	sub.w	r3, r3, fp
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	f1cb 0300 	rsb	r3, fp, #0
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	2300      	movs	r3, #0
 800722e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007230:	e7bf      	b.n	80071b2 <_dtoa_r+0x1e2>
 8007232:	2300      	movs	r3, #0
 8007234:	9309      	str	r3, [sp, #36]	; 0x24
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc52      	bgt.n	80072e2 <_dtoa_r+0x312>
 800723c:	2301      	movs	r3, #1
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	461a      	mov	r2, r3
 8007244:	920a      	str	r2, [sp, #40]	; 0x28
 8007246:	e00b      	b.n	8007260 <_dtoa_r+0x290>
 8007248:	2301      	movs	r3, #1
 800724a:	e7f3      	b.n	8007234 <_dtoa_r+0x264>
 800724c:	2300      	movs	r3, #0
 800724e:	9309      	str	r3, [sp, #36]	; 0x24
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	445b      	add	r3, fp
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	3301      	adds	r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	bfb8      	it	lt
 800725e:	2301      	movlt	r3, #1
 8007260:	69e0      	ldr	r0, [r4, #28]
 8007262:	2100      	movs	r1, #0
 8007264:	2204      	movs	r2, #4
 8007266:	f102 0614 	add.w	r6, r2, #20
 800726a:	429e      	cmp	r6, r3
 800726c:	d93d      	bls.n	80072ea <_dtoa_r+0x31a>
 800726e:	6041      	str	r1, [r0, #4]
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fedd 	bl	8008030 <_Balloc>
 8007276:	9000      	str	r0, [sp, #0]
 8007278:	2800      	cmp	r0, #0
 800727a:	d139      	bne.n	80072f0 <_dtoa_r+0x320>
 800727c:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <_dtoa_r+0x308>)
 800727e:	4602      	mov	r2, r0
 8007280:	f240 11af 	movw	r1, #431	; 0x1af
 8007284:	e6bd      	b.n	8007002 <_dtoa_r+0x32>
 8007286:	2301      	movs	r3, #1
 8007288:	e7e1      	b.n	800724e <_dtoa_r+0x27e>
 800728a:	2501      	movs	r5, #1
 800728c:	2300      	movs	r3, #0
 800728e:	9307      	str	r3, [sp, #28]
 8007290:	9509      	str	r5, [sp, #36]	; 0x24
 8007292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	2200      	movs	r2, #0
 800729c:	2312      	movs	r3, #18
 800729e:	e7d1      	b.n	8007244 <_dtoa_r+0x274>
 80072a0:	636f4361 	.word	0x636f4361
 80072a4:	3fd287a7 	.word	0x3fd287a7
 80072a8:	8b60c8b3 	.word	0x8b60c8b3
 80072ac:	3fc68a28 	.word	0x3fc68a28
 80072b0:	509f79fb 	.word	0x509f79fb
 80072b4:	3fd34413 	.word	0x3fd34413
 80072b8:	08008d6d 	.word	0x08008d6d
 80072bc:	08008d84 	.word	0x08008d84
 80072c0:	7ff00000 	.word	0x7ff00000
 80072c4:	08008d69 	.word	0x08008d69
 80072c8:	08008d60 	.word	0x08008d60
 80072cc:	08008d3d 	.word	0x08008d3d
 80072d0:	3ff80000 	.word	0x3ff80000
 80072d4:	08008e80 	.word	0x08008e80
 80072d8:	08008ddc 	.word	0x08008ddc
 80072dc:	2301      	movs	r3, #1
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
 80072e0:	e7d7      	b.n	8007292 <_dtoa_r+0x2c2>
 80072e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	9304      	str	r3, [sp, #16]
 80072e8:	e7ba      	b.n	8007260 <_dtoa_r+0x290>
 80072ea:	3101      	adds	r1, #1
 80072ec:	0052      	lsls	r2, r2, #1
 80072ee:	e7ba      	b.n	8007266 <_dtoa_r+0x296>
 80072f0:	69e3      	ldr	r3, [r4, #28]
 80072f2:	9a00      	ldr	r2, [sp, #0]
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	2b0e      	cmp	r3, #14
 80072fa:	f200 80a8 	bhi.w	800744e <_dtoa_r+0x47e>
 80072fe:	2d00      	cmp	r5, #0
 8007300:	f000 80a5 	beq.w	800744e <_dtoa_r+0x47e>
 8007304:	f1bb 0f00 	cmp.w	fp, #0
 8007308:	dd38      	ble.n	800737c <_dtoa_r+0x3ac>
 800730a:	4bc0      	ldr	r3, [pc, #768]	; (800760c <_dtoa_r+0x63c>)
 800730c:	f00b 020f 	and.w	r2, fp, #15
 8007310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007318:	e9d3 6700 	ldrd	r6, r7, [r3]
 800731c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007320:	d019      	beq.n	8007356 <_dtoa_r+0x386>
 8007322:	4bbb      	ldr	r3, [pc, #748]	; (8007610 <_dtoa_r+0x640>)
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800732c:	f7f9 fab6 	bl	800089c <__aeabi_ddiv>
 8007330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007334:	f008 080f 	and.w	r8, r8, #15
 8007338:	2503      	movs	r5, #3
 800733a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007610 <_dtoa_r+0x640>
 800733e:	f1b8 0f00 	cmp.w	r8, #0
 8007342:	d10a      	bne.n	800735a <_dtoa_r+0x38a>
 8007344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	f7f9 faa6 	bl	800089c <__aeabi_ddiv>
 8007350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007354:	e02b      	b.n	80073ae <_dtoa_r+0x3de>
 8007356:	2502      	movs	r5, #2
 8007358:	e7ef      	b.n	800733a <_dtoa_r+0x36a>
 800735a:	f018 0f01 	tst.w	r8, #1
 800735e:	d008      	beq.n	8007372 <_dtoa_r+0x3a2>
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007368:	f7f9 f96e 	bl	8000648 <__aeabi_dmul>
 800736c:	3501      	adds	r5, #1
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007376:	f109 0908 	add.w	r9, r9, #8
 800737a:	e7e0      	b.n	800733e <_dtoa_r+0x36e>
 800737c:	f000 809f 	beq.w	80074be <_dtoa_r+0x4ee>
 8007380:	f1cb 0600 	rsb	r6, fp, #0
 8007384:	4ba1      	ldr	r3, [pc, #644]	; (800760c <_dtoa_r+0x63c>)
 8007386:	4fa2      	ldr	r7, [pc, #648]	; (8007610 <_dtoa_r+0x640>)
 8007388:	f006 020f 	and.w	r2, r6, #15
 800738c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	ec51 0b18 	vmov	r0, r1, d8
 8007398:	f7f9 f956 	bl	8000648 <__aeabi_dmul>
 800739c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a0:	1136      	asrs	r6, r6, #4
 80073a2:	2300      	movs	r3, #0
 80073a4:	2502      	movs	r5, #2
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d17e      	bne.n	80074a8 <_dtoa_r+0x4d8>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1d0      	bne.n	8007350 <_dtoa_r+0x380>
 80073ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8084 	beq.w	80074c2 <_dtoa_r+0x4f2>
 80073ba:	4b96      	ldr	r3, [pc, #600]	; (8007614 <_dtoa_r+0x644>)
 80073bc:	2200      	movs	r2, #0
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f9 fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d07b      	beq.n	80074c2 <_dtoa_r+0x4f2>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d078      	beq.n	80074c2 <_dtoa_r+0x4f2>
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	dd39      	ble.n	800744a <_dtoa_r+0x47a>
 80073d6:	4b90      	ldr	r3, [pc, #576]	; (8007618 <_dtoa_r+0x648>)
 80073d8:	2200      	movs	r2, #0
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f933 	bl	8000648 <__aeabi_dmul>
 80073e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e6:	9e01      	ldr	r6, [sp, #4]
 80073e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80073ec:	3501      	adds	r5, #1
 80073ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7f9 f8be 	bl	8000574 <__aeabi_i2d>
 80073f8:	4642      	mov	r2, r8
 80073fa:	464b      	mov	r3, r9
 80073fc:	f7f9 f924 	bl	8000648 <__aeabi_dmul>
 8007400:	4b86      	ldr	r3, [pc, #536]	; (800761c <_dtoa_r+0x64c>)
 8007402:	2200      	movs	r2, #0
 8007404:	f7f8 ff6a 	bl	80002dc <__adddf3>
 8007408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800740c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007410:	9303      	str	r3, [sp, #12]
 8007412:	2e00      	cmp	r6, #0
 8007414:	d158      	bne.n	80074c8 <_dtoa_r+0x4f8>
 8007416:	4b82      	ldr	r3, [pc, #520]	; (8007620 <_dtoa_r+0x650>)
 8007418:	2200      	movs	r2, #0
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f8 ff5b 	bl	80002d8 <__aeabi_dsub>
 8007422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	f7f9 fb9d 	bl	8000b68 <__aeabi_dcmpgt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f040 8296 	bne.w	8007960 <_dtoa_r+0x990>
 8007434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007438:	4640      	mov	r0, r8
 800743a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800743e:	4649      	mov	r1, r9
 8007440:	f7f9 fb74 	bl	8000b2c <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 8289 	bne.w	800795c <_dtoa_r+0x98c>
 800744a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800744e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007450:	2b00      	cmp	r3, #0
 8007452:	f2c0 814e 	blt.w	80076f2 <_dtoa_r+0x722>
 8007456:	f1bb 0f0e 	cmp.w	fp, #14
 800745a:	f300 814a 	bgt.w	80076f2 <_dtoa_r+0x722>
 800745e:	4b6b      	ldr	r3, [pc, #428]	; (800760c <_dtoa_r+0x63c>)
 8007460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	f280 80dc 	bge.w	8007628 <_dtoa_r+0x658>
 8007470:	9b04      	ldr	r3, [sp, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f300 80d8 	bgt.w	8007628 <_dtoa_r+0x658>
 8007478:	f040 826f 	bne.w	800795a <_dtoa_r+0x98a>
 800747c:	4b68      	ldr	r3, [pc, #416]	; (8007620 <_dtoa_r+0x650>)
 800747e:	2200      	movs	r2, #0
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	f7f9 f8e0 	bl	8000648 <__aeabi_dmul>
 8007488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800748c:	f7f9 fb62 	bl	8000b54 <__aeabi_dcmpge>
 8007490:	9e04      	ldr	r6, [sp, #16]
 8007492:	4637      	mov	r7, r6
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 8245 	bne.w	8007924 <_dtoa_r+0x954>
 800749a:	9d00      	ldr	r5, [sp, #0]
 800749c:	2331      	movs	r3, #49	; 0x31
 800749e:	f805 3b01 	strb.w	r3, [r5], #1
 80074a2:	f10b 0b01 	add.w	fp, fp, #1
 80074a6:	e241      	b.n	800792c <_dtoa_r+0x95c>
 80074a8:	07f2      	lsls	r2, r6, #31
 80074aa:	d505      	bpl.n	80074b8 <_dtoa_r+0x4e8>
 80074ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b0:	f7f9 f8ca 	bl	8000648 <__aeabi_dmul>
 80074b4:	3501      	adds	r5, #1
 80074b6:	2301      	movs	r3, #1
 80074b8:	1076      	asrs	r6, r6, #1
 80074ba:	3708      	adds	r7, #8
 80074bc:	e773      	b.n	80073a6 <_dtoa_r+0x3d6>
 80074be:	2502      	movs	r5, #2
 80074c0:	e775      	b.n	80073ae <_dtoa_r+0x3de>
 80074c2:	9e04      	ldr	r6, [sp, #16]
 80074c4:	465f      	mov	r7, fp
 80074c6:	e792      	b.n	80073ee <_dtoa_r+0x41e>
 80074c8:	9900      	ldr	r1, [sp, #0]
 80074ca:	4b50      	ldr	r3, [pc, #320]	; (800760c <_dtoa_r+0x63c>)
 80074cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074d0:	4431      	add	r1, r6
 80074d2:	9102      	str	r1, [sp, #8]
 80074d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074d6:	eeb0 9a47 	vmov.f32	s18, s14
 80074da:	eef0 9a67 	vmov.f32	s19, s15
 80074de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074e6:	2900      	cmp	r1, #0
 80074e8:	d044      	beq.n	8007574 <_dtoa_r+0x5a4>
 80074ea:	494e      	ldr	r1, [pc, #312]	; (8007624 <_dtoa_r+0x654>)
 80074ec:	2000      	movs	r0, #0
 80074ee:	f7f9 f9d5 	bl	800089c <__aeabi_ddiv>
 80074f2:	ec53 2b19 	vmov	r2, r3, d9
 80074f6:	f7f8 feef 	bl	80002d8 <__aeabi_dsub>
 80074fa:	9d00      	ldr	r5, [sp, #0]
 80074fc:	ec41 0b19 	vmov	d9, r0, r1
 8007500:	4649      	mov	r1, r9
 8007502:	4640      	mov	r0, r8
 8007504:	f7f9 fb50 	bl	8000ba8 <__aeabi_d2iz>
 8007508:	4606      	mov	r6, r0
 800750a:	f7f9 f833 	bl	8000574 <__aeabi_i2d>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f8 fedf 	bl	80002d8 <__aeabi_dsub>
 800751a:	3630      	adds	r6, #48	; 0x30
 800751c:	f805 6b01 	strb.w	r6, [r5], #1
 8007520:	ec53 2b19 	vmov	r2, r3, d9
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	f7f9 fb00 	bl	8000b2c <__aeabi_dcmplt>
 800752c:	2800      	cmp	r0, #0
 800752e:	d164      	bne.n	80075fa <_dtoa_r+0x62a>
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	4937      	ldr	r1, [pc, #220]	; (8007614 <_dtoa_r+0x644>)
 8007536:	2000      	movs	r0, #0
 8007538:	f7f8 fece 	bl	80002d8 <__aeabi_dsub>
 800753c:	ec53 2b19 	vmov	r2, r3, d9
 8007540:	f7f9 faf4 	bl	8000b2c <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	f040 80b6 	bne.w	80076b6 <_dtoa_r+0x6e6>
 800754a:	9b02      	ldr	r3, [sp, #8]
 800754c:	429d      	cmp	r5, r3
 800754e:	f43f af7c 	beq.w	800744a <_dtoa_r+0x47a>
 8007552:	4b31      	ldr	r3, [pc, #196]	; (8007618 <_dtoa_r+0x648>)
 8007554:	ec51 0b19 	vmov	r0, r1, d9
 8007558:	2200      	movs	r2, #0
 800755a:	f7f9 f875 	bl	8000648 <__aeabi_dmul>
 800755e:	4b2e      	ldr	r3, [pc, #184]	; (8007618 <_dtoa_r+0x648>)
 8007560:	ec41 0b19 	vmov	d9, r0, r1
 8007564:	2200      	movs	r2, #0
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 f86d 	bl	8000648 <__aeabi_dmul>
 800756e:	4680      	mov	r8, r0
 8007570:	4689      	mov	r9, r1
 8007572:	e7c5      	b.n	8007500 <_dtoa_r+0x530>
 8007574:	ec51 0b17 	vmov	r0, r1, d7
 8007578:	f7f9 f866 	bl	8000648 <__aeabi_dmul>
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	9d00      	ldr	r5, [sp, #0]
 8007580:	930f      	str	r3, [sp, #60]	; 0x3c
 8007582:	ec41 0b19 	vmov	d9, r0, r1
 8007586:	4649      	mov	r1, r9
 8007588:	4640      	mov	r0, r8
 800758a:	f7f9 fb0d 	bl	8000ba8 <__aeabi_d2iz>
 800758e:	4606      	mov	r6, r0
 8007590:	f7f8 fff0 	bl	8000574 <__aeabi_i2d>
 8007594:	3630      	adds	r6, #48	; 0x30
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f8 fe9b 	bl	80002d8 <__aeabi_dsub>
 80075a2:	f805 6b01 	strb.w	r6, [r5], #1
 80075a6:	9b02      	ldr	r3, [sp, #8]
 80075a8:	429d      	cmp	r5, r3
 80075aa:	4680      	mov	r8, r0
 80075ac:	4689      	mov	r9, r1
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	d124      	bne.n	80075fe <_dtoa_r+0x62e>
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <_dtoa_r+0x654>)
 80075b6:	ec51 0b19 	vmov	r0, r1, d9
 80075ba:	f7f8 fe8f 	bl	80002dc <__adddf3>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f9 facf 	bl	8000b68 <__aeabi_dcmpgt>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d173      	bne.n	80076b6 <_dtoa_r+0x6e6>
 80075ce:	ec53 2b19 	vmov	r2, r3, d9
 80075d2:	4914      	ldr	r1, [pc, #80]	; (8007624 <_dtoa_r+0x654>)
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f8 fe7f 	bl	80002d8 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f9 faa3 	bl	8000b2c <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f43f af2f 	beq.w	800744a <_dtoa_r+0x47a>
 80075ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075ee:	1e6b      	subs	r3, r5, #1
 80075f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80075f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075f6:	2b30      	cmp	r3, #48	; 0x30
 80075f8:	d0f8      	beq.n	80075ec <_dtoa_r+0x61c>
 80075fa:	46bb      	mov	fp, r7
 80075fc:	e04a      	b.n	8007694 <_dtoa_r+0x6c4>
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <_dtoa_r+0x648>)
 8007600:	f7f9 f822 	bl	8000648 <__aeabi_dmul>
 8007604:	4680      	mov	r8, r0
 8007606:	4689      	mov	r9, r1
 8007608:	e7bd      	b.n	8007586 <_dtoa_r+0x5b6>
 800760a:	bf00      	nop
 800760c:	08008e80 	.word	0x08008e80
 8007610:	08008e58 	.word	0x08008e58
 8007614:	3ff00000 	.word	0x3ff00000
 8007618:	40240000 	.word	0x40240000
 800761c:	401c0000 	.word	0x401c0000
 8007620:	40140000 	.word	0x40140000
 8007624:	3fe00000 	.word	0x3fe00000
 8007628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800762c:	9d00      	ldr	r5, [sp, #0]
 800762e:	4642      	mov	r2, r8
 8007630:	464b      	mov	r3, r9
 8007632:	4630      	mov	r0, r6
 8007634:	4639      	mov	r1, r7
 8007636:	f7f9 f931 	bl	800089c <__aeabi_ddiv>
 800763a:	f7f9 fab5 	bl	8000ba8 <__aeabi_d2iz>
 800763e:	9001      	str	r0, [sp, #4]
 8007640:	f7f8 ff98 	bl	8000574 <__aeabi_i2d>
 8007644:	4642      	mov	r2, r8
 8007646:	464b      	mov	r3, r9
 8007648:	f7f8 fffe 	bl	8000648 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f8 fe40 	bl	80002d8 <__aeabi_dsub>
 8007658:	9e01      	ldr	r6, [sp, #4]
 800765a:	9f04      	ldr	r7, [sp, #16]
 800765c:	3630      	adds	r6, #48	; 0x30
 800765e:	f805 6b01 	strb.w	r6, [r5], #1
 8007662:	9e00      	ldr	r6, [sp, #0]
 8007664:	1bae      	subs	r6, r5, r6
 8007666:	42b7      	cmp	r7, r6
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	d134      	bne.n	80076d8 <_dtoa_r+0x708>
 800766e:	f7f8 fe35 	bl	80002dc <__adddf3>
 8007672:	4642      	mov	r2, r8
 8007674:	464b      	mov	r3, r9
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	f7f9 fa75 	bl	8000b68 <__aeabi_dcmpgt>
 800767e:	b9c8      	cbnz	r0, 80076b4 <_dtoa_r+0x6e4>
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f7f9 fa46 	bl	8000b18 <__aeabi_dcmpeq>
 800768c:	b110      	cbz	r0, 8007694 <_dtoa_r+0x6c4>
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	07db      	lsls	r3, r3, #31
 8007692:	d40f      	bmi.n	80076b4 <_dtoa_r+0x6e4>
 8007694:	4651      	mov	r1, sl
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fd0a 	bl	80080b0 <_Bfree>
 800769c:	2300      	movs	r3, #0
 800769e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076a0:	702b      	strb	r3, [r5, #0]
 80076a2:	f10b 0301 	add.w	r3, fp, #1
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f43f ace2 	beq.w	8007074 <_dtoa_r+0xa4>
 80076b0:	601d      	str	r5, [r3, #0]
 80076b2:	e4df      	b.n	8007074 <_dtoa_r+0xa4>
 80076b4:	465f      	mov	r7, fp
 80076b6:	462b      	mov	r3, r5
 80076b8:	461d      	mov	r5, r3
 80076ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076be:	2a39      	cmp	r2, #57	; 0x39
 80076c0:	d106      	bne.n	80076d0 <_dtoa_r+0x700>
 80076c2:	9a00      	ldr	r2, [sp, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d1f7      	bne.n	80076b8 <_dtoa_r+0x6e8>
 80076c8:	9900      	ldr	r1, [sp, #0]
 80076ca:	2230      	movs	r2, #48	; 0x30
 80076cc:	3701      	adds	r7, #1
 80076ce:	700a      	strb	r2, [r1, #0]
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	3201      	adds	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e790      	b.n	80075fa <_dtoa_r+0x62a>
 80076d8:	4ba3      	ldr	r3, [pc, #652]	; (8007968 <_dtoa_r+0x998>)
 80076da:	2200      	movs	r2, #0
 80076dc:	f7f8 ffb4 	bl	8000648 <__aeabi_dmul>
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	f7f9 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d09e      	beq.n	800762e <_dtoa_r+0x65e>
 80076f0:	e7d0      	b.n	8007694 <_dtoa_r+0x6c4>
 80076f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	f000 80ca 	beq.w	800788e <_dtoa_r+0x8be>
 80076fa:	9a07      	ldr	r2, [sp, #28]
 80076fc:	2a01      	cmp	r2, #1
 80076fe:	f300 80ad 	bgt.w	800785c <_dtoa_r+0x88c>
 8007702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007704:	2a00      	cmp	r2, #0
 8007706:	f000 80a5 	beq.w	8007854 <_dtoa_r+0x884>
 800770a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800770e:	9e08      	ldr	r6, [sp, #32]
 8007710:	9d05      	ldr	r5, [sp, #20]
 8007712:	9a05      	ldr	r2, [sp, #20]
 8007714:	441a      	add	r2, r3
 8007716:	9205      	str	r2, [sp, #20]
 8007718:	9a06      	ldr	r2, [sp, #24]
 800771a:	2101      	movs	r1, #1
 800771c:	441a      	add	r2, r3
 800771e:	4620      	mov	r0, r4
 8007720:	9206      	str	r2, [sp, #24]
 8007722:	f000 fd7b 	bl	800821c <__i2b>
 8007726:	4607      	mov	r7, r0
 8007728:	b165      	cbz	r5, 8007744 <_dtoa_r+0x774>
 800772a:	9b06      	ldr	r3, [sp, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd09      	ble.n	8007744 <_dtoa_r+0x774>
 8007730:	42ab      	cmp	r3, r5
 8007732:	9a05      	ldr	r2, [sp, #20]
 8007734:	bfa8      	it	ge
 8007736:	462b      	movge	r3, r5
 8007738:	1ad2      	subs	r2, r2, r3
 800773a:	9205      	str	r2, [sp, #20]
 800773c:	9a06      	ldr	r2, [sp, #24]
 800773e:	1aed      	subs	r5, r5, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	9306      	str	r3, [sp, #24]
 8007744:	9b08      	ldr	r3, [sp, #32]
 8007746:	b1f3      	cbz	r3, 8007786 <_dtoa_r+0x7b6>
 8007748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80a3 	beq.w	8007896 <_dtoa_r+0x8c6>
 8007750:	2e00      	cmp	r6, #0
 8007752:	dd10      	ble.n	8007776 <_dtoa_r+0x7a6>
 8007754:	4639      	mov	r1, r7
 8007756:	4632      	mov	r2, r6
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fe1f 	bl	800839c <__pow5mult>
 800775e:	4652      	mov	r2, sl
 8007760:	4601      	mov	r1, r0
 8007762:	4607      	mov	r7, r0
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fd6f 	bl	8008248 <__multiply>
 800776a:	4651      	mov	r1, sl
 800776c:	4680      	mov	r8, r0
 800776e:	4620      	mov	r0, r4
 8007770:	f000 fc9e 	bl	80080b0 <_Bfree>
 8007774:	46c2      	mov	sl, r8
 8007776:	9b08      	ldr	r3, [sp, #32]
 8007778:	1b9a      	subs	r2, r3, r6
 800777a:	d004      	beq.n	8007786 <_dtoa_r+0x7b6>
 800777c:	4651      	mov	r1, sl
 800777e:	4620      	mov	r0, r4
 8007780:	f000 fe0c 	bl	800839c <__pow5mult>
 8007784:	4682      	mov	sl, r0
 8007786:	2101      	movs	r1, #1
 8007788:	4620      	mov	r0, r4
 800778a:	f000 fd47 	bl	800821c <__i2b>
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	4606      	mov	r6, r0
 8007794:	f340 8081 	ble.w	800789a <_dtoa_r+0x8ca>
 8007798:	461a      	mov	r2, r3
 800779a:	4601      	mov	r1, r0
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fdfd 	bl	800839c <__pow5mult>
 80077a2:	9b07      	ldr	r3, [sp, #28]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	4606      	mov	r6, r0
 80077a8:	dd7a      	ble.n	80078a0 <_dtoa_r+0x8d0>
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	6933      	ldr	r3, [r6, #16]
 80077b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077b4:	6918      	ldr	r0, [r3, #16]
 80077b6:	f000 fce3 	bl	8008180 <__hi0bits>
 80077ba:	f1c0 0020 	rsb	r0, r0, #32
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	4418      	add	r0, r3
 80077c2:	f010 001f 	ands.w	r0, r0, #31
 80077c6:	f000 8094 	beq.w	80078f2 <_dtoa_r+0x922>
 80077ca:	f1c0 0320 	rsb	r3, r0, #32
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	f340 8085 	ble.w	80078de <_dtoa_r+0x90e>
 80077d4:	9b05      	ldr	r3, [sp, #20]
 80077d6:	f1c0 001c 	rsb	r0, r0, #28
 80077da:	4403      	add	r3, r0
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	9b06      	ldr	r3, [sp, #24]
 80077e0:	4403      	add	r3, r0
 80077e2:	4405      	add	r5, r0
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	9b05      	ldr	r3, [sp, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dd05      	ble.n	80077f8 <_dtoa_r+0x828>
 80077ec:	4651      	mov	r1, sl
 80077ee:	461a      	mov	r2, r3
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fe2d 	bl	8008450 <__lshift>
 80077f6:	4682      	mov	sl, r0
 80077f8:	9b06      	ldr	r3, [sp, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dd05      	ble.n	800780a <_dtoa_r+0x83a>
 80077fe:	4631      	mov	r1, r6
 8007800:	461a      	mov	r2, r3
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fe24 	bl	8008450 <__lshift>
 8007808:	4606      	mov	r6, r0
 800780a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d072      	beq.n	80078f6 <_dtoa_r+0x926>
 8007810:	4631      	mov	r1, r6
 8007812:	4650      	mov	r0, sl
 8007814:	f000 fe88 	bl	8008528 <__mcmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	da6c      	bge.n	80078f6 <_dtoa_r+0x926>
 800781c:	2300      	movs	r3, #0
 800781e:	4651      	mov	r1, sl
 8007820:	220a      	movs	r2, #10
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fc66 	bl	80080f4 <__multadd>
 8007828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800782e:	4682      	mov	sl, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81b0 	beq.w	8007b96 <_dtoa_r+0xbc6>
 8007836:	2300      	movs	r3, #0
 8007838:	4639      	mov	r1, r7
 800783a:	220a      	movs	r2, #10
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fc59 	bl	80080f4 <__multadd>
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	4607      	mov	r7, r0
 8007848:	f300 8096 	bgt.w	8007978 <_dtoa_r+0x9a8>
 800784c:	9b07      	ldr	r3, [sp, #28]
 800784e:	2b02      	cmp	r3, #2
 8007850:	dc59      	bgt.n	8007906 <_dtoa_r+0x936>
 8007852:	e091      	b.n	8007978 <_dtoa_r+0x9a8>
 8007854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800785a:	e758      	b.n	800770e <_dtoa_r+0x73e>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	1e5e      	subs	r6, r3, #1
 8007860:	9b08      	ldr	r3, [sp, #32]
 8007862:	42b3      	cmp	r3, r6
 8007864:	bfbf      	itttt	lt
 8007866:	9b08      	ldrlt	r3, [sp, #32]
 8007868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800786a:	9608      	strlt	r6, [sp, #32]
 800786c:	1af3      	sublt	r3, r6, r3
 800786e:	bfb4      	ite	lt
 8007870:	18d2      	addlt	r2, r2, r3
 8007872:	1b9e      	subge	r6, r3, r6
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	bfbc      	itt	lt
 8007878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800787a:	2600      	movlt	r6, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfb7      	itett	lt
 8007880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007888:	1a9d      	sublt	r5, r3, r2
 800788a:	2300      	movlt	r3, #0
 800788c:	e741      	b.n	8007712 <_dtoa_r+0x742>
 800788e:	9e08      	ldr	r6, [sp, #32]
 8007890:	9d05      	ldr	r5, [sp, #20]
 8007892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007894:	e748      	b.n	8007728 <_dtoa_r+0x758>
 8007896:	9a08      	ldr	r2, [sp, #32]
 8007898:	e770      	b.n	800777c <_dtoa_r+0x7ac>
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	2b01      	cmp	r3, #1
 800789e:	dc19      	bgt.n	80078d4 <_dtoa_r+0x904>
 80078a0:	9b02      	ldr	r3, [sp, #8]
 80078a2:	b9bb      	cbnz	r3, 80078d4 <_dtoa_r+0x904>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078aa:	b99b      	cbnz	r3, 80078d4 <_dtoa_r+0x904>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078b2:	0d1b      	lsrs	r3, r3, #20
 80078b4:	051b      	lsls	r3, r3, #20
 80078b6:	b183      	cbz	r3, 80078da <_dtoa_r+0x90a>
 80078b8:	9b05      	ldr	r3, [sp, #20]
 80078ba:	3301      	adds	r3, #1
 80078bc:	9305      	str	r3, [sp, #20]
 80078be:	9b06      	ldr	r3, [sp, #24]
 80078c0:	3301      	adds	r3, #1
 80078c2:	9306      	str	r3, [sp, #24]
 80078c4:	f04f 0801 	mov.w	r8, #1
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f47f af6f 	bne.w	80077ae <_dtoa_r+0x7de>
 80078d0:	2001      	movs	r0, #1
 80078d2:	e774      	b.n	80077be <_dtoa_r+0x7ee>
 80078d4:	f04f 0800 	mov.w	r8, #0
 80078d8:	e7f6      	b.n	80078c8 <_dtoa_r+0x8f8>
 80078da:	4698      	mov	r8, r3
 80078dc:	e7f4      	b.n	80078c8 <_dtoa_r+0x8f8>
 80078de:	d082      	beq.n	80077e6 <_dtoa_r+0x816>
 80078e0:	9a05      	ldr	r2, [sp, #20]
 80078e2:	331c      	adds	r3, #28
 80078e4:	441a      	add	r2, r3
 80078e6:	9205      	str	r2, [sp, #20]
 80078e8:	9a06      	ldr	r2, [sp, #24]
 80078ea:	441a      	add	r2, r3
 80078ec:	441d      	add	r5, r3
 80078ee:	9206      	str	r2, [sp, #24]
 80078f0:	e779      	b.n	80077e6 <_dtoa_r+0x816>
 80078f2:	4603      	mov	r3, r0
 80078f4:	e7f4      	b.n	80078e0 <_dtoa_r+0x910>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc37      	bgt.n	800796c <_dtoa_r+0x99c>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dd34      	ble.n	800796c <_dtoa_r+0x99c>
 8007902:	9b04      	ldr	r3, [sp, #16]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	b963      	cbnz	r3, 8007924 <_dtoa_r+0x954>
 800790a:	4631      	mov	r1, r6
 800790c:	2205      	movs	r2, #5
 800790e:	4620      	mov	r0, r4
 8007910:	f000 fbf0 	bl	80080f4 <__multadd>
 8007914:	4601      	mov	r1, r0
 8007916:	4606      	mov	r6, r0
 8007918:	4650      	mov	r0, sl
 800791a:	f000 fe05 	bl	8008528 <__mcmp>
 800791e:	2800      	cmp	r0, #0
 8007920:	f73f adbb 	bgt.w	800749a <_dtoa_r+0x4ca>
 8007924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007926:	9d00      	ldr	r5, [sp, #0]
 8007928:	ea6f 0b03 	mvn.w	fp, r3
 800792c:	f04f 0800 	mov.w	r8, #0
 8007930:	4631      	mov	r1, r6
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fbbc 	bl	80080b0 <_Bfree>
 8007938:	2f00      	cmp	r7, #0
 800793a:	f43f aeab 	beq.w	8007694 <_dtoa_r+0x6c4>
 800793e:	f1b8 0f00 	cmp.w	r8, #0
 8007942:	d005      	beq.n	8007950 <_dtoa_r+0x980>
 8007944:	45b8      	cmp	r8, r7
 8007946:	d003      	beq.n	8007950 <_dtoa_r+0x980>
 8007948:	4641      	mov	r1, r8
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fbb0 	bl	80080b0 <_Bfree>
 8007950:	4639      	mov	r1, r7
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fbac 	bl	80080b0 <_Bfree>
 8007958:	e69c      	b.n	8007694 <_dtoa_r+0x6c4>
 800795a:	2600      	movs	r6, #0
 800795c:	4637      	mov	r7, r6
 800795e:	e7e1      	b.n	8007924 <_dtoa_r+0x954>
 8007960:	46bb      	mov	fp, r7
 8007962:	4637      	mov	r7, r6
 8007964:	e599      	b.n	800749a <_dtoa_r+0x4ca>
 8007966:	bf00      	nop
 8007968:	40240000 	.word	0x40240000
 800796c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80c8 	beq.w	8007b04 <_dtoa_r+0xb34>
 8007974:	9b04      	ldr	r3, [sp, #16]
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	2d00      	cmp	r5, #0
 800797a:	dd05      	ble.n	8007988 <_dtoa_r+0x9b8>
 800797c:	4639      	mov	r1, r7
 800797e:	462a      	mov	r2, r5
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fd65 	bl	8008450 <__lshift>
 8007986:	4607      	mov	r7, r0
 8007988:	f1b8 0f00 	cmp.w	r8, #0
 800798c:	d05b      	beq.n	8007a46 <_dtoa_r+0xa76>
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fb4d 	bl	8008030 <_Balloc>
 8007996:	4605      	mov	r5, r0
 8007998:	b928      	cbnz	r0, 80079a6 <_dtoa_r+0x9d6>
 800799a:	4b83      	ldr	r3, [pc, #524]	; (8007ba8 <_dtoa_r+0xbd8>)
 800799c:	4602      	mov	r2, r0
 800799e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079a2:	f7ff bb2e 	b.w	8007002 <_dtoa_r+0x32>
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	3202      	adds	r2, #2
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	f107 010c 	add.w	r1, r7, #12
 80079b0:	300c      	adds	r0, #12
 80079b2:	f001 f85b 	bl	8008a6c <memcpy>
 80079b6:	2201      	movs	r2, #1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fd48 	bl	8008450 <__lshift>
 80079c0:	9b00      	ldr	r3, [sp, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ca:	4413      	add	r3, r2
 80079cc:	9308      	str	r3, [sp, #32]
 80079ce:	9b02      	ldr	r3, [sp, #8]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	46b8      	mov	r8, r7
 80079d6:	9306      	str	r3, [sp, #24]
 80079d8:	4607      	mov	r7, r0
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	4631      	mov	r1, r6
 80079de:	3b01      	subs	r3, #1
 80079e0:	4650      	mov	r0, sl
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	f7ff fa69 	bl	8006eba <quorem>
 80079e8:	4641      	mov	r1, r8
 80079ea:	9002      	str	r0, [sp, #8]
 80079ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079f0:	4650      	mov	r0, sl
 80079f2:	f000 fd99 	bl	8008528 <__mcmp>
 80079f6:	463a      	mov	r2, r7
 80079f8:	9005      	str	r0, [sp, #20]
 80079fa:	4631      	mov	r1, r6
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fdaf 	bl	8008560 <__mdiff>
 8007a02:	68c2      	ldr	r2, [r0, #12]
 8007a04:	4605      	mov	r5, r0
 8007a06:	bb02      	cbnz	r2, 8007a4a <_dtoa_r+0xa7a>
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f000 fd8c 	bl	8008528 <__mcmp>
 8007a10:	4602      	mov	r2, r0
 8007a12:	4629      	mov	r1, r5
 8007a14:	4620      	mov	r0, r4
 8007a16:	9209      	str	r2, [sp, #36]	; 0x24
 8007a18:	f000 fb4a 	bl	80080b0 <_Bfree>
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a20:	9d04      	ldr	r5, [sp, #16]
 8007a22:	ea43 0102 	orr.w	r1, r3, r2
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	4319      	orrs	r1, r3
 8007a2a:	d110      	bne.n	8007a4e <_dtoa_r+0xa7e>
 8007a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a30:	d029      	beq.n	8007a86 <_dtoa_r+0xab6>
 8007a32:	9b05      	ldr	r3, [sp, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd02      	ble.n	8007a3e <_dtoa_r+0xa6e>
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	f883 9000 	strb.w	r9, [r3]
 8007a44:	e774      	b.n	8007930 <_dtoa_r+0x960>
 8007a46:	4638      	mov	r0, r7
 8007a48:	e7ba      	b.n	80079c0 <_dtoa_r+0x9f0>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	e7e1      	b.n	8007a12 <_dtoa_r+0xa42>
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	db04      	blt.n	8007a5e <_dtoa_r+0xa8e>
 8007a54:	9907      	ldr	r1, [sp, #28]
 8007a56:	430b      	orrs	r3, r1
 8007a58:	9906      	ldr	r1, [sp, #24]
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	d120      	bne.n	8007aa0 <_dtoa_r+0xad0>
 8007a5e:	2a00      	cmp	r2, #0
 8007a60:	dded      	ble.n	8007a3e <_dtoa_r+0xa6e>
 8007a62:	4651      	mov	r1, sl
 8007a64:	2201      	movs	r2, #1
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fcf2 	bl	8008450 <__lshift>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4682      	mov	sl, r0
 8007a70:	f000 fd5a 	bl	8008528 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dc03      	bgt.n	8007a80 <_dtoa_r+0xab0>
 8007a78:	d1e1      	bne.n	8007a3e <_dtoa_r+0xa6e>
 8007a7a:	f019 0f01 	tst.w	r9, #1
 8007a7e:	d0de      	beq.n	8007a3e <_dtoa_r+0xa6e>
 8007a80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a84:	d1d8      	bne.n	8007a38 <_dtoa_r+0xa68>
 8007a86:	9a01      	ldr	r2, [sp, #4]
 8007a88:	2339      	movs	r3, #57	; 0x39
 8007a8a:	7013      	strb	r3, [r2, #0]
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	461d      	mov	r5, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a96:	2a39      	cmp	r2, #57	; 0x39
 8007a98:	d06c      	beq.n	8007b74 <_dtoa_r+0xba4>
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e747      	b.n	8007930 <_dtoa_r+0x960>
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	dd07      	ble.n	8007ab4 <_dtoa_r+0xae4>
 8007aa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007aa8:	d0ed      	beq.n	8007a86 <_dtoa_r+0xab6>
 8007aaa:	9a01      	ldr	r2, [sp, #4]
 8007aac:	f109 0301 	add.w	r3, r9, #1
 8007ab0:	7013      	strb	r3, [r2, #0]
 8007ab2:	e73d      	b.n	8007930 <_dtoa_r+0x960>
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	9a08      	ldr	r2, [sp, #32]
 8007ab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d043      	beq.n	8007b48 <_dtoa_r+0xb78>
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fb14 	bl	80080f4 <__multadd>
 8007acc:	45b8      	cmp	r8, r7
 8007ace:	4682      	mov	sl, r0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	f04f 020a 	mov.w	r2, #10
 8007ad8:	4641      	mov	r1, r8
 8007ada:	4620      	mov	r0, r4
 8007adc:	d107      	bne.n	8007aee <_dtoa_r+0xb1e>
 8007ade:	f000 fb09 	bl	80080f4 <__multadd>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	e775      	b.n	80079da <_dtoa_r+0xa0a>
 8007aee:	f000 fb01 	bl	80080f4 <__multadd>
 8007af2:	4639      	mov	r1, r7
 8007af4:	4680      	mov	r8, r0
 8007af6:	2300      	movs	r3, #0
 8007af8:	220a      	movs	r2, #10
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 fafa 	bl	80080f4 <__multadd>
 8007b00:	4607      	mov	r7, r0
 8007b02:	e7f0      	b.n	8007ae6 <_dtoa_r+0xb16>
 8007b04:	9b04      	ldr	r3, [sp, #16]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	9d00      	ldr	r5, [sp, #0]
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	f7ff f9d4 	bl	8006eba <quorem>
 8007b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b16:	9b00      	ldr	r3, [sp, #0]
 8007b18:	f805 9b01 	strb.w	r9, [r5], #1
 8007b1c:	1aea      	subs	r2, r5, r3
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	dd07      	ble.n	8007b34 <_dtoa_r+0xb64>
 8007b24:	4651      	mov	r1, sl
 8007b26:	2300      	movs	r3, #0
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fae2 	bl	80080f4 <__multadd>
 8007b30:	4682      	mov	sl, r0
 8007b32:	e7ea      	b.n	8007b0a <_dtoa_r+0xb3a>
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfc8      	it	gt
 8007b3a:	461d      	movgt	r5, r3
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	bfd8      	it	le
 8007b40:	2501      	movle	r5, #1
 8007b42:	441d      	add	r5, r3
 8007b44:	f04f 0800 	mov.w	r8, #0
 8007b48:	4651      	mov	r1, sl
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fc7f 	bl	8008450 <__lshift>
 8007b52:	4631      	mov	r1, r6
 8007b54:	4682      	mov	sl, r0
 8007b56:	f000 fce7 	bl	8008528 <__mcmp>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	dc96      	bgt.n	8007a8c <_dtoa_r+0xabc>
 8007b5e:	d102      	bne.n	8007b66 <_dtoa_r+0xb96>
 8007b60:	f019 0f01 	tst.w	r9, #1
 8007b64:	d192      	bne.n	8007a8c <_dtoa_r+0xabc>
 8007b66:	462b      	mov	r3, r5
 8007b68:	461d      	mov	r5, r3
 8007b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b6e:	2a30      	cmp	r2, #48	; 0x30
 8007b70:	d0fa      	beq.n	8007b68 <_dtoa_r+0xb98>
 8007b72:	e6dd      	b.n	8007930 <_dtoa_r+0x960>
 8007b74:	9a00      	ldr	r2, [sp, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d189      	bne.n	8007a8e <_dtoa_r+0xabe>
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	2331      	movs	r3, #49	; 0x31
 8007b80:	e796      	b.n	8007ab0 <_dtoa_r+0xae0>
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <_dtoa_r+0xbdc>)
 8007b84:	f7ff ba99 	b.w	80070ba <_dtoa_r+0xea>
 8007b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f47f aa6d 	bne.w	800706a <_dtoa_r+0x9a>
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <_dtoa_r+0xbe0>)
 8007b92:	f7ff ba92 	b.w	80070ba <_dtoa_r+0xea>
 8007b96:	9b01      	ldr	r3, [sp, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dcb5      	bgt.n	8007b08 <_dtoa_r+0xb38>
 8007b9c:	9b07      	ldr	r3, [sp, #28]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	f73f aeb1 	bgt.w	8007906 <_dtoa_r+0x936>
 8007ba4:	e7b0      	b.n	8007b08 <_dtoa_r+0xb38>
 8007ba6:	bf00      	nop
 8007ba8:	08008ddc 	.word	0x08008ddc
 8007bac:	08008d3c 	.word	0x08008d3c
 8007bb0:	08008d60 	.word	0x08008d60

08007bb4 <_free_r>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	d044      	beq.n	8007c44 <_free_r+0x90>
 8007bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbe:	9001      	str	r0, [sp, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bc6:	bfb8      	it	lt
 8007bc8:	18e4      	addlt	r4, r4, r3
 8007bca:	f7fe fff1 	bl	8006bb0 <__malloc_lock>
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <_free_r+0x94>)
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	b933      	cbnz	r3, 8007be4 <_free_r+0x30>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	b003      	add	sp, #12
 8007bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be0:	f7fe bfec 	b.w	8006bbc <__malloc_unlock>
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x46>
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	1961      	adds	r1, r4, r5
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf01      	itttt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	1949      	addeq	r1, r1, r5
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	e7ed      	b.n	8007bd6 <_free_r+0x22>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b10b      	cbz	r3, 8007c04 <_free_r+0x50>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x46>
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	1855      	adds	r5, r2, r1
 8007c08:	42a5      	cmp	r5, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x70>
 8007c0c:	6824      	ldr	r4, [r4, #0]
 8007c0e:	4421      	add	r1, r4
 8007c10:	1854      	adds	r4, r2, r1
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	d1e0      	bne.n	8007bda <_free_r+0x26>
 8007c18:	681c      	ldr	r4, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	6053      	str	r3, [r2, #4]
 8007c1e:	440c      	add	r4, r1
 8007c20:	6014      	str	r4, [r2, #0]
 8007c22:	e7da      	b.n	8007bda <_free_r+0x26>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x78>
 8007c26:	230c      	movs	r3, #12
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	e7d6      	b.n	8007bda <_free_r+0x26>
 8007c2c:	6825      	ldr	r5, [r4, #0]
 8007c2e:	1961      	adds	r1, r4, r5
 8007c30:	428b      	cmp	r3, r1
 8007c32:	bf04      	itt	eq
 8007c34:	6819      	ldreq	r1, [r3, #0]
 8007c36:	685b      	ldreq	r3, [r3, #4]
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	bf04      	itt	eq
 8007c3c:	1949      	addeq	r1, r1, r5
 8007c3e:	6021      	streq	r1, [r4, #0]
 8007c40:	6054      	str	r4, [r2, #4]
 8007c42:	e7ca      	b.n	8007bda <_free_r+0x26>
 8007c44:	b003      	add	sp, #12
 8007c46:	bd30      	pop	{r4, r5, pc}
 8007c48:	200005cc 	.word	0x200005cc

08007c4c <__sfputc_r>:
 8007c4c:	6893      	ldr	r3, [r2, #8]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	b410      	push	{r4}
 8007c54:	6093      	str	r3, [r2, #8]
 8007c56:	da08      	bge.n	8007c6a <__sfputc_r+0x1e>
 8007c58:	6994      	ldr	r4, [r2, #24]
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	db01      	blt.n	8007c62 <__sfputc_r+0x16>
 8007c5e:	290a      	cmp	r1, #10
 8007c60:	d103      	bne.n	8007c6a <__sfputc_r+0x1e>
 8007c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c66:	f000 bda2 	b.w	80087ae <__swbuf_r>
 8007c6a:	6813      	ldr	r3, [r2, #0]
 8007c6c:	1c58      	adds	r0, r3, #1
 8007c6e:	6010      	str	r0, [r2, #0]
 8007c70:	7019      	strb	r1, [r3, #0]
 8007c72:	4608      	mov	r0, r1
 8007c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <__sfputs_r>:
 8007c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	18d5      	adds	r5, r2, r3
 8007c84:	42ac      	cmp	r4, r5
 8007c86:	d101      	bne.n	8007c8c <__sfputs_r+0x12>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e007      	b.n	8007c9c <__sfputs_r+0x22>
 8007c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c90:	463a      	mov	r2, r7
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffda 	bl	8007c4c <__sfputc_r>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d1f3      	bne.n	8007c84 <__sfputs_r+0xa>
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ca0 <_vfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	b09d      	sub	sp, #116	; 0x74
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	4606      	mov	r6, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <_vfiprintf_r+0x18>
 8007cb0:	6a03      	ldr	r3, [r0, #32]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <_vfiprintf_r+0x18>
 8007cb4:	f7ff f814 	bl	8006ce0 <__sinit>
 8007cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cba:	07d9      	lsls	r1, r3, #31
 8007cbc:	d405      	bmi.n	8007cca <_vfiprintf_r+0x2a>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	059a      	lsls	r2, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_vfiprintf_r+0x2a>
 8007cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc6:	f7ff f8f6 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	071b      	lsls	r3, r3, #28
 8007cce:	d501      	bpl.n	8007cd4 <_vfiprintf_r+0x34>
 8007cd0:	692b      	ldr	r3, [r5, #16]
 8007cd2:	b99b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x5c>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 fda6 	bl	8008828 <__swsetup_r>
 8007cdc:	b170      	cbz	r0, 8007cfc <_vfiprintf_r+0x5c>
 8007cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ce0:	07dc      	lsls	r4, r3, #31
 8007ce2:	d504      	bpl.n	8007cee <_vfiprintf_r+0x4e>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	b01d      	add	sp, #116	; 0x74
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	0598      	lsls	r0, r3, #22
 8007cf2:	d4f7      	bmi.n	8007ce4 <_vfiprintf_r+0x44>
 8007cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf6:	f7ff f8df 	bl	8006eb8 <__retarget_lock_release_recursive>
 8007cfa:	e7f3      	b.n	8007ce4 <_vfiprintf_r+0x44>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007d00:	2320      	movs	r3, #32
 8007d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d0a:	2330      	movs	r3, #48	; 0x30
 8007d0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ec0 <_vfiprintf_r+0x220>
 8007d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d14:	f04f 0901 	mov.w	r9, #1
 8007d18:	4623      	mov	r3, r4
 8007d1a:	469a      	mov	sl, r3
 8007d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d20:	b10a      	cbz	r2, 8007d26 <_vfiprintf_r+0x86>
 8007d22:	2a25      	cmp	r2, #37	; 0x25
 8007d24:	d1f9      	bne.n	8007d1a <_vfiprintf_r+0x7a>
 8007d26:	ebba 0b04 	subs.w	fp, sl, r4
 8007d2a:	d00b      	beq.n	8007d44 <_vfiprintf_r+0xa4>
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ffa1 	bl	8007c7a <__sfputs_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f000 80a9 	beq.w	8007e90 <_vfiprintf_r+0x1f0>
 8007d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d40:	445a      	add	r2, fp
 8007d42:	9209      	str	r2, [sp, #36]	; 0x24
 8007d44:	f89a 3000 	ldrb.w	r3, [sl]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80a1 	beq.w	8007e90 <_vfiprintf_r+0x1f0>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d58:	f10a 0a01 	add.w	sl, sl, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d64:	931a      	str	r3, [sp, #104]	; 0x68
 8007d66:	4654      	mov	r4, sl
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6e:	4854      	ldr	r0, [pc, #336]	; (8007ec0 <_vfiprintf_r+0x220>)
 8007d70:	f7f8 fa56 	bl	8000220 <memchr>
 8007d74:	9a04      	ldr	r2, [sp, #16]
 8007d76:	b9d8      	cbnz	r0, 8007db0 <_vfiprintf_r+0x110>
 8007d78:	06d1      	lsls	r1, r2, #27
 8007d7a:	bf44      	itt	mi
 8007d7c:	2320      	movmi	r3, #32
 8007d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d82:	0713      	lsls	r3, r2, #28
 8007d84:	bf44      	itt	mi
 8007d86:	232b      	movmi	r3, #43	; 0x2b
 8007d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d90:	2b2a      	cmp	r3, #42	; 0x2a
 8007d92:	d015      	beq.n	8007dc0 <_vfiprintf_r+0x120>
 8007d94:	9a07      	ldr	r2, [sp, #28]
 8007d96:	4654      	mov	r4, sl
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f04f 0c0a 	mov.w	ip, #10
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da4:	3b30      	subs	r3, #48	; 0x30
 8007da6:	2b09      	cmp	r3, #9
 8007da8:	d94d      	bls.n	8007e46 <_vfiprintf_r+0x1a6>
 8007daa:	b1b0      	cbz	r0, 8007dda <_vfiprintf_r+0x13a>
 8007dac:	9207      	str	r2, [sp, #28]
 8007dae:	e014      	b.n	8007dda <_vfiprintf_r+0x13a>
 8007db0:	eba0 0308 	sub.w	r3, r0, r8
 8007db4:	fa09 f303 	lsl.w	r3, r9, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	46a2      	mov	sl, r4
 8007dbe:	e7d2      	b.n	8007d66 <_vfiprintf_r+0xc6>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	1d19      	adds	r1, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	9103      	str	r1, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfbb      	ittet	lt
 8007dcc:	425b      	neglt	r3, r3
 8007dce:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd2:	9307      	strge	r3, [sp, #28]
 8007dd4:	9307      	strlt	r3, [sp, #28]
 8007dd6:	bfb8      	it	lt
 8007dd8:	9204      	strlt	r2, [sp, #16]
 8007dda:	7823      	ldrb	r3, [r4, #0]
 8007ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8007dde:	d10c      	bne.n	8007dfa <_vfiprintf_r+0x15a>
 8007de0:	7863      	ldrb	r3, [r4, #1]
 8007de2:	2b2a      	cmp	r3, #42	; 0x2a
 8007de4:	d134      	bne.n	8007e50 <_vfiprintf_r+0x1b0>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d1a      	adds	r2, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9203      	str	r2, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfb8      	it	lt
 8007df2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007df6:	3402      	adds	r4, #2
 8007df8:	9305      	str	r3, [sp, #20]
 8007dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ed0 <_vfiprintf_r+0x230>
 8007dfe:	7821      	ldrb	r1, [r4, #0]
 8007e00:	2203      	movs	r2, #3
 8007e02:	4650      	mov	r0, sl
 8007e04:	f7f8 fa0c 	bl	8000220 <memchr>
 8007e08:	b138      	cbz	r0, 8007e1a <_vfiprintf_r+0x17a>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	eba0 000a 	sub.w	r0, r0, sl
 8007e10:	2240      	movs	r2, #64	; 0x40
 8007e12:	4082      	lsls	r2, r0
 8007e14:	4313      	orrs	r3, r2
 8007e16:	3401      	adds	r4, #1
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	4829      	ldr	r0, [pc, #164]	; (8007ec4 <_vfiprintf_r+0x224>)
 8007e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e24:	2206      	movs	r2, #6
 8007e26:	f7f8 f9fb 	bl	8000220 <memchr>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d03f      	beq.n	8007eae <_vfiprintf_r+0x20e>
 8007e2e:	4b26      	ldr	r3, [pc, #152]	; (8007ec8 <_vfiprintf_r+0x228>)
 8007e30:	bb1b      	cbnz	r3, 8007e7a <_vfiprintf_r+0x1da>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	3307      	adds	r3, #7
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e40:	443b      	add	r3, r7
 8007e42:	9309      	str	r3, [sp, #36]	; 0x24
 8007e44:	e768      	b.n	8007d18 <_vfiprintf_r+0x78>
 8007e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	e7a6      	b.n	8007d9e <_vfiprintf_r+0xfe>
 8007e50:	2300      	movs	r3, #0
 8007e52:	3401      	adds	r4, #1
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	4619      	mov	r1, r3
 8007e58:	f04f 0c0a 	mov.w	ip, #10
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e62:	3a30      	subs	r2, #48	; 0x30
 8007e64:	2a09      	cmp	r2, #9
 8007e66:	d903      	bls.n	8007e70 <_vfiprintf_r+0x1d0>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0c6      	beq.n	8007dfa <_vfiprintf_r+0x15a>
 8007e6c:	9105      	str	r1, [sp, #20]
 8007e6e:	e7c4      	b.n	8007dfa <_vfiprintf_r+0x15a>
 8007e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e74:	4604      	mov	r4, r0
 8007e76:	2301      	movs	r3, #1
 8007e78:	e7f0      	b.n	8007e5c <_vfiprintf_r+0x1bc>
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <_vfiprintf_r+0x22c>)
 8007e82:	a904      	add	r1, sp, #16
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7fe fa25 	bl	80062d4 <_printf_float>
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	1c78      	adds	r0, r7, #1
 8007e8e:	d1d6      	bne.n	8007e3e <_vfiprintf_r+0x19e>
 8007e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_vfiprintf_r+0x202>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_vfiprintf_r+0x202>
 8007e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e9e:	f7ff f80b 	bl	8006eb8 <__retarget_lock_release_recursive>
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	065b      	lsls	r3, r3, #25
 8007ea6:	f53f af1d 	bmi.w	8007ce4 <_vfiprintf_r+0x44>
 8007eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eac:	e71c      	b.n	8007ce8 <_vfiprintf_r+0x48>
 8007eae:	ab03      	add	r3, sp, #12
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <_vfiprintf_r+0x22c>)
 8007eb6:	a904      	add	r1, sp, #16
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7fe fd57 	bl	800696c <_printf_i>
 8007ebe:	e7e4      	b.n	8007e8a <_vfiprintf_r+0x1ea>
 8007ec0:	08008ded 	.word	0x08008ded
 8007ec4:	08008df7 	.word	0x08008df7
 8007ec8:	080062d5 	.word	0x080062d5
 8007ecc:	08007c7b 	.word	0x08007c7b
 8007ed0:	08008df3 	.word	0x08008df3

08007ed4 <__sflush_r>:
 8007ed4:	898a      	ldrh	r2, [r1, #12]
 8007ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	4605      	mov	r5, r0
 8007edc:	0710      	lsls	r0, r2, #28
 8007ede:	460c      	mov	r4, r1
 8007ee0:	d458      	bmi.n	8007f94 <__sflush_r+0xc0>
 8007ee2:	684b      	ldr	r3, [r1, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dc05      	bgt.n	8007ef4 <__sflush_r+0x20>
 8007ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dc02      	bgt.n	8007ef4 <__sflush_r+0x20>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	d0f9      	beq.n	8007eee <__sflush_r+0x1a>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f00:	682f      	ldr	r7, [r5, #0]
 8007f02:	6a21      	ldr	r1, [r4, #32]
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	d032      	beq.n	8007f6e <__sflush_r+0x9a>
 8007f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	075a      	lsls	r2, r3, #29
 8007f0e:	d505      	bpl.n	8007f1c <__sflush_r+0x48>
 8007f10:	6863      	ldr	r3, [r4, #4]
 8007f12:	1ac0      	subs	r0, r0, r3
 8007f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f16:	b10b      	cbz	r3, 8007f1c <__sflush_r+0x48>
 8007f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1a:	1ac0      	subs	r0, r0, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f22:	6a21      	ldr	r1, [r4, #32]
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b0      	blx	r6
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	d106      	bne.n	8007f3c <__sflush_r+0x68>
 8007f2e:	6829      	ldr	r1, [r5, #0]
 8007f30:	291d      	cmp	r1, #29
 8007f32:	d82b      	bhi.n	8007f8c <__sflush_r+0xb8>
 8007f34:	4a29      	ldr	r2, [pc, #164]	; (8007fdc <__sflush_r+0x108>)
 8007f36:	410a      	asrs	r2, r1
 8007f38:	07d6      	lsls	r6, r2, #31
 8007f3a:	d427      	bmi.n	8007f8c <__sflush_r+0xb8>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	6062      	str	r2, [r4, #4]
 8007f40:	04d9      	lsls	r1, r3, #19
 8007f42:	6922      	ldr	r2, [r4, #16]
 8007f44:	6022      	str	r2, [r4, #0]
 8007f46:	d504      	bpl.n	8007f52 <__sflush_r+0x7e>
 8007f48:	1c42      	adds	r2, r0, #1
 8007f4a:	d101      	bne.n	8007f50 <__sflush_r+0x7c>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b903      	cbnz	r3, 8007f52 <__sflush_r+0x7e>
 8007f50:	6560      	str	r0, [r4, #84]	; 0x54
 8007f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f54:	602f      	str	r7, [r5, #0]
 8007f56:	2900      	cmp	r1, #0
 8007f58:	d0c9      	beq.n	8007eee <__sflush_r+0x1a>
 8007f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d002      	beq.n	8007f68 <__sflush_r+0x94>
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff fe26 	bl	8007bb4 <_free_r>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8007f6c:	e7c0      	b.n	8007ef0 <__sflush_r+0x1c>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b0      	blx	r6
 8007f74:	1c41      	adds	r1, r0, #1
 8007f76:	d1c8      	bne.n	8007f0a <__sflush_r+0x36>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0c5      	beq.n	8007f0a <__sflush_r+0x36>
 8007f7e:	2b1d      	cmp	r3, #29
 8007f80:	d001      	beq.n	8007f86 <__sflush_r+0xb2>
 8007f82:	2b16      	cmp	r3, #22
 8007f84:	d101      	bne.n	8007f8a <__sflush_r+0xb6>
 8007f86:	602f      	str	r7, [r5, #0]
 8007f88:	e7b1      	b.n	8007eee <__sflush_r+0x1a>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f90:	81a3      	strh	r3, [r4, #12]
 8007f92:	e7ad      	b.n	8007ef0 <__sflush_r+0x1c>
 8007f94:	690f      	ldr	r7, [r1, #16]
 8007f96:	2f00      	cmp	r7, #0
 8007f98:	d0a9      	beq.n	8007eee <__sflush_r+0x1a>
 8007f9a:	0793      	lsls	r3, r2, #30
 8007f9c:	680e      	ldr	r6, [r1, #0]
 8007f9e:	bf08      	it	eq
 8007fa0:	694b      	ldreq	r3, [r1, #20]
 8007fa2:	600f      	str	r7, [r1, #0]
 8007fa4:	bf18      	it	ne
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	eba6 0807 	sub.w	r8, r6, r7
 8007fac:	608b      	str	r3, [r1, #8]
 8007fae:	f1b8 0f00 	cmp.w	r8, #0
 8007fb2:	dd9c      	ble.n	8007eee <__sflush_r+0x1a>
 8007fb4:	6a21      	ldr	r1, [r4, #32]
 8007fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fb8:	4643      	mov	r3, r8
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b0      	blx	r6
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dc06      	bgt.n	8007fd2 <__sflush_r+0xfe>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fd0:	e78e      	b.n	8007ef0 <__sflush_r+0x1c>
 8007fd2:	4407      	add	r7, r0
 8007fd4:	eba8 0800 	sub.w	r8, r8, r0
 8007fd8:	e7e9      	b.n	8007fae <__sflush_r+0xda>
 8007fda:	bf00      	nop
 8007fdc:	dfbffffe 	.word	0xdfbffffe

08007fe0 <_fflush_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	690b      	ldr	r3, [r1, #16]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	b913      	cbnz	r3, 8007ff0 <_fflush_r+0x10>
 8007fea:	2500      	movs	r5, #0
 8007fec:	4628      	mov	r0, r5
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	b118      	cbz	r0, 8007ffa <_fflush_r+0x1a>
 8007ff2:	6a03      	ldr	r3, [r0, #32]
 8007ff4:	b90b      	cbnz	r3, 8007ffa <_fflush_r+0x1a>
 8007ff6:	f7fe fe73 	bl	8006ce0 <__sinit>
 8007ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f3      	beq.n	8007fea <_fflush_r+0xa>
 8008002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008004:	07d0      	lsls	r0, r2, #31
 8008006:	d404      	bmi.n	8008012 <_fflush_r+0x32>
 8008008:	0599      	lsls	r1, r3, #22
 800800a:	d402      	bmi.n	8008012 <_fflush_r+0x32>
 800800c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800e:	f7fe ff52 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8008012:	4628      	mov	r0, r5
 8008014:	4621      	mov	r1, r4
 8008016:	f7ff ff5d 	bl	8007ed4 <__sflush_r>
 800801a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800801c:	07da      	lsls	r2, r3, #31
 800801e:	4605      	mov	r5, r0
 8008020:	d4e4      	bmi.n	8007fec <_fflush_r+0xc>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	059b      	lsls	r3, r3, #22
 8008026:	d4e1      	bmi.n	8007fec <_fflush_r+0xc>
 8008028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802a:	f7fe ff45 	bl	8006eb8 <__retarget_lock_release_recursive>
 800802e:	e7dd      	b.n	8007fec <_fflush_r+0xc>

08008030 <_Balloc>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	69c6      	ldr	r6, [r0, #28]
 8008034:	4604      	mov	r4, r0
 8008036:	460d      	mov	r5, r1
 8008038:	b976      	cbnz	r6, 8008058 <_Balloc+0x28>
 800803a:	2010      	movs	r0, #16
 800803c:	f7fe fb80 	bl	8006740 <malloc>
 8008040:	4602      	mov	r2, r0
 8008042:	61e0      	str	r0, [r4, #28]
 8008044:	b920      	cbnz	r0, 8008050 <_Balloc+0x20>
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <_Balloc+0x78>)
 8008048:	4818      	ldr	r0, [pc, #96]	; (80080ac <_Balloc+0x7c>)
 800804a:	216b      	movs	r1, #107	; 0x6b
 800804c:	f000 fd1c 	bl	8008a88 <__assert_func>
 8008050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008054:	6006      	str	r6, [r0, #0]
 8008056:	60c6      	str	r6, [r0, #12]
 8008058:	69e6      	ldr	r6, [r4, #28]
 800805a:	68f3      	ldr	r3, [r6, #12]
 800805c:	b183      	cbz	r3, 8008080 <_Balloc+0x50>
 800805e:	69e3      	ldr	r3, [r4, #28]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008066:	b9b8      	cbnz	r0, 8008098 <_Balloc+0x68>
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f605 	lsl.w	r6, r1, r5
 800806e:	1d72      	adds	r2, r6, #5
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fd26 	bl	8008ac4 <_calloc_r>
 8008078:	b160      	cbz	r0, 8008094 <_Balloc+0x64>
 800807a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800807e:	e00e      	b.n	800809e <_Balloc+0x6e>
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	2104      	movs	r1, #4
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fd1d 	bl	8008ac4 <_calloc_r>
 800808a:	69e3      	ldr	r3, [r4, #28]
 800808c:	60f0      	str	r0, [r6, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e4      	bne.n	800805e <_Balloc+0x2e>
 8008094:	2000      	movs	r0, #0
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800809e:	2300      	movs	r3, #0
 80080a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080a4:	e7f7      	b.n	8008096 <_Balloc+0x66>
 80080a6:	bf00      	nop
 80080a8:	08008d6d 	.word	0x08008d6d
 80080ac:	08008dfe 	.word	0x08008dfe

080080b0 <_Bfree>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	69c6      	ldr	r6, [r0, #28]
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b976      	cbnz	r6, 80080d8 <_Bfree+0x28>
 80080ba:	2010      	movs	r0, #16
 80080bc:	f7fe fb40 	bl	8006740 <malloc>
 80080c0:	4602      	mov	r2, r0
 80080c2:	61e8      	str	r0, [r5, #28]
 80080c4:	b920      	cbnz	r0, 80080d0 <_Bfree+0x20>
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <_Bfree+0x3c>)
 80080c8:	4809      	ldr	r0, [pc, #36]	; (80080f0 <_Bfree+0x40>)
 80080ca:	218f      	movs	r1, #143	; 0x8f
 80080cc:	f000 fcdc 	bl	8008a88 <__assert_func>
 80080d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d4:	6006      	str	r6, [r0, #0]
 80080d6:	60c6      	str	r6, [r0, #12]
 80080d8:	b13c      	cbz	r4, 80080ea <_Bfree+0x3a>
 80080da:	69eb      	ldr	r3, [r5, #28]
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080e4:	6021      	str	r1, [r4, #0]
 80080e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	08008d6d 	.word	0x08008d6d
 80080f0:	08008dfe 	.word	0x08008dfe

080080f4 <__multadd>:
 80080f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	690d      	ldr	r5, [r1, #16]
 80080fa:	4607      	mov	r7, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	461e      	mov	r6, r3
 8008100:	f101 0c14 	add.w	ip, r1, #20
 8008104:	2000      	movs	r0, #0
 8008106:	f8dc 3000 	ldr.w	r3, [ip]
 800810a:	b299      	uxth	r1, r3
 800810c:	fb02 6101 	mla	r1, r2, r1, r6
 8008110:	0c1e      	lsrs	r6, r3, #16
 8008112:	0c0b      	lsrs	r3, r1, #16
 8008114:	fb02 3306 	mla	r3, r2, r6, r3
 8008118:	b289      	uxth	r1, r1
 800811a:	3001      	adds	r0, #1
 800811c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008120:	4285      	cmp	r5, r0
 8008122:	f84c 1b04 	str.w	r1, [ip], #4
 8008126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800812a:	dcec      	bgt.n	8008106 <__multadd+0x12>
 800812c:	b30e      	cbz	r6, 8008172 <__multadd+0x7e>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	42ab      	cmp	r3, r5
 8008132:	dc19      	bgt.n	8008168 <__multadd+0x74>
 8008134:	6861      	ldr	r1, [r4, #4]
 8008136:	4638      	mov	r0, r7
 8008138:	3101      	adds	r1, #1
 800813a:	f7ff ff79 	bl	8008030 <_Balloc>
 800813e:	4680      	mov	r8, r0
 8008140:	b928      	cbnz	r0, 800814e <__multadd+0x5a>
 8008142:	4602      	mov	r2, r0
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <__multadd+0x84>)
 8008146:	480d      	ldr	r0, [pc, #52]	; (800817c <__multadd+0x88>)
 8008148:	21ba      	movs	r1, #186	; 0xba
 800814a:	f000 fc9d 	bl	8008a88 <__assert_func>
 800814e:	6922      	ldr	r2, [r4, #16]
 8008150:	3202      	adds	r2, #2
 8008152:	f104 010c 	add.w	r1, r4, #12
 8008156:	0092      	lsls	r2, r2, #2
 8008158:	300c      	adds	r0, #12
 800815a:	f000 fc87 	bl	8008a6c <memcpy>
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ffa5 	bl	80080b0 <_Bfree>
 8008166:	4644      	mov	r4, r8
 8008168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800816c:	3501      	adds	r5, #1
 800816e:	615e      	str	r6, [r3, #20]
 8008170:	6125      	str	r5, [r4, #16]
 8008172:	4620      	mov	r0, r4
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	08008ddc 	.word	0x08008ddc
 800817c:	08008dfe 	.word	0x08008dfe

08008180 <__hi0bits>:
 8008180:	0c03      	lsrs	r3, r0, #16
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	b9d3      	cbnz	r3, 80081bc <__hi0bits+0x3c>
 8008186:	0400      	lsls	r0, r0, #16
 8008188:	2310      	movs	r3, #16
 800818a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800818e:	bf04      	itt	eq
 8008190:	0200      	lsleq	r0, r0, #8
 8008192:	3308      	addeq	r3, #8
 8008194:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008198:	bf04      	itt	eq
 800819a:	0100      	lsleq	r0, r0, #4
 800819c:	3304      	addeq	r3, #4
 800819e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081a2:	bf04      	itt	eq
 80081a4:	0080      	lsleq	r0, r0, #2
 80081a6:	3302      	addeq	r3, #2
 80081a8:	2800      	cmp	r0, #0
 80081aa:	db05      	blt.n	80081b8 <__hi0bits+0x38>
 80081ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081b0:	f103 0301 	add.w	r3, r3, #1
 80081b4:	bf08      	it	eq
 80081b6:	2320      	moveq	r3, #32
 80081b8:	4618      	mov	r0, r3
 80081ba:	4770      	bx	lr
 80081bc:	2300      	movs	r3, #0
 80081be:	e7e4      	b.n	800818a <__hi0bits+0xa>

080081c0 <__lo0bits>:
 80081c0:	6803      	ldr	r3, [r0, #0]
 80081c2:	f013 0207 	ands.w	r2, r3, #7
 80081c6:	d00c      	beq.n	80081e2 <__lo0bits+0x22>
 80081c8:	07d9      	lsls	r1, r3, #31
 80081ca:	d422      	bmi.n	8008212 <__lo0bits+0x52>
 80081cc:	079a      	lsls	r2, r3, #30
 80081ce:	bf49      	itett	mi
 80081d0:	085b      	lsrmi	r3, r3, #1
 80081d2:	089b      	lsrpl	r3, r3, #2
 80081d4:	6003      	strmi	r3, [r0, #0]
 80081d6:	2201      	movmi	r2, #1
 80081d8:	bf5c      	itt	pl
 80081da:	6003      	strpl	r3, [r0, #0]
 80081dc:	2202      	movpl	r2, #2
 80081de:	4610      	mov	r0, r2
 80081e0:	4770      	bx	lr
 80081e2:	b299      	uxth	r1, r3
 80081e4:	b909      	cbnz	r1, 80081ea <__lo0bits+0x2a>
 80081e6:	0c1b      	lsrs	r3, r3, #16
 80081e8:	2210      	movs	r2, #16
 80081ea:	b2d9      	uxtb	r1, r3
 80081ec:	b909      	cbnz	r1, 80081f2 <__lo0bits+0x32>
 80081ee:	3208      	adds	r2, #8
 80081f0:	0a1b      	lsrs	r3, r3, #8
 80081f2:	0719      	lsls	r1, r3, #28
 80081f4:	bf04      	itt	eq
 80081f6:	091b      	lsreq	r3, r3, #4
 80081f8:	3204      	addeq	r2, #4
 80081fa:	0799      	lsls	r1, r3, #30
 80081fc:	bf04      	itt	eq
 80081fe:	089b      	lsreq	r3, r3, #2
 8008200:	3202      	addeq	r2, #2
 8008202:	07d9      	lsls	r1, r3, #31
 8008204:	d403      	bmi.n	800820e <__lo0bits+0x4e>
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f102 0201 	add.w	r2, r2, #1
 800820c:	d003      	beq.n	8008216 <__lo0bits+0x56>
 800820e:	6003      	str	r3, [r0, #0]
 8008210:	e7e5      	b.n	80081de <__lo0bits+0x1e>
 8008212:	2200      	movs	r2, #0
 8008214:	e7e3      	b.n	80081de <__lo0bits+0x1e>
 8008216:	2220      	movs	r2, #32
 8008218:	e7e1      	b.n	80081de <__lo0bits+0x1e>
	...

0800821c <__i2b>:
 800821c:	b510      	push	{r4, lr}
 800821e:	460c      	mov	r4, r1
 8008220:	2101      	movs	r1, #1
 8008222:	f7ff ff05 	bl	8008030 <_Balloc>
 8008226:	4602      	mov	r2, r0
 8008228:	b928      	cbnz	r0, 8008236 <__i2b+0x1a>
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <__i2b+0x24>)
 800822c:	4805      	ldr	r0, [pc, #20]	; (8008244 <__i2b+0x28>)
 800822e:	f240 1145 	movw	r1, #325	; 0x145
 8008232:	f000 fc29 	bl	8008a88 <__assert_func>
 8008236:	2301      	movs	r3, #1
 8008238:	6144      	str	r4, [r0, #20]
 800823a:	6103      	str	r3, [r0, #16]
 800823c:	bd10      	pop	{r4, pc}
 800823e:	bf00      	nop
 8008240:	08008ddc 	.word	0x08008ddc
 8008244:	08008dfe 	.word	0x08008dfe

08008248 <__multiply>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	4691      	mov	r9, r2
 800824e:	690a      	ldr	r2, [r1, #16]
 8008250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008254:	429a      	cmp	r2, r3
 8008256:	bfb8      	it	lt
 8008258:	460b      	movlt	r3, r1
 800825a:	460c      	mov	r4, r1
 800825c:	bfbc      	itt	lt
 800825e:	464c      	movlt	r4, r9
 8008260:	4699      	movlt	r9, r3
 8008262:	6927      	ldr	r7, [r4, #16]
 8008264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	6861      	ldr	r1, [r4, #4]
 800826c:	eb07 060a 	add.w	r6, r7, sl
 8008270:	42b3      	cmp	r3, r6
 8008272:	b085      	sub	sp, #20
 8008274:	bfb8      	it	lt
 8008276:	3101      	addlt	r1, #1
 8008278:	f7ff feda 	bl	8008030 <_Balloc>
 800827c:	b930      	cbnz	r0, 800828c <__multiply+0x44>
 800827e:	4602      	mov	r2, r0
 8008280:	4b44      	ldr	r3, [pc, #272]	; (8008394 <__multiply+0x14c>)
 8008282:	4845      	ldr	r0, [pc, #276]	; (8008398 <__multiply+0x150>)
 8008284:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008288:	f000 fbfe 	bl	8008a88 <__assert_func>
 800828c:	f100 0514 	add.w	r5, r0, #20
 8008290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008294:	462b      	mov	r3, r5
 8008296:	2200      	movs	r2, #0
 8008298:	4543      	cmp	r3, r8
 800829a:	d321      	bcc.n	80082e0 <__multiply+0x98>
 800829c:	f104 0314 	add.w	r3, r4, #20
 80082a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082a4:	f109 0314 	add.w	r3, r9, #20
 80082a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082ac:	9202      	str	r2, [sp, #8]
 80082ae:	1b3a      	subs	r2, r7, r4
 80082b0:	3a15      	subs	r2, #21
 80082b2:	f022 0203 	bic.w	r2, r2, #3
 80082b6:	3204      	adds	r2, #4
 80082b8:	f104 0115 	add.w	r1, r4, #21
 80082bc:	428f      	cmp	r7, r1
 80082be:	bf38      	it	cc
 80082c0:	2204      	movcc	r2, #4
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	9a02      	ldr	r2, [sp, #8]
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d80c      	bhi.n	80082e6 <__multiply+0x9e>
 80082cc:	2e00      	cmp	r6, #0
 80082ce:	dd03      	ble.n	80082d8 <__multiply+0x90>
 80082d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d05b      	beq.n	8008390 <__multiply+0x148>
 80082d8:	6106      	str	r6, [r0, #16]
 80082da:	b005      	add	sp, #20
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	f843 2b04 	str.w	r2, [r3], #4
 80082e4:	e7d8      	b.n	8008298 <__multiply+0x50>
 80082e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80082ea:	f1ba 0f00 	cmp.w	sl, #0
 80082ee:	d024      	beq.n	800833a <__multiply+0xf2>
 80082f0:	f104 0e14 	add.w	lr, r4, #20
 80082f4:	46a9      	mov	r9, r5
 80082f6:	f04f 0c00 	mov.w	ip, #0
 80082fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082fe:	f8d9 1000 	ldr.w	r1, [r9]
 8008302:	fa1f fb82 	uxth.w	fp, r2
 8008306:	b289      	uxth	r1, r1
 8008308:	fb0a 110b 	mla	r1, sl, fp, r1
 800830c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008310:	f8d9 2000 	ldr.w	r2, [r9]
 8008314:	4461      	add	r1, ip
 8008316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800831a:	fb0a c20b 	mla	r2, sl, fp, ip
 800831e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008322:	b289      	uxth	r1, r1
 8008324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008328:	4577      	cmp	r7, lr
 800832a:	f849 1b04 	str.w	r1, [r9], #4
 800832e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008332:	d8e2      	bhi.n	80082fa <__multiply+0xb2>
 8008334:	9a01      	ldr	r2, [sp, #4]
 8008336:	f845 c002 	str.w	ip, [r5, r2]
 800833a:	9a03      	ldr	r2, [sp, #12]
 800833c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008340:	3304      	adds	r3, #4
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d021      	beq.n	800838c <__multiply+0x144>
 8008348:	6829      	ldr	r1, [r5, #0]
 800834a:	f104 0c14 	add.w	ip, r4, #20
 800834e:	46ae      	mov	lr, r5
 8008350:	f04f 0a00 	mov.w	sl, #0
 8008354:	f8bc b000 	ldrh.w	fp, [ip]
 8008358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800835c:	fb09 220b 	mla	r2, r9, fp, r2
 8008360:	4452      	add	r2, sl
 8008362:	b289      	uxth	r1, r1
 8008364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008368:	f84e 1b04 	str.w	r1, [lr], #4
 800836c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008370:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008374:	f8be 1000 	ldrh.w	r1, [lr]
 8008378:	fb09 110a 	mla	r1, r9, sl, r1
 800837c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008380:	4567      	cmp	r7, ip
 8008382:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008386:	d8e5      	bhi.n	8008354 <__multiply+0x10c>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	50a9      	str	r1, [r5, r2]
 800838c:	3504      	adds	r5, #4
 800838e:	e799      	b.n	80082c4 <__multiply+0x7c>
 8008390:	3e01      	subs	r6, #1
 8008392:	e79b      	b.n	80082cc <__multiply+0x84>
 8008394:	08008ddc 	.word	0x08008ddc
 8008398:	08008dfe 	.word	0x08008dfe

0800839c <__pow5mult>:
 800839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a0:	4615      	mov	r5, r2
 80083a2:	f012 0203 	ands.w	r2, r2, #3
 80083a6:	4606      	mov	r6, r0
 80083a8:	460f      	mov	r7, r1
 80083aa:	d007      	beq.n	80083bc <__pow5mult+0x20>
 80083ac:	4c25      	ldr	r4, [pc, #148]	; (8008444 <__pow5mult+0xa8>)
 80083ae:	3a01      	subs	r2, #1
 80083b0:	2300      	movs	r3, #0
 80083b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083b6:	f7ff fe9d 	bl	80080f4 <__multadd>
 80083ba:	4607      	mov	r7, r0
 80083bc:	10ad      	asrs	r5, r5, #2
 80083be:	d03d      	beq.n	800843c <__pow5mult+0xa0>
 80083c0:	69f4      	ldr	r4, [r6, #28]
 80083c2:	b97c      	cbnz	r4, 80083e4 <__pow5mult+0x48>
 80083c4:	2010      	movs	r0, #16
 80083c6:	f7fe f9bb 	bl	8006740 <malloc>
 80083ca:	4602      	mov	r2, r0
 80083cc:	61f0      	str	r0, [r6, #28]
 80083ce:	b928      	cbnz	r0, 80083dc <__pow5mult+0x40>
 80083d0:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <__pow5mult+0xac>)
 80083d2:	481e      	ldr	r0, [pc, #120]	; (800844c <__pow5mult+0xb0>)
 80083d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083d8:	f000 fb56 	bl	8008a88 <__assert_func>
 80083dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e0:	6004      	str	r4, [r0, #0]
 80083e2:	60c4      	str	r4, [r0, #12]
 80083e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083ec:	b94c      	cbnz	r4, 8008402 <__pow5mult+0x66>
 80083ee:	f240 2171 	movw	r1, #625	; 0x271
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ff12 	bl	800821c <__i2b>
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80083fe:	4604      	mov	r4, r0
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	f04f 0900 	mov.w	r9, #0
 8008406:	07eb      	lsls	r3, r5, #31
 8008408:	d50a      	bpl.n	8008420 <__pow5mult+0x84>
 800840a:	4639      	mov	r1, r7
 800840c:	4622      	mov	r2, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff ff1a 	bl	8008248 <__multiply>
 8008414:	4639      	mov	r1, r7
 8008416:	4680      	mov	r8, r0
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff fe49 	bl	80080b0 <_Bfree>
 800841e:	4647      	mov	r7, r8
 8008420:	106d      	asrs	r5, r5, #1
 8008422:	d00b      	beq.n	800843c <__pow5mult+0xa0>
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	b938      	cbnz	r0, 8008438 <__pow5mult+0x9c>
 8008428:	4622      	mov	r2, r4
 800842a:	4621      	mov	r1, r4
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff ff0b 	bl	8008248 <__multiply>
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f8c0 9000 	str.w	r9, [r0]
 8008438:	4604      	mov	r4, r0
 800843a:	e7e4      	b.n	8008406 <__pow5mult+0x6a>
 800843c:	4638      	mov	r0, r7
 800843e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008442:	bf00      	nop
 8008444:	08008f48 	.word	0x08008f48
 8008448:	08008d6d 	.word	0x08008d6d
 800844c:	08008dfe 	.word	0x08008dfe

08008450 <__lshift>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	460c      	mov	r4, r1
 8008456:	6849      	ldr	r1, [r1, #4]
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	4607      	mov	r7, r0
 8008462:	4691      	mov	r9, r2
 8008464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008468:	f108 0601 	add.w	r6, r8, #1
 800846c:	42b3      	cmp	r3, r6
 800846e:	db0b      	blt.n	8008488 <__lshift+0x38>
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff fddd 	bl	8008030 <_Balloc>
 8008476:	4605      	mov	r5, r0
 8008478:	b948      	cbnz	r0, 800848e <__lshift+0x3e>
 800847a:	4602      	mov	r2, r0
 800847c:	4b28      	ldr	r3, [pc, #160]	; (8008520 <__lshift+0xd0>)
 800847e:	4829      	ldr	r0, [pc, #164]	; (8008524 <__lshift+0xd4>)
 8008480:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008484:	f000 fb00 	bl	8008a88 <__assert_func>
 8008488:	3101      	adds	r1, #1
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	e7ee      	b.n	800846c <__lshift+0x1c>
 800848e:	2300      	movs	r3, #0
 8008490:	f100 0114 	add.w	r1, r0, #20
 8008494:	f100 0210 	add.w	r2, r0, #16
 8008498:	4618      	mov	r0, r3
 800849a:	4553      	cmp	r3, sl
 800849c:	db33      	blt.n	8008506 <__lshift+0xb6>
 800849e:	6920      	ldr	r0, [r4, #16]
 80084a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084a4:	f104 0314 	add.w	r3, r4, #20
 80084a8:	f019 091f 	ands.w	r9, r9, #31
 80084ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084b4:	d02b      	beq.n	800850e <__lshift+0xbe>
 80084b6:	f1c9 0e20 	rsb	lr, r9, #32
 80084ba:	468a      	mov	sl, r1
 80084bc:	2200      	movs	r2, #0
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	fa00 f009 	lsl.w	r0, r0, r9
 80084c4:	4310      	orrs	r0, r2
 80084c6:	f84a 0b04 	str.w	r0, [sl], #4
 80084ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ce:	459c      	cmp	ip, r3
 80084d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084d4:	d8f3      	bhi.n	80084be <__lshift+0x6e>
 80084d6:	ebac 0304 	sub.w	r3, ip, r4
 80084da:	3b15      	subs	r3, #21
 80084dc:	f023 0303 	bic.w	r3, r3, #3
 80084e0:	3304      	adds	r3, #4
 80084e2:	f104 0015 	add.w	r0, r4, #21
 80084e6:	4584      	cmp	ip, r0
 80084e8:	bf38      	it	cc
 80084ea:	2304      	movcc	r3, #4
 80084ec:	50ca      	str	r2, [r1, r3]
 80084ee:	b10a      	cbz	r2, 80084f4 <__lshift+0xa4>
 80084f0:	f108 0602 	add.w	r6, r8, #2
 80084f4:	3e01      	subs	r6, #1
 80084f6:	4638      	mov	r0, r7
 80084f8:	612e      	str	r6, [r5, #16]
 80084fa:	4621      	mov	r1, r4
 80084fc:	f7ff fdd8 	bl	80080b0 <_Bfree>
 8008500:	4628      	mov	r0, r5
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	f842 0f04 	str.w	r0, [r2, #4]!
 800850a:	3301      	adds	r3, #1
 800850c:	e7c5      	b.n	800849a <__lshift+0x4a>
 800850e:	3904      	subs	r1, #4
 8008510:	f853 2b04 	ldr.w	r2, [r3], #4
 8008514:	f841 2f04 	str.w	r2, [r1, #4]!
 8008518:	459c      	cmp	ip, r3
 800851a:	d8f9      	bhi.n	8008510 <__lshift+0xc0>
 800851c:	e7ea      	b.n	80084f4 <__lshift+0xa4>
 800851e:	bf00      	nop
 8008520:	08008ddc 	.word	0x08008ddc
 8008524:	08008dfe 	.word	0x08008dfe

08008528 <__mcmp>:
 8008528:	b530      	push	{r4, r5, lr}
 800852a:	6902      	ldr	r2, [r0, #16]
 800852c:	690c      	ldr	r4, [r1, #16]
 800852e:	1b12      	subs	r2, r2, r4
 8008530:	d10e      	bne.n	8008550 <__mcmp+0x28>
 8008532:	f100 0314 	add.w	r3, r0, #20
 8008536:	3114      	adds	r1, #20
 8008538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800853c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008548:	42a5      	cmp	r5, r4
 800854a:	d003      	beq.n	8008554 <__mcmp+0x2c>
 800854c:	d305      	bcc.n	800855a <__mcmp+0x32>
 800854e:	2201      	movs	r2, #1
 8008550:	4610      	mov	r0, r2
 8008552:	bd30      	pop	{r4, r5, pc}
 8008554:	4283      	cmp	r3, r0
 8008556:	d3f3      	bcc.n	8008540 <__mcmp+0x18>
 8008558:	e7fa      	b.n	8008550 <__mcmp+0x28>
 800855a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800855e:	e7f7      	b.n	8008550 <__mcmp+0x28>

08008560 <__mdiff>:
 8008560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	4606      	mov	r6, r0
 8008568:	4611      	mov	r1, r2
 800856a:	4620      	mov	r0, r4
 800856c:	4690      	mov	r8, r2
 800856e:	f7ff ffdb 	bl	8008528 <__mcmp>
 8008572:	1e05      	subs	r5, r0, #0
 8008574:	d110      	bne.n	8008598 <__mdiff+0x38>
 8008576:	4629      	mov	r1, r5
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff fd59 	bl	8008030 <_Balloc>
 800857e:	b930      	cbnz	r0, 800858e <__mdiff+0x2e>
 8008580:	4b3a      	ldr	r3, [pc, #232]	; (800866c <__mdiff+0x10c>)
 8008582:	4602      	mov	r2, r0
 8008584:	f240 2137 	movw	r1, #567	; 0x237
 8008588:	4839      	ldr	r0, [pc, #228]	; (8008670 <__mdiff+0x110>)
 800858a:	f000 fa7d 	bl	8008a88 <__assert_func>
 800858e:	2301      	movs	r3, #1
 8008590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008598:	bfa4      	itt	ge
 800859a:	4643      	movge	r3, r8
 800859c:	46a0      	movge	r8, r4
 800859e:	4630      	mov	r0, r6
 80085a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085a4:	bfa6      	itte	ge
 80085a6:	461c      	movge	r4, r3
 80085a8:	2500      	movge	r5, #0
 80085aa:	2501      	movlt	r5, #1
 80085ac:	f7ff fd40 	bl	8008030 <_Balloc>
 80085b0:	b920      	cbnz	r0, 80085bc <__mdiff+0x5c>
 80085b2:	4b2e      	ldr	r3, [pc, #184]	; (800866c <__mdiff+0x10c>)
 80085b4:	4602      	mov	r2, r0
 80085b6:	f240 2145 	movw	r1, #581	; 0x245
 80085ba:	e7e5      	b.n	8008588 <__mdiff+0x28>
 80085bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085c0:	6926      	ldr	r6, [r4, #16]
 80085c2:	60c5      	str	r5, [r0, #12]
 80085c4:	f104 0914 	add.w	r9, r4, #20
 80085c8:	f108 0514 	add.w	r5, r8, #20
 80085cc:	f100 0e14 	add.w	lr, r0, #20
 80085d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085d8:	f108 0210 	add.w	r2, r8, #16
 80085dc:	46f2      	mov	sl, lr
 80085de:	2100      	movs	r1, #0
 80085e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80085e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085e8:	fa11 f88b 	uxtah	r8, r1, fp
 80085ec:	b299      	uxth	r1, r3
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	eba8 0801 	sub.w	r8, r8, r1
 80085f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085fc:	fa1f f888 	uxth.w	r8, r8
 8008600:	1419      	asrs	r1, r3, #16
 8008602:	454e      	cmp	r6, r9
 8008604:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008608:	f84a 3b04 	str.w	r3, [sl], #4
 800860c:	d8e8      	bhi.n	80085e0 <__mdiff+0x80>
 800860e:	1b33      	subs	r3, r6, r4
 8008610:	3b15      	subs	r3, #21
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	3304      	adds	r3, #4
 8008618:	3415      	adds	r4, #21
 800861a:	42a6      	cmp	r6, r4
 800861c:	bf38      	it	cc
 800861e:	2304      	movcc	r3, #4
 8008620:	441d      	add	r5, r3
 8008622:	4473      	add	r3, lr
 8008624:	469e      	mov	lr, r3
 8008626:	462e      	mov	r6, r5
 8008628:	4566      	cmp	r6, ip
 800862a:	d30e      	bcc.n	800864a <__mdiff+0xea>
 800862c:	f10c 0203 	add.w	r2, ip, #3
 8008630:	1b52      	subs	r2, r2, r5
 8008632:	f022 0203 	bic.w	r2, r2, #3
 8008636:	3d03      	subs	r5, #3
 8008638:	45ac      	cmp	ip, r5
 800863a:	bf38      	it	cc
 800863c:	2200      	movcc	r2, #0
 800863e:	4413      	add	r3, r2
 8008640:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008644:	b17a      	cbz	r2, 8008666 <__mdiff+0x106>
 8008646:	6107      	str	r7, [r0, #16]
 8008648:	e7a4      	b.n	8008594 <__mdiff+0x34>
 800864a:	f856 8b04 	ldr.w	r8, [r6], #4
 800864e:	fa11 f288 	uxtah	r2, r1, r8
 8008652:	1414      	asrs	r4, r2, #16
 8008654:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008658:	b292      	uxth	r2, r2
 800865a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800865e:	f84e 2b04 	str.w	r2, [lr], #4
 8008662:	1421      	asrs	r1, r4, #16
 8008664:	e7e0      	b.n	8008628 <__mdiff+0xc8>
 8008666:	3f01      	subs	r7, #1
 8008668:	e7ea      	b.n	8008640 <__mdiff+0xe0>
 800866a:	bf00      	nop
 800866c:	08008ddc 	.word	0x08008ddc
 8008670:	08008dfe 	.word	0x08008dfe

08008674 <__d2b>:
 8008674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008678:	460f      	mov	r7, r1
 800867a:	2101      	movs	r1, #1
 800867c:	ec59 8b10 	vmov	r8, r9, d0
 8008680:	4616      	mov	r6, r2
 8008682:	f7ff fcd5 	bl	8008030 <_Balloc>
 8008686:	4604      	mov	r4, r0
 8008688:	b930      	cbnz	r0, 8008698 <__d2b+0x24>
 800868a:	4602      	mov	r2, r0
 800868c:	4b24      	ldr	r3, [pc, #144]	; (8008720 <__d2b+0xac>)
 800868e:	4825      	ldr	r0, [pc, #148]	; (8008724 <__d2b+0xb0>)
 8008690:	f240 310f 	movw	r1, #783	; 0x30f
 8008694:	f000 f9f8 	bl	8008a88 <__assert_func>
 8008698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800869c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086a0:	bb2d      	cbnz	r5, 80086ee <__d2b+0x7a>
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	f1b8 0300 	subs.w	r3, r8, #0
 80086a8:	d026      	beq.n	80086f8 <__d2b+0x84>
 80086aa:	4668      	mov	r0, sp
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	f7ff fd87 	bl	80081c0 <__lo0bits>
 80086b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086b6:	b1e8      	cbz	r0, 80086f4 <__d2b+0x80>
 80086b8:	f1c0 0320 	rsb	r3, r0, #32
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	430b      	orrs	r3, r1
 80086c2:	40c2      	lsrs	r2, r0
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	9201      	str	r2, [sp, #4]
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	61a3      	str	r3, [r4, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf14      	ite	ne
 80086d0:	2202      	movne	r2, #2
 80086d2:	2201      	moveq	r2, #1
 80086d4:	6122      	str	r2, [r4, #16]
 80086d6:	b1bd      	cbz	r5, 8008708 <__d2b+0x94>
 80086d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086dc:	4405      	add	r5, r0
 80086de:	603d      	str	r5, [r7, #0]
 80086e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086e4:	6030      	str	r0, [r6, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	b003      	add	sp, #12
 80086ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f2:	e7d6      	b.n	80086a2 <__d2b+0x2e>
 80086f4:	6161      	str	r1, [r4, #20]
 80086f6:	e7e7      	b.n	80086c8 <__d2b+0x54>
 80086f8:	a801      	add	r0, sp, #4
 80086fa:	f7ff fd61 	bl	80081c0 <__lo0bits>
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	6163      	str	r3, [r4, #20]
 8008702:	3020      	adds	r0, #32
 8008704:	2201      	movs	r2, #1
 8008706:	e7e5      	b.n	80086d4 <__d2b+0x60>
 8008708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800870c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008710:	6038      	str	r0, [r7, #0]
 8008712:	6918      	ldr	r0, [r3, #16]
 8008714:	f7ff fd34 	bl	8008180 <__hi0bits>
 8008718:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800871c:	e7e2      	b.n	80086e4 <__d2b+0x70>
 800871e:	bf00      	nop
 8008720:	08008ddc 	.word	0x08008ddc
 8008724:	08008dfe 	.word	0x08008dfe

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f000 f978 	bl	8008a24 <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	; 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f94c 	bl	8008a00 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 b963 	b.w	8008a48 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 f939 	bl	8008a00 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	; 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 b8f7 	b.w	800899c <_close_r>

080087ae <__swbuf_r>:
 80087ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b0:	460e      	mov	r6, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	4605      	mov	r5, r0
 80087b6:	b118      	cbz	r0, 80087c0 <__swbuf_r+0x12>
 80087b8:	6a03      	ldr	r3, [r0, #32]
 80087ba:	b90b      	cbnz	r3, 80087c0 <__swbuf_r+0x12>
 80087bc:	f7fe fa90 	bl	8006ce0 <__sinit>
 80087c0:	69a3      	ldr	r3, [r4, #24]
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	071a      	lsls	r2, r3, #28
 80087c8:	d525      	bpl.n	8008816 <__swbuf_r+0x68>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	b31b      	cbz	r3, 8008816 <__swbuf_r+0x68>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	1a98      	subs	r0, r3, r2
 80087d4:	6963      	ldr	r3, [r4, #20]
 80087d6:	b2f6      	uxtb	r6, r6
 80087d8:	4283      	cmp	r3, r0
 80087da:	4637      	mov	r7, r6
 80087dc:	dc04      	bgt.n	80087e8 <__swbuf_r+0x3a>
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fbfd 	bl	8007fe0 <_fflush_r>
 80087e6:	b9e0      	cbnz	r0, 8008822 <__swbuf_r+0x74>
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	701e      	strb	r6, [r3, #0]
 80087f6:	6962      	ldr	r2, [r4, #20]
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d004      	beq.n	8008808 <__swbuf_r+0x5a>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	07db      	lsls	r3, r3, #31
 8008802:	d506      	bpl.n	8008812 <__swbuf_r+0x64>
 8008804:	2e0a      	cmp	r6, #10
 8008806:	d104      	bne.n	8008812 <__swbuf_r+0x64>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f7ff fbe8 	bl	8007fe0 <_fflush_r>
 8008810:	b938      	cbnz	r0, 8008822 <__swbuf_r+0x74>
 8008812:	4638      	mov	r0, r7
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f805 	bl	8008828 <__swsetup_r>
 800881e:	2800      	cmp	r0, #0
 8008820:	d0d5      	beq.n	80087ce <__swbuf_r+0x20>
 8008822:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008826:	e7f4      	b.n	8008812 <__swbuf_r+0x64>

08008828 <__swsetup_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <__swsetup_r+0xac>)
 800882c:	4605      	mov	r5, r0
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	460c      	mov	r4, r1
 8008832:	b118      	cbz	r0, 800883c <__swsetup_r+0x14>
 8008834:	6a03      	ldr	r3, [r0, #32]
 8008836:	b90b      	cbnz	r3, 800883c <__swsetup_r+0x14>
 8008838:	f7fe fa52 	bl	8006ce0 <__sinit>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008842:	0718      	lsls	r0, r3, #28
 8008844:	d422      	bmi.n	800888c <__swsetup_r+0x64>
 8008846:	06d9      	lsls	r1, r3, #27
 8008848:	d407      	bmi.n	800885a <__swsetup_r+0x32>
 800884a:	2309      	movs	r3, #9
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008858:	e034      	b.n	80088c4 <__swsetup_r+0x9c>
 800885a:	0758      	lsls	r0, r3, #29
 800885c:	d512      	bpl.n	8008884 <__swsetup_r+0x5c>
 800885e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008860:	b141      	cbz	r1, 8008874 <__swsetup_r+0x4c>
 8008862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008866:	4299      	cmp	r1, r3
 8008868:	d002      	beq.n	8008870 <__swsetup_r+0x48>
 800886a:	4628      	mov	r0, r5
 800886c:	f7ff f9a2 	bl	8007bb4 <_free_r>
 8008870:	2300      	movs	r3, #0
 8008872:	6363      	str	r3, [r4, #52]	; 0x34
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	2300      	movs	r3, #0
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0308 	orr.w	r3, r3, #8
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	b94b      	cbnz	r3, 80088a4 <__swsetup_r+0x7c>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889a:	d003      	beq.n	80088a4 <__swsetup_r+0x7c>
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 f840 	bl	8008924 <__smakebuf_r>
 80088a4:	89a0      	ldrh	r0, [r4, #12]
 80088a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088aa:	f010 0301 	ands.w	r3, r0, #1
 80088ae:	d00a      	beq.n	80088c6 <__swsetup_r+0x9e>
 80088b0:	2300      	movs	r3, #0
 80088b2:	60a3      	str	r3, [r4, #8]
 80088b4:	6963      	ldr	r3, [r4, #20]
 80088b6:	425b      	negs	r3, r3
 80088b8:	61a3      	str	r3, [r4, #24]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	b943      	cbnz	r3, 80088d0 <__swsetup_r+0xa8>
 80088be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c2:	d1c4      	bne.n	800884e <__swsetup_r+0x26>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	0781      	lsls	r1, r0, #30
 80088c8:	bf58      	it	pl
 80088ca:	6963      	ldrpl	r3, [r4, #20]
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	e7f4      	b.n	80088ba <__swsetup_r+0x92>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f7      	b.n	80088c4 <__swsetup_r+0x9c>
 80088d4:	200000dc 	.word	0x200000dc

080088d8 <__swhatbuf_r>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	460c      	mov	r4, r1
 80088dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e0:	2900      	cmp	r1, #0
 80088e2:	b096      	sub	sp, #88	; 0x58
 80088e4:	4615      	mov	r5, r2
 80088e6:	461e      	mov	r6, r3
 80088e8:	da0d      	bge.n	8008906 <__swhatbuf_r+0x2e>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	bf0c      	ite	eq
 80088f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088fa:	2340      	movne	r3, #64	; 0x40
 80088fc:	2000      	movs	r0, #0
 80088fe:	6031      	str	r1, [r6, #0]
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	b016      	add	sp, #88	; 0x58
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	466a      	mov	r2, sp
 8008908:	f000 f858 	bl	80089bc <_fstat_r>
 800890c:	2800      	cmp	r0, #0
 800890e:	dbec      	blt.n	80088ea <__swhatbuf_r+0x12>
 8008910:	9901      	ldr	r1, [sp, #4]
 8008912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800891a:	4259      	negs	r1, r3
 800891c:	4159      	adcs	r1, r3
 800891e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008922:	e7eb      	b.n	80088fc <__swhatbuf_r+0x24>

08008924 <__smakebuf_r>:
 8008924:	898b      	ldrh	r3, [r1, #12]
 8008926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008928:	079d      	lsls	r5, r3, #30
 800892a:	4606      	mov	r6, r0
 800892c:	460c      	mov	r4, r1
 800892e:	d507      	bpl.n	8008940 <__smakebuf_r+0x1c>
 8008930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	6123      	str	r3, [r4, #16]
 8008938:	2301      	movs	r3, #1
 800893a:	6163      	str	r3, [r4, #20]
 800893c:	b002      	add	sp, #8
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	ab01      	add	r3, sp, #4
 8008942:	466a      	mov	r2, sp
 8008944:	f7ff ffc8 	bl	80088d8 <__swhatbuf_r>
 8008948:	9900      	ldr	r1, [sp, #0]
 800894a:	4605      	mov	r5, r0
 800894c:	4630      	mov	r0, r6
 800894e:	f7fd ff1f 	bl	8006790 <_malloc_r>
 8008952:	b948      	cbnz	r0, 8008968 <__smakebuf_r+0x44>
 8008954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008958:	059a      	lsls	r2, r3, #22
 800895a:	d4ef      	bmi.n	800893c <__smakebuf_r+0x18>
 800895c:	f023 0303 	bic.w	r3, r3, #3
 8008960:	f043 0302 	orr.w	r3, r3, #2
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	e7e3      	b.n	8008930 <__smakebuf_r+0xc>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	6020      	str	r0, [r4, #0]
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	6163      	str	r3, [r4, #20]
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	6120      	str	r0, [r4, #16]
 800897a:	b15b      	cbz	r3, 8008994 <__smakebuf_r+0x70>
 800897c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008980:	4630      	mov	r0, r6
 8008982:	f000 f82d 	bl	80089e0 <_isatty_r>
 8008986:	b128      	cbz	r0, 8008994 <__smakebuf_r+0x70>
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	f023 0303 	bic.w	r3, r3, #3
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	431d      	orrs	r5, r3
 8008998:	81a5      	strh	r5, [r4, #12]
 800899a:	e7cf      	b.n	800893c <__smakebuf_r+0x18>

0800899c <_close_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	; (80089b8 <_close_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f9 fdbb 	bl	8002522 <_close>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_close_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_close_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000714 	.word	0x20000714

080089bc <_fstat_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_fstat_r+0x20>)
 80089c0:	2300      	movs	r3, #0
 80089c2:	4604      	mov	r4, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	f7f9 fdb6 	bl	800253a <_fstat>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d102      	bne.n	80089d8 <_fstat_r+0x1c>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	b103      	cbz	r3, 80089d8 <_fstat_r+0x1c>
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop
 80089dc:	20000714 	.word	0x20000714

080089e0 <_isatty_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	; (80089fc <_isatty_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f9 fdb5 	bl	800255a <_isatty>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_isatty_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_isatty_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20000714 	.word	0x20000714

08008a00 <_lseek_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	; (8008a20 <_lseek_r+0x20>)
 8008a04:	4604      	mov	r4, r0
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	602a      	str	r2, [r5, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f7f9 fdae 	bl	8002570 <_lseek>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_lseek_r+0x1e>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_lseek_r+0x1e>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	20000714 	.word	0x20000714

08008a24 <_read_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d07      	ldr	r5, [pc, #28]	; (8008a44 <_read_r+0x20>)
 8008a28:	4604      	mov	r4, r0
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	602a      	str	r2, [r5, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	f7f9 fd58 	bl	80024e8 <_read>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_read_r+0x1e>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_read_r+0x1e>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20000714 	.word	0x20000714

08008a48 <_write_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	; (8008a68 <_write_r+0x20>)
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7f8 ffbc 	bl	80019d4 <_write>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_write_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_write_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000714 	.word	0x20000714

08008a6c <memcpy>:
 8008a6c:	440a      	add	r2, r1
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a74:	d100      	bne.n	8008a78 <memcpy+0xc>
 8008a76:	4770      	bx	lr
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a82:	4291      	cmp	r1, r2
 8008a84:	d1f9      	bne.n	8008a7a <memcpy+0xe>
 8008a86:	bd10      	pop	{r4, pc}

08008a88 <__assert_func>:
 8008a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <__assert_func+0x2c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4605      	mov	r5, r0
 8008a94:	68d8      	ldr	r0, [r3, #12]
 8008a96:	b14c      	cbz	r4, 8008aac <__assert_func+0x24>
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <__assert_func+0x30>)
 8008a9a:	9100      	str	r1, [sp, #0]
 8008a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa0:	4906      	ldr	r1, [pc, #24]	; (8008abc <__assert_func+0x34>)
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	f000 f836 	bl	8008b14 <fiprintf>
 8008aa8:	f000 f853 	bl	8008b52 <abort>
 8008aac:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <__assert_func+0x38>)
 8008aae:	461c      	mov	r4, r3
 8008ab0:	e7f3      	b.n	8008a9a <__assert_func+0x12>
 8008ab2:	bf00      	nop
 8008ab4:	200000dc 	.word	0x200000dc
 8008ab8:	0800905f 	.word	0x0800905f
 8008abc:	0800906c 	.word	0x0800906c
 8008ac0:	0800909a 	.word	0x0800909a

08008ac4 <_calloc_r>:
 8008ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ac6:	fba1 2402 	umull	r2, r4, r1, r2
 8008aca:	b94c      	cbnz	r4, 8008ae0 <_calloc_r+0x1c>
 8008acc:	4611      	mov	r1, r2
 8008ace:	9201      	str	r2, [sp, #4]
 8008ad0:	f7fd fe5e 	bl	8006790 <_malloc_r>
 8008ad4:	9a01      	ldr	r2, [sp, #4]
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	b930      	cbnz	r0, 8008ae8 <_calloc_r+0x24>
 8008ada:	4628      	mov	r0, r5
 8008adc:	b003      	add	sp, #12
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	220c      	movs	r2, #12
 8008ae2:	6002      	str	r2, [r0, #0]
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	e7f8      	b.n	8008ada <_calloc_r+0x16>
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f7fe f99d 	bl	8006e28 <memset>
 8008aee:	e7f4      	b.n	8008ada <_calloc_r+0x16>

08008af0 <__ascii_mbtowc>:
 8008af0:	b082      	sub	sp, #8
 8008af2:	b901      	cbnz	r1, 8008af6 <__ascii_mbtowc+0x6>
 8008af4:	a901      	add	r1, sp, #4
 8008af6:	b142      	cbz	r2, 8008b0a <__ascii_mbtowc+0x1a>
 8008af8:	b14b      	cbz	r3, 8008b0e <__ascii_mbtowc+0x1e>
 8008afa:	7813      	ldrb	r3, [r2, #0]
 8008afc:	600b      	str	r3, [r1, #0]
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	1e10      	subs	r0, r2, #0
 8008b02:	bf18      	it	ne
 8008b04:	2001      	movne	r0, #1
 8008b06:	b002      	add	sp, #8
 8008b08:	4770      	bx	lr
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	e7fb      	b.n	8008b06 <__ascii_mbtowc+0x16>
 8008b0e:	f06f 0001 	mvn.w	r0, #1
 8008b12:	e7f8      	b.n	8008b06 <__ascii_mbtowc+0x16>

08008b14 <fiprintf>:
 8008b14:	b40e      	push	{r1, r2, r3}
 8008b16:	b503      	push	{r0, r1, lr}
 8008b18:	4601      	mov	r1, r0
 8008b1a:	ab03      	add	r3, sp, #12
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <fiprintf+0x20>)
 8008b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b22:	6800      	ldr	r0, [r0, #0]
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f7ff f8bb 	bl	8007ca0 <_vfiprintf_r>
 8008b2a:	b002      	add	sp, #8
 8008b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b30:	b003      	add	sp, #12
 8008b32:	4770      	bx	lr
 8008b34:	200000dc 	.word	0x200000dc

08008b38 <__ascii_wctomb>:
 8008b38:	b149      	cbz	r1, 8008b4e <__ascii_wctomb+0x16>
 8008b3a:	2aff      	cmp	r2, #255	; 0xff
 8008b3c:	bf85      	ittet	hi
 8008b3e:	238a      	movhi	r3, #138	; 0x8a
 8008b40:	6003      	strhi	r3, [r0, #0]
 8008b42:	700a      	strbls	r2, [r1, #0]
 8008b44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b48:	bf98      	it	ls
 8008b4a:	2001      	movls	r0, #1
 8008b4c:	4770      	bx	lr
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4770      	bx	lr

08008b52 <abort>:
 8008b52:	b508      	push	{r3, lr}
 8008b54:	2006      	movs	r0, #6
 8008b56:	f000 f82b 	bl	8008bb0 <raise>
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	f7f9 fcba 	bl	80024d4 <_exit>

08008b60 <_raise_r>:
 8008b60:	291f      	cmp	r1, #31
 8008b62:	b538      	push	{r3, r4, r5, lr}
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	d904      	bls.n	8008b74 <_raise_r+0x14>
 8008b6a:	2316      	movs	r3, #22
 8008b6c:	6003      	str	r3, [r0, #0]
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b76:	b112      	cbz	r2, 8008b7e <_raise_r+0x1e>
 8008b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b7c:	b94b      	cbnz	r3, 8008b92 <_raise_r+0x32>
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 f830 	bl	8008be4 <_getpid_r>
 8008b84:	462a      	mov	r2, r5
 8008b86:	4601      	mov	r1, r0
 8008b88:	4620      	mov	r0, r4
 8008b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8e:	f000 b817 	b.w	8008bc0 <_kill_r>
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d00a      	beq.n	8008bac <_raise_r+0x4c>
 8008b96:	1c59      	adds	r1, r3, #1
 8008b98:	d103      	bne.n	8008ba2 <_raise_r+0x42>
 8008b9a:	2316      	movs	r3, #22
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	e7e7      	b.n	8008b72 <_raise_r+0x12>
 8008ba2:	2400      	movs	r4, #0
 8008ba4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ba8:	4628      	mov	r0, r5
 8008baa:	4798      	blx	r3
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7e0      	b.n	8008b72 <_raise_r+0x12>

08008bb0 <raise>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <raise+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f7ff bfd3 	b.w	8008b60 <_raise_r>
 8008bba:	bf00      	nop
 8008bbc:	200000dc 	.word	0x200000dc

08008bc0 <_kill_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d07      	ldr	r5, [pc, #28]	; (8008be0 <_kill_r+0x20>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	f7f9 fc71 	bl	80024b4 <_kill>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d102      	bne.n	8008bdc <_kill_r+0x1c>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b103      	cbz	r3, 8008bdc <_kill_r+0x1c>
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	20000714 	.word	0x20000714

08008be4 <_getpid_r>:
 8008be4:	f7f9 bc5e 	b.w	80024a4 <_getpid>

08008be8 <_init>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr

08008bf4 <_fini>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr
