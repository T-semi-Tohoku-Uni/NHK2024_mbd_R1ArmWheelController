
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008a48  08008a48  00018a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e74  08008e74  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e7c  08008e7c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08008e84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000250  080090d0  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  080090d0  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a58  00000000  00000000  000202bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a9  00000000  00000000  00035d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  000385c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f27  00000000  00000000  00039938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d11  00000000  00000000  0003a85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151b2  00000000  00000000  00061570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104025  00000000  00000000  00076722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006450  00000000  00000000  0017a748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00180b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008a30 	.word	0x08008a30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08008a30 	.word	0x08008a30

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <pid_init>:
    PID *pid,
    double control_cycle,
    double kp, float kd, float ki,
    double setpoint,
    double integral_min, double integral_max
) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f9c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000fa0:	ed87 1b08 	vstr	d1, [r7, #32]
 8000fa4:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8000fa8:	edc7 2a07 	vstr	s5, [r7, #28]
 8000fac:	ed87 3b04 	vstr	d3, [r7, #16]
 8000fb0:	ed87 4b02 	vstr	d4, [r7, #8]
 8000fb4:	ed87 5b00 	vstr	d5, [r7]
    pid -> control_cycle = control_cycle;
 8000fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fbe:	e9c1 2300 	strd	r2, r3, [r1]
    pid -> kp = kp;
 8000fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid -> kd = kd;
 8000fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fce:	f7ff fae3 	bl	8000598 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid -> ki = ki;
 8000fdc:	69f8      	ldr	r0, [r7, #28]
 8000fde:	f7ff fadb 	bl	8000598 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fe8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid -> setpoint = setpoint;
 8000fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral_max = integral_max;
 8000ff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid -> integral_min = integral_min;
 8001000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001006:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid -> integral = 0;
 800100a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0;
 8001018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <pid_compute>:

double pid_compute(
    PID *pid,
    double input
) {
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	ed87 0b00 	vstr	d0, [r7]
    double error = pid -> setpoint - input;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001044:	f7ff f948 	bl	80002d8 <__aeabi_dsub>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid -> integral += error * pid -> control_cycle;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001060:	f7ff faf2 	bl	8000648 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f936 	bl	80002dc <__adddf3>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    // アンチワインドアップ
    if (pid -> integral > pid -> integral_max) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001086:	f7ff fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <pid_compute+0x70>
        pid -> integral = pid -> integral_max;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800109c:	e010      	b.n	80010c0 <pid_compute+0x92>
    } else if (pid -> integral < pid -> integral_min) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010aa:	f7ff fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <pid_compute+0x92>
        pid -> integral = pid -> integral_min;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    double derivative = (error - pid->last_error) / pid -> control_cycle;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ca:	f7ff f905 	bl	80002d8 <__aeabi_dsub>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbde 	bl	800089c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // PID出力の計算
    double output = (pid -> kp * error) + (pid -> ki * pid -> integral) + (pid -> kd * derivative);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f2:	f7ff faa9 	bl	8000648 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800110a:	f7ff fa9d 	bl	8000648 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f8e1 	bl	80002dc <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4614      	mov	r4, r2
 8001120:	461d      	mov	r5, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112c:	f7ff fa8c 	bl	8000648 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8d0 	bl	80002dc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // 更新
    pid -> last_error = error;
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800114a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return output;
 800114e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001152:	ec43 2b17 	vmov	d7, r2, r3
}
 8001156:	eeb0 0a47 	vmov.f32	s0, s14
 800115a:	eef0 0a67 	vmov.f32	s1, s15
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bdb0      	pop	{r4, r5, r7, pc}

08001164 <pid_reset_setpoint>:

void pid_reset_setpoint(
    PID *pid,
    double setpoint
) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	ed87 0b00 	vstr	d0, [r7]
    pid -> setpoint = setpoint;
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001176:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral = 0; // TODO: check if this is necessary
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0; // TODO: check if this is necessary
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <int32_t_pid_compute>:

int int32_t_pid_compute(
    PID *pid,
    double input
) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	ed87 0b00 	vstr	d0, [r7]
    return (int)pid_compute(pid, input);
 80011ae:	ed97 0b00 	vldr	d0, [r7]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff3b 	bl	800102e <pid_compute>
 80011b8:	ec53 2b10 	vmov	r2, r3, d0
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcf2 	bl	8000ba8 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <ResetToHomePosition>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* --- アームの原点を取るための関数たち --- */
void ResetToHomePosition() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  // 実行前の初期化
  // PIDの制御を一旦止める
  HAL_TIM_Base_Stop_IT(&htim6);
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <ResetToHomePosition+0xc0>)
 80011d8:	f003 fcd0 	bl	8004b7c <HAL_TIM_Base_Stop_IT>
  // MotorStateの初期化
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e014      	b.n	800120c <ResetToHomePosition+0x3c>
      arm_motor[arm_index].pos = 0;
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <ResetToHomePosition+0xc4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f103 0108 	add.w	r1, r3, #8
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
      arm_motor[arm_index].vel = 0;
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <ResetToHomePosition+0xc4>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	dde7      	ble.n	80011e2 <ResetToHomePosition+0x12>
  }
  // それぞれのスイッチの変数を全てfalseにする
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	e007      	b.n	8001228 <ResetToHomePosition+0x58>
      isPushedRestHomePositionButton[arm_index] = false;
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <ResetToHomePosition+0xc8>)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	ddf4      	ble.n	8001218 <ResetToHomePosition+0x48>
  /*
   * アームをリミットスイッチまで動かす
   * スイッチが押されたら停止する
   * タイマーの切り忘れがないように注意
   */
  HAL_TIM_Base_Start_IT(&htim7);
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <ResetToHomePosition+0xcc>)
 8001230:	f003 fc2c 	bl	8004a8c <HAL_TIM_Base_Start_IT>
//      !isPushedRestHomePositionButton[2] ||
//      !isPushedRestHomePositionButton[3]
//  ) {
//      // continue
//  }
  printf("while\r\n");
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <ResetToHomePosition+0xd0>)
 8001236:	f005 fd15 	bl	8006c64 <puts>
  while (
 800123a:	bf00      	nop
      !isPushedRestHomePositionButton[0] ||
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <ResetToHomePosition+0xc8>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
      !isPushedRestHomePositionButton[2] ||
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f8      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[1] ||
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <ResetToHomePosition+0xc8>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[0] ||
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f1      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[2] ||
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <ResetToHomePosition+0xc8>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ea      	bne.n	800123c <ResetToHomePosition+0x6c>
      !isPushedRestHomePositionButton[3]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <ResetToHomePosition+0xc8>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[2] ||
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e3      	bne.n	800123c <ResetToHomePosition+0x6c>
  ) {

  }

  printf("Complete\r\n");
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <ResetToHomePosition+0xd4>)
 8001276:	f005 fcf5 	bl	8006c64 <puts>

  // PIDの制御を再開
  // 原点初期化用のタイマーを停止して、PIDを再開する
  HAL_TIM_Base_Stop_IT(&htim7);
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <ResetToHomePosition+0xcc>)
 800127c:	f003 fc7e 	bl	8004b7c <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <ResetToHomePosition+0xc0>)
 8001282:	f003 fc03 	bl	8004a8c <HAL_TIM_Base_Start_IT>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003c8 	.word	0x200003c8
 8001294:	20000548 	.word	0x20000548
 8001298:	2000059c 	.word	0x2000059c
 800129c:	20000414 	.word	0x20000414
 80012a0:	08008a48 	.word	0x08008a48
 80012a4:	08008a50 	.word	0x08008a50

080012a8 <HAL_GPIO_EXTI_Callback>:

/*
 * 原点調節用のスイッチの割り込み関数
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Arm0Switch_Pin && !isHolPushedFlagForPreventChattering[0])
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b80      	cmp	r3, #128	; 0x80
 80012b6:	d111      	bne.n	80012dc <HAL_GPIO_EXTI_Callback+0x34>
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HAL_GPIO_EXTI_Callback+0x34>
  {
      InitMotorState(0); // motorStateを再初期化する
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f850 	bl	800136c <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 80012cc:	f000 f8a6 	bl	800141c <setMotorVel>
      isPushedRestHomePositionButton[0] = true;
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_GPIO_EXTI_Callback+0xc0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
      isHolPushedFlagForPreventChattering[0] = true; // チャタリング防止用
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
  }

  if (GPIO_Pin == Arm1Switch_Pin && !isHolPushedFlagForPreventChattering[1])
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	2b40      	cmp	r3, #64	; 0x40
 80012e0:	d111      	bne.n	8001306 <HAL_GPIO_EXTI_Callback+0x5e>
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00a      	beq.n	8001306 <HAL_GPIO_EXTI_Callback+0x5e>
  {
//      printf("[Initialize Position]: ARM 1\r\n");
      InitMotorState(1); // motorStateを再初期化する
 80012f0:	2001      	movs	r0, #1
 80012f2:	f000 f83b 	bl	800136c <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 80012f6:	f000 f891 	bl	800141c <setMotorVel>
      isPushedRestHomePositionButton[1] = true;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_GPIO_EXTI_Callback+0xc0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	705a      	strb	r2, [r3, #1]
      isHolPushedFlagForPreventChattering[1] = true; // チャタリング防止用
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
  }

  if (GPIO_Pin == Arm2Switch_Pin && !isHolPushedFlagForPreventChattering[2])
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d111      	bne.n	8001330 <HAL_GPIO_EXTI_Callback+0x88>
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	f083 0301 	eor.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <HAL_GPIO_EXTI_Callback+0x88>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      InitMotorState(2); // motorStateを再初期化する
 800131a:	2002      	movs	r0, #2
 800131c:	f000 f826 	bl	800136c <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001320:	f000 f87c 	bl	800141c <setMotorVel>
      isPushedRestHomePositionButton[2] = true;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001326:	2201      	movs	r2, #1
 8001328:	709a      	strb	r2, [r3, #2]
      isHolPushedFlagForPreventChattering[2] = true; // チャタリング防止用
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 800132c:	2201      	movs	r2, #1
 800132e:	709a      	strb	r2, [r3, #2]
  }

  if (GPIO_Pin == Arm3Switch_Pin && !isHolPushedFlagForPreventChattering[3])
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d111      	bne.n	800135a <HAL_GPIO_EXTI_Callback+0xb2>
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <HAL_GPIO_EXTI_Callback+0xb2>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      InitMotorState(3); // motorStateを再初期化する
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f811 	bl	800136c <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 800134a:	f000 f867 	bl	800141c <setMotorVel>
      isPushedRestHomePositionButton[3] = true;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001350:	2201      	movs	r2, #1
 8001352:	70da      	strb	r2, [r3, #3]
      isHolPushedFlagForPreventChattering[3] = true; // チャタリング防止用
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001356:	2201      	movs	r2, #1
 8001358:	70da      	strb	r2, [r3, #3]
  }
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000588 	.word	0x20000588
 8001368:	2000059c 	.word	0x2000059c

0800136c <InitMotorState>:

/*
 * CANIDがmotorIDのモータのarm_positions(アームの位置)情報を初期化する
 */
void InitMotorState(uint8_t motorID) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  arm_motor[motorID].vel = 0;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <InitMotorState+0x3c>)
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	801a      	strh	r2, [r3, #0]
  arm_motor[motorID].pos = ArmInitializeSwitchPosition[motorID];
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	79f9      	ldrb	r1, [r7, #7]
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <InitMotorState+0x40>)
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <InitMotorState+0x3c>)
 8001392:	0109      	lsls	r1, r1, #4
 8001394:	4401      	add	r1, r0
 8001396:	3108      	adds	r1, #8
 8001398:	e9c1 2300 	strd	r2, r3, [r1]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20000548 	.word	0x20000548
 80013ac:	20000000 	.word	0x20000000

080013b0 <MoveToOriginAndHold>:

/*
 * 原点が押されるまでモーターを原点方向に回し続ける関数.
 * 原点到着後はタイマーが止まるまでその場に居続ける
 */
void MoveToOriginAndHold(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
//  int16_t vel_settings[4] = {0, 0, 0, 0};
//
  if (!isPushedRestHomePositionButton[0]) {
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MoveToOriginAndHold+0x64>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <MoveToOriginAndHold+0x1a>
        arm_motor[0].vel = -500;
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MoveToOriginAndHold+0x68>)
 80013c4:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80013c8:	801a      	strh	r2, [r3, #0]
  }
  if (!isPushedRestHomePositionButton[1]) {
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MoveToOriginAndHold+0x64>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <MoveToOriginAndHold+0x30>
      arm_motor[1].vel =  500;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MoveToOriginAndHold+0x68>)
 80013da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013de:	821a      	strh	r2, [r3, #16]
  }
  if (!isPushedRestHomePositionButton[2]) {
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MoveToOriginAndHold+0x64>)
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <MoveToOriginAndHold+0x46>
      arm_motor[2].vel = -500;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MoveToOriginAndHold+0x68>)
 80013f0:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80013f4:	841a      	strh	r2, [r3, #32]
  }
  if (!isPushedRestHomePositionButton[3]) {
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MoveToOriginAndHold+0x64>)
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <MoveToOriginAndHold+0x5c>
      arm_motor[3].vel = 500;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <MoveToOriginAndHold+0x68>)
 8001406:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  setMotorVel();
 800140c:	f000 f806 	bl	800141c <setMotorVel>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000059c 	.word	0x2000059c
 8001418:	20000548 	.word	0x20000548

0800141c <setMotorVel>:

void setMotorVel() {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
    uint8_t motor_vel_value[8];

    // update controller output
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e01f      	b.n	8001468 <setMotorVel+0x4c>
        motor_vel_value[arm_index*2] = arm_motor[arm_index].vel >> 8;
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <setMotorVel+0x78>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	121b      	asrs	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	3310      	adds	r3, #16
 8001440:	443b      	add	r3, r7
 8001442:	f803 2c0c 	strb.w	r2, [r3, #-12]
        motor_vel_value[arm_index*2+1] = arm_motor[arm_index].vel & 0xFF;
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <setMotorVel+0x78>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	3301      	adds	r3, #1
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	3310      	adds	r3, #16
 800145c:	443b      	add	r3, r7
 800145e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b03      	cmp	r3, #3
 800146c:	dddc      	ble.n	8001428 <setMotorVel+0xc>
    }

    FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <setMotorVel+0x7c>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	601a      	str	r2, [r3, #0]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, motor_vel_value) != HAL_OK) {
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	461a      	mov	r2, r3
 800147a:	4907      	ldr	r1, [pc, #28]	; (8001498 <setMotorVel+0x7c>)
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <setMotorVel+0x80>)
 800147e:	f001 fc3c 	bl	8002cfa <HAL_FDCAN_AddMessageToTxFifoQ>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <setMotorVel+0x70>
        Error_Handler();
 8001488:	f000 fd98 	bl	8001fbc <Error_Handler>
    }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000548 	.word	0x20000548
 8001498:	200004f8 	.word	0x200004f8
 800149c:	200002d0 	.word	0x200002d0

080014a0 <HAL_TIM_PeriodElapsedCallback>:

// Set timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

	// For arm position adc
	if (htim == &htim6) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x14>
	    // TODO: enable this func to enable PID
			ARM_Position_PID_Cycle();
 80014b0:	f000 fa28 	bl	8001904 <ARM_Position_PID_Cycle>
	}
	// アームの原点調節をするときに使用する. それ以外はdisable
	if (htim == &htim7) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0x20>
	    MoveToOriginAndHold();
 80014bc:	f7ff ff78 	bl	80013b0 <MoveToOriginAndHold>
	}

	// チャタリング防止用. 100KHzで回している。10msなったら解除
	if (htim == &htim16) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d12d      	bne.n	8001524 <HAL_TIM_PeriodElapsedCallback+0x84>
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e027      	b.n	800151e <HAL_TIM_PeriodElapsedCallback+0x7e>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f083 0301 	eor.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11a      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x76>
	        holdTimer[arm_index]++;
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4914      	ldr	r1, [pc, #80]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        // 10ms立ったら再度初期化
	        if (holdTimer[arm_index] == 1000) {
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d10b      	bne.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x78>
	            holdTimer[arm_index] = 0;
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2100      	movs	r1, #0
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	            isHolPushedFlagForPreventChattering[arm_index] = false;
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e000      	b.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x78>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 8001516:	bf00      	nop
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b03      	cmp	r3, #3
 8001522:	ddd4      	ble.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x2e>
	        }
//	        printf("%d\r\n", isHolPushedFlagForPreventChattering[arm_index]);
	    }
	}
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200003c8 	.word	0x200003c8
 8001530:	20000414 	.word	0x20000414
 8001534:	20000460 	.word	0x20000460
 8001538:	20000588 	.word	0x20000588
 800153c:	2000058c 	.word	0x2000058c

08001540 <HAL_FDCAN_RxFifo0Callback>:

// Set Interrupt Handler for FDCAN1 (raspberrypi, other stm ..)
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint8_t FDCAN1_RxData[2] = {0};
 800154a:	2300      	movs	r3, #0
 800154c:	813b      	strh	r3, [r7, #8]

  // Error Handling
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8091 	beq.w	800167c <HAL_FDCAN_RxFifo0Callback+0x13c>
  if (hfdcan != &hfdcan1) return;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	f040 808e 	bne.w	8001680 <HAL_FDCAN_RxFifo0Callback+0x140>

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN1_RxHeader, FDCAN1_RxData) != HAL_OK) {
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_FDCAN_RxFifo0Callback+0x150>)
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fc09 	bl	8002d84 <HAL_FDCAN_GetRxMessage>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_FDCAN_RxFifo0Callback+0x48>
      printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	4619      	mov	r1, r3
 800157e:	4845      	ldr	r0, [pc, #276]	; (8001694 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8001580:	f005 fb0a 	bl	8006b98 <iprintf>
      Error_Handler();
 8001584:	f000 fd1a 	bl	8001fbc <Error_Handler>
  }

  if (FDCAN1_RxHeader.Identifier == CANID_SEEDLING_SET_ARM_POSITION) {
 8001588:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_FDCAN_RxFifo0Callback+0x150>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001590:	d179      	bne.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
      switch(FDCAN1_RxData[0]) {
 8001592:	7a3b      	ldrb	r3, [r7, #8]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d04d      	beq.n	8001634 <HAL_FDCAN_RxFifo0Callback+0xf4>
 8001598:	2b02      	cmp	r3, #2
 800159a:	dc73      	bgt.n	8001684 <HAL_FDCAN_RxFifo0Callback+0x144>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_FDCAN_RxFifo0Callback+0x66>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d023      	beq.n	80015ec <HAL_FDCAN_RxFifo0Callback+0xac>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[2][arm_index]);
          }
          break;
        default:
          break; // TODO : send RuntimeError to raspbeerypi
 80015a4:	e06e      	b.n	8001684 <HAL_FDCAN_RxFifo0Callback+0x144>
          printf("PICKUP\r\n");
 80015a6:	483c      	ldr	r0, [pc, #240]	; (8001698 <HAL_FDCAN_RxFifo0Callback+0x158>)
 80015a8:	f005 fb5c 	bl	8006c64 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e018      	b.n	80015e4 <HAL_FDCAN_RxFifo0Callback+0xa4>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[0][arm_index]);
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	18cc      	adds	r4, r1, r3
 80015c2:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffd2 	bl	8000574 <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	ec43 2b10 	vmov	d0, r2, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fdc3 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	dde3      	ble.n	80015b2 <HAL_FDCAN_RxFifo0Callback+0x72>
          break;
 80015ea:	e04c      	b.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
          printf("PUT OUTSIDE\r\n");
 80015ec:	482d      	ldr	r0, [pc, #180]	; (80016a4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80015ee:	f005 fb39 	bl	8006c64 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e019      	b.n	800162c <HAL_FDCAN_RxFifo0Callback+0xec>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[1][arm_index]);
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	18cc      	adds	r4, r1, r3
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_FDCAN_RxFifo0Callback+0x160>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3304      	adds	r3, #4
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffae 	bl	8000574 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	ec43 2b10 	vmov	d0, r2, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fd9f 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b03      	cmp	r3, #3
 8001630:	dde2      	ble.n	80015f8 <HAL_FDCAN_RxFifo0Callback+0xb8>
          break;
 8001632:	e028      	b.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
          printf("PUT INSIDE\r\n");
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8001636:	f005 fb15 	bl	8006c64 <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e019      	b.n	8001674 <HAL_FDCAN_RxFifo0Callback+0x134>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[2][arm_index]);
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	18cc      	adds	r4, r1, r3
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_FDCAN_RxFifo0Callback+0x160>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3308      	adds	r3, #8
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff8a 	bl	8000574 <__aeabi_i2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b10 	vmov	d0, r2, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fd7b 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	dde2      	ble.n	8001640 <HAL_FDCAN_RxFifo0Callback+0x100>
          break;
 800167a:	e004      	b.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 800167c:	bf00      	nop
 800167e:	e002      	b.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
  if (hfdcan != &hfdcan1) return;
 8001680:	bf00      	nop
 8001682:	e000      	b.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x146>
          break; // TODO : send RuntimeError to raspbeerypi
 8001684:	bf00      	nop
      }
  }
}
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	2000026c 	.word	0x2000026c
 8001690:	200004d0 	.word	0x200004d0
 8001694:	08008a5c 	.word	0x08008a5c
 8001698:	08008a70 	.word	0x08008a70
 800169c:	200005a0 	.word	0x200005a0
 80016a0:	20000048 	.word	0x20000048
 80016a4:	08008a78 	.word	0x08008a78
 80016a8:	08008a88 	.word	0x08008a88

080016ac <rpm_to_signed>:

float rpm_to_signed(uint16_t angular_velocity) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  if (angular_velocity <= UINT16_MAX/2) {
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db05      	blt.n	80016ca <rpm_to_signed+0x1e>
      return (float)(angular_velocity);
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c8:	e007      	b.n	80016da <rpm_to_signed+0x2e>
  } else {
      return (float)(angular_velocity - UINT16_MAX);
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80016d0:	3bff      	subs	r3, #255	; 0xff
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_FDCAN_RxFifo1Callback>:
int to_mechanical_angle(uint16_t angle) {
  return (int)((angle / 8191.0) * 360);
}

// Set Interrupt Handler For FDCAN3 (motor at wheel and arm)
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	uint8_t FDCAN3_RxData[8];
	float rpm;
	uint8_t motorID;

	// Error Handling
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06c      	beq.n	80017d6 <HAL_FDCAN_RxFifo1Callback+0xee>
	if (hfdcan != &hfdcan3) return;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_FDCAN_RxFifo1Callback+0x110>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d16a      	bne.n	80017da <HAL_FDCAN_RxFifo1Callback+0xf2>

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &FDCAN3_RxHeader, FDCAN3_RxData) != HAL_OK) {
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4a3c      	ldr	r2, [pc, #240]	; (80017fc <HAL_FDCAN_RxFifo1Callback+0x114>)
 800170a:	2141      	movs	r1, #65	; 0x41
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fb39 	bl	8002d84 <HAL_FDCAN_GetRxMessage>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_FDCAN_RxFifo1Callback+0x40>
		printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	4619      	mov	r1, r3
 800171e:	4838      	ldr	r0, [pc, #224]	; (8001800 <HAL_FDCAN_RxFifo1Callback+0x118>)
 8001720:	f005 fa3a 	bl	8006b98 <iprintf>
		Error_Handler();
 8001724:	f000 fc4a 	bl	8001fbc <Error_Handler>
	}

//	printf("%d\r\n", motorID);
	motorID = FDCAN3_RxHeader.Identifier - DJI_CANID_TX0 - 1;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_FDCAN_RxFifo1Callback+0x114>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	77fb      	strb	r3, [r7, #31]
	// uint16_t 0 ~ 65535
	rpm = rpm_to_signed(FDCAN3_RxData[2] << 8 | FDCAN3_RxData[3]);
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffb2 	bl	80016ac <rpm_to_signed>
 8001748:	ed87 0a06 	vstr	s0, [r7, #24]
	double motor_vel = (double)(rpm / 60 / REDUCTIONRATIO * GEARNUM * RACKPITCH);
 800174c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001750:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001804 <HAL_FDCAN_RxFifo1Callback+0x11c>
 8001754:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001758:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001808 <HAL_FDCAN_RxFifo1Callback+0x120>
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800180c <HAL_FDCAN_RxFifo1Callback+0x124>
 8001764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001768:	ee17 0a90 	vmov	r0, s15
 800176c:	f7fe ff14 	bl	8000598 <__aeabi_f2d>
 8001770:	a31d      	add	r3, pc, #116	; (adr r3, 80017e8 <HAL_FDCAN_RxFifo1Callback+0x100>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff67 	bl	8000648 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	arm_motor[motorID].vel = motor_vel;
 8001782:	7ffc      	ldrb	r4, [r7, #31]
 8001784:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001788:	f7ff fa0e 	bl	8000ba8 <__aeabi_d2iz>
 800178c:	4603      	mov	r3, r0
 800178e:	b219      	sxth	r1, r3
 8001790:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_FDCAN_RxFifo1Callback+0x128>)
 8001792:	0123      	lsls	r3, r4, #4
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	801a      	strh	r2, [r3, #0]
	arm_motor[motorID].pos += (motor_vel * 0.001);
 800179a:	7ffb      	ldrb	r3, [r7, #31]
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_FDCAN_RxFifo1Callback+0x128>)
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	3308      	adds	r3, #8
 80017a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017a8:	a311      	add	r3, pc, #68	; (adr r3, 80017f0 <HAL_FDCAN_RxFifo1Callback+0x108>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b2:	f7fe ff49 	bl	8000648 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	7ffe      	ldrb	r6, [r7, #31]
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fd8c 	bl	80002dc <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <HAL_FDCAN_RxFifo1Callback+0x128>)
 80017ca:	0131      	lsls	r1, r6, #4
 80017cc:	4401      	add	r1, r0
 80017ce:	3108      	adds	r1, #8
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
 80017d4:	e002      	b.n	80017dc <HAL_FDCAN_RxFifo1Callback+0xf4>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 80017d6:	bf00      	nop
 80017d8:	e000      	b.n	80017dc <HAL_FDCAN_RxFifo1Callback+0xf4>
	if (hfdcan != &hfdcan3) return;
 80017da:	bf00      	nop
	// TODO : Add wheel controller
//	switch(FDCAN3_RxHeader.Identifier) {
//		default:
//			printf("CAN ID %" PRIu32 "is not cached from FIFO1 callback\r\n", FDCAN3_RxHeader.Identifier);
//	}
}
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	53c8d4f1 	.word	0x53c8d4f1
 80017ec:	400921fb 	.word	0x400921fb
 80017f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017f4:	3f50624d 	.word	0x3f50624d
 80017f8:	200002d0 	.word	0x200002d0
 80017fc:	2000051c 	.word	0x2000051c
 8001800:	08008a5c 	.word	0x08008a5c
 8001804:	42700000 	.word	0x42700000
 8001808:	42100000 	.word	0x42100000
 800180c:	42000000 	.word	0x42000000
 8001810:	20000548 	.word	0x20000548
 8001814:	00000000 	.word	0x00000000

08001818 <ARM_Position_PID_Init>:


/* For ARM PID */
static void ARM_Position_PID_Init(void) {
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	ed2d 8b02 	vpush	{d8}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0

	PID_For_ARM_POS = (struct PID *)malloc(4 * sizeof(struct PID));
 8001822:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001826:	f004 feb1 	bl	800658c <malloc>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <ARM_Position_PID_Init+0xd8>)
 8001830:	601a      	str	r2, [r3, #0]
	if (PID_For_ARM_POS == NULL) {
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <ARM_Position_PID_Init+0xd8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <ARM_Position_PID_Init+0x26>
			Error_Handler();
 800183a:	f000 fbbf 	bl	8001fbc <Error_Handler>
	}

	// initialize element
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	e03c      	b.n	80018be <ARM_Position_PID_Init+0xa6>
			 * ki : 0
			 * setpoint : 1500
			 * -500 : integral_min
			 * 500: integral_max
			 */
			pid_init(&PID_For_ARM_POS[arm_index], 1e-3, P_GAIN_FOR_ARM_POS_SEQ[arm_index], D_GAIN_FOR_ARM_POS, I_GAIN_FOR_ARM_POS, setpoint[0][arm_index], -500, 500);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <ARM_Position_PID_Init+0xd8>)
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	18cc      	adds	r4, r1, r3
 8001854:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <ARM_Position_PID_Init+0xdc>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	ed93 8b00 	vldr	d8, [r3]
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <ARM_Position_PID_Init+0xe0>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
 800186e:	4605      	mov	r5, r0
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <ARM_Position_PID_Init+0xe4>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9bd 	bl	8000bf8 <__aeabi_d2f>
 800187e:	4606      	mov	r6, r0
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <ARM_Position_PID_Init+0xe8>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe73 	bl	8000574 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80018d8 <ARM_Position_PID_Init+0xc0>
 8001896:	ed9f 4b12 	vldr	d4, [pc, #72]	; 80018e0 <ARM_Position_PID_Init+0xc8>
 800189a:	ec43 2b13 	vmov	d3, r2, r3
 800189e:	ee02 6a90 	vmov	s5, r6
 80018a2:	ee02 5a10 	vmov	s4, r5
 80018a6:	eeb0 1a48 	vmov.f32	s2, s16
 80018aa:	eef0 1a68 	vmov.f32	s3, s17
 80018ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80018e8 <ARM_Position_PID_Init+0xd0>
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff fb6e 	bl	8000f94 <pid_init>
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	ddbf      	ble.n	8001844 <ARM_Position_PID_Init+0x2c>
	}
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	ecbd 8b02 	vpop	{d8}
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	00000000 	.word	0x00000000
 80018dc:	407f4000 	.word	0x407f4000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	c07f4000 	.word	0xc07f4000
 80018e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018ec:	3f50624d 	.word	0x3f50624d
 80018f0:	200005a0 	.word	0x200005a0
 80018f4:	20000020 	.word	0x20000020
 80018f8:	20000040 	.word	0x20000040
 80018fc:	200005a8 	.word	0x200005a8
 8001900:	20000048 	.word	0x20000048

08001904 <ARM_Position_PID_Cycle>:

static void ARM_Position_PID_Cycle(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	// Automatically set adc value to DMA, so don't need to read ADC
	if (PID_For_ARM_POS == NULL) {
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <ARM_Position_PID_Cycle+0x70>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <ARM_Position_PID_Cycle+0x12>
			Error_Handler();
 8001912:	f000 fb53 	bl	8001fbc <Error_Handler>
//	    arm_positions[1],
//	    arm_positions[2]
//	};

	// update controller output
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	e021      	b.n	8001960 <ARM_Position_PID_Cycle+0x5c>
	    int32_t pid_val = int32_t_pid_compute(&PID_For_ARM_POS[arm_index], arm_motor[arm_index].pos);
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <ARM_Position_PID_Cycle+0x70>)
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	18ca      	adds	r2, r1, r3
 800192c:	4912      	ldr	r1, [pc, #72]	; (8001978 <ARM_Position_PID_Cycle+0x74>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	440b      	add	r3, r1
 8001934:	3308      	adds	r3, #8
 8001936:	ed93 7b00 	vldr	d7, [r3]
 800193a:	eeb0 0a47 	vmov.f32	s0, s14
 800193e:	eef0 0a67 	vmov.f32	s1, s15
 8001942:	4610      	mov	r0, r2
 8001944:	f7ff fc2d 	bl	80011a2 <int32_t_pid_compute>
 8001948:	6038      	str	r0, [r7, #0]
			arm_motor[arm_index].vel = pid_val;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b219      	sxth	r1, r3
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <ARM_Position_PID_Cycle+0x74>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	801a      	strh	r2, [r3, #0]
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3301      	adds	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b03      	cmp	r3, #3
 8001964:	ddda      	ble.n	800191c <ARM_Position_PID_Cycle+0x18>
//			pid_controller_value[arm_index*2] = pid_for_arm_output >> 8;
//			pid_controller_value[arm_index*2+1] = pid_for_arm_output & 0xFF;
	}
	setMotorVel();
 8001966:	f7ff fd59 	bl	800141c <setMotorVel>
////	 write new controller value with can
//	FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
//	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, pid_controller_value) != HAL_OK) {
//	    Error_Handler();
//	}
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200005a0 	.word	0x200005a0
 8001978:	20000548 	.word	0x20000548

0800197c <_write>:

int _write(int file, char *ptr, int len)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	b29a      	uxth	r2, r3
 800198c:	2308      	movs	r3, #8
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <_write+0x24>)
 8001992:	f003 fc79 	bl	8005288 <HAL_UART_Transmit>
    return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000334 	.word	0x20000334

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a8:	f000 fe19 	bl	80025de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ac:	f000 f826 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b0:	f000 fa86 	bl	8001ec0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80019b4:	f000 f9a8 	bl	8001d08 <MX_LPUART1_UART_Init>
  MX_FDCAN3_Init();
 80019b8:	f000 f90c 	bl	8001bd4 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 80019bc:	f000 f9ee 	bl	8001d9c <MX_TIM6_Init>
  MX_FDCAN1_Init();
 80019c0:	f000 f868 	bl	8001a94 <MX_FDCAN1_Init>
  MX_TIM7_Init();
 80019c4:	f000 fa20 	bl	8001e08 <MX_TIM7_Init>
  MX_TIM16_Init();
 80019c8:	f000 fa54 	bl	8001e74 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
//  printf("arm position pid init\r\n");
  // Initialize PID library
  HAL_TIM_Base_Start_IT(&htim16);
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <main+0x4c>)
 80019ce:	f003 f85d 	bl	8004a8c <HAL_TIM_Base_Start_IT>
  ARM_Position_PID_Init();
 80019d2:	f7ff ff21 	bl	8001818 <ARM_Position_PID_Init>
  // Start ADC and save at DMA
//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
  printf("start rest to home position\r\n");
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <main+0x50>)
 80019d8:	f005 f944 	bl	8006c64 <puts>
  ResetToHomePosition();
 80019dc:	f7ff fbf8 	bl	80011d0 <ResetToHomePosition>


	// TODO: enable this func
	// Start timer interrupt (1kHz)
  // TODO delete
  InitMotorState(3);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f7ff fcc3 	bl	800136c <InitMotorState>
	HAL_TIM_Base_Start_IT(&htim6);
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <main+0x54>)
 80019e8:	f003 f850 	bl	8004a8c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <main+0x48>
 80019ee:	bf00      	nop
 80019f0:	20000460 	.word	0x20000460
 80019f4:	08008a94 	.word	0x08008a94
 80019f8:	200003c8 	.word	0x200003c8

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0318 	add.w	r3, r7, #24
 8001a06:	2238      	movs	r2, #56	; 0x38
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 f932 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a22:	f001 ffbb 	bl	800399c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	2340      	movs	r3, #64	; 0x40
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a40:	230a      	movs	r3, #10
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 f845 	bl	8003ae4 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001a60:	f000 faac 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fb43 	bl	8004108 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a88:	f000 fa98 	bl	8001fbc <Error_Handler>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3750      	adds	r7, #80	; 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <MX_FDCAN1_Init+0x138>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001aa0:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001aa6:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001aac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ac8:	2204      	movs	r2, #4
 8001aca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001acc:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001aec:	220f      	movs	r2, #15
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b08:	482f      	ldr	r0, [pc, #188]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001b0a:	f000 fee9 	bl	80028e0 <HAL_FDCAN_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8001b14:	f000 fa52 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN1_TxHeader.Identifier = 0x000;
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
  FDCAN1_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  FDCAN1_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  FDCAN1_TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	60da      	str	r2, [r3, #12]
  FDCAN1_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  FDCAN1_TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b3c:	615a      	str	r2, [r3, #20]
  FDCAN1_TxHeader.FDFormat = FDCAN_FD_CAN;
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b44:	619a      	str	r2, [r3, #24]
  FDCAN1_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  FDCAN1_TxHeader.MessageMarker = 0;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_FDCAN1_Init+0x13c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef FDCAN1_sFilterConfig;
  FDCAN1_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  FDCAN1_sFilterConfig.FilterIndex = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  FDCAN1_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  FDCAN1_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
  FDCAN1_sFilterConfig.FilterID1 = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  FDCAN1_sFilterConfig.FilterID2 = 0x7ff;
 8001b66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b6a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN1_sFilterConfig) != HAL_OK) {
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4815      	ldr	r0, [pc, #84]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001b72:	f001 f80f 	bl	8002b94 <HAL_FDCAN_ConfigFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001b7c:	f000 fa1e 	bl	8001fbc <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) !=
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	2202      	movs	r2, #2
 8001b88:	2102      	movs	r1, #2
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001b8c:	f001 f85c 	bl	8002c48 <HAL_FDCAN_ConfigGlobalFilter>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_FDCAN1_Init+0x106>
      HAL_OK) {
      Error_Handler();
 8001b96:	f000 fa11 	bl	8001fbc <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001b9c:	f001 f885 	bl	8002caa <HAL_FDCAN_Start>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_FDCAN1_Init+0x116>
      Error_Handler();
 8001ba6:	f000 fa09 	bl	8001fbc <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001baa:	2200      	movs	r2, #0
 8001bac:	2101      	movs	r1, #1
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_FDCAN1_Init+0x134>)
 8001bb0:	f001 f9f0 	bl	8002f94 <HAL_FDCAN_ActivateNotification>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_FDCAN1_Init+0x12a>
      Error_Handler();
 8001bba:	f000 f9ff 	bl	8001fbc <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000026c 	.word	0x2000026c
 8001bcc:	40006400 	.word	0x40006400
 8001bd0:	200004ac 	.word	0x200004ac

08001bd4 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <MX_FDCAN3_Init+0x12c>)
 8001bde:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001c10:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c12:	220f      	movs	r2, #15
 8001c14:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c46:	482d      	ldr	r0, [pc, #180]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001c48:	f000 fe4a 	bl	80028e0 <HAL_FDCAN_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8001c52:	f000 f9b3 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  // Set TXHeader
	FDCAN3_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
	FDCAN3_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
	FDCAN3_TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c64:	2208      	movs	r2, #8
 8001c66:	60da      	str	r2, [r3, #12]
	FDCAN3_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
	FDCAN3_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
	FDCAN3_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
	FDCAN3_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
	FDCAN3_TxHeader.MessageMarker = 0;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <MX_FDCAN3_Init+0x130>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]

	// Set FDCAN3 filter config
	FDCAN_FilterTypeDef FDCAN3_sFilterConfig;
	FDCAN3_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
	FDCAN3_sFilterConfig.FilterIndex = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
	FDCAN3_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
	FDCAN3_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001c92:	2302      	movs	r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
	FDCAN3_sFilterConfig.FilterID1 = 0x000;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
	FDCAN3_sFilterConfig.FilterID2 = 0x7ff;
 8001c9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c9e:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN3_sFilterConfig) != HAL_OK) {
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001ca6:	f000 ff75 	bl	8002b94 <HAL_FDCAN_ConfigFilter>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_FDCAN3_Init+0xe0>
		Error_Handler();
 8001cb0:	f000 f984 	bl	8001fbc <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2202      	movs	r2, #2
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001cc0:	f000 ffc2 	bl	8002c48 <HAL_FDCAN_ConfigGlobalFilter>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_FDCAN3_Init+0xfa>
		Error_Handler();
 8001cca:	f000 f977 	bl	8001fbc <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001cd0:	f000 ffeb 	bl	8002caa <HAL_FDCAN_Start>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_FDCAN3_Init+0x10a>
		Error_Handler();
 8001cda:	f000 f96f 	bl	8001fbc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <MX_FDCAN3_Init+0x128>)
 8001ce4:	f001 f956 	bl	8002f94 <HAL_FDCAN_ActivateNotification>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_FDCAN3_Init+0x11e>
		Error_Handler();
 8001cee:	f000 f965 	bl	8001fbc <Error_Handler>
	}
  /* USER CODE END FDCAN3_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002d0 	.word	0x200002d0
 8001d00:	40006c00 	.word	0x40006c00
 8001d04:	200004f8 	.word	0x200004f8

08001d08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <MX_LPUART1_UART_Init+0x8c>)
 8001d10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <MX_LPUART1_UART_Init+0x90>)
 8001d16:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d48:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d4a:	f003 fa4d 	bl	80051e8 <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d54:	f000 f932 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d5c:	f004 f876 	bl	8005e4c <HAL_UARTEx_SetTxFifoThreshold>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001d66:	f000 f929 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d6e:	f004 f8ab 	bl	8005ec8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001d78:	f000 f920 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d7e:	f004 f82c 	bl	8005dda <HAL_UARTEx_DisableFifoMode>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001d88:	f000 f918 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000334 	.word	0x20000334
 8001d94:	40008000 	.word	0x40008000
 8001d98:	001e8480 	.word	0x001e8480

08001d9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <MX_TIM6_Init+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001db4:	2250      	movs	r2, #80	; 0x50
 8001db6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dce:	f002 fe05 	bl	80049dc <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001dd8:	f000 f8f0 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_TIM6_Init+0x64>)
 8001dea:	f003 f921 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001df4:	f000 f8e2 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	40001000 	.word	0x40001000

08001e08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <MX_TIM7_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e20:	2250      	movs	r2, #80	; 0x50
 8001e22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e3a:	f002 fdcf 	bl	80049dc <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e44:	f000 f8ba 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e56:	f003 f8eb 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 f8ac 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000414 	.word	0x20000414
 8001e70:	40001400 	.word	0x40001400

08001e74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <MX_TIM16_Init+0x48>)
 8001e7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e80:	2250      	movs	r2, #80	; 0x50
 8001e82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e8c:	2209      	movs	r2, #9
 8001e8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_TIM16_Init+0x44>)
 8001ea4:	f002 fd9a 	bl	80049dc <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001eae:	f000 f885 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000460 	.word	0x20000460
 8001ebc:	40014400 	.word	0x40014400

08001ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a35      	ldr	r2, [pc, #212]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <MX_GPIO_Init+0xf0>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2104      	movs	r1, #4
 8001f22:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <MX_GPIO_Init+0xf4>)
 8001f24:	f001 fd0a 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481f      	ldr	r0, [pc, #124]	; (8001fb8 <MX_GPIO_Init+0xf8>)
 8001f3c:	f001 fb7c 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arm3Switch_Pin Arm2Switch_Pin Arm1Switch_Pin Arm0Switch_Pin */
  GPIO_InitStruct.Pin = Arm3Switch_Pin|Arm2Switch_Pin|Arm1Switch_Pin|Arm0Switch_Pin;
 8001f40:	23c3      	movs	r3, #195	; 0xc3
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f001 fb6e 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : BoardLED_Pin */
  GPIO_InitStruct.Pin = BoardLED_Pin;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BoardLED_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <MX_GPIO_Init+0xf4>)
 8001f74:	f001 fb60 	bl	8003638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2006      	movs	r0, #6
 8001f7e:	f000 fc7a 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f82:	2006      	movs	r0, #6
 8001f84:	f000 fc91 	bl	80028aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2007      	movs	r0, #7
 8001f8e:	f000 fc72 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f92:	2007      	movs	r0, #7
 8001f94:	f000 fc89 	bl	80028aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2017      	movs	r0, #23
 8001f9e:	f000 fc6a 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fa2:	2017      	movs	r0, #23
 8001fa4:	f000 fc81 	bl	80028aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	48000c00 	.word	0x48000c00
 8001fb8:	48000800 	.word	0x48000800

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <Error_Handler+0x14>)
 8001fc6:	f001 fcb9 	bl	800393c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fca:	b672      	cpsid	i
}
 8001fcc:	bf00      	nop
  __disable_irq();
  while (1)
 8001fce:	e7fe      	b.n	8001fce <Error_Handler+0x12>
 8001fd0:	48000c00 	.word	0x48000c00

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_MspInit+0x44>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_MspInit+0x44>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_MspInit+0x44>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_MspInit+0x44>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_MspInit+0x44>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_MspInit+0x44>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0a0      	sub	sp, #128	; 0x80
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	2254      	movs	r2, #84	; 0x54
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fe19 	bl	8006c74 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a55      	ldr	r2, [pc, #340]	; (800219c <HAL_FDCAN_MspInit+0x180>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d14b      	bne.n	80020e4 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002050:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002056:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f002 fa6f 	bl	8004540 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002068:	f7ff ffa8 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 8002074:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002076:	4b4a      	ldr	r3, [pc, #296]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10b      	bne.n	8002096 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020c0:	2309      	movs	r3, #9
 80020c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f001 fab3 	bl	8003638 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2015      	movs	r0, #21
 80020d8:	f000 fbcd 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80020dc:	2015      	movs	r0, #21
 80020de:	f000 fbe4 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80020e2:	e057      	b.n	8002194 <HAL_FDCAN_MspInit+0x178>
  else if(hfdcan->Instance==FDCAN3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_FDCAN_MspInit+0x18c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d152      	bne.n	8002194 <HAL_FDCAN_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80020f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fa:	f107 0318 	add.w	r3, r7, #24
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fa1e 	bl	8004540 <HAL_RCCEx_PeriphCLKConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 800210a:	f7ff ff57 	bl	8001fbc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 8002116:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_FDCAN_MspInit+0x184>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10b      	bne.n	8002138 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_FDCAN_MspInit+0x188>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002150:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002154:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8002162:	230b      	movs	r3, #11
 8002164:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002170:	f001 fa62 	bl	8003638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	2058      	movs	r0, #88	; 0x58
 800217a:	f000 fb7c 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 800217e:	2058      	movs	r0, #88	; 0x58
 8002180:	f000 fb93 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2059      	movs	r0, #89	; 0x59
 800218a:	f000 fb74 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 800218e:	2059      	movs	r0, #89	; 0x59
 8002190:	f000 fb8b 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 8002194:	bf00      	nop
 8002196:	3780      	adds	r7, #128	; 0x80
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40006400 	.word	0x40006400
 80021a0:	200005b0 	.word	0x200005b0
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40006c00 	.word	0x40006c00

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b09e      	sub	sp, #120	; 0x78
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	2254      	movs	r2, #84	; 0x54
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fd51 	bl	8006c74 <memset>
  if(huart->Instance==LPUART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_UART_MspInit+0xa8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d136      	bne.n	800224a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021dc:	2320      	movs	r3, #32
 80021de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 f9a9 	bl	8004540 <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f4:	f7ff fee2 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_UART_MspInit+0xac>)
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_UART_MspInit+0xac>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_UART_MspInit+0xac>)
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_UART_MspInit+0xac>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a10      	ldr	r2, [pc, #64]	; (8002258 <HAL_UART_MspInit+0xac>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_UART_MspInit+0xac>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002228:	230c      	movs	r3, #12
 800222a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002238:	230c      	movs	r3, #12
 800223a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f001 f9f7 	bl	8003638 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3778      	adds	r7, #120	; 0x78
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40008000 	.word	0x40008000
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_TIM_Base_MspInit+0xac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d114      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2036      	movs	r0, #54	; 0x36
 800228c:	f000 faf3 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002290:	2036      	movs	r0, #54	; 0x36
 8002292:	f000 fb0a 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002296:	e032      	b.n	80022fe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_TIM_Base_MspInit+0xb4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d114      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2037      	movs	r0, #55	; 0x37
 80022c0:	f000 fad9 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80022c4:	2037      	movs	r0, #55	; 0x37
 80022c6:	f000 faf0 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 80022ca:	e018      	b.n	80022fe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIM_Base_MspInit+0xb8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d113      	bne.n	80022fe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	6613      	str	r3, [r2, #96]	; 0x60
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2019      	movs	r0, #25
 80022f4:	f000 fabf 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022f8:	2019      	movs	r0, #25
 80022fa:	f000 fad6 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40001000 	.word	0x40001000
 800230c:	40021000 	.word	0x40021000
 8002310:	40001400 	.word	0x40001400
 8002314:	40014400 	.word	0x40014400

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f000 f98e 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm3Switch_Pin);
 8002370:	2001      	movs	r0, #1
 8002372:	f001 fafb 	bl	800396c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm2Switch_Pin);
 800237e:	2002      	movs	r0, #2
 8002380:	f001 faf4 	bl	800396c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <FDCAN1_IT0_IRQHandler+0x10>)
 800238e:	f000 fee7 	bl	8003160 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	2000026c 	.word	0x2000026c

0800239c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm1Switch_Pin);
 80023a0:	2040      	movs	r0, #64	; 0x40
 80023a2:	f001 fae3 	bl	800396c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Arm0Switch_Pin);
 80023a6:	2080      	movs	r0, #128	; 0x80
 80023a8:	f001 fae0 	bl	800396c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023b6:	f002 fc10 	bl	8004bda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000460 	.word	0x20000460

080023c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <TIM6_DAC_IRQHandler+0x10>)
 80023ca:	f002 fc06 	bl	8004bda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200003c8 	.word	0x200003c8

080023d8 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <TIM7_DAC_IRQHandler+0x10>)
 80023de:	f002 fbfc 	bl	8004bda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000414 	.word	0x20000414

080023ec <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <FDCAN3_IT0_IRQHandler+0x10>)
 80023f2:	f000 feb5 	bl	8003160 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200002d0 	.word	0x200002d0

08002400 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <FDCAN3_IT1_IRQHandler+0x10>)
 8002406:	f000 feab 	bl	8003160 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200002d0 	.word	0x200002d0

08002414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_kill>:

int _kill(int pid, int sig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800242e:	f004 fc3d 	bl	8006cac <__errno>
 8002432:	4603      	mov	r3, r0
 8002434:	2216      	movs	r2, #22
 8002436:	601a      	str	r2, [r3, #0]
  return -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_exit>:

void _exit (int status)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffe7 	bl	8002424 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002456:	e7fe      	b.n	8002456 <_exit+0x12>

08002458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e00a      	b.n	8002480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800246a:	f3af 8000 	nop.w
 800246e:	4601      	mov	r1, r0
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	60ba      	str	r2, [r7, #8]
 8002476:	b2ca      	uxtb	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbf0      	blt.n	800246a <_read+0x12>
  }

  return len;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ba:	605a      	str	r2, [r3, #4]
  return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_isatty>:

int _isatty(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f004 fbbe 	bl	8006cac <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20020000 	.word	0x20020000
 800255c:	00000400 	.word	0x00000400
 8002560:	200005b4 	.word	0x200005b4
 8002564:	20000708 	.word	0x20000708

08002568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800258e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002590:	f7ff ffea 	bl	8002568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <LoopForever+0xe>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <LoopForever+0x16>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ba:	f004 fb7d 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025be:	f7ff f9f1 	bl	80019a4 <main>

080025c2 <LoopForever>:

LoopForever:
    b LoopForever
 80025c2:	e7fe      	b.n	80025c2 <LoopForever>
  ldr   r0, =_estack
 80025c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80025d0:	08008e84 	.word	0x08008e84
  ldr r2, =_sbss
 80025d4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80025d8:	20000708 	.word	0x20000708

080025dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC1_2_IRQHandler>

080025de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f000 f939 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ee:	200f      	movs	r0, #15
 80025f0:	f000 f80e 	bl	8002610 <HAL_InitTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	e001      	b.n	8002604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002600:	f7ff fce8 	bl	8001fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002604:	79fb      	ldrb	r3, [r7, #7]

}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_InitTick+0x68>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d022      	beq.n	800266a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_InitTick+0x6c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_InitTick+0x68>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002630:	fbb1 f3f3 	udiv	r3, r1, r3
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f944 	bl	80028c6 <HAL_SYSTICK_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	d809      	bhi.n	800265e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264a:	2200      	movs	r2, #0
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002652:	f000 f910 	bl	8002876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_InitTick+0x70>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e007      	b.n	800266e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e004      	b.n	800266e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000080 	.word	0x20000080
 800267c:	20000078 	.word	0x20000078
 8002680:	2000007c 	.word	0x2000007c

08002684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_IncTick+0x1c>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_IncTick+0x20>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4413      	add	r3, r2
 8002692:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_IncTick+0x1c>)
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	200005b8 	.word	0x200005b8
 80026a4:	20000080 	.word	0x20000080

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200005b8 	.word	0x200005b8

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff29 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff40 	bl	8002708 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff90 	bl	80027b4 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5f 	bl	8002760 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff33 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa4 	bl	800281c <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e147      	b.n	8002b82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fb88 	bl	800201c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0210 	bic.w	r2, r2, #16
 800291a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291c:	f7ff fec4 	bl	80026a8 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002922:	e012      	b.n	800294a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002924:	f7ff fec0 	bl	80026a8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b0a      	cmp	r3, #10
 8002930:	d90b      	bls.n	800294a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2203      	movs	r2, #3
 8002942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e11b      	b.n	8002b82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d0e5      	beq.n	8002924 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002968:	f7ff fe9e 	bl	80026a8 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800296e:	e012      	b.n	8002996 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002970:	f7ff fe9a 	bl	80026a8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b0a      	cmp	r3, #10
 800297c:	d90b      	bls.n	8002996 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2203      	movs	r2, #3
 800298e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0f5      	b.n	8002b82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0e5      	beq.n	8002970 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0202 	orr.w	r2, r2, #2
 80029b2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <HAL_FDCAN_Init+0x2ac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d103      	bne.n	80029c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80029be:	4a74      	ldr	r2, [pc, #464]	; (8002b90 <HAL_FDCAN_Init+0x2b0>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7c1b      	ldrb	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d108      	bne.n	80029e0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	e007      	b.n	80029f0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7c5b      	ldrb	r3, [r3, #17]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a06:	619a      	str	r2, [r3, #24]
 8002a08:	e007      	b.n	8002a1a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a18:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7c9b      	ldrb	r3, [r3, #18]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a30:	619a      	str	r2, [r3, #24]
 8002a32:	e007      	b.n	8002a44 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a42:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002a68:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0210 	bic.w	r2, r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d108      	bne.n	8002a94 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0204 	orr.w	r2, r2, #4
 8002a90:	619a      	str	r2, [r3, #24]
 8002a92:	e02c      	b.n	8002aee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d028      	beq.n	8002aee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d01c      	beq.n	8002ade <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ab2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0210 	orr.w	r2, r2, #16
 8002ac2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d110      	bne.n	8002aee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	619a      	str	r2, [r3, #24]
 8002adc:	e007      	b.n	8002aee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002afe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002b06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	d115      	bne.n	8002b50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fc7e 	bl	8003468 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40006400 	.word	0x40006400
 8002b90:	40006500 	.word	0x40006500

08002b94 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ba4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d002      	beq.n	8002bb2 <HAL_FDCAN_ConfigFilter+0x1e>
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d13d      	bne.n	8002c2e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002bc6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002bce:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e01d      	b.n	8002c2a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	075a      	lsls	r2, r3, #29
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	079a      	lsls	r2, r3, #30
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3304      	adds	r3, #4
 8002c22:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e006      	b.n	8002c3c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	f043 0202 	orr.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d116      	bne.n	8002c90 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	431a      	orrs	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e006      	b.n	8002c9e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d110      	bne.n	8002ce0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e006      	b.n	8002cee <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d12c      	bne.n	8002d6c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e023      	b.n	8002d7a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fbf9 	bl	8003540 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e006      	b.n	8002d7a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	f043 0208 	orr.w	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b08b      	sub	sp, #44	; 0x2c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d9c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002d9e:	7efb      	ldrb	r3, [r7, #27]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 80e8 	bne.w	8002f76 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d137      	bne.n	8002e1c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0db      	b.n	8002f84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10a      	bne.n	8002df4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de6:	0a5b      	lsrs	r3, r3, #9
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e036      	b.n	8002e8a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0a3      	b.n	8002f84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e44:	0e1b      	lsrs	r3, r3, #24
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d10a      	bne.n	8002e64 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0c9b      	lsrs	r3, r3, #18
 8002ea4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e1b      	lsrs	r3, r3, #24
 8002f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0fda      	lsrs	r2, r3, #31
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	3304      	adds	r3, #4
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	e00a      	b.n	8002f46 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	441a      	add	r2, r3
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	440b      	add	r3, r1
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	3301      	adds	r3, #1
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d3ec      	bcc.n	8002f30 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d105      	bne.n	8002f68 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002f66:	e004      	b.n	8002f72 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e006      	b.n	8002f84 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	f043 0208 	orr.w	r2, r3, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	372c      	adds	r7, #44	; 0x2c
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	08008acc 	.word	0x08008acc

08002f94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fa6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d003      	beq.n	8002fb6 <HAL_FDCAN_ActivateNotification+0x22>
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	f040 80c8 	bne.w	8003146 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03b      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d031      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d027      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01d      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d013      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d13b      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d131      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d127      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11d      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0202 	orr.w	r2, r2, #2
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	430a      	orrs	r2, r1
 8003110:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	430a      	orrs	r2, r1
 800312e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	430a      	orrs	r2, r1
 8003140:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e006      	b.n	8003154 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f043 0202 	orr.w	r2, r3, #2
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	; 0x30
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317c:	4013      	ands	r3, r2
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003194:	4013      	ands	r3, r2
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	4013      	ands	r3, r2
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80031ba:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	4013      	ands	r3, r2
 80031c6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031d2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	4013      	ands	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2240      	movs	r2, #64	; 0x40
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f90b 	bl	8003428 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d019      	beq.n	8003250 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d014      	beq.n	8003250 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800322e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003248:	6939      	ldr	r1, [r7, #16]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8cd 	bl	80033ea <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800325e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8a2 	bl	80033aa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003272:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe f962 	bl	8001540 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800328a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fe fa2b 	bl	80016e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f885 	bl	80033c0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80032d2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f871 	bl	80033d4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f875 	bl	8003400 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003332:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f86d 	bl	8003414 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00f      	beq.n	8003364 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003356:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f86b 	bl	8003450 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f84d 	bl	800343c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003472:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d103      	bne.n	8003486 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003484:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2c      	ldr	r2, [pc, #176]	; (800353c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d103      	bne.n	8003498 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003496:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	041a      	lsls	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034cc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	061a      	lsls	r2, r3, #24
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e005      	b.n	800351a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3304      	adds	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d3f3      	bcc.n	800350e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	4000a400 	.word	0x4000a400
 8003538:	40006800 	.word	0x40006800
 800353c:	40006c00 	.word	0x40006c00

08003540 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800355e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003566:	4313      	orrs	r3, r2
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e00a      	b.n	8003582 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003574:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800357a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800357c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003580:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800358c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003592:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003598:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	3304      	adds	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3304      	adds	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e020      	b.n	8003616 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3303      	adds	r3, #3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3302      	adds	r3, #2
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	440b      	add	r3, r1
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80035ec:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3301      	adds	r3, #1
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	440b      	add	r3, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80035fa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	440a      	add	r2, r1
 8003602:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003604:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3304      	adds	r3, #4
 800360e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3304      	adds	r3, #4
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4a06      	ldr	r2, [pc, #24]	; (8003634 <FDCAN_CopyMessageToRAM+0xf4>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	461a      	mov	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4293      	cmp	r3, r2
 8003624:	d3d6      	bcc.n	80035d4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	3724      	adds	r7, #36	; 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	08008acc 	.word	0x08008acc

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003646:	e15a      	b.n	80038fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 814c 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d005      	beq.n	8003678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003674:	2b02      	cmp	r3, #2
 8003676:	d130      	bne.n	80036da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ae:	2201      	movs	r2, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0201 	and.w	r2, r3, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d017      	beq.n	8003716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d123      	bne.n	800376a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	6939      	ldr	r1, [r7, #16]
 8003766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0203 	and.w	r2, r3, #3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a6 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ac:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_GPIO_Init+0x2e4>)
 80037ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b0:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_GPIO_Init+0x2e4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6613      	str	r3, [r2, #96]	; 0x60
 80037b8:	4b58      	ldr	r3, [pc, #352]	; (800391c <HAL_GPIO_Init+0x2e4>)
 80037ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c4:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_GPIO_Init+0x2e8>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ee:	d01f      	beq.n	8003830 <HAL_GPIO_Init+0x1f8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4c      	ldr	r2, [pc, #304]	; (8003924 <HAL_GPIO_Init+0x2ec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d019      	beq.n	800382c <HAL_GPIO_Init+0x1f4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a4b      	ldr	r2, [pc, #300]	; (8003928 <HAL_GPIO_Init+0x2f0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a4a      	ldr	r2, [pc, #296]	; (800392c <HAL_GPIO_Init+0x2f4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00d      	beq.n	8003824 <HAL_GPIO_Init+0x1ec>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_GPIO_Init+0x2f8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <HAL_GPIO_Init+0x1e8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a48      	ldr	r2, [pc, #288]	; (8003934 <HAL_GPIO_Init+0x2fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_GPIO_Init+0x1e4>
 8003818:	2305      	movs	r3, #5
 800381a:	e00a      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800381c:	2306      	movs	r3, #6
 800381e:	e008      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003820:	2304      	movs	r3, #4
 8003822:	e006      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003824:	2303      	movs	r3, #3
 8003826:	e004      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003828:	2302      	movs	r3, #2
 800382a:	e002      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003830:	2300      	movs	r3, #0
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	f002 0203 	and.w	r2, r2, #3
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4093      	lsls	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003842:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_GPIO_Init+0x2e8>)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003850:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_GPIO_Init+0x300>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003874:	4a30      	ldr	r2, [pc, #192]	; (8003938 <HAL_GPIO_Init+0x300>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387a:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <HAL_GPIO_Init+0x300>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800389e:	4a26      	ldr	r2, [pc, #152]	; (8003938 <HAL_GPIO_Init+0x300>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_GPIO_Init+0x300>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <HAL_GPIO_Init+0x300>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_GPIO_Init+0x300>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_GPIO_Init+0x300>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	3301      	adds	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	f47f ae9d 	bne.w	8003648 <HAL_GPIO_Init+0x10>
  }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40021000 	.word	0x40021000
 8003920:	40010000 	.word	0x40010000
 8003924:	48000400 	.word	0x48000400
 8003928:	48000800 	.word	0x48000800
 800392c:	48000c00 	.word	0x48000c00
 8003930:	48001000 	.word	0x48001000
 8003934:	48001400 	.word	0x48001400
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e002      	b.n	8003960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fc8c 	bl	80012a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d141      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d131      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b8:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039be:	4a46      	ldr	r2, [pc, #280]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d0:	4a41      	ldr	r2, [pc, #260]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d8:	4b40      	ldr	r3, [pc, #256]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2232      	movs	r2, #50	; 0x32
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a3f      	ldr	r2, [pc, #252]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ee:	e002      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	4b38      	ldr	r3, [pc, #224]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d102      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f2      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0a:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d158      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e057      	b.n	8003acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a22:	4a2d      	ldr	r2, [pc, #180]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a2c:	e04d      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d141      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d131      	bne.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2232      	movs	r2, #50	; 0x32
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7a:	e002      	b.n	8003a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8e:	d102      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f2      	bne.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d112      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e011      	b.n	8003acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ab8:	e007      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	20000078 	.word	0x20000078
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e2fe      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d075      	beq.n	8003bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	4b97      	ldr	r3, [pc, #604]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0c:	4b94      	ldr	r3, [pc, #592]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3e>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_OscConfig+0x44>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b8d      	ldr	r3, [pc, #564]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05b      	beq.n	8003bec <HAL_RCC_OscConfig+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d157      	bne.n	8003bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e2d9      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x74>
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a84      	ldr	r2, [pc, #528]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e01d      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b7f      	ldr	r3, [pc, #508]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7e      	ldr	r2, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7b      	ldr	r2, [pc, #492]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a77      	ldr	r2, [pc, #476]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a74      	ldr	r2, [pc, #464]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fd84 	bl	80026a8 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fd80 	bl	80026a8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e29e      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fd70 	bl	80026a8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fd6c 	bl	80026a8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e28a      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0xe8>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c04:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_OscConfig+0x136>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_OscConfig+0x13c>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11f      	bne.n	8003c60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x154>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e25d      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	4946      	ldr	r1, [pc, #280]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c4c:	4b45      	ldr	r3, [pc, #276]	; (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fcdd 	bl	8002610 <HAL_InitTick>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d043      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e249      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d023      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fd18 	bl	80026a8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fd14 	bl	80026a8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e232      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	492d      	ldr	r1, [pc, #180]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
 8003cae:	e01a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fcf4 	bl	80026a8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fe fcf0 	bl	80026a8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e20e      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x1e0>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d041      	beq.n	8003d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fccd 	bl	80026a8 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fe fcc9 	bl	80026a8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1e7      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <HAL_RCC_OscConfig+0x22e>
 8003d32:	e020      	b.n	8003d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fe fcb0 	bl	80026a8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4a:	e00d      	b.n	8003d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fcac 	bl	80026a8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d906      	bls.n	8003d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1ca      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ea      	bne.n	8003d4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a6 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d88:	4b84      	ldr	r3, [pc, #528]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2b4>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x2b6>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	4a7e      	ldr	r2, [pc, #504]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6593      	str	r3, [r2, #88]	; 0x58
 8003daa:	4b7c      	ldr	r3, [pc, #496]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dba:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <HAL_RCC_OscConfig+0x4bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc6:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x4bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a75      	ldr	r2, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x4bc>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fc69 	bl	80026a8 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe fc65 	bl	80026a8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e183      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCC_OscConfig+0x4bc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d108      	bne.n	8003e12 <HAL_RCC_OscConfig+0x32e>
 8003e00:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	e024      	b.n	8003e5c <HAL_RCC_OscConfig+0x378>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d110      	bne.n	8003e3c <HAL_RCC_OscConfig+0x358>
 8003e1a:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	f043 0304 	orr.w	r3, r3, #4
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4a5a      	ldr	r2, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e3a:	e00f      	b.n	8003e5c <HAL_RCC_OscConfig+0x378>
 8003e3c:	4b57      	ldr	r3, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	4a56      	ldr	r2, [pc, #344]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe fc20 	bl	80026a8 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fc1c 	bl	80026a8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e138      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ed      	beq.n	8003e6c <HAL_RCC_OscConfig+0x388>
 8003e90:	e015      	b.n	8003ebe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fc09 	bl	80026a8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fc05 	bl	80026a8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e121      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ed      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d03c      	beq.n	8003f56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eea:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fbd8 	bl	80026a8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efc:	f7fe fbd4 	bl	80026a8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0f2      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <HAL_RCC_OscConfig+0x418>
 8003f1c:	e01b      	b.n	8003f56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fbbb 	bl	80026a8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f36:	f7fe fbb7 	bl	80026a8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0d5      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ef      	bne.n	8003f36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80c9 	beq.w	80040f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	f000 8083 	beq.w	8004074 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d15e      	bne.n	8004034 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_RCC_OscConfig+0x4b8>)
 8003f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fb91 	bl	80026a8 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f88:	e00c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fe fb8d 	bl	80026a8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d905      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e0ab      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa4:	4b55      	ldr	r3, [pc, #340]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ec      	bne.n	8003f8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb0:	4b52      	ldr	r3, [pc, #328]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b52      	ldr	r3, [pc, #328]	; (8004100 <HAL_RCC_OscConfig+0x61c>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6a11      	ldr	r1, [r2, #32]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0552      	lsls	r2, r2, #21
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fea:	06d2      	lsls	r2, r2, #27
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4943      	ldr	r1, [pc, #268]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a40      	ldr	r2, [pc, #256]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a3d      	ldr	r2, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe fb4c 	bl	80026a8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fb48 	bl	80026a8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e066      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x530>
 8004032:	e05e      	b.n	80040f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a30      	ldr	r2, [pc, #192]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fb32 	bl	80026a8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fe fb2e 	bl	80026a8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e04c      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4924      	ldr	r1, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <HAL_RCC_OscConfig+0x620>)
 800406e:	4013      	ands	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
 8004072:	e03e      	b.n	80040f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e039      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_OscConfig+0x618>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0203 	and.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	429a      	cmp	r2, r3
 8004092:	d12c      	bne.n	80040ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	3b01      	subs	r3, #1
 80040a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d123      	bne.n	80040ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d11b      	bne.n	80040ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d113      	bne.n	80040ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000
 8004100:	019f800c 	.word	0x019f800c
 8004104:	feeefffc 	.word	0xfeeefffc

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e11e      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b91      	ldr	r3, [pc, #580]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d910      	bls.n	8004150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b8e      	ldr	r3, [pc, #568]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 020f 	bic.w	r2, r3, #15
 8004136:	498c      	ldr	r1, [pc, #560]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b8a      	ldr	r3, [pc, #552]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e106      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d073      	beq.n	8004244 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d129      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004164:	4b81      	ldr	r3, [pc, #516]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0f4      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004174:	f000 f99e 	bl	80044b4 <RCC_GetSysClockFreqFromPLLSource>
 8004178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4a7c      	ldr	r2, [pc, #496]	; (8004370 <HAL_RCC_ClockConfig+0x268>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d93f      	bls.n	8004202 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004182:	4b7a      	ldr	r3, [pc, #488]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004196:	2b00      	cmp	r3, #0
 8004198:	d033      	beq.n	8004202 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d12f      	bne.n	8004202 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041aa:	4a70      	ldr	r2, [pc, #448]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e024      	b.n	8004202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0c6      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d0:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0be      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041e0:	f000 f8ce 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4a61      	ldr	r2, [pc, #388]	; (8004370 <HAL_RCC_ClockConfig+0x268>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d909      	bls.n	8004202 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ee:	4b5f      	ldr	r3, [pc, #380]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f6:	4a5d      	ldr	r2, [pc, #372]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80041f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4957      	ldr	r1, [pc, #348]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fe fa48 	bl	80026a8 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	e00a      	b.n	8004232 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe fa44 	bl	80026a8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e095      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 020c 	and.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	429a      	cmp	r2, r3
 8004242:	d1eb      	bne.n	800421c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b43      	ldr	r3, [pc, #268]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a42      	ldr	r2, [pc, #264]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004266:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004274:	4b3d      	ldr	r3, [pc, #244]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800427c:	4a3b      	ldr	r2, [pc, #236]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 800427e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4936      	ldr	r1, [pc, #216]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	e008      	b.n	80042aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d105      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4a32      	ldr	r2, [pc, #200]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 80042a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d21d      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 020f 	bic.w	r2, r3, #15
 80042c0:	4929      	ldr	r1, [pc, #164]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042c8:	f7fe f9ee 	bl	80026a8 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fe f9ea 	bl	80026a8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e03b      	b.n	800435e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_ClockConfig+0x260>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1ed      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4917      	ldr	r1, [pc, #92]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	490f      	ldr	r1, [pc, #60]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004332:	f000 f825 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_RCC_ClockConfig+0x264>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	490c      	ldr	r1, [pc, #48]	; (8004374 <HAL_RCC_ClockConfig+0x26c>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x270>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_RCC_ClockConfig+0x274>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe f95a 	bl	8002610 <HAL_InitTick>
 800435c:	4603      	mov	r3, r0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40022000 	.word	0x40022000
 800436c:	40021000 	.word	0x40021000
 8004370:	04c4b400 	.word	0x04c4b400
 8004374:	08008ab4 	.word	0x08008ab4
 8004378:	20000078 	.word	0x20000078
 800437c:	2000007c 	.word	0x2000007c

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004386:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b04      	cmp	r3, #4
 8004390:	d102      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004392:	4b2a      	ldr	r3, [pc, #168]	; (800443c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	e047      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a4:	4b26      	ldr	r3, [pc, #152]	; (8004440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e03e      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d136      	bne.n	8004424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3301      	adds	r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043de:	68d2      	ldr	r2, [r2, #12]
 80043e0:	0a12      	lsrs	r2, r2, #8
 80043e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f8:	68d2      	ldr	r2, [r2, #12]
 80043fa:	0a12      	lsrs	r2, r2, #8
 80043fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
      break;
 8004406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	0e5b      	lsrs	r3, r3, #25
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e001      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004428:	693b      	ldr	r3, [r7, #16]
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000078 	.word	0x20000078

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	08008ac4 	.word	0x08008ac4

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800448c:	f7ff ffda 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0adb      	lsrs	r3, r3, #11
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	08008ac4 	.word	0x08008ac4

080044b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d10c      	bne.n	80044f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e2:	68d2      	ldr	r2, [r2, #12]
 80044e4:	0a12      	lsrs	r2, r2, #8
 80044e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	617b      	str	r3, [r7, #20]
    break;
 80044f0:	e00c      	b.n	800450c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	0a12      	lsrs	r2, r2, #8
 8004500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]
    break;
 800450a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	0e5b      	lsrs	r3, r3, #25
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004526:	687b      	ldr	r3, [r7, #4]
}
 8004528:	4618      	mov	r0, r3
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40021000 	.word	0x40021000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	00f42400 	.word	0x00f42400

08004540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004548:	2300      	movs	r3, #0
 800454a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800454c:	2300      	movs	r3, #0
 800454e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8098 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004562:	4b43      	ldr	r3, [pc, #268]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	4b40      	ldr	r3, [pc, #256]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	4a3f      	ldr	r2, [pc, #252]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004578:	6593      	str	r3, [r2, #88]	; 0x58
 800457a:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004586:	2301      	movs	r3, #1
 8004588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a39      	ldr	r2, [pc, #228]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004596:	f7fe f887 	bl	80026a8 <HAL_GetTick>
 800459a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459c:	e009      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fe f883 	bl	80026a8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d902      	bls.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	74fb      	strb	r3, [r7, #19]
        break;
 80045b0:	e005      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0ef      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d159      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01e      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d019      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ec:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe f843 	bl	80026a8 <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004624:	e00b      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fe f83f 	bl	80026a8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d902      	bls.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	74fb      	strb	r3, [r7, #19]
            break;
 800463c:	e006      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ec      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004668:	e008      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	74bb      	strb	r3, [r7, #18]
 800466e:	e005      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467c:	7c7b      	ldrb	r3, [r7, #17]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004682:	4ba7      	ldr	r3, [pc, #668]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	4aa6      	ldr	r2, [pc, #664]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469a:	4ba1      	ldr	r3, [pc, #644]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 0203 	bic.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	499d      	ldr	r1, [pc, #628]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046bc:	4b98      	ldr	r3, [pc, #608]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 020c 	bic.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4995      	ldr	r1, [pc, #596]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046de:	4b90      	ldr	r3, [pc, #576]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	498c      	ldr	r1, [pc, #560]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004700:	4b87      	ldr	r3, [pc, #540]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4984      	ldr	r1, [pc, #528]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004722:	4b7f      	ldr	r3, [pc, #508]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	497b      	ldr	r1, [pc, #492]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004744:	4b76      	ldr	r3, [pc, #472]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	4973      	ldr	r1, [pc, #460]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004766:	4b6e      	ldr	r3, [pc, #440]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	496a      	ldr	r1, [pc, #424]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004788:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4962      	ldr	r1, [pc, #392]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047aa:	4b5d      	ldr	r3, [pc, #372]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	4959      	ldr	r1, [pc, #356]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047cc:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	4951      	ldr	r1, [pc, #324]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4948      	ldr	r1, [pc, #288]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d015      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004810:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4940      	ldr	r1, [pc, #256]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004830:	4b3b      	ldr	r3, [pc, #236]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4a3a      	ldr	r2, [pc, #232]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	2b00      	cmp	r3, #0
 8004846:	d015      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	4932      	ldr	r1, [pc, #200]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004866:	d105      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004872:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	4924      	ldr	r1, [pc, #144]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d015      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	4916      	ldr	r1, [pc, #88]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d6:	d105      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a10      	ldr	r2, [pc, #64]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d019      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4908      	ldr	r1, [pc, #32]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800490e:	d109      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a02      	ldr	r2, [pc, #8]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800491a:	60d3      	str	r3, [r2, #12]
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4926      	ldr	r1, [pc, #152]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494e:	d105      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	4918      	ldr	r1, [pc, #96]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004992:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	490a      	ldr	r1, [pc, #40]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049be:	d105      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd fc2a 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fa54 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e054      	b.n	8004b4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ace:	d01d      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <HAL_TIM_Base_Start_IT+0xe0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <HAL_TIM_Base_Start_IT+0xe4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d115      	bne.n	8004b38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_TIM_Base_Start_IT+0xec>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d015      	beq.n	8004b4a <HAL_TIM_Base_Start_IT+0xbe>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d011      	beq.n	8004b4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e000      	b.n	8004b4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40013400 	.word	0x40013400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40015000 	.word	0x40015000
 8004b78:	00010007 	.word	0x00010007

08004b7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	f244 4344 	movw	r3, #17476	; 0x4444
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01b      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0202 	mvn.w	r2, #2
 8004c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f931 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f923 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f934 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d020      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01b      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0204 	mvn.w	r2, #4
 8004c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f90b 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 8004c76:	e005      	b.n	8004c84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8fd 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f90e 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01b      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0208 	mvn.w	r2, #8
 8004ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2204      	movs	r2, #4
 8004cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f8e5 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 8004cc2:	e005      	b.n	8004cd0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8d7 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8e8 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01b      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0210 	mvn.w	r2, #16
 8004cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8bf 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 8004d0e:	e005      	b.n	8004d1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8b1 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8c2 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0201 	mvn.w	r2, #1
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fbad 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9fe 	bl	8005170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f9f6 	bl	8005184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00c      	beq.n	8004dbc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f87c 	bl	8004eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00c      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0220 	mvn.w	r2, #32
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9be 	bl	800515c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00c      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f9ca 	bl	8005198 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9c2 	bl	80051ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00c      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9ba 	bl	80051c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9b2 	bl	80051d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4c      	ldr	r2, [pc, #304]	; (800500c <TIM_Base_SetConfig+0x144>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d017      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d013      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a49      	ldr	r2, [pc, #292]	; (8005010 <TIM_Base_SetConfig+0x148>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00f      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a48      	ldr	r2, [pc, #288]	; (8005014 <TIM_Base_SetConfig+0x14c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a47      	ldr	r2, [pc, #284]	; (8005018 <TIM_Base_SetConfig+0x150>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d007      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a46      	ldr	r2, [pc, #280]	; (800501c <TIM_Base_SetConfig+0x154>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a45      	ldr	r2, [pc, #276]	; (8005020 <TIM_Base_SetConfig+0x158>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d108      	bne.n	8004f22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a39      	ldr	r2, [pc, #228]	; (800500c <TIM_Base_SetConfig+0x144>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d023      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f30:	d01f      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a36      	ldr	r2, [pc, #216]	; (8005010 <TIM_Base_SetConfig+0x148>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01b      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a35      	ldr	r2, [pc, #212]	; (8005014 <TIM_Base_SetConfig+0x14c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d017      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a34      	ldr	r2, [pc, #208]	; (8005018 <TIM_Base_SetConfig+0x150>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a33      	ldr	r2, [pc, #204]	; (800501c <TIM_Base_SetConfig+0x154>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00f      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a33      	ldr	r2, [pc, #204]	; (8005024 <TIM_Base_SetConfig+0x15c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a32      	ldr	r2, [pc, #200]	; (8005028 <TIM_Base_SetConfig+0x160>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a31      	ldr	r2, [pc, #196]	; (800502c <TIM_Base_SetConfig+0x164>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x158>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a18      	ldr	r2, [pc, #96]	; (800500c <TIM_Base_SetConfig+0x144>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	; (800501c <TIM_Base_SetConfig+0x154>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <TIM_Base_SetConfig+0x15c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <TIM_Base_SetConfig+0x160>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a18      	ldr	r2, [pc, #96]	; (800502c <TIM_Base_SetConfig+0x164>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <TIM_Base_SetConfig+0x158>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]
  }
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40015000 	.word	0x40015000
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e074      	b.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a34      	ldr	r2, [pc, #208]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a33      	ldr	r2, [pc, #204]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a31      	ldr	r2, [pc, #196]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800508c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d022      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c8:	d01d      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10c      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40013400 	.word	0x40013400
 8005148:	40015000 	.word	0x40015000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40014000 	.word	0x40014000

0800515c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e042      	b.n	8005280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fc ffcd 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	; 0x24
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbb2 	bl	800599c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8b3 	bl	80053a4 <UART_SetConfig>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e01b      	b.n	8005280 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fc31 	bl	8005ae0 <UART_CheckIdleState>
 800527e:	4603      	mov	r3, r0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d17b      	bne.n	800539a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_UART_Transmit+0x26>
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e074      	b.n	800539c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2221      	movs	r2, #33	; 0x21
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c2:	f7fd f9f1 	bl	80026a8 <HAL_GetTick>
 80052c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d108      	bne.n	80052f4 <HAL_UART_Transmit+0x6c>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	e003      	b.n	80052fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052fc:	e030      	b.n	8005360 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fc93 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e03d      	b.n	800539c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	3302      	adds	r3, #2
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	e007      	b.n	800534e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	3301      	adds	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1c8      	bne.n	80052fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	2140      	movs	r1, #64	; 0x40
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fc5c 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e006      	b.n	800539c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800539a:	2302      	movs	r3, #2
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a8:	b08c      	sub	sp, #48	; 0x30
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4baa      	ldr	r3, [pc, #680]	; (800567c <UART_SetConfig+0x2d8>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053dc:	430b      	orrs	r3, r1
 80053de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a9f      	ldr	r2, [pc, #636]	; (8005680 <UART_SetConfig+0x2dc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540c:	4313      	orrs	r3, r2
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800541a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005424:	430b      	orrs	r3, r1
 8005426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	f023 010f 	bic.w	r1, r3, #15
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a90      	ldr	r2, [pc, #576]	; (8005684 <UART_SetConfig+0x2e0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d125      	bne.n	8005494 <UART_SetConfig+0xf0>
 8005448:	4b8f      	ldr	r3, [pc, #572]	; (8005688 <UART_SetConfig+0x2e4>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d81a      	bhi.n	800548c <UART_SetConfig+0xe8>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0xb8>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800547d 	.word	0x0800547d
 8005464:	08005475 	.word	0x08005475
 8005468:	08005485 	.word	0x08005485
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005472:	e116      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005474:	2302      	movs	r3, #2
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547a:	e112      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005482:	e10e      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e10a      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e106      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7c      	ldr	r2, [pc, #496]	; (800568c <UART_SetConfig+0x2e8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d138      	bne.n	8005510 <UART_SetConfig+0x16c>
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <UART_SetConfig+0x2e4>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d82d      	bhi.n	8005508 <UART_SetConfig+0x164>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x110>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054e9 	.word	0x080054e9
 80054b8:	08005509 	.word	0x08005509
 80054bc:	08005509 	.word	0x08005509
 80054c0:	08005509 	.word	0x08005509
 80054c4:	080054f9 	.word	0x080054f9
 80054c8:	08005509 	.word	0x08005509
 80054cc:	08005509 	.word	0x08005509
 80054d0:	08005509 	.word	0x08005509
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	08005509 	.word	0x08005509
 80054dc:	08005509 	.word	0x08005509
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005501 	.word	0x08005501
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ee:	e0d8      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80054f0:	2302      	movs	r3, #2
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e0d4      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fe:	e0d0      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e0cc      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550e:	e0c8      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5e      	ldr	r2, [pc, #376]	; (8005690 <UART_SetConfig+0x2ec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d125      	bne.n	8005566 <UART_SetConfig+0x1c2>
 800551a:	4b5b      	ldr	r3, [pc, #364]	; (8005688 <UART_SetConfig+0x2e4>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d016      	beq.n	8005556 <UART_SetConfig+0x1b2>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d818      	bhi.n	800555e <UART_SetConfig+0x1ba>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d00a      	beq.n	8005546 <UART_SetConfig+0x1a2>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d814      	bhi.n	800555e <UART_SetConfig+0x1ba>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <UART_SetConfig+0x19a>
 8005538:	2b10      	cmp	r3, #16
 800553a:	d008      	beq.n	800554e <UART_SetConfig+0x1aa>
 800553c:	e00f      	b.n	800555e <UART_SetConfig+0x1ba>
 800553e:	2300      	movs	r3, #0
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005544:	e0ad      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005546:	2302      	movs	r3, #2
 8005548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554c:	e0a9      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800554e:	2304      	movs	r3, #4
 8005550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005554:	e0a5      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005556:	2308      	movs	r3, #8
 8005558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555c:	e0a1      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800555e:	2310      	movs	r3, #16
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005564:	e09d      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <UART_SetConfig+0x2f0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d125      	bne.n	80055bc <UART_SetConfig+0x218>
 8005570:	4b45      	ldr	r3, [pc, #276]	; (8005688 <UART_SetConfig+0x2e4>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d016      	beq.n	80055ac <UART_SetConfig+0x208>
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d818      	bhi.n	80055b4 <UART_SetConfig+0x210>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d00a      	beq.n	800559c <UART_SetConfig+0x1f8>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d814      	bhi.n	80055b4 <UART_SetConfig+0x210>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <UART_SetConfig+0x1f0>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d008      	beq.n	80055a4 <UART_SetConfig+0x200>
 8005592:	e00f      	b.n	80055b4 <UART_SetConfig+0x210>
 8005594:	2300      	movs	r3, #0
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559a:	e082      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a2:	e07e      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055aa:	e07a      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b2:	e076      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ba:	e072      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a35      	ldr	r2, [pc, #212]	; (8005698 <UART_SetConfig+0x2f4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d12a      	bne.n	800561c <UART_SetConfig+0x278>
 80055c6:	4b30      	ldr	r3, [pc, #192]	; (8005688 <UART_SetConfig+0x2e4>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d4:	d01a      	beq.n	800560c <UART_SetConfig+0x268>
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055da:	d81b      	bhi.n	8005614 <UART_SetConfig+0x270>
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e0:	d00c      	beq.n	80055fc <UART_SetConfig+0x258>
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e6:	d815      	bhi.n	8005614 <UART_SetConfig+0x270>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <UART_SetConfig+0x250>
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f0:	d008      	beq.n	8005604 <UART_SetConfig+0x260>
 80055f2:	e00f      	b.n	8005614 <UART_SetConfig+0x270>
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fa:	e052      	b.n	80056a2 <UART_SetConfig+0x2fe>
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005602:	e04e      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560a:	e04a      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005612:	e046      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561a:	e042      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <UART_SetConfig+0x2dc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d13a      	bne.n	800569c <UART_SetConfig+0x2f8>
 8005626:	4b18      	ldr	r3, [pc, #96]	; (8005688 <UART_SetConfig+0x2e4>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005634:	d01a      	beq.n	800566c <UART_SetConfig+0x2c8>
 8005636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563a:	d81b      	bhi.n	8005674 <UART_SetConfig+0x2d0>
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	d00c      	beq.n	800565c <UART_SetConfig+0x2b8>
 8005642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005646:	d815      	bhi.n	8005674 <UART_SetConfig+0x2d0>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <UART_SetConfig+0x2b0>
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005650:	d008      	beq.n	8005664 <UART_SetConfig+0x2c0>
 8005652:	e00f      	b.n	8005674 <UART_SetConfig+0x2d0>
 8005654:	2300      	movs	r3, #0
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565a:	e022      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800565c:	2302      	movs	r3, #2
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e01e      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566a:	e01a      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e016      	b.n	80056a2 <UART_SetConfig+0x2fe>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e012      	b.n	80056a2 <UART_SetConfig+0x2fe>
 800567c:	cfff69f3 	.word	0xcfff69f3
 8005680:	40008000 	.word	0x40008000
 8005684:	40013800 	.word	0x40013800
 8005688:	40021000 	.word	0x40021000
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	40004c00 	.word	0x40004c00
 8005698:	40005000 	.word	0x40005000
 800569c:	2310      	movs	r3, #16
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4aae      	ldr	r2, [pc, #696]	; (8005960 <UART_SetConfig+0x5bc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	f040 8097 	bne.w	80057dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d823      	bhi.n	80056fe <UART_SetConfig+0x35a>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x318>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056ff 	.word	0x080056ff
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	080056ef 	.word	0x080056ef
 80056d0:	080056ff 	.word	0x080056ff
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	080056ff 	.word	0x080056ff
 80056dc:	080056f7 	.word	0x080056f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe febc 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056e6:	e010      	b.n	800570a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e8:	4b9e      	ldr	r3, [pc, #632]	; (8005964 <UART_SetConfig+0x5c0>)
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056ec:	e00d      	b.n	800570a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ee:	f7fe fe47 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f4:	e009      	b.n	800570a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056fc:	e005      	b.n	800570a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8130 	beq.w	8005972 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	4a94      	ldr	r2, [pc, #592]	; (8005968 <UART_SetConfig+0x5c4>)
 8005718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571c:	461a      	mov	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	fbb3 f3f2 	udiv	r3, r3, r2
 8005724:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d305      	bcc.n	8005742 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d903      	bls.n	800574a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005748:	e113      	b.n	8005972 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	2200      	movs	r2, #0
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	60fa      	str	r2, [r7, #12]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	4a84      	ldr	r2, [pc, #528]	; (8005968 <UART_SetConfig+0x5c4>)
 8005758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575c:	b29b      	uxth	r3, r3
 800575e:	2200      	movs	r2, #0
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800576c:	f7fb fa94 	bl	8000c98 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	020b      	lsls	r3, r1, #8
 8005782:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005786:	0202      	lsls	r2, r0, #8
 8005788:	6979      	ldr	r1, [r7, #20]
 800578a:	6849      	ldr	r1, [r1, #4]
 800578c:	0849      	lsrs	r1, r1, #1
 800578e:	2000      	movs	r0, #0
 8005790:	460c      	mov	r4, r1
 8005792:	4605      	mov	r5, r0
 8005794:	eb12 0804 	adds.w	r8, r2, r4
 8005798:	eb43 0905 	adc.w	r9, r3, r5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	469a      	mov	sl, r3
 80057a4:	4693      	mov	fp, r2
 80057a6:	4652      	mov	r2, sl
 80057a8:	465b      	mov	r3, fp
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f7fb fa73 	bl	8000c98 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4613      	mov	r3, r2
 80057b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c0:	d308      	bcc.n	80057d4 <UART_SetConfig+0x430>
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c8:	d204      	bcs.n	80057d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	e0ce      	b.n	8005972 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057da:	e0ca      	b.n	8005972 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d166      	bne.n	80058b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d827      	bhi.n	800583e <UART_SetConfig+0x49a>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x450>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005829 	.word	0x08005829
 8005800:	0800583f 	.word	0x0800583f
 8005804:	0800582f 	.word	0x0800582f
 8005808:	0800583f 	.word	0x0800583f
 800580c:	0800583f 	.word	0x0800583f
 8005810:	0800583f 	.word	0x0800583f
 8005814:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fe fe20 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800581e:	e014      	b.n	800584a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe fe32 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8005824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005826:	e010      	b.n	800584a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b4e      	ldr	r3, [pc, #312]	; (8005964 <UART_SetConfig+0x5c0>)
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fe fda7 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005832:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005834:	e009      	b.n	800584a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800583c:	e005      	b.n	800584a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8090 	beq.w	8005972 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	4a44      	ldr	r2, [pc, #272]	; (8005968 <UART_SetConfig+0x5c4>)
 8005858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585c:	461a      	mov	r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	fbb3 f3f2 	udiv	r3, r3, r2
 8005864:	005a      	lsls	r2, r3, #1
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	441a      	add	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d916      	bls.n	80058ac <UART_SetConfig+0x508>
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d212      	bcs.n	80058ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f023 030f 	bic.w	r3, r3, #15
 800588e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	b29a      	uxth	r2, r3
 800589c:	8bfb      	ldrh	r3, [r7, #30]
 800589e:	4313      	orrs	r3, r2
 80058a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	8bfa      	ldrh	r2, [r7, #30]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	e062      	b.n	8005972 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058b2:	e05e      	b.n	8005972 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d828      	bhi.n	800590e <UART_SetConfig+0x56a>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x520>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	0800590f 	.word	0x0800590f
 80058d4:	080058ff 	.word	0x080058ff
 80058d8:	0800590f 	.word	0x0800590f
 80058dc:	0800590f 	.word	0x0800590f
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	08005907 	.word	0x08005907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fe fdb8 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80058ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ee:	e014      	b.n	800591a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7fe fdca 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 80058f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058f6:	e010      	b.n	800591a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <UART_SetConfig+0x5c0>)
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058fc:	e00d      	b.n	800591a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fe:	f7fe fd3f 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005904:	e009      	b.n	800591a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800590c:	e005      	b.n	800591a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005918:	bf00      	nop
    }

    if (pclk != 0U)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d028      	beq.n	8005972 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	4a10      	ldr	r2, [pc, #64]	; (8005968 <UART_SetConfig+0x5c4>)
 8005926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592a:	461a      	mov	r2, r3
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	441a      	add	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	d910      	bls.n	800596c <UART_SetConfig+0x5c8>
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d20c      	bcs.n	800596c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	b29a      	uxth	r2, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e009      	b.n	8005972 <UART_SetConfig+0x5ce>
 800595e:	bf00      	nop
 8005960:	40008000 	.word	0x40008000
 8005964:	00f42400 	.word	0x00f42400
 8005968:	08008adc 	.word	0x08008adc
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2201      	movs	r2, #1
 8005976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2200      	movs	r2, #0
 800598c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800598e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005992:	4618      	mov	r0, r3
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800599c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9a:	d10a      	bne.n	8005ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b098      	sub	sp, #96	; 0x60
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af0:	f7fc fdda 	bl	80026a8 <HAL_GetTick>
 8005af4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d12f      	bne.n	8005b64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f88e 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d022      	beq.n	8005b64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e063      	b.n	8005c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d149      	bne.n	8005c06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f857 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d03c      	beq.n	8005c06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e6      	bne.n	8005b8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bde:	61fa      	str	r2, [r7, #28]
 8005be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	617b      	str	r3, [r7, #20]
   return(result);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e5      	bne.n	8005bbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e012      	b.n	8005c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3758      	adds	r7, #88	; 0x58
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c44:	e04f      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c4c:	d04b      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fc fd2b 	bl	80026a8 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e04e      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d037      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d034      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d031      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d110      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2208      	movs	r2, #8
 8005c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f838 	bl	8005d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e029      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc0:	d111      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f81e 	bl	8005d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d0a0      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b095      	sub	sp, #84	; 0x54
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d34:	643b      	str	r3, [r7, #64]	; 0x40
 8005d36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e3      	bne.n	8005d48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d118      	bne.n	8005dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 0310 	bic.w	r3, r3, #16
 8005d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	613b      	str	r3, [r7, #16]
   return(result);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e6      	bne.n	8005d88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005dce:	bf00      	nop
 8005dd0:	3754      	adds	r7, #84	; 0x54
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e027      	b.n	8005e40 <HAL_UARTEx_DisableFifoMode+0x66>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e02d      	b.n	8005ec0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f84f 	bl	8005f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e02d      	b.n	8005f3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f811 	bl	8005f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f64:	e031      	b.n	8005fca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f66:	2308      	movs	r3, #8
 8005f68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	0e5b      	lsrs	r3, r3, #25
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	0f5b      	lsrs	r3, r3, #29
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	7b3a      	ldrb	r2, [r7, #12]
 8005f92:	4911      	ldr	r1, [pc, #68]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005f94:	5c8a      	ldrb	r2, [r1, r2]
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f9a:	7b3a      	ldrb	r2, [r7, #12]
 8005f9c:	490f      	ldr	r1, [pc, #60]	; (8005fdc <UARTEx_SetNbDataToProcess+0x98>)
 8005f9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	7b7a      	ldrb	r2, [r7, #13]
 8005fb0:	4909      	ldr	r1, [pc, #36]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005fb2:	5c8a      	ldrb	r2, [r1, r2]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb8:	7b7a      	ldrb	r2, [r7, #13]
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <UARTEx_SetNbDataToProcess+0x98>)
 8005fbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	08008af4 	.word	0x08008af4
 8005fdc:	08008afc 	.word	0x08008afc

08005fe0 <__cvt>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	ec55 4b10 	vmov	r4, r5, d0
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	460e      	mov	r6, r1
 8005fec:	4619      	mov	r1, r3
 8005fee:	462b      	mov	r3, r5
 8005ff0:	bfbb      	ittet	lt
 8005ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ff6:	461d      	movlt	r5, r3
 8005ff8:	2300      	movge	r3, #0
 8005ffa:	232d      	movlt	r3, #45	; 0x2d
 8005ffc:	700b      	strb	r3, [r1, #0]
 8005ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006000:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006004:	4691      	mov	r9, r2
 8006006:	f023 0820 	bic.w	r8, r3, #32
 800600a:	bfbc      	itt	lt
 800600c:	4622      	movlt	r2, r4
 800600e:	4614      	movlt	r4, r2
 8006010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006014:	d005      	beq.n	8006022 <__cvt+0x42>
 8006016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800601a:	d100      	bne.n	800601e <__cvt+0x3e>
 800601c:	3601      	adds	r6, #1
 800601e:	2102      	movs	r1, #2
 8006020:	e000      	b.n	8006024 <__cvt+0x44>
 8006022:	2103      	movs	r1, #3
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	ab02      	add	r3, sp, #8
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	ec45 4b10 	vmov	d0, r4, r5
 8006030:	4653      	mov	r3, sl
 8006032:	4632      	mov	r2, r6
 8006034:	f000 fef0 	bl	8006e18 <_dtoa_r>
 8006038:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800603c:	4607      	mov	r7, r0
 800603e:	d102      	bne.n	8006046 <__cvt+0x66>
 8006040:	f019 0f01 	tst.w	r9, #1
 8006044:	d022      	beq.n	800608c <__cvt+0xac>
 8006046:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800604a:	eb07 0906 	add.w	r9, r7, r6
 800604e:	d110      	bne.n	8006072 <__cvt+0x92>
 8006050:	783b      	ldrb	r3, [r7, #0]
 8006052:	2b30      	cmp	r3, #48	; 0x30
 8006054:	d10a      	bne.n	800606c <__cvt+0x8c>
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 8006062:	b918      	cbnz	r0, 800606c <__cvt+0x8c>
 8006064:	f1c6 0601 	rsb	r6, r6, #1
 8006068:	f8ca 6000 	str.w	r6, [sl]
 800606c:	f8da 3000 	ldr.w	r3, [sl]
 8006070:	4499      	add	r9, r3
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fd4d 	bl	8000b18 <__aeabi_dcmpeq>
 800607e:	b108      	cbz	r0, 8006084 <__cvt+0xa4>
 8006080:	f8cd 900c 	str.w	r9, [sp, #12]
 8006084:	2230      	movs	r2, #48	; 0x30
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	454b      	cmp	r3, r9
 800608a:	d307      	bcc.n	800609c <__cvt+0xbc>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006090:	1bdb      	subs	r3, r3, r7
 8006092:	4638      	mov	r0, r7
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	b004      	add	sp, #16
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	9103      	str	r1, [sp, #12]
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e7f0      	b.n	8006086 <__cvt+0xa6>

080060a4 <__exponent>:
 80060a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a6:	4603      	mov	r3, r0
 80060a8:	2900      	cmp	r1, #0
 80060aa:	bfb8      	it	lt
 80060ac:	4249      	neglt	r1, r1
 80060ae:	f803 2b02 	strb.w	r2, [r3], #2
 80060b2:	bfb4      	ite	lt
 80060b4:	222d      	movlt	r2, #45	; 0x2d
 80060b6:	222b      	movge	r2, #43	; 0x2b
 80060b8:	2909      	cmp	r1, #9
 80060ba:	7042      	strb	r2, [r0, #1]
 80060bc:	dd2a      	ble.n	8006114 <__exponent+0x70>
 80060be:	f10d 0207 	add.w	r2, sp, #7
 80060c2:	4617      	mov	r7, r2
 80060c4:	260a      	movs	r6, #10
 80060c6:	4694      	mov	ip, r2
 80060c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80060cc:	fb06 1415 	mls	r4, r6, r5, r1
 80060d0:	3430      	adds	r4, #48	; 0x30
 80060d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060d6:	460c      	mov	r4, r1
 80060d8:	2c63      	cmp	r4, #99	; 0x63
 80060da:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80060de:	4629      	mov	r1, r5
 80060e0:	dcf1      	bgt.n	80060c6 <__exponent+0x22>
 80060e2:	3130      	adds	r1, #48	; 0x30
 80060e4:	f1ac 0402 	sub.w	r4, ip, #2
 80060e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060ec:	1c41      	adds	r1, r0, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	42ba      	cmp	r2, r7
 80060f2:	d30a      	bcc.n	800610a <__exponent+0x66>
 80060f4:	f10d 0209 	add.w	r2, sp, #9
 80060f8:	eba2 020c 	sub.w	r2, r2, ip
 80060fc:	42bc      	cmp	r4, r7
 80060fe:	bf88      	it	hi
 8006100:	2200      	movhi	r2, #0
 8006102:	4413      	add	r3, r2
 8006104:	1a18      	subs	r0, r3, r0
 8006106:	b003      	add	sp, #12
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800610a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800610e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006112:	e7ed      	b.n	80060f0 <__exponent+0x4c>
 8006114:	2330      	movs	r3, #48	; 0x30
 8006116:	3130      	adds	r1, #48	; 0x30
 8006118:	7083      	strb	r3, [r0, #2]
 800611a:	70c1      	strb	r1, [r0, #3]
 800611c:	1d03      	adds	r3, r0, #4
 800611e:	e7f1      	b.n	8006104 <__exponent+0x60>

08006120 <_printf_float>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	ed2d 8b02 	vpush	{d8}
 8006128:	b08d      	sub	sp, #52	; 0x34
 800612a:	460c      	mov	r4, r1
 800612c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006130:	4616      	mov	r6, r2
 8006132:	461f      	mov	r7, r3
 8006134:	4605      	mov	r5, r0
 8006136:	f000 fda5 	bl	8006c84 <_localeconv_r>
 800613a:	f8d0 a000 	ldr.w	sl, [r0]
 800613e:	4650      	mov	r0, sl
 8006140:	f7fa f8be 	bl	80002c0 <strlen>
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	; 0x28
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	f8d8 3000 	ldr.w	r3, [r8]
 8006150:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006154:	3307      	adds	r3, #7
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	f103 0208 	add.w	r2, r3, #8
 800615e:	f8c8 2000 	str.w	r2, [r8]
 8006162:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800617c:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <_printf_float+0x2d8>)
 800617e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006182:	f7fa fcfb 	bl	8000b7c <__aeabi_dcmpun>
 8006186:	bb88      	cbnz	r0, 80061ec <_printf_float+0xcc>
 8006188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618c:	4b9a      	ldr	r3, [pc, #616]	; (80063f8 <_printf_float+0x2d8>)
 800618e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006192:	f7fa fcd5 	bl	8000b40 <__aeabi_dcmple>
 8006196:	bb48      	cbnz	r0, 80061ec <_printf_float+0xcc>
 8006198:	2200      	movs	r2, #0
 800619a:	2300      	movs	r3, #0
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa fcc4 	bl	8000b2c <__aeabi_dcmplt>
 80061a4:	b110      	cbz	r0, 80061ac <_printf_float+0x8c>
 80061a6:	232d      	movs	r3, #45	; 0x2d
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	4a93      	ldr	r2, [pc, #588]	; (80063fc <_printf_float+0x2dc>)
 80061ae:	4b94      	ldr	r3, [pc, #592]	; (8006400 <_printf_float+0x2e0>)
 80061b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061b4:	bf94      	ite	ls
 80061b6:	4690      	movls	r8, r2
 80061b8:	4698      	movhi	r8, r3
 80061ba:	2303      	movs	r3, #3
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	9b05      	ldr	r3, [sp, #20]
 80061c0:	f023 0304 	bic.w	r3, r3, #4
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	f04f 0900 	mov.w	r9, #0
 80061ca:	9700      	str	r7, [sp, #0]
 80061cc:	4633      	mov	r3, r6
 80061ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80061d0:	4621      	mov	r1, r4
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 fa82 	bl	80066dc <_printf_common>
 80061d8:	3001      	adds	r0, #1
 80061da:	f040 8090 	bne.w	80062fe <_printf_float+0x1de>
 80061de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e2:	b00d      	add	sp, #52	; 0x34
 80061e4:	ecbd 8b02 	vpop	{d8}
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	4640      	mov	r0, r8
 80061f2:	4649      	mov	r1, r9
 80061f4:	f7fa fcc2 	bl	8000b7c <__aeabi_dcmpun>
 80061f8:	b140      	cbz	r0, 800620c <_printf_float+0xec>
 80061fa:	464b      	mov	r3, r9
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bfbc      	itt	lt
 8006200:	232d      	movlt	r3, #45	; 0x2d
 8006202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006206:	4a7f      	ldr	r2, [pc, #508]	; (8006404 <_printf_float+0x2e4>)
 8006208:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <_printf_float+0x2e8>)
 800620a:	e7d1      	b.n	80061b0 <_printf_float+0x90>
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006212:	9206      	str	r2, [sp, #24]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	d13f      	bne.n	8006298 <_printf_float+0x178>
 8006218:	2306      	movs	r3, #6
 800621a:	6063      	str	r3, [r4, #4]
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	6861      	ldr	r1, [r4, #4]
 8006220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006224:	2300      	movs	r3, #0
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	ab0a      	add	r3, sp, #40	; 0x28
 800622a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800622e:	ab09      	add	r3, sp, #36	; 0x24
 8006230:	ec49 8b10 	vmov	d0, r8, r9
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6022      	str	r2, [r4, #0]
 8006238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff fecf 	bl	8005fe0 <__cvt>
 8006242:	9b06      	ldr	r3, [sp, #24]
 8006244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006246:	2b47      	cmp	r3, #71	; 0x47
 8006248:	4680      	mov	r8, r0
 800624a:	d108      	bne.n	800625e <_printf_float+0x13e>
 800624c:	1cc8      	adds	r0, r1, #3
 800624e:	db02      	blt.n	8006256 <_printf_float+0x136>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	4299      	cmp	r1, r3
 8006254:	dd41      	ble.n	80062da <_printf_float+0x1ba>
 8006256:	f1ab 0302 	sub.w	r3, fp, #2
 800625a:	fa5f fb83 	uxtb.w	fp, r3
 800625e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006262:	d820      	bhi.n	80062a6 <_printf_float+0x186>
 8006264:	3901      	subs	r1, #1
 8006266:	465a      	mov	r2, fp
 8006268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800626c:	9109      	str	r1, [sp, #36]	; 0x24
 800626e:	f7ff ff19 	bl	80060a4 <__exponent>
 8006272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006274:	1813      	adds	r3, r2, r0
 8006276:	2a01      	cmp	r2, #1
 8006278:	4681      	mov	r9, r0
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	dc02      	bgt.n	8006284 <_printf_float+0x164>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	07d2      	lsls	r2, r2, #31
 8006282:	d501      	bpl.n	8006288 <_printf_float+0x168>
 8006284:	3301      	adds	r3, #1
 8006286:	6123      	str	r3, [r4, #16]
 8006288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800628c:	2b00      	cmp	r3, #0
 800628e:	d09c      	beq.n	80061ca <_printf_float+0xaa>
 8006290:	232d      	movs	r3, #45	; 0x2d
 8006292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006296:	e798      	b.n	80061ca <_printf_float+0xaa>
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	2a47      	cmp	r2, #71	; 0x47
 800629c:	d1be      	bne.n	800621c <_printf_float+0xfc>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1bc      	bne.n	800621c <_printf_float+0xfc>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e7b9      	b.n	800621a <_printf_float+0xfa>
 80062a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062aa:	d118      	bne.n	80062de <_printf_float+0x1be>
 80062ac:	2900      	cmp	r1, #0
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	dd0b      	ble.n	80062ca <_printf_float+0x1aa>
 80062b2:	6121      	str	r1, [r4, #16]
 80062b4:	b913      	cbnz	r3, 80062bc <_printf_float+0x19c>
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	07d0      	lsls	r0, r2, #31
 80062ba:	d502      	bpl.n	80062c2 <_printf_float+0x1a2>
 80062bc:	3301      	adds	r3, #1
 80062be:	440b      	add	r3, r1
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80062c4:	f04f 0900 	mov.w	r9, #0
 80062c8:	e7de      	b.n	8006288 <_printf_float+0x168>
 80062ca:	b913      	cbnz	r3, 80062d2 <_printf_float+0x1b2>
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	07d2      	lsls	r2, r2, #31
 80062d0:	d501      	bpl.n	80062d6 <_printf_float+0x1b6>
 80062d2:	3302      	adds	r3, #2
 80062d4:	e7f4      	b.n	80062c0 <_printf_float+0x1a0>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7f2      	b.n	80062c0 <_printf_float+0x1a0>
 80062da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e0:	4299      	cmp	r1, r3
 80062e2:	db05      	blt.n	80062f0 <_printf_float+0x1d0>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	6121      	str	r1, [r4, #16]
 80062e8:	07d8      	lsls	r0, r3, #31
 80062ea:	d5ea      	bpl.n	80062c2 <_printf_float+0x1a2>
 80062ec:	1c4b      	adds	r3, r1, #1
 80062ee:	e7e7      	b.n	80062c0 <_printf_float+0x1a0>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	bfd4      	ite	le
 80062f4:	f1c1 0202 	rsble	r2, r1, #2
 80062f8:	2201      	movgt	r2, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	e7e0      	b.n	80062c0 <_printf_float+0x1a0>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	055a      	lsls	r2, r3, #21
 8006302:	d407      	bmi.n	8006314 <_printf_float+0x1f4>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	4642      	mov	r2, r8
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	d12c      	bne.n	800636c <_printf_float+0x24c>
 8006312:	e764      	b.n	80061de <_printf_float+0xbe>
 8006314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006318:	f240 80e0 	bls.w	80064dc <_printf_float+0x3bc>
 800631c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	f7fa fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 8006328:	2800      	cmp	r0, #0
 800632a:	d034      	beq.n	8006396 <_printf_float+0x276>
 800632c:	4a37      	ldr	r2, [pc, #220]	; (800640c <_printf_float+0x2ec>)
 800632e:	2301      	movs	r3, #1
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f af51 	beq.w	80061de <_printf_float+0xbe>
 800633c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006340:	429a      	cmp	r2, r3
 8006342:	db02      	blt.n	800634a <_printf_float+0x22a>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07d8      	lsls	r0, r3, #31
 8006348:	d510      	bpl.n	800636c <_printf_float+0x24c>
 800634a:	ee18 3a10 	vmov	r3, s16
 800634e:	4652      	mov	r2, sl
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f af41 	beq.w	80061de <_printf_float+0xbe>
 800635c:	f04f 0800 	mov.w	r8, #0
 8006360:	f104 091a 	add.w	r9, r4, #26
 8006364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006366:	3b01      	subs	r3, #1
 8006368:	4543      	cmp	r3, r8
 800636a:	dc09      	bgt.n	8006380 <_printf_float+0x260>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	079b      	lsls	r3, r3, #30
 8006370:	f100 8107 	bmi.w	8006582 <_printf_float+0x462>
 8006374:	68e0      	ldr	r0, [r4, #12]
 8006376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006378:	4298      	cmp	r0, r3
 800637a:	bfb8      	it	lt
 800637c:	4618      	movlt	r0, r3
 800637e:	e730      	b.n	80061e2 <_printf_float+0xc2>
 8006380:	2301      	movs	r3, #1
 8006382:	464a      	mov	r2, r9
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f af27 	beq.w	80061de <_printf_float+0xbe>
 8006390:	f108 0801 	add.w	r8, r8, #1
 8006394:	e7e6      	b.n	8006364 <_printf_float+0x244>
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	dc39      	bgt.n	8006410 <_printf_float+0x2f0>
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <_printf_float+0x2ec>)
 800639e:	2301      	movs	r3, #1
 80063a0:	4631      	mov	r1, r6
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	f43f af19 	beq.w	80061de <_printf_float+0xbe>
 80063ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d102      	bne.n	80063ba <_printf_float+0x29a>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d5d8      	bpl.n	800636c <_printf_float+0x24c>
 80063ba:	ee18 3a10 	vmov	r3, s16
 80063be:	4652      	mov	r2, sl
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f af09 	beq.w	80061de <_printf_float+0xbe>
 80063cc:	f04f 0900 	mov.w	r9, #0
 80063d0:	f104 0a1a 	add.w	sl, r4, #26
 80063d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d6:	425b      	negs	r3, r3
 80063d8:	454b      	cmp	r3, r9
 80063da:	dc01      	bgt.n	80063e0 <_printf_float+0x2c0>
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	e792      	b.n	8006306 <_printf_float+0x1e6>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4652      	mov	r2, sl
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f aef7 	beq.w	80061de <_printf_float+0xbe>
 80063f0:	f109 0901 	add.w	r9, r9, #1
 80063f4:	e7ee      	b.n	80063d4 <_printf_float+0x2b4>
 80063f6:	bf00      	nop
 80063f8:	7fefffff 	.word	0x7fefffff
 80063fc:	08008b04 	.word	0x08008b04
 8006400:	08008b08 	.word	0x08008b08
 8006404:	08008b0c 	.word	0x08008b0c
 8006408:	08008b10 	.word	0x08008b10
 800640c:	08008b14 	.word	0x08008b14
 8006410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006414:	429a      	cmp	r2, r3
 8006416:	bfa8      	it	ge
 8006418:	461a      	movge	r2, r3
 800641a:	2a00      	cmp	r2, #0
 800641c:	4691      	mov	r9, r2
 800641e:	dc37      	bgt.n	8006490 <_printf_float+0x370>
 8006420:	f04f 0b00 	mov.w	fp, #0
 8006424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006428:	f104 021a 	add.w	r2, r4, #26
 800642c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	eba3 0309 	sub.w	r3, r3, r9
 8006434:	455b      	cmp	r3, fp
 8006436:	dc33      	bgt.n	80064a0 <_printf_float+0x380>
 8006438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800643c:	429a      	cmp	r2, r3
 800643e:	db3b      	blt.n	80064b8 <_printf_float+0x398>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d438      	bmi.n	80064b8 <_printf_float+0x398>
 8006446:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800644a:	eba2 0903 	sub.w	r9, r2, r3
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	4591      	cmp	r9, r2
 8006454:	bfa8      	it	ge
 8006456:	4691      	movge	r9, r2
 8006458:	f1b9 0f00 	cmp.w	r9, #0
 800645c:	dc35      	bgt.n	80064ca <_printf_float+0x3aa>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006466:	f104 0a1a 	add.w	sl, r4, #26
 800646a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	eba3 0309 	sub.w	r3, r3, r9
 8006474:	4543      	cmp	r3, r8
 8006476:	f77f af79 	ble.w	800636c <_printf_float+0x24c>
 800647a:	2301      	movs	r3, #1
 800647c:	4652      	mov	r2, sl
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f aeaa 	beq.w	80061de <_printf_float+0xbe>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	e7ec      	b.n	800646a <_printf_float+0x34a>
 8006490:	4613      	mov	r3, r2
 8006492:	4631      	mov	r1, r6
 8006494:	4642      	mov	r2, r8
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	d1c0      	bne.n	8006420 <_printf_float+0x300>
 800649e:	e69e      	b.n	80061de <_printf_float+0xbe>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	9205      	str	r2, [sp, #20]
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f ae97 	beq.w	80061de <_printf_float+0xbe>
 80064b0:	9a05      	ldr	r2, [sp, #20]
 80064b2:	f10b 0b01 	add.w	fp, fp, #1
 80064b6:	e7b9      	b.n	800642c <_printf_float+0x30c>
 80064b8:	ee18 3a10 	vmov	r3, s16
 80064bc:	4652      	mov	r2, sl
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1be      	bne.n	8006446 <_printf_float+0x326>
 80064c8:	e689      	b.n	80061de <_printf_float+0xbe>
 80064ca:	9a05      	ldr	r2, [sp, #20]
 80064cc:	464b      	mov	r3, r9
 80064ce:	4442      	add	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d1c1      	bne.n	800645e <_printf_float+0x33e>
 80064da:	e680      	b.n	80061de <_printf_float+0xbe>
 80064dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064de:	2a01      	cmp	r2, #1
 80064e0:	dc01      	bgt.n	80064e6 <_printf_float+0x3c6>
 80064e2:	07db      	lsls	r3, r3, #31
 80064e4:	d53a      	bpl.n	800655c <_printf_float+0x43c>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4642      	mov	r2, r8
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f ae74 	beq.w	80061de <_printf_float+0xbe>
 80064f6:	ee18 3a10 	vmov	r3, s16
 80064fa:	4652      	mov	r2, sl
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f ae6b 	beq.w	80061de <_printf_float+0xbe>
 8006508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800650c:	2200      	movs	r2, #0
 800650e:	2300      	movs	r3, #0
 8006510:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006514:	f7fa fb00 	bl	8000b18 <__aeabi_dcmpeq>
 8006518:	b9d8      	cbnz	r0, 8006552 <_printf_float+0x432>
 800651a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800651e:	f108 0201 	add.w	r2, r8, #1
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	d10e      	bne.n	800654a <_printf_float+0x42a>
 800652c:	e657      	b.n	80061de <_printf_float+0xbe>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f ae50 	beq.w	80061de <_printf_float+0xbe>
 800653e:	f108 0801 	add.w	r8, r8, #1
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	4543      	cmp	r3, r8
 8006548:	dcf1      	bgt.n	800652e <_printf_float+0x40e>
 800654a:	464b      	mov	r3, r9
 800654c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006550:	e6da      	b.n	8006308 <_printf_float+0x1e8>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	f104 0a1a 	add.w	sl, r4, #26
 800655a:	e7f2      	b.n	8006542 <_printf_float+0x422>
 800655c:	2301      	movs	r3, #1
 800655e:	4642      	mov	r2, r8
 8006560:	e7df      	b.n	8006522 <_printf_float+0x402>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae36 	beq.w	80061de <_printf_float+0xbe>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	4543      	cmp	r3, r8
 800657e:	dcf0      	bgt.n	8006562 <_printf_float+0x442>
 8006580:	e6f8      	b.n	8006374 <_printf_float+0x254>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0919 	add.w	r9, r4, #25
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x456>

0800658c <malloc>:
 800658c:	4b02      	ldr	r3, [pc, #8]	; (8006598 <malloc+0xc>)
 800658e:	4601      	mov	r1, r0
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	f000 b823 	b.w	80065dc <_malloc_r>
 8006596:	bf00      	nop
 8006598:	200000dc 	.word	0x200000dc

0800659c <sbrk_aligned>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4e0e      	ldr	r6, [pc, #56]	; (80065d8 <sbrk_aligned+0x3c>)
 80065a0:	460c      	mov	r4, r1
 80065a2:	6831      	ldr	r1, [r6, #0]
 80065a4:	4605      	mov	r5, r0
 80065a6:	b911      	cbnz	r1, 80065ae <sbrk_aligned+0x12>
 80065a8:	f000 fb70 	bl	8006c8c <_sbrk_r>
 80065ac:	6030      	str	r0, [r6, #0]
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 fb6b 	bl	8006c8c <_sbrk_r>
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	d00a      	beq.n	80065d0 <sbrk_aligned+0x34>
 80065ba:	1cc4      	adds	r4, r0, #3
 80065bc:	f024 0403 	bic.w	r4, r4, #3
 80065c0:	42a0      	cmp	r0, r4
 80065c2:	d007      	beq.n	80065d4 <sbrk_aligned+0x38>
 80065c4:	1a21      	subs	r1, r4, r0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 fb60 	bl	8006c8c <_sbrk_r>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d101      	bne.n	80065d4 <sbrk_aligned+0x38>
 80065d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065d4:	4620      	mov	r0, r4
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	200005c0 	.word	0x200005c0

080065dc <_malloc_r>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	1ccd      	adds	r5, r1, #3
 80065e2:	f025 0503 	bic.w	r5, r5, #3
 80065e6:	3508      	adds	r5, #8
 80065e8:	2d0c      	cmp	r5, #12
 80065ea:	bf38      	it	cc
 80065ec:	250c      	movcc	r5, #12
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	4607      	mov	r7, r0
 80065f2:	db01      	blt.n	80065f8 <_malloc_r+0x1c>
 80065f4:	42a9      	cmp	r1, r5
 80065f6:	d905      	bls.n	8006604 <_malloc_r+0x28>
 80065f8:	230c      	movs	r3, #12
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	2600      	movs	r6, #0
 80065fe:	4630      	mov	r0, r6
 8006600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066d8 <_malloc_r+0xfc>
 8006608:	f000 f9f8 	bl	80069fc <__malloc_lock>
 800660c:	f8d8 3000 	ldr.w	r3, [r8]
 8006610:	461c      	mov	r4, r3
 8006612:	bb5c      	cbnz	r4, 800666c <_malloc_r+0x90>
 8006614:	4629      	mov	r1, r5
 8006616:	4638      	mov	r0, r7
 8006618:	f7ff ffc0 	bl	800659c <sbrk_aligned>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	4604      	mov	r4, r0
 8006620:	d155      	bne.n	80066ce <_malloc_r+0xf2>
 8006622:	f8d8 4000 	ldr.w	r4, [r8]
 8006626:	4626      	mov	r6, r4
 8006628:	2e00      	cmp	r6, #0
 800662a:	d145      	bne.n	80066b8 <_malloc_r+0xdc>
 800662c:	2c00      	cmp	r4, #0
 800662e:	d048      	beq.n	80066c2 <_malloc_r+0xe6>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	4631      	mov	r1, r6
 8006634:	4638      	mov	r0, r7
 8006636:	eb04 0903 	add.w	r9, r4, r3
 800663a:	f000 fb27 	bl	8006c8c <_sbrk_r>
 800663e:	4581      	cmp	r9, r0
 8006640:	d13f      	bne.n	80066c2 <_malloc_r+0xe6>
 8006642:	6821      	ldr	r1, [r4, #0]
 8006644:	1a6d      	subs	r5, r5, r1
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ffa7 	bl	800659c <sbrk_aligned>
 800664e:	3001      	adds	r0, #1
 8006650:	d037      	beq.n	80066c2 <_malloc_r+0xe6>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	442b      	add	r3, r5
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	f8d8 3000 	ldr.w	r3, [r8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d038      	beq.n	80066d2 <_malloc_r+0xf6>
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	42a2      	cmp	r2, r4
 8006664:	d12b      	bne.n	80066be <_malloc_r+0xe2>
 8006666:	2200      	movs	r2, #0
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e00f      	b.n	800668c <_malloc_r+0xb0>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	1b52      	subs	r2, r2, r5
 8006670:	d41f      	bmi.n	80066b2 <_malloc_r+0xd6>
 8006672:	2a0b      	cmp	r2, #11
 8006674:	d917      	bls.n	80066a6 <_malloc_r+0xca>
 8006676:	1961      	adds	r1, r4, r5
 8006678:	42a3      	cmp	r3, r4
 800667a:	6025      	str	r5, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	6059      	strne	r1, [r3, #4]
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	bf08      	it	eq
 8006684:	f8c8 1000 	streq.w	r1, [r8]
 8006688:	5162      	str	r2, [r4, r5]
 800668a:	604b      	str	r3, [r1, #4]
 800668c:	4638      	mov	r0, r7
 800668e:	f104 060b 	add.w	r6, r4, #11
 8006692:	f000 f9b9 	bl	8006a08 <__malloc_unlock>
 8006696:	f026 0607 	bic.w	r6, r6, #7
 800669a:	1d23      	adds	r3, r4, #4
 800669c:	1af2      	subs	r2, r6, r3
 800669e:	d0ae      	beq.n	80065fe <_malloc_r+0x22>
 80066a0:	1b9b      	subs	r3, r3, r6
 80066a2:	50a3      	str	r3, [r4, r2]
 80066a4:	e7ab      	b.n	80065fe <_malloc_r+0x22>
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	6862      	ldr	r2, [r4, #4]
 80066aa:	d1dd      	bne.n	8006668 <_malloc_r+0x8c>
 80066ac:	f8c8 2000 	str.w	r2, [r8]
 80066b0:	e7ec      	b.n	800668c <_malloc_r+0xb0>
 80066b2:	4623      	mov	r3, r4
 80066b4:	6864      	ldr	r4, [r4, #4]
 80066b6:	e7ac      	b.n	8006612 <_malloc_r+0x36>
 80066b8:	4634      	mov	r4, r6
 80066ba:	6876      	ldr	r6, [r6, #4]
 80066bc:	e7b4      	b.n	8006628 <_malloc_r+0x4c>
 80066be:	4613      	mov	r3, r2
 80066c0:	e7cc      	b.n	800665c <_malloc_r+0x80>
 80066c2:	230c      	movs	r3, #12
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4638      	mov	r0, r7
 80066c8:	f000 f99e 	bl	8006a08 <__malloc_unlock>
 80066cc:	e797      	b.n	80065fe <_malloc_r+0x22>
 80066ce:	6025      	str	r5, [r4, #0]
 80066d0:	e7dc      	b.n	800668c <_malloc_r+0xb0>
 80066d2:	605b      	str	r3, [r3, #4]
 80066d4:	deff      	udf	#255	; 0xff
 80066d6:	bf00      	nop
 80066d8:	200005bc 	.word	0x200005bc

080066dc <_printf_common>:
 80066dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e0:	4616      	mov	r6, r2
 80066e2:	4699      	mov	r9, r3
 80066e4:	688a      	ldr	r2, [r1, #8]
 80066e6:	690b      	ldr	r3, [r1, #16]
 80066e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	bfb8      	it	lt
 80066f0:	4613      	movlt	r3, r2
 80066f2:	6033      	str	r3, [r6, #0]
 80066f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f8:	4607      	mov	r7, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b10a      	cbz	r2, 8006702 <_printf_common+0x26>
 80066fe:	3301      	adds	r3, #1
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	0699      	lsls	r1, r3, #26
 8006706:	bf42      	ittt	mi
 8006708:	6833      	ldrmi	r3, [r6, #0]
 800670a:	3302      	addmi	r3, #2
 800670c:	6033      	strmi	r3, [r6, #0]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	f015 0506 	ands.w	r5, r5, #6
 8006714:	d106      	bne.n	8006724 <_printf_common+0x48>
 8006716:	f104 0a19 	add.w	sl, r4, #25
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	6832      	ldr	r2, [r6, #0]
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	42ab      	cmp	r3, r5
 8006722:	dc26      	bgt.n	8006772 <_printf_common+0x96>
 8006724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006728:	1e13      	subs	r3, r2, #0
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	bf18      	it	ne
 800672e:	2301      	movne	r3, #1
 8006730:	0692      	lsls	r2, r2, #26
 8006732:	d42b      	bmi.n	800678c <_printf_common+0xb0>
 8006734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006738:	4649      	mov	r1, r9
 800673a:	4638      	mov	r0, r7
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d01e      	beq.n	8006780 <_printf_common+0xa4>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	f003 0306 	and.w	r3, r3, #6
 800674a:	2b04      	cmp	r3, #4
 800674c:	bf02      	ittt	eq
 800674e:	68e5      	ldreq	r5, [r4, #12]
 8006750:	6833      	ldreq	r3, [r6, #0]
 8006752:	1aed      	subeq	r5, r5, r3
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	bf0c      	ite	eq
 8006758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800675c:	2500      	movne	r5, #0
 800675e:	4293      	cmp	r3, r2
 8006760:	bfc4      	itt	gt
 8006762:	1a9b      	subgt	r3, r3, r2
 8006764:	18ed      	addgt	r5, r5, r3
 8006766:	2600      	movs	r6, #0
 8006768:	341a      	adds	r4, #26
 800676a:	42b5      	cmp	r5, r6
 800676c:	d11a      	bne.n	80067a4 <_printf_common+0xc8>
 800676e:	2000      	movs	r0, #0
 8006770:	e008      	b.n	8006784 <_printf_common+0xa8>
 8006772:	2301      	movs	r3, #1
 8006774:	4652      	mov	r2, sl
 8006776:	4649      	mov	r1, r9
 8006778:	4638      	mov	r0, r7
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d103      	bne.n	8006788 <_printf_common+0xac>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e7c6      	b.n	800671a <_printf_common+0x3e>
 800678c:	18e1      	adds	r1, r4, r3
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	2030      	movs	r0, #48	; 0x30
 8006792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006796:	4422      	add	r2, r4
 8006798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a0:	3302      	adds	r3, #2
 80067a2:	e7c7      	b.n	8006734 <_printf_common+0x58>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4622      	mov	r2, r4
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa4>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d9      	b.n	800676a <_printf_common+0x8e>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067c0:	2f78      	cmp	r7, #120	; 0x78
 80067c2:	4691      	mov	r9, r2
 80067c4:	4680      	mov	r8, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	469a      	mov	sl, r3
 80067ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	; 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d4 	beq.w	8006982 <_printf_i+0x1ca>
 80067da:	2f58      	cmp	r7, #88	; 0x58
 80067dc:	f000 80c0 	beq.w	8006960 <_printf_i+0x1a8>
 80067e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	; (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006969 	.word	0x08006969
 8006828:	08006891 	.word	0x08006891
 800682c:	08006923 	.word	0x08006923
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	0800698b 	.word	0x0800698b
 800683c:	080067e1 	.word	0x080067e1
 8006840:	08006891 	.word	0x08006891
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	0800692b 	.word	0x0800692b
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	602a      	str	r2, [r5, #0]
 8006858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e09f      	b.n	80069a4 <_printf_i+0x1ec>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	682b      	ldr	r3, [r5, #0]
 8006868:	0607      	lsls	r7, r0, #24
 800686a:	f103 0104 	add.w	r1, r3, #4
 800686e:	6029      	str	r1, [r5, #0]
 8006870:	d501      	bpl.n	8006876 <_printf_i+0xbe>
 8006872:	681e      	ldr	r6, [r3, #0]
 8006874:	e003      	b.n	800687e <_printf_i+0xc6>
 8006876:	0646      	lsls	r6, r0, #25
 8006878:	d5fb      	bpl.n	8006872 <_printf_i+0xba>
 800687a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800687e:	2e00      	cmp	r6, #0
 8006880:	da03      	bge.n	800688a <_printf_i+0xd2>
 8006882:	232d      	movs	r3, #45	; 0x2d
 8006884:	4276      	negs	r6, r6
 8006886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688a:	485a      	ldr	r0, [pc, #360]	; (80069f4 <_printf_i+0x23c>)
 800688c:	230a      	movs	r3, #10
 800688e:	e012      	b.n	80068b6 <_printf_i+0xfe>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	6820      	ldr	r0, [r4, #0]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	6029      	str	r1, [r5, #0]
 8006898:	0605      	lsls	r5, r0, #24
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0xe8>
 800689c:	681e      	ldr	r6, [r3, #0]
 800689e:	e002      	b.n	80068a6 <_printf_i+0xee>
 80068a0:	0641      	lsls	r1, r0, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0xe4>
 80068a4:	881e      	ldrh	r6, [r3, #0]
 80068a6:	4853      	ldr	r0, [pc, #332]	; (80069f4 <_printf_i+0x23c>)
 80068a8:	2f6f      	cmp	r7, #111	; 0x6f
 80068aa:	bf0c      	ite	eq
 80068ac:	2308      	moveq	r3, #8
 80068ae:	230a      	movne	r3, #10
 80068b0:	2100      	movs	r1, #0
 80068b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068b6:	6865      	ldr	r5, [r4, #4]
 80068b8:	60a5      	str	r5, [r4, #8]
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	bfa2      	ittt	ge
 80068be:	6821      	ldrge	r1, [r4, #0]
 80068c0:	f021 0104 	bicge.w	r1, r1, #4
 80068c4:	6021      	strge	r1, [r4, #0]
 80068c6:	b90e      	cbnz	r6, 80068cc <_printf_i+0x114>
 80068c8:	2d00      	cmp	r5, #0
 80068ca:	d04b      	beq.n	8006964 <_printf_i+0x1ac>
 80068cc:	4615      	mov	r5, r2
 80068ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80068d2:	fb03 6711 	mls	r7, r3, r1, r6
 80068d6:	5dc7      	ldrb	r7, [r0, r7]
 80068d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068dc:	4637      	mov	r7, r6
 80068de:	42bb      	cmp	r3, r7
 80068e0:	460e      	mov	r6, r1
 80068e2:	d9f4      	bls.n	80068ce <_printf_i+0x116>
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d10b      	bne.n	8006900 <_printf_i+0x148>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07de      	lsls	r6, r3, #31
 80068ec:	d508      	bpl.n	8006900 <_printf_i+0x148>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4299      	cmp	r1, r3
 80068f4:	bfde      	ittt	le
 80068f6:	2330      	movle	r3, #48	; 0x30
 80068f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006900:	1b52      	subs	r2, r2, r5
 8006902:	6122      	str	r2, [r4, #16]
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	464b      	mov	r3, r9
 800690a:	aa03      	add	r2, sp, #12
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f7ff fee4 	bl	80066dc <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	d14a      	bne.n	80069ae <_printf_i+0x1f6>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800691c:	b004      	add	sp, #16
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f043 0320 	orr.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	4833      	ldr	r0, [pc, #204]	; (80069f8 <_printf_i+0x240>)
 800692c:	2778      	movs	r7, #120	; 0x78
 800692e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	6829      	ldr	r1, [r5, #0]
 8006936:	061f      	lsls	r7, r3, #24
 8006938:	f851 6b04 	ldr.w	r6, [r1], #4
 800693c:	d402      	bmi.n	8006944 <_printf_i+0x18c>
 800693e:	065f      	lsls	r7, r3, #25
 8006940:	bf48      	it	mi
 8006942:	b2b6      	uxthmi	r6, r6
 8006944:	07df      	lsls	r7, r3, #31
 8006946:	bf48      	it	mi
 8006948:	f043 0320 	orrmi.w	r3, r3, #32
 800694c:	6029      	str	r1, [r5, #0]
 800694e:	bf48      	it	mi
 8006950:	6023      	strmi	r3, [r4, #0]
 8006952:	b91e      	cbnz	r6, 800695c <_printf_i+0x1a4>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f023 0320 	bic.w	r3, r3, #32
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	2310      	movs	r3, #16
 800695e:	e7a7      	b.n	80068b0 <_printf_i+0xf8>
 8006960:	4824      	ldr	r0, [pc, #144]	; (80069f4 <_printf_i+0x23c>)
 8006962:	e7e4      	b.n	800692e <_printf_i+0x176>
 8006964:	4615      	mov	r5, r2
 8006966:	e7bd      	b.n	80068e4 <_printf_i+0x12c>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	6826      	ldr	r6, [r4, #0]
 800696c:	6961      	ldr	r1, [r4, #20]
 800696e:	1d18      	adds	r0, r3, #4
 8006970:	6028      	str	r0, [r5, #0]
 8006972:	0635      	lsls	r5, r6, #24
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	d501      	bpl.n	800697c <_printf_i+0x1c4>
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0x1ca>
 800697c:	0670      	lsls	r0, r6, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0x1c0>
 8006980:	8019      	strh	r1, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	4615      	mov	r5, r2
 8006988:	e7bc      	b.n	8006904 <_printf_i+0x14c>
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	1d1a      	adds	r2, r3, #4
 800698e:	602a      	str	r2, [r5, #0]
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	6862      	ldr	r2, [r4, #4]
 8006994:	2100      	movs	r1, #0
 8006996:	4628      	mov	r0, r5
 8006998:	f7f9 fc42 	bl	8000220 <memchr>
 800699c:	b108      	cbz	r0, 80069a2 <_printf_i+0x1ea>
 800699e:	1b40      	subs	r0, r0, r5
 80069a0:	6060      	str	r0, [r4, #4]
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	2300      	movs	r3, #0
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ac:	e7aa      	b.n	8006904 <_printf_i+0x14c>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	462a      	mov	r2, r5
 80069b2:	4649      	mov	r1, r9
 80069b4:	4640      	mov	r0, r8
 80069b6:	47d0      	blx	sl
 80069b8:	3001      	adds	r0, #1
 80069ba:	d0ad      	beq.n	8006918 <_printf_i+0x160>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	d413      	bmi.n	80069ea <_printf_i+0x232>
 80069c2:	68e0      	ldr	r0, [r4, #12]
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	4298      	cmp	r0, r3
 80069c8:	bfb8      	it	lt
 80069ca:	4618      	movlt	r0, r3
 80069cc:	e7a6      	b.n	800691c <_printf_i+0x164>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4632      	mov	r2, r6
 80069d2:	4649      	mov	r1, r9
 80069d4:	4640      	mov	r0, r8
 80069d6:	47d0      	blx	sl
 80069d8:	3001      	adds	r0, #1
 80069da:	d09d      	beq.n	8006918 <_printf_i+0x160>
 80069dc:	3501      	adds	r5, #1
 80069de:	68e3      	ldr	r3, [r4, #12]
 80069e0:	9903      	ldr	r1, [sp, #12]
 80069e2:	1a5b      	subs	r3, r3, r1
 80069e4:	42ab      	cmp	r3, r5
 80069e6:	dcf2      	bgt.n	80069ce <_printf_i+0x216>
 80069e8:	e7eb      	b.n	80069c2 <_printf_i+0x20a>
 80069ea:	2500      	movs	r5, #0
 80069ec:	f104 0619 	add.w	r6, r4, #25
 80069f0:	e7f5      	b.n	80069de <_printf_i+0x226>
 80069f2:	bf00      	nop
 80069f4:	08008b16 	.word	0x08008b16
 80069f8:	08008b27 	.word	0x08008b27

080069fc <__malloc_lock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_lock+0x8>)
 80069fe:	f000 b980 	b.w	8006d02 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000700 	.word	0x20000700

08006a08 <__malloc_unlock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__malloc_unlock+0x8>)
 8006a0a:	f000 b97b 	b.w	8006d04 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20000700 	.word	0x20000700

08006a14 <std>:
 8006a14:	2300      	movs	r3, #0
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a22:	6083      	str	r3, [r0, #8]
 8006a24:	8181      	strh	r1, [r0, #12]
 8006a26:	6643      	str	r3, [r0, #100]	; 0x64
 8006a28:	81c2      	strh	r2, [r0, #14]
 8006a2a:	6183      	str	r3, [r0, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	305c      	adds	r0, #92	; 0x5c
 8006a32:	f000 f91f 	bl	8006c74 <memset>
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <std+0x58>)
 8006a38:	6263      	str	r3, [r4, #36]	; 0x24
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <std+0x5c>)
 8006a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <std+0x60>)
 8006a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a42:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <std+0x64>)
 8006a44:	6323      	str	r3, [r4, #48]	; 0x30
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <std+0x68>)
 8006a48:	6224      	str	r4, [r4, #32]
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d006      	beq.n	8006a5c <std+0x48>
 8006a4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a52:	4294      	cmp	r4, r2
 8006a54:	d002      	beq.n	8006a5c <std+0x48>
 8006a56:	33d0      	adds	r3, #208	; 0xd0
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	d105      	bne.n	8006a68 <std+0x54>
 8006a5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 b94c 	b.w	8006d00 <__retarget_lock_init_recursive>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08008571 	.word	0x08008571
 8006a70:	08008593 	.word	0x08008593
 8006a74:	080085cb 	.word	0x080085cb
 8006a78:	080085ef 	.word	0x080085ef
 8006a7c:	200005c4 	.word	0x200005c4

08006a80 <stdio_exit_handler>:
 8006a80:	4a02      	ldr	r2, [pc, #8]	; (8006a8c <stdio_exit_handler+0xc>)
 8006a82:	4903      	ldr	r1, [pc, #12]	; (8006a90 <stdio_exit_handler+0x10>)
 8006a84:	4803      	ldr	r0, [pc, #12]	; (8006a94 <stdio_exit_handler+0x14>)
 8006a86:	f000 b869 	b.w	8006b5c <_fwalk_sglue>
 8006a8a:	bf00      	nop
 8006a8c:	20000084 	.word	0x20000084
 8006a90:	08007e29 	.word	0x08007e29
 8006a94:	20000090 	.word	0x20000090

08006a98 <cleanup_stdio>:
 8006a98:	6841      	ldr	r1, [r0, #4]
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <cleanup_stdio+0x34>)
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	d001      	beq.n	8006aa8 <cleanup_stdio+0x10>
 8006aa4:	f001 f9c0 	bl	8007e28 <_fflush_r>
 8006aa8:	68a1      	ldr	r1, [r4, #8]
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <cleanup_stdio+0x38>)
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <cleanup_stdio+0x1e>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f001 f9b9 	bl	8007e28 <_fflush_r>
 8006ab6:	68e1      	ldr	r1, [r4, #12]
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <cleanup_stdio+0x3c>)
 8006aba:	4299      	cmp	r1, r3
 8006abc:	d004      	beq.n	8006ac8 <cleanup_stdio+0x30>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f001 b9b0 	b.w	8007e28 <_fflush_r>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	200005c4 	.word	0x200005c4
 8006ad0:	2000062c 	.word	0x2000062c
 8006ad4:	20000694 	.word	0x20000694

08006ad8 <global_stdio_init.part.0>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <global_stdio_init.part.0+0x30>)
 8006adc:	4c0b      	ldr	r4, [pc, #44]	; (8006b0c <global_stdio_init.part.0+0x34>)
 8006ade:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <global_stdio_init.part.0+0x38>)
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	f7ff ff94 	bl	8006a14 <std>
 8006aec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006af0:	2201      	movs	r2, #1
 8006af2:	2109      	movs	r1, #9
 8006af4:	f7ff ff8e 	bl	8006a14 <std>
 8006af8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006afc:	2202      	movs	r2, #2
 8006afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b02:	2112      	movs	r1, #18
 8006b04:	f7ff bf86 	b.w	8006a14 <std>
 8006b08:	200006fc 	.word	0x200006fc
 8006b0c:	200005c4 	.word	0x200005c4
 8006b10:	08006a81 	.word	0x08006a81

08006b14 <__sfp_lock_acquire>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_acquire+0x8>)
 8006b16:	f000 b8f4 	b.w	8006d02 <__retarget_lock_acquire_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000701 	.word	0x20000701

08006b20 <__sfp_lock_release>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sfp_lock_release+0x8>)
 8006b22:	f000 b8ef 	b.w	8006d04 <__retarget_lock_release_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000701 	.word	0x20000701

08006b2c <__sinit>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7ff fff0 	bl	8006b14 <__sfp_lock_acquire>
 8006b34:	6a23      	ldr	r3, [r4, #32]
 8006b36:	b11b      	cbz	r3, 8006b40 <__sinit+0x14>
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f7ff bff0 	b.w	8006b20 <__sfp_lock_release>
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__sinit+0x28>)
 8006b42:	6223      	str	r3, [r4, #32]
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <__sinit+0x2c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f5      	bne.n	8006b38 <__sinit+0xc>
 8006b4c:	f7ff ffc4 	bl	8006ad8 <global_stdio_init.part.0>
 8006b50:	e7f2      	b.n	8006b38 <__sinit+0xc>
 8006b52:	bf00      	nop
 8006b54:	08006a99 	.word	0x08006a99
 8006b58:	200006fc 	.word	0x200006fc

08006b5c <_fwalk_sglue>:
 8006b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	4607      	mov	r7, r0
 8006b62:	4688      	mov	r8, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	2600      	movs	r6, #0
 8006b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b70:	d505      	bpl.n	8006b7e <_fwalk_sglue+0x22>
 8006b72:	6824      	ldr	r4, [r4, #0]
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	d1f7      	bne.n	8006b68 <_fwalk_sglue+0xc>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d907      	bls.n	8006b94 <_fwalk_sglue+0x38>
 8006b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <_fwalk_sglue+0x38>
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c0      	blx	r8
 8006b92:	4306      	orrs	r6, r0
 8006b94:	3568      	adds	r5, #104	; 0x68
 8006b96:	e7e9      	b.n	8006b6c <_fwalk_sglue+0x10>

08006b98 <iprintf>:
 8006b98:	b40f      	push	{r0, r1, r2, r3}
 8006b9a:	b507      	push	{r0, r1, r2, lr}
 8006b9c:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <iprintf+0x20>)
 8006b9e:	ab04      	add	r3, sp, #16
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba6:	6881      	ldr	r1, [r0, #8]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f000 ff9d 	bl	8007ae8 <_vfiprintf_r>
 8006bae:	b003      	add	sp, #12
 8006bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb4:	b004      	add	sp, #16
 8006bb6:	4770      	bx	lr
 8006bb8:	200000dc 	.word	0x200000dc

08006bbc <_puts_r>:
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	6884      	ldr	r4, [r0, #8]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	460e      	mov	r6, r1
 8006bc6:	b90b      	cbnz	r3, 8006bcc <_puts_r+0x10>
 8006bc8:	f7ff ffb0 	bl	8006b2c <__sinit>
 8006bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bce:	07db      	lsls	r3, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_puts_r+0x22>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	0598      	lsls	r0, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_puts_r+0x22>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bda:	f000 f892 	bl	8006d02 <__retarget_lock_acquire_recursive>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d513      	bpl.n	8006c0c <_puts_r+0x50>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	b18b      	cbz	r3, 8006c0c <_puts_r+0x50>
 8006be8:	3e01      	subs	r6, #1
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	b9e9      	cbnz	r1, 8006c32 <_puts_r+0x76>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da2e      	bge.n	8006c58 <_puts_r+0x9c>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	210a      	movs	r1, #10
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f001 fcf9 	bl	80085f6 <__swbuf_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d007      	beq.n	8006c18 <_puts_r+0x5c>
 8006c08:	250a      	movs	r5, #10
 8006c0a:	e007      	b.n	8006c1c <_puts_r+0x60>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f001 fd2e 	bl	8008670 <__swsetup_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0e7      	beq.n	8006be8 <_puts_r+0x2c>
 8006c18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_puts_r+0x72>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_puts_r+0x72>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f000 f86b 	bl	8006d04 <__retarget_lock_release_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da04      	bge.n	8006c40 <_puts_r+0x84>
 8006c36:	69a2      	ldr	r2, [r4, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc06      	bgt.n	8006c4a <_puts_r+0x8e>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d004      	beq.n	8006c4a <_puts_r+0x8e>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	e7cf      	b.n	8006bea <_puts_r+0x2e>
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f001 fcd2 	bl	80085f6 <__swbuf_r>
 8006c52:	3001      	adds	r0, #1
 8006c54:	d1c9      	bne.n	8006bea <_puts_r+0x2e>
 8006c56:	e7df      	b.n	8006c18 <_puts_r+0x5c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	250a      	movs	r5, #10
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	701d      	strb	r5, [r3, #0]
 8006c62:	e7db      	b.n	8006c1c <_puts_r+0x60>

08006c64 <puts>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <puts+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f7ff bfa7 	b.w	8006bbc <_puts_r>
 8006c6e:	bf00      	nop
 8006c70:	200000dc 	.word	0x200000dc

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <_localeconv_r>:
 8006c84:	4800      	ldr	r0, [pc, #0]	; (8006c88 <_localeconv_r+0x4>)
 8006c86:	4770      	bx	lr
 8006c88:	200001d0 	.word	0x200001d0

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_sbrk_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7fb fc30 	bl	80024fc <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000704 	.word	0x20000704

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	200000dc 	.word	0x200000dc

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f001 feb0 	bl	8008a30 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08008e7c 	.word	0x08008e7c
 8006cf4:	08008e7c 	.word	0x08008e7c
 8006cf8:	08008e7c 	.word	0x08008e7c
 8006cfc:	08008e80 	.word	0x08008e80

08006d00 <__retarget_lock_init_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__retarget_lock_acquire_recursive>:
 8006d02:	4770      	bx	lr

08006d04 <__retarget_lock_release_recursive>:
 8006d04:	4770      	bx	lr

08006d06 <quorem>:
 8006d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	6903      	ldr	r3, [r0, #16]
 8006d0c:	690c      	ldr	r4, [r1, #16]
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	4607      	mov	r7, r0
 8006d12:	db7e      	blt.n	8006e12 <quorem+0x10c>
 8006d14:	3c01      	subs	r4, #1
 8006d16:	f101 0814 	add.w	r8, r1, #20
 8006d1a:	f100 0514 	add.w	r5, r0, #20
 8006d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d38:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d3c:	d331      	bcc.n	8006da2 <quorem+0x9c>
 8006d3e:	f04f 0e00 	mov.w	lr, #0
 8006d42:	4640      	mov	r0, r8
 8006d44:	46ac      	mov	ip, r5
 8006d46:	46f2      	mov	sl, lr
 8006d48:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d4c:	b293      	uxth	r3, r2
 8006d4e:	fb06 e303 	mla	r3, r6, r3, lr
 8006d52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d56:	0c1a      	lsrs	r2, r3, #16
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8006d5e:	f8dc a000 	ldr.w	sl, [ip]
 8006d62:	fa13 f38a 	uxtah	r3, r3, sl
 8006d66:	fb06 220e 	mla	r2, r6, lr, r2
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	9b00      	ldr	r3, [sp, #0]
 8006d6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d72:	b292      	uxth	r2, r2
 8006d74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d80:	4581      	cmp	r9, r0
 8006d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d86:	f84c 3b04 	str.w	r3, [ip], #4
 8006d8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d8e:	d2db      	bcs.n	8006d48 <quorem+0x42>
 8006d90:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d94:	b92b      	cbnz	r3, 8006da2 <quorem+0x9c>
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	d32c      	bcc.n	8006dfa <quorem+0xf4>
 8006da0:	613c      	str	r4, [r7, #16]
 8006da2:	4638      	mov	r0, r7
 8006da4:	f001 fae4 	bl	8008370 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	db22      	blt.n	8006df2 <quorem+0xec>
 8006dac:	3601      	adds	r6, #1
 8006dae:	4629      	mov	r1, r5
 8006db0:	2000      	movs	r0, #0
 8006db2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006db6:	f8d1 c000 	ldr.w	ip, [r1]
 8006dba:	b293      	uxth	r3, r2
 8006dbc:	1ac3      	subs	r3, r0, r3
 8006dbe:	0c12      	lsrs	r2, r2, #16
 8006dc0:	fa13 f38c 	uxtah	r3, r3, ip
 8006dc4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dd2:	45c1      	cmp	r9, r8
 8006dd4:	f841 3b04 	str.w	r3, [r1], #4
 8006dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ddc:	d2e9      	bcs.n	8006db2 <quorem+0xac>
 8006dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006de6:	b922      	cbnz	r2, 8006df2 <quorem+0xec>
 8006de8:	3b04      	subs	r3, #4
 8006dea:	429d      	cmp	r5, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	d30a      	bcc.n	8006e06 <quorem+0x100>
 8006df0:	613c      	str	r4, [r7, #16]
 8006df2:	4630      	mov	r0, r6
 8006df4:	b003      	add	sp, #12
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	6812      	ldr	r2, [r2, #0]
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	d1ce      	bne.n	8006da0 <quorem+0x9a>
 8006e02:	3c01      	subs	r4, #1
 8006e04:	e7c9      	b.n	8006d9a <quorem+0x94>
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	d1f0      	bne.n	8006df0 <quorem+0xea>
 8006e0e:	3c01      	subs	r4, #1
 8006e10:	e7eb      	b.n	8006dea <quorem+0xe4>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e7ee      	b.n	8006df4 <quorem+0xee>
	...

08006e18 <_dtoa_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	ed2d 8b04 	vpush	{d8-d9}
 8006e20:	69c5      	ldr	r5, [r0, #28]
 8006e22:	b093      	sub	sp, #76	; 0x4c
 8006e24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e28:	ec57 6b10 	vmov	r6, r7, d0
 8006e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e30:	9107      	str	r1, [sp, #28]
 8006e32:	4604      	mov	r4, r0
 8006e34:	920a      	str	r2, [sp, #40]	; 0x28
 8006e36:	930d      	str	r3, [sp, #52]	; 0x34
 8006e38:	b975      	cbnz	r5, 8006e58 <_dtoa_r+0x40>
 8006e3a:	2010      	movs	r0, #16
 8006e3c:	f7ff fba6 	bl	800658c <malloc>
 8006e40:	4602      	mov	r2, r0
 8006e42:	61e0      	str	r0, [r4, #28]
 8006e44:	b920      	cbnz	r0, 8006e50 <_dtoa_r+0x38>
 8006e46:	4bae      	ldr	r3, [pc, #696]	; (8007100 <_dtoa_r+0x2e8>)
 8006e48:	21ef      	movs	r1, #239	; 0xef
 8006e4a:	48ae      	ldr	r0, [pc, #696]	; (8007104 <_dtoa_r+0x2ec>)
 8006e4c:	f001 fd40 	bl	80088d0 <__assert_func>
 8006e50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e54:	6005      	str	r5, [r0, #0]
 8006e56:	60c5      	str	r5, [r0, #12]
 8006e58:	69e3      	ldr	r3, [r4, #28]
 8006e5a:	6819      	ldr	r1, [r3, #0]
 8006e5c:	b151      	cbz	r1, 8006e74 <_dtoa_r+0x5c>
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	604a      	str	r2, [r1, #4]
 8006e62:	2301      	movs	r3, #1
 8006e64:	4093      	lsls	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f001 f845 	bl	8007ef8 <_Bfree>
 8006e6e:	69e3      	ldr	r3, [r4, #28]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	1e3b      	subs	r3, r7, #0
 8006e76:	bfbb      	ittet	lt
 8006e78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e7c:	9303      	strlt	r3, [sp, #12]
 8006e7e:	2300      	movge	r3, #0
 8006e80:	2201      	movlt	r2, #1
 8006e82:	bfac      	ite	ge
 8006e84:	f8c8 3000 	strge.w	r3, [r8]
 8006e88:	f8c8 2000 	strlt.w	r2, [r8]
 8006e8c:	4b9e      	ldr	r3, [pc, #632]	; (8007108 <_dtoa_r+0x2f0>)
 8006e8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e92:	ea33 0308 	bics.w	r3, r3, r8
 8006e96:	d11b      	bne.n	8006ed0 <_dtoa_r+0xb8>
 8006e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ea4:	4333      	orrs	r3, r6
 8006ea6:	f000 8593 	beq.w	80079d0 <_dtoa_r+0xbb8>
 8006eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eac:	b963      	cbnz	r3, 8006ec8 <_dtoa_r+0xb0>
 8006eae:	4b97      	ldr	r3, [pc, #604]	; (800710c <_dtoa_r+0x2f4>)
 8006eb0:	e027      	b.n	8006f02 <_dtoa_r+0xea>
 8006eb2:	4b97      	ldr	r3, [pc, #604]	; (8007110 <_dtoa_r+0x2f8>)
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	9800      	ldr	r0, [sp, #0]
 8006ebe:	b013      	add	sp, #76	; 0x4c
 8006ec0:	ecbd 8b04 	vpop	{d8-d9}
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	4b90      	ldr	r3, [pc, #576]	; (800710c <_dtoa_r+0x2f4>)
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	3303      	adds	r3, #3
 8006ece:	e7f3      	b.n	8006eb8 <_dtoa_r+0xa0>
 8006ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	ec51 0b17 	vmov	r0, r1, d7
 8006eda:	eeb0 8a47 	vmov.f32	s16, s14
 8006ede:	eef0 8a67 	vmov.f32	s17, s15
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fe18 	bl	8000b18 <__aeabi_dcmpeq>
 8006ee8:	4681      	mov	r9, r0
 8006eea:	b160      	cbz	r0, 8006f06 <_dtoa_r+0xee>
 8006eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eee:	2301      	movs	r3, #1
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8568 	beq.w	80079ca <_dtoa_r+0xbb2>
 8006efa:	4b86      	ldr	r3, [pc, #536]	; (8007114 <_dtoa_r+0x2fc>)
 8006efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	e7da      	b.n	8006ebc <_dtoa_r+0xa4>
 8006f06:	aa10      	add	r2, sp, #64	; 0x40
 8006f08:	a911      	add	r1, sp, #68	; 0x44
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f10:	eef0 0a68 	vmov.f32	s1, s17
 8006f14:	f001 fad2 	bl	80084bc <__d2b>
 8006f18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	d07f      	beq.n	8007022 <_dtoa_r+0x20a>
 8006f22:	ee18 3a90 	vmov	r3, s17
 8006f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f2e:	ec51 0b18 	vmov	r0, r1, d8
 8006f32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006f3e:	4619      	mov	r1, r3
 8006f40:	2200      	movs	r2, #0
 8006f42:	4b75      	ldr	r3, [pc, #468]	; (8007118 <_dtoa_r+0x300>)
 8006f44:	f7f9 f9c8 	bl	80002d8 <__aeabi_dsub>
 8006f48:	a367      	add	r3, pc, #412	; (adr r3, 80070e8 <_dtoa_r+0x2d0>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f7f9 fb7b 	bl	8000648 <__aeabi_dmul>
 8006f52:	a367      	add	r3, pc, #412	; (adr r3, 80070f0 <_dtoa_r+0x2d8>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 f9c0 	bl	80002dc <__adddf3>
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	4628      	mov	r0, r5
 8006f60:	460f      	mov	r7, r1
 8006f62:	f7f9 fb07 	bl	8000574 <__aeabi_i2d>
 8006f66:	a364      	add	r3, pc, #400	; (adr r3, 80070f8 <_dtoa_r+0x2e0>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 fb6c 	bl	8000648 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f7f9 f9b0 	bl	80002dc <__adddf3>
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	460f      	mov	r7, r1
 8006f80:	f7f9 fe12 	bl	8000ba8 <__aeabi_d2iz>
 8006f84:	2200      	movs	r2, #0
 8006f86:	4683      	mov	fp, r0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	f7f9 fdcd 	bl	8000b2c <__aeabi_dcmplt>
 8006f92:	b148      	cbz	r0, 8006fa8 <_dtoa_r+0x190>
 8006f94:	4658      	mov	r0, fp
 8006f96:	f7f9 faed 	bl	8000574 <__aeabi_i2d>
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	f7f9 fdbb 	bl	8000b18 <__aeabi_dcmpeq>
 8006fa2:	b908      	cbnz	r0, 8006fa8 <_dtoa_r+0x190>
 8006fa4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006fa8:	f1bb 0f16 	cmp.w	fp, #22
 8006fac:	d857      	bhi.n	800705e <_dtoa_r+0x246>
 8006fae:	4b5b      	ldr	r3, [pc, #364]	; (800711c <_dtoa_r+0x304>)
 8006fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	ec51 0b18 	vmov	r0, r1, d8
 8006fbc:	f7f9 fdb6 	bl	8000b2c <__aeabi_dcmplt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d04e      	beq.n	8007062 <_dtoa_r+0x24a>
 8006fc4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006fc8:	2300      	movs	r3, #0
 8006fca:	930c      	str	r3, [sp, #48]	; 0x30
 8006fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fce:	1b5b      	subs	r3, r3, r5
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	bf45      	ittet	mi
 8006fd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fd8:	9305      	strmi	r3, [sp, #20]
 8006fda:	2300      	movpl	r3, #0
 8006fdc:	2300      	movmi	r3, #0
 8006fde:	9206      	str	r2, [sp, #24]
 8006fe0:	bf54      	ite	pl
 8006fe2:	9305      	strpl	r3, [sp, #20]
 8006fe4:	9306      	strmi	r3, [sp, #24]
 8006fe6:	f1bb 0f00 	cmp.w	fp, #0
 8006fea:	db3c      	blt.n	8007066 <_dtoa_r+0x24e>
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006ff2:	445b      	add	r3, fp
 8006ff4:	9306      	str	r3, [sp, #24]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	9b07      	ldr	r3, [sp, #28]
 8006ffc:	2b09      	cmp	r3, #9
 8006ffe:	d868      	bhi.n	80070d2 <_dtoa_r+0x2ba>
 8007000:	2b05      	cmp	r3, #5
 8007002:	bfc4      	itt	gt
 8007004:	3b04      	subgt	r3, #4
 8007006:	9307      	strgt	r3, [sp, #28]
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	f1a3 0302 	sub.w	r3, r3, #2
 800700e:	bfcc      	ite	gt
 8007010:	2500      	movgt	r5, #0
 8007012:	2501      	movle	r5, #1
 8007014:	2b03      	cmp	r3, #3
 8007016:	f200 8085 	bhi.w	8007124 <_dtoa_r+0x30c>
 800701a:	e8df f003 	tbb	[pc, r3]
 800701e:	3b2e      	.short	0x3b2e
 8007020:	5839      	.short	0x5839
 8007022:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007026:	441d      	add	r5, r3
 8007028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800702c:	2b20      	cmp	r3, #32
 800702e:	bfc1      	itttt	gt
 8007030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007034:	fa08 f803 	lslgt.w	r8, r8, r3
 8007038:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800703c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007040:	bfd6      	itet	le
 8007042:	f1c3 0320 	rsble	r3, r3, #32
 8007046:	ea48 0003 	orrgt.w	r0, r8, r3
 800704a:	fa06 f003 	lslle.w	r0, r6, r3
 800704e:	f7f9 fa81 	bl	8000554 <__aeabi_ui2d>
 8007052:	2201      	movs	r2, #1
 8007054:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007058:	3d01      	subs	r5, #1
 800705a:	920e      	str	r2, [sp, #56]	; 0x38
 800705c:	e76f      	b.n	8006f3e <_dtoa_r+0x126>
 800705e:	2301      	movs	r3, #1
 8007060:	e7b3      	b.n	8006fca <_dtoa_r+0x1b2>
 8007062:	900c      	str	r0, [sp, #48]	; 0x30
 8007064:	e7b2      	b.n	8006fcc <_dtoa_r+0x1b4>
 8007066:	9b05      	ldr	r3, [sp, #20]
 8007068:	eba3 030b 	sub.w	r3, r3, fp
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	f1cb 0300 	rsb	r3, fp, #0
 8007072:	9308      	str	r3, [sp, #32]
 8007074:	2300      	movs	r3, #0
 8007076:	930b      	str	r3, [sp, #44]	; 0x2c
 8007078:	e7bf      	b.n	8006ffa <_dtoa_r+0x1e2>
 800707a:	2300      	movs	r3, #0
 800707c:	9309      	str	r3, [sp, #36]	; 0x24
 800707e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	dc52      	bgt.n	800712a <_dtoa_r+0x312>
 8007084:	2301      	movs	r3, #1
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	461a      	mov	r2, r3
 800708c:	920a      	str	r2, [sp, #40]	; 0x28
 800708e:	e00b      	b.n	80070a8 <_dtoa_r+0x290>
 8007090:	2301      	movs	r3, #1
 8007092:	e7f3      	b.n	800707c <_dtoa_r+0x264>
 8007094:	2300      	movs	r3, #0
 8007096:	9309      	str	r3, [sp, #36]	; 0x24
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	445b      	add	r3, fp
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	bfb8      	it	lt
 80070a6:	2301      	movlt	r3, #1
 80070a8:	69e0      	ldr	r0, [r4, #28]
 80070aa:	2100      	movs	r1, #0
 80070ac:	2204      	movs	r2, #4
 80070ae:	f102 0614 	add.w	r6, r2, #20
 80070b2:	429e      	cmp	r6, r3
 80070b4:	d93d      	bls.n	8007132 <_dtoa_r+0x31a>
 80070b6:	6041      	str	r1, [r0, #4]
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fedd 	bl	8007e78 <_Balloc>
 80070be:	9000      	str	r0, [sp, #0]
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d139      	bne.n	8007138 <_dtoa_r+0x320>
 80070c4:	4b16      	ldr	r3, [pc, #88]	; (8007120 <_dtoa_r+0x308>)
 80070c6:	4602      	mov	r2, r0
 80070c8:	f240 11af 	movw	r1, #431	; 0x1af
 80070cc:	e6bd      	b.n	8006e4a <_dtoa_r+0x32>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e7e1      	b.n	8007096 <_dtoa_r+0x27e>
 80070d2:	2501      	movs	r5, #1
 80070d4:	2300      	movs	r3, #0
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	9509      	str	r5, [sp, #36]	; 0x24
 80070da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	2200      	movs	r2, #0
 80070e4:	2312      	movs	r3, #18
 80070e6:	e7d1      	b.n	800708c <_dtoa_r+0x274>
 80070e8:	636f4361 	.word	0x636f4361
 80070ec:	3fd287a7 	.word	0x3fd287a7
 80070f0:	8b60c8b3 	.word	0x8b60c8b3
 80070f4:	3fc68a28 	.word	0x3fc68a28
 80070f8:	509f79fb 	.word	0x509f79fb
 80070fc:	3fd34413 	.word	0x3fd34413
 8007100:	08008b45 	.word	0x08008b45
 8007104:	08008b5c 	.word	0x08008b5c
 8007108:	7ff00000 	.word	0x7ff00000
 800710c:	08008b41 	.word	0x08008b41
 8007110:	08008b38 	.word	0x08008b38
 8007114:	08008b15 	.word	0x08008b15
 8007118:	3ff80000 	.word	0x3ff80000
 800711c:	08008c58 	.word	0x08008c58
 8007120:	08008bb4 	.word	0x08008bb4
 8007124:	2301      	movs	r3, #1
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	e7d7      	b.n	80070da <_dtoa_r+0x2c2>
 800712a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	e7ba      	b.n	80070a8 <_dtoa_r+0x290>
 8007132:	3101      	adds	r1, #1
 8007134:	0052      	lsls	r2, r2, #1
 8007136:	e7ba      	b.n	80070ae <_dtoa_r+0x296>
 8007138:	69e3      	ldr	r3, [r4, #28]
 800713a:	9a00      	ldr	r2, [sp, #0]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	2b0e      	cmp	r3, #14
 8007142:	f200 80a8 	bhi.w	8007296 <_dtoa_r+0x47e>
 8007146:	2d00      	cmp	r5, #0
 8007148:	f000 80a5 	beq.w	8007296 <_dtoa_r+0x47e>
 800714c:	f1bb 0f00 	cmp.w	fp, #0
 8007150:	dd38      	ble.n	80071c4 <_dtoa_r+0x3ac>
 8007152:	4bc0      	ldr	r3, [pc, #768]	; (8007454 <_dtoa_r+0x63c>)
 8007154:	f00b 020f 	and.w	r2, fp, #15
 8007158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007160:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007164:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007168:	d019      	beq.n	800719e <_dtoa_r+0x386>
 800716a:	4bbb      	ldr	r3, [pc, #748]	; (8007458 <_dtoa_r+0x640>)
 800716c:	ec51 0b18 	vmov	r0, r1, d8
 8007170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007174:	f7f9 fb92 	bl	800089c <__aeabi_ddiv>
 8007178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717c:	f008 080f 	and.w	r8, r8, #15
 8007180:	2503      	movs	r5, #3
 8007182:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007458 <_dtoa_r+0x640>
 8007186:	f1b8 0f00 	cmp.w	r8, #0
 800718a:	d10a      	bne.n	80071a2 <_dtoa_r+0x38a>
 800718c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	f7f9 fb82 	bl	800089c <__aeabi_ddiv>
 8007198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800719c:	e02b      	b.n	80071f6 <_dtoa_r+0x3de>
 800719e:	2502      	movs	r5, #2
 80071a0:	e7ef      	b.n	8007182 <_dtoa_r+0x36a>
 80071a2:	f018 0f01 	tst.w	r8, #1
 80071a6:	d008      	beq.n	80071ba <_dtoa_r+0x3a2>
 80071a8:	4630      	mov	r0, r6
 80071aa:	4639      	mov	r1, r7
 80071ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80071b0:	f7f9 fa4a 	bl	8000648 <__aeabi_dmul>
 80071b4:	3501      	adds	r5, #1
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80071be:	f109 0908 	add.w	r9, r9, #8
 80071c2:	e7e0      	b.n	8007186 <_dtoa_r+0x36e>
 80071c4:	f000 809f 	beq.w	8007306 <_dtoa_r+0x4ee>
 80071c8:	f1cb 0600 	rsb	r6, fp, #0
 80071cc:	4ba1      	ldr	r3, [pc, #644]	; (8007454 <_dtoa_r+0x63c>)
 80071ce:	4fa2      	ldr	r7, [pc, #648]	; (8007458 <_dtoa_r+0x640>)
 80071d0:	f006 020f 	and.w	r2, r6, #15
 80071d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	ec51 0b18 	vmov	r0, r1, d8
 80071e0:	f7f9 fa32 	bl	8000648 <__aeabi_dmul>
 80071e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071e8:	1136      	asrs	r6, r6, #4
 80071ea:	2300      	movs	r3, #0
 80071ec:	2502      	movs	r5, #2
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d17e      	bne.n	80072f0 <_dtoa_r+0x4d8>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1d0      	bne.n	8007198 <_dtoa_r+0x380>
 80071f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8084 	beq.w	800730a <_dtoa_r+0x4f2>
 8007202:	4b96      	ldr	r3, [pc, #600]	; (800745c <_dtoa_r+0x644>)
 8007204:	2200      	movs	r2, #0
 8007206:	4640      	mov	r0, r8
 8007208:	4649      	mov	r1, r9
 800720a:	f7f9 fc8f 	bl	8000b2c <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	d07b      	beq.n	800730a <_dtoa_r+0x4f2>
 8007212:	9b04      	ldr	r3, [sp, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d078      	beq.n	800730a <_dtoa_r+0x4f2>
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd39      	ble.n	8007292 <_dtoa_r+0x47a>
 800721e:	4b90      	ldr	r3, [pc, #576]	; (8007460 <_dtoa_r+0x648>)
 8007220:	2200      	movs	r2, #0
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 fa0f 	bl	8000648 <__aeabi_dmul>
 800722a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800722e:	9e01      	ldr	r6, [sp, #4]
 8007230:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007234:	3501      	adds	r5, #1
 8007236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800723a:	4628      	mov	r0, r5
 800723c:	f7f9 f99a 	bl	8000574 <__aeabi_i2d>
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	f7f9 fa00 	bl	8000648 <__aeabi_dmul>
 8007248:	4b86      	ldr	r3, [pc, #536]	; (8007464 <_dtoa_r+0x64c>)
 800724a:	2200      	movs	r2, #0
 800724c:	f7f9 f846 	bl	80002dc <__adddf3>
 8007250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	2e00      	cmp	r6, #0
 800725c:	d158      	bne.n	8007310 <_dtoa_r+0x4f8>
 800725e:	4b82      	ldr	r3, [pc, #520]	; (8007468 <_dtoa_r+0x650>)
 8007260:	2200      	movs	r2, #0
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f9 f837 	bl	80002d8 <__aeabi_dsub>
 800726a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800726e:	4680      	mov	r8, r0
 8007270:	4689      	mov	r9, r1
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_dcmpgt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8296 	bne.w	80077a8 <_dtoa_r+0x990>
 800727c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007280:	4640      	mov	r0, r8
 8007282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	f040 8289 	bne.w	80077a4 <_dtoa_r+0x98c>
 8007292:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007298:	2b00      	cmp	r3, #0
 800729a:	f2c0 814e 	blt.w	800753a <_dtoa_r+0x722>
 800729e:	f1bb 0f0e 	cmp.w	fp, #14
 80072a2:	f300 814a 	bgt.w	800753a <_dtoa_r+0x722>
 80072a6:	4b6b      	ldr	r3, [pc, #428]	; (8007454 <_dtoa_r+0x63c>)
 80072a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f280 80dc 	bge.w	8007470 <_dtoa_r+0x658>
 80072b8:	9b04      	ldr	r3, [sp, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f300 80d8 	bgt.w	8007470 <_dtoa_r+0x658>
 80072c0:	f040 826f 	bne.w	80077a2 <_dtoa_r+0x98a>
 80072c4:	4b68      	ldr	r3, [pc, #416]	; (8007468 <_dtoa_r+0x650>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f9 f9bc 	bl	8000648 <__aeabi_dmul>
 80072d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d4:	f7f9 fc3e 	bl	8000b54 <__aeabi_dcmpge>
 80072d8:	9e04      	ldr	r6, [sp, #16]
 80072da:	4637      	mov	r7, r6
 80072dc:	2800      	cmp	r0, #0
 80072de:	f040 8245 	bne.w	800776c <_dtoa_r+0x954>
 80072e2:	9d00      	ldr	r5, [sp, #0]
 80072e4:	2331      	movs	r3, #49	; 0x31
 80072e6:	f805 3b01 	strb.w	r3, [r5], #1
 80072ea:	f10b 0b01 	add.w	fp, fp, #1
 80072ee:	e241      	b.n	8007774 <_dtoa_r+0x95c>
 80072f0:	07f2      	lsls	r2, r6, #31
 80072f2:	d505      	bpl.n	8007300 <_dtoa_r+0x4e8>
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	f7f9 f9a6 	bl	8000648 <__aeabi_dmul>
 80072fc:	3501      	adds	r5, #1
 80072fe:	2301      	movs	r3, #1
 8007300:	1076      	asrs	r6, r6, #1
 8007302:	3708      	adds	r7, #8
 8007304:	e773      	b.n	80071ee <_dtoa_r+0x3d6>
 8007306:	2502      	movs	r5, #2
 8007308:	e775      	b.n	80071f6 <_dtoa_r+0x3de>
 800730a:	9e04      	ldr	r6, [sp, #16]
 800730c:	465f      	mov	r7, fp
 800730e:	e792      	b.n	8007236 <_dtoa_r+0x41e>
 8007310:	9900      	ldr	r1, [sp, #0]
 8007312:	4b50      	ldr	r3, [pc, #320]	; (8007454 <_dtoa_r+0x63c>)
 8007314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007318:	4431      	add	r1, r6
 800731a:	9102      	str	r1, [sp, #8]
 800731c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800731e:	eeb0 9a47 	vmov.f32	s18, s14
 8007322:	eef0 9a67 	vmov.f32	s19, s15
 8007326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800732a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800732e:	2900      	cmp	r1, #0
 8007330:	d044      	beq.n	80073bc <_dtoa_r+0x5a4>
 8007332:	494e      	ldr	r1, [pc, #312]	; (800746c <_dtoa_r+0x654>)
 8007334:	2000      	movs	r0, #0
 8007336:	f7f9 fab1 	bl	800089c <__aeabi_ddiv>
 800733a:	ec53 2b19 	vmov	r2, r3, d9
 800733e:	f7f8 ffcb 	bl	80002d8 <__aeabi_dsub>
 8007342:	9d00      	ldr	r5, [sp, #0]
 8007344:	ec41 0b19 	vmov	d9, r0, r1
 8007348:	4649      	mov	r1, r9
 800734a:	4640      	mov	r0, r8
 800734c:	f7f9 fc2c 	bl	8000ba8 <__aeabi_d2iz>
 8007350:	4606      	mov	r6, r0
 8007352:	f7f9 f90f 	bl	8000574 <__aeabi_i2d>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4640      	mov	r0, r8
 800735c:	4649      	mov	r1, r9
 800735e:	f7f8 ffbb 	bl	80002d8 <__aeabi_dsub>
 8007362:	3630      	adds	r6, #48	; 0x30
 8007364:	f805 6b01 	strb.w	r6, [r5], #1
 8007368:	ec53 2b19 	vmov	r2, r3, d9
 800736c:	4680      	mov	r8, r0
 800736e:	4689      	mov	r9, r1
 8007370:	f7f9 fbdc 	bl	8000b2c <__aeabi_dcmplt>
 8007374:	2800      	cmp	r0, #0
 8007376:	d164      	bne.n	8007442 <_dtoa_r+0x62a>
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	4937      	ldr	r1, [pc, #220]	; (800745c <_dtoa_r+0x644>)
 800737e:	2000      	movs	r0, #0
 8007380:	f7f8 ffaa 	bl	80002d8 <__aeabi_dsub>
 8007384:	ec53 2b19 	vmov	r2, r3, d9
 8007388:	f7f9 fbd0 	bl	8000b2c <__aeabi_dcmplt>
 800738c:	2800      	cmp	r0, #0
 800738e:	f040 80b6 	bne.w	80074fe <_dtoa_r+0x6e6>
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	429d      	cmp	r5, r3
 8007396:	f43f af7c 	beq.w	8007292 <_dtoa_r+0x47a>
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <_dtoa_r+0x648>)
 800739c:	ec51 0b19 	vmov	r0, r1, d9
 80073a0:	2200      	movs	r2, #0
 80073a2:	f7f9 f951 	bl	8000648 <__aeabi_dmul>
 80073a6:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <_dtoa_r+0x648>)
 80073a8:	ec41 0b19 	vmov	d9, r0, r1
 80073ac:	2200      	movs	r2, #0
 80073ae:	4640      	mov	r0, r8
 80073b0:	4649      	mov	r1, r9
 80073b2:	f7f9 f949 	bl	8000648 <__aeabi_dmul>
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	e7c5      	b.n	8007348 <_dtoa_r+0x530>
 80073bc:	ec51 0b17 	vmov	r0, r1, d7
 80073c0:	f7f9 f942 	bl	8000648 <__aeabi_dmul>
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	9d00      	ldr	r5, [sp, #0]
 80073c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80073ca:	ec41 0b19 	vmov	d9, r0, r1
 80073ce:	4649      	mov	r1, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	f7f9 fbe9 	bl	8000ba8 <__aeabi_d2iz>
 80073d6:	4606      	mov	r6, r0
 80073d8:	f7f9 f8cc 	bl	8000574 <__aeabi_i2d>
 80073dc:	3630      	adds	r6, #48	; 0x30
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f8 ff77 	bl	80002d8 <__aeabi_dsub>
 80073ea:	f805 6b01 	strb.w	r6, [r5], #1
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	429d      	cmp	r5, r3
 80073f2:	4680      	mov	r8, r0
 80073f4:	4689      	mov	r9, r1
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	d124      	bne.n	8007446 <_dtoa_r+0x62e>
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <_dtoa_r+0x654>)
 80073fe:	ec51 0b19 	vmov	r0, r1, d9
 8007402:	f7f8 ff6b 	bl	80002dc <__adddf3>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4640      	mov	r0, r8
 800740c:	4649      	mov	r1, r9
 800740e:	f7f9 fbab 	bl	8000b68 <__aeabi_dcmpgt>
 8007412:	2800      	cmp	r0, #0
 8007414:	d173      	bne.n	80074fe <_dtoa_r+0x6e6>
 8007416:	ec53 2b19 	vmov	r2, r3, d9
 800741a:	4914      	ldr	r1, [pc, #80]	; (800746c <_dtoa_r+0x654>)
 800741c:	2000      	movs	r0, #0
 800741e:	f7f8 ff5b 	bl	80002d8 <__aeabi_dsub>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f9 fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f43f af2f 	beq.w	8007292 <_dtoa_r+0x47a>
 8007434:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007436:	1e6b      	subs	r3, r5, #1
 8007438:	930f      	str	r3, [sp, #60]	; 0x3c
 800743a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800743e:	2b30      	cmp	r3, #48	; 0x30
 8007440:	d0f8      	beq.n	8007434 <_dtoa_r+0x61c>
 8007442:	46bb      	mov	fp, r7
 8007444:	e04a      	b.n	80074dc <_dtoa_r+0x6c4>
 8007446:	4b06      	ldr	r3, [pc, #24]	; (8007460 <_dtoa_r+0x648>)
 8007448:	f7f9 f8fe 	bl	8000648 <__aeabi_dmul>
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	e7bd      	b.n	80073ce <_dtoa_r+0x5b6>
 8007452:	bf00      	nop
 8007454:	08008c58 	.word	0x08008c58
 8007458:	08008c30 	.word	0x08008c30
 800745c:	3ff00000 	.word	0x3ff00000
 8007460:	40240000 	.word	0x40240000
 8007464:	401c0000 	.word	0x401c0000
 8007468:	40140000 	.word	0x40140000
 800746c:	3fe00000 	.word	0x3fe00000
 8007470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007474:	9d00      	ldr	r5, [sp, #0]
 8007476:	4642      	mov	r2, r8
 8007478:	464b      	mov	r3, r9
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f9 fa0d 	bl	800089c <__aeabi_ddiv>
 8007482:	f7f9 fb91 	bl	8000ba8 <__aeabi_d2iz>
 8007486:	9001      	str	r0, [sp, #4]
 8007488:	f7f9 f874 	bl	8000574 <__aeabi_i2d>
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	f7f9 f8da 	bl	8000648 <__aeabi_dmul>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f8 ff1c 	bl	80002d8 <__aeabi_dsub>
 80074a0:	9e01      	ldr	r6, [sp, #4]
 80074a2:	9f04      	ldr	r7, [sp, #16]
 80074a4:	3630      	adds	r6, #48	; 0x30
 80074a6:	f805 6b01 	strb.w	r6, [r5], #1
 80074aa:	9e00      	ldr	r6, [sp, #0]
 80074ac:	1bae      	subs	r6, r5, r6
 80074ae:	42b7      	cmp	r7, r6
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	d134      	bne.n	8007520 <_dtoa_r+0x708>
 80074b6:	f7f8 ff11 	bl	80002dc <__adddf3>
 80074ba:	4642      	mov	r2, r8
 80074bc:	464b      	mov	r3, r9
 80074be:	4606      	mov	r6, r0
 80074c0:	460f      	mov	r7, r1
 80074c2:	f7f9 fb51 	bl	8000b68 <__aeabi_dcmpgt>
 80074c6:	b9c8      	cbnz	r0, 80074fc <_dtoa_r+0x6e4>
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 fb22 	bl	8000b18 <__aeabi_dcmpeq>
 80074d4:	b110      	cbz	r0, 80074dc <_dtoa_r+0x6c4>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	07db      	lsls	r3, r3, #31
 80074da:	d40f      	bmi.n	80074fc <_dtoa_r+0x6e4>
 80074dc:	4651      	mov	r1, sl
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fd0a 	bl	8007ef8 <_Bfree>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074e8:	702b      	strb	r3, [r5, #0]
 80074ea:	f10b 0301 	add.w	r3, fp, #1
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f43f ace2 	beq.w	8006ebc <_dtoa_r+0xa4>
 80074f8:	601d      	str	r5, [r3, #0]
 80074fa:	e4df      	b.n	8006ebc <_dtoa_r+0xa4>
 80074fc:	465f      	mov	r7, fp
 80074fe:	462b      	mov	r3, r5
 8007500:	461d      	mov	r5, r3
 8007502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007506:	2a39      	cmp	r2, #57	; 0x39
 8007508:	d106      	bne.n	8007518 <_dtoa_r+0x700>
 800750a:	9a00      	ldr	r2, [sp, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d1f7      	bne.n	8007500 <_dtoa_r+0x6e8>
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	2230      	movs	r2, #48	; 0x30
 8007514:	3701      	adds	r7, #1
 8007516:	700a      	strb	r2, [r1, #0]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	3201      	adds	r2, #1
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e790      	b.n	8007442 <_dtoa_r+0x62a>
 8007520:	4ba3      	ldr	r3, [pc, #652]	; (80077b0 <_dtoa_r+0x998>)
 8007522:	2200      	movs	r2, #0
 8007524:	f7f9 f890 	bl	8000648 <__aeabi_dmul>
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	f7f9 faf2 	bl	8000b18 <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d09e      	beq.n	8007476 <_dtoa_r+0x65e>
 8007538:	e7d0      	b.n	80074dc <_dtoa_r+0x6c4>
 800753a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800753c:	2a00      	cmp	r2, #0
 800753e:	f000 80ca 	beq.w	80076d6 <_dtoa_r+0x8be>
 8007542:	9a07      	ldr	r2, [sp, #28]
 8007544:	2a01      	cmp	r2, #1
 8007546:	f300 80ad 	bgt.w	80076a4 <_dtoa_r+0x88c>
 800754a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800754c:	2a00      	cmp	r2, #0
 800754e:	f000 80a5 	beq.w	800769c <_dtoa_r+0x884>
 8007552:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007556:	9e08      	ldr	r6, [sp, #32]
 8007558:	9d05      	ldr	r5, [sp, #20]
 800755a:	9a05      	ldr	r2, [sp, #20]
 800755c:	441a      	add	r2, r3
 800755e:	9205      	str	r2, [sp, #20]
 8007560:	9a06      	ldr	r2, [sp, #24]
 8007562:	2101      	movs	r1, #1
 8007564:	441a      	add	r2, r3
 8007566:	4620      	mov	r0, r4
 8007568:	9206      	str	r2, [sp, #24]
 800756a:	f000 fd7b 	bl	8008064 <__i2b>
 800756e:	4607      	mov	r7, r0
 8007570:	b165      	cbz	r5, 800758c <_dtoa_r+0x774>
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd09      	ble.n	800758c <_dtoa_r+0x774>
 8007578:	42ab      	cmp	r3, r5
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	bfa8      	it	ge
 800757e:	462b      	movge	r3, r5
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	9205      	str	r2, [sp, #20]
 8007584:	9a06      	ldr	r2, [sp, #24]
 8007586:	1aed      	subs	r5, r5, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	9306      	str	r3, [sp, #24]
 800758c:	9b08      	ldr	r3, [sp, #32]
 800758e:	b1f3      	cbz	r3, 80075ce <_dtoa_r+0x7b6>
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 80a3 	beq.w	80076de <_dtoa_r+0x8c6>
 8007598:	2e00      	cmp	r6, #0
 800759a:	dd10      	ble.n	80075be <_dtoa_r+0x7a6>
 800759c:	4639      	mov	r1, r7
 800759e:	4632      	mov	r2, r6
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fe1f 	bl	80081e4 <__pow5mult>
 80075a6:	4652      	mov	r2, sl
 80075a8:	4601      	mov	r1, r0
 80075aa:	4607      	mov	r7, r0
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fd6f 	bl	8008090 <__multiply>
 80075b2:	4651      	mov	r1, sl
 80075b4:	4680      	mov	r8, r0
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 fc9e 	bl	8007ef8 <_Bfree>
 80075bc:	46c2      	mov	sl, r8
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	1b9a      	subs	r2, r3, r6
 80075c2:	d004      	beq.n	80075ce <_dtoa_r+0x7b6>
 80075c4:	4651      	mov	r1, sl
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fe0c 	bl	80081e4 <__pow5mult>
 80075cc:	4682      	mov	sl, r0
 80075ce:	2101      	movs	r1, #1
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fd47 	bl	8008064 <__i2b>
 80075d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	4606      	mov	r6, r0
 80075dc:	f340 8081 	ble.w	80076e2 <_dtoa_r+0x8ca>
 80075e0:	461a      	mov	r2, r3
 80075e2:	4601      	mov	r1, r0
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fdfd 	bl	80081e4 <__pow5mult>
 80075ea:	9b07      	ldr	r3, [sp, #28]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	4606      	mov	r6, r0
 80075f0:	dd7a      	ble.n	80076e8 <_dtoa_r+0x8d0>
 80075f2:	f04f 0800 	mov.w	r8, #0
 80075f6:	6933      	ldr	r3, [r6, #16]
 80075f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075fc:	6918      	ldr	r0, [r3, #16]
 80075fe:	f000 fce3 	bl	8007fc8 <__hi0bits>
 8007602:	f1c0 0020 	rsb	r0, r0, #32
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	4418      	add	r0, r3
 800760a:	f010 001f 	ands.w	r0, r0, #31
 800760e:	f000 8094 	beq.w	800773a <_dtoa_r+0x922>
 8007612:	f1c0 0320 	rsb	r3, r0, #32
 8007616:	2b04      	cmp	r3, #4
 8007618:	f340 8085 	ble.w	8007726 <_dtoa_r+0x90e>
 800761c:	9b05      	ldr	r3, [sp, #20]
 800761e:	f1c0 001c 	rsb	r0, r0, #28
 8007622:	4403      	add	r3, r0
 8007624:	9305      	str	r3, [sp, #20]
 8007626:	9b06      	ldr	r3, [sp, #24]
 8007628:	4403      	add	r3, r0
 800762a:	4405      	add	r5, r0
 800762c:	9306      	str	r3, [sp, #24]
 800762e:	9b05      	ldr	r3, [sp, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	dd05      	ble.n	8007640 <_dtoa_r+0x828>
 8007634:	4651      	mov	r1, sl
 8007636:	461a      	mov	r2, r3
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fe2d 	bl	8008298 <__lshift>
 800763e:	4682      	mov	sl, r0
 8007640:	9b06      	ldr	r3, [sp, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	dd05      	ble.n	8007652 <_dtoa_r+0x83a>
 8007646:	4631      	mov	r1, r6
 8007648:	461a      	mov	r2, r3
 800764a:	4620      	mov	r0, r4
 800764c:	f000 fe24 	bl	8008298 <__lshift>
 8007650:	4606      	mov	r6, r0
 8007652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d072      	beq.n	800773e <_dtoa_r+0x926>
 8007658:	4631      	mov	r1, r6
 800765a:	4650      	mov	r0, sl
 800765c:	f000 fe88 	bl	8008370 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	da6c      	bge.n	800773e <_dtoa_r+0x926>
 8007664:	2300      	movs	r3, #0
 8007666:	4651      	mov	r1, sl
 8007668:	220a      	movs	r2, #10
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fc66 	bl	8007f3c <__multadd>
 8007670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007672:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007676:	4682      	mov	sl, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 81b0 	beq.w	80079de <_dtoa_r+0xbc6>
 800767e:	2300      	movs	r3, #0
 8007680:	4639      	mov	r1, r7
 8007682:	220a      	movs	r2, #10
 8007684:	4620      	mov	r0, r4
 8007686:	f000 fc59 	bl	8007f3c <__multadd>
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	4607      	mov	r7, r0
 8007690:	f300 8096 	bgt.w	80077c0 <_dtoa_r+0x9a8>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b02      	cmp	r3, #2
 8007698:	dc59      	bgt.n	800774e <_dtoa_r+0x936>
 800769a:	e091      	b.n	80077c0 <_dtoa_r+0x9a8>
 800769c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800769e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076a2:	e758      	b.n	8007556 <_dtoa_r+0x73e>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	1e5e      	subs	r6, r3, #1
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	42b3      	cmp	r3, r6
 80076ac:	bfbf      	itttt	lt
 80076ae:	9b08      	ldrlt	r3, [sp, #32]
 80076b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80076b2:	9608      	strlt	r6, [sp, #32]
 80076b4:	1af3      	sublt	r3, r6, r3
 80076b6:	bfb4      	ite	lt
 80076b8:	18d2      	addlt	r2, r2, r3
 80076ba:	1b9e      	subge	r6, r3, r6
 80076bc:	9b04      	ldr	r3, [sp, #16]
 80076be:	bfbc      	itt	lt
 80076c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80076c2:	2600      	movlt	r6, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bfb7      	itett	lt
 80076c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80076cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80076d0:	1a9d      	sublt	r5, r3, r2
 80076d2:	2300      	movlt	r3, #0
 80076d4:	e741      	b.n	800755a <_dtoa_r+0x742>
 80076d6:	9e08      	ldr	r6, [sp, #32]
 80076d8:	9d05      	ldr	r5, [sp, #20]
 80076da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076dc:	e748      	b.n	8007570 <_dtoa_r+0x758>
 80076de:	9a08      	ldr	r2, [sp, #32]
 80076e0:	e770      	b.n	80075c4 <_dtoa_r+0x7ac>
 80076e2:	9b07      	ldr	r3, [sp, #28]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	dc19      	bgt.n	800771c <_dtoa_r+0x904>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	b9bb      	cbnz	r3, 800771c <_dtoa_r+0x904>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f2:	b99b      	cbnz	r3, 800771c <_dtoa_r+0x904>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076fa:	0d1b      	lsrs	r3, r3, #20
 80076fc:	051b      	lsls	r3, r3, #20
 80076fe:	b183      	cbz	r3, 8007722 <_dtoa_r+0x90a>
 8007700:	9b05      	ldr	r3, [sp, #20]
 8007702:	3301      	adds	r3, #1
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	9b06      	ldr	r3, [sp, #24]
 8007708:	3301      	adds	r3, #1
 800770a:	9306      	str	r3, [sp, #24]
 800770c:	f04f 0801 	mov.w	r8, #1
 8007710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	f47f af6f 	bne.w	80075f6 <_dtoa_r+0x7de>
 8007718:	2001      	movs	r0, #1
 800771a:	e774      	b.n	8007606 <_dtoa_r+0x7ee>
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	e7f6      	b.n	8007710 <_dtoa_r+0x8f8>
 8007722:	4698      	mov	r8, r3
 8007724:	e7f4      	b.n	8007710 <_dtoa_r+0x8f8>
 8007726:	d082      	beq.n	800762e <_dtoa_r+0x816>
 8007728:	9a05      	ldr	r2, [sp, #20]
 800772a:	331c      	adds	r3, #28
 800772c:	441a      	add	r2, r3
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	441a      	add	r2, r3
 8007734:	441d      	add	r5, r3
 8007736:	9206      	str	r2, [sp, #24]
 8007738:	e779      	b.n	800762e <_dtoa_r+0x816>
 800773a:	4603      	mov	r3, r0
 800773c:	e7f4      	b.n	8007728 <_dtoa_r+0x910>
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc37      	bgt.n	80077b4 <_dtoa_r+0x99c>
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	2b02      	cmp	r3, #2
 8007748:	dd34      	ble.n	80077b4 <_dtoa_r+0x99c>
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	b963      	cbnz	r3, 800776c <_dtoa_r+0x954>
 8007752:	4631      	mov	r1, r6
 8007754:	2205      	movs	r2, #5
 8007756:	4620      	mov	r0, r4
 8007758:	f000 fbf0 	bl	8007f3c <__multadd>
 800775c:	4601      	mov	r1, r0
 800775e:	4606      	mov	r6, r0
 8007760:	4650      	mov	r0, sl
 8007762:	f000 fe05 	bl	8008370 <__mcmp>
 8007766:	2800      	cmp	r0, #0
 8007768:	f73f adbb 	bgt.w	80072e2 <_dtoa_r+0x4ca>
 800776c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776e:	9d00      	ldr	r5, [sp, #0]
 8007770:	ea6f 0b03 	mvn.w	fp, r3
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	4631      	mov	r1, r6
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fbbc 	bl	8007ef8 <_Bfree>
 8007780:	2f00      	cmp	r7, #0
 8007782:	f43f aeab 	beq.w	80074dc <_dtoa_r+0x6c4>
 8007786:	f1b8 0f00 	cmp.w	r8, #0
 800778a:	d005      	beq.n	8007798 <_dtoa_r+0x980>
 800778c:	45b8      	cmp	r8, r7
 800778e:	d003      	beq.n	8007798 <_dtoa_r+0x980>
 8007790:	4641      	mov	r1, r8
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fbb0 	bl	8007ef8 <_Bfree>
 8007798:	4639      	mov	r1, r7
 800779a:	4620      	mov	r0, r4
 800779c:	f000 fbac 	bl	8007ef8 <_Bfree>
 80077a0:	e69c      	b.n	80074dc <_dtoa_r+0x6c4>
 80077a2:	2600      	movs	r6, #0
 80077a4:	4637      	mov	r7, r6
 80077a6:	e7e1      	b.n	800776c <_dtoa_r+0x954>
 80077a8:	46bb      	mov	fp, r7
 80077aa:	4637      	mov	r7, r6
 80077ac:	e599      	b.n	80072e2 <_dtoa_r+0x4ca>
 80077ae:	bf00      	nop
 80077b0:	40240000 	.word	0x40240000
 80077b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80c8 	beq.w	800794c <_dtoa_r+0xb34>
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	dd05      	ble.n	80077d0 <_dtoa_r+0x9b8>
 80077c4:	4639      	mov	r1, r7
 80077c6:	462a      	mov	r2, r5
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fd65 	bl	8008298 <__lshift>
 80077ce:	4607      	mov	r7, r0
 80077d0:	f1b8 0f00 	cmp.w	r8, #0
 80077d4:	d05b      	beq.n	800788e <_dtoa_r+0xa76>
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fb4d 	bl	8007e78 <_Balloc>
 80077de:	4605      	mov	r5, r0
 80077e0:	b928      	cbnz	r0, 80077ee <_dtoa_r+0x9d6>
 80077e2:	4b83      	ldr	r3, [pc, #524]	; (80079f0 <_dtoa_r+0xbd8>)
 80077e4:	4602      	mov	r2, r0
 80077e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80077ea:	f7ff bb2e 	b.w	8006e4a <_dtoa_r+0x32>
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	3202      	adds	r2, #2
 80077f2:	0092      	lsls	r2, r2, #2
 80077f4:	f107 010c 	add.w	r1, r7, #12
 80077f8:	300c      	adds	r0, #12
 80077fa:	f001 f85b 	bl	80088b4 <memcpy>
 80077fe:	2201      	movs	r2, #1
 8007800:	4629      	mov	r1, r5
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fd48 	bl	8008298 <__lshift>
 8007808:	9b00      	ldr	r3, [sp, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007812:	4413      	add	r3, r2
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	46b8      	mov	r8, r7
 800781e:	9306      	str	r3, [sp, #24]
 8007820:	4607      	mov	r7, r0
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	4631      	mov	r1, r6
 8007826:	3b01      	subs	r3, #1
 8007828:	4650      	mov	r0, sl
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	f7ff fa6b 	bl	8006d06 <quorem>
 8007830:	4641      	mov	r1, r8
 8007832:	9002      	str	r0, [sp, #8]
 8007834:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007838:	4650      	mov	r0, sl
 800783a:	f000 fd99 	bl	8008370 <__mcmp>
 800783e:	463a      	mov	r2, r7
 8007840:	9005      	str	r0, [sp, #20]
 8007842:	4631      	mov	r1, r6
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fdaf 	bl	80083a8 <__mdiff>
 800784a:	68c2      	ldr	r2, [r0, #12]
 800784c:	4605      	mov	r5, r0
 800784e:	bb02      	cbnz	r2, 8007892 <_dtoa_r+0xa7a>
 8007850:	4601      	mov	r1, r0
 8007852:	4650      	mov	r0, sl
 8007854:	f000 fd8c 	bl	8008370 <__mcmp>
 8007858:	4602      	mov	r2, r0
 800785a:	4629      	mov	r1, r5
 800785c:	4620      	mov	r0, r4
 800785e:	9209      	str	r2, [sp, #36]	; 0x24
 8007860:	f000 fb4a 	bl	8007ef8 <_Bfree>
 8007864:	9b07      	ldr	r3, [sp, #28]
 8007866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007868:	9d04      	ldr	r5, [sp, #16]
 800786a:	ea43 0102 	orr.w	r1, r3, r2
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	4319      	orrs	r1, r3
 8007872:	d110      	bne.n	8007896 <_dtoa_r+0xa7e>
 8007874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007878:	d029      	beq.n	80078ce <_dtoa_r+0xab6>
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	dd02      	ble.n	8007886 <_dtoa_r+0xa6e>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	f883 9000 	strb.w	r9, [r3]
 800788c:	e774      	b.n	8007778 <_dtoa_r+0x960>
 800788e:	4638      	mov	r0, r7
 8007890:	e7ba      	b.n	8007808 <_dtoa_r+0x9f0>
 8007892:	2201      	movs	r2, #1
 8007894:	e7e1      	b.n	800785a <_dtoa_r+0xa42>
 8007896:	9b05      	ldr	r3, [sp, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	db04      	blt.n	80078a6 <_dtoa_r+0xa8e>
 800789c:	9907      	ldr	r1, [sp, #28]
 800789e:	430b      	orrs	r3, r1
 80078a0:	9906      	ldr	r1, [sp, #24]
 80078a2:	430b      	orrs	r3, r1
 80078a4:	d120      	bne.n	80078e8 <_dtoa_r+0xad0>
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	dded      	ble.n	8007886 <_dtoa_r+0xa6e>
 80078aa:	4651      	mov	r1, sl
 80078ac:	2201      	movs	r2, #1
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 fcf2 	bl	8008298 <__lshift>
 80078b4:	4631      	mov	r1, r6
 80078b6:	4682      	mov	sl, r0
 80078b8:	f000 fd5a 	bl	8008370 <__mcmp>
 80078bc:	2800      	cmp	r0, #0
 80078be:	dc03      	bgt.n	80078c8 <_dtoa_r+0xab0>
 80078c0:	d1e1      	bne.n	8007886 <_dtoa_r+0xa6e>
 80078c2:	f019 0f01 	tst.w	r9, #1
 80078c6:	d0de      	beq.n	8007886 <_dtoa_r+0xa6e>
 80078c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078cc:	d1d8      	bne.n	8007880 <_dtoa_r+0xa68>
 80078ce:	9a01      	ldr	r2, [sp, #4]
 80078d0:	2339      	movs	r3, #57	; 0x39
 80078d2:	7013      	strb	r3, [r2, #0]
 80078d4:	462b      	mov	r3, r5
 80078d6:	461d      	mov	r5, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078de:	2a39      	cmp	r2, #57	; 0x39
 80078e0:	d06c      	beq.n	80079bc <_dtoa_r+0xba4>
 80078e2:	3201      	adds	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e747      	b.n	8007778 <_dtoa_r+0x960>
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	dd07      	ble.n	80078fc <_dtoa_r+0xae4>
 80078ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078f0:	d0ed      	beq.n	80078ce <_dtoa_r+0xab6>
 80078f2:	9a01      	ldr	r2, [sp, #4]
 80078f4:	f109 0301 	add.w	r3, r9, #1
 80078f8:	7013      	strb	r3, [r2, #0]
 80078fa:	e73d      	b.n	8007778 <_dtoa_r+0x960>
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	9a08      	ldr	r2, [sp, #32]
 8007900:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007904:	4293      	cmp	r3, r2
 8007906:	d043      	beq.n	8007990 <_dtoa_r+0xb78>
 8007908:	4651      	mov	r1, sl
 800790a:	2300      	movs	r3, #0
 800790c:	220a      	movs	r2, #10
 800790e:	4620      	mov	r0, r4
 8007910:	f000 fb14 	bl	8007f3c <__multadd>
 8007914:	45b8      	cmp	r8, r7
 8007916:	4682      	mov	sl, r0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	f04f 020a 	mov.w	r2, #10
 8007920:	4641      	mov	r1, r8
 8007922:	4620      	mov	r0, r4
 8007924:	d107      	bne.n	8007936 <_dtoa_r+0xb1e>
 8007926:	f000 fb09 	bl	8007f3c <__multadd>
 800792a:	4680      	mov	r8, r0
 800792c:	4607      	mov	r7, r0
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	3301      	adds	r3, #1
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	e775      	b.n	8007822 <_dtoa_r+0xa0a>
 8007936:	f000 fb01 	bl	8007f3c <__multadd>
 800793a:	4639      	mov	r1, r7
 800793c:	4680      	mov	r8, r0
 800793e:	2300      	movs	r3, #0
 8007940:	220a      	movs	r2, #10
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fafa 	bl	8007f3c <__multadd>
 8007948:	4607      	mov	r7, r0
 800794a:	e7f0      	b.n	800792e <_dtoa_r+0xb16>
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	9d00      	ldr	r5, [sp, #0]
 8007952:	4631      	mov	r1, r6
 8007954:	4650      	mov	r0, sl
 8007956:	f7ff f9d6 	bl	8006d06 <quorem>
 800795a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800795e:	9b00      	ldr	r3, [sp, #0]
 8007960:	f805 9b01 	strb.w	r9, [r5], #1
 8007964:	1aea      	subs	r2, r5, r3
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	4293      	cmp	r3, r2
 800796a:	dd07      	ble.n	800797c <_dtoa_r+0xb64>
 800796c:	4651      	mov	r1, sl
 800796e:	2300      	movs	r3, #0
 8007970:	220a      	movs	r2, #10
 8007972:	4620      	mov	r0, r4
 8007974:	f000 fae2 	bl	8007f3c <__multadd>
 8007978:	4682      	mov	sl, r0
 800797a:	e7ea      	b.n	8007952 <_dtoa_r+0xb3a>
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfc8      	it	gt
 8007982:	461d      	movgt	r5, r3
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	bfd8      	it	le
 8007988:	2501      	movle	r5, #1
 800798a:	441d      	add	r5, r3
 800798c:	f04f 0800 	mov.w	r8, #0
 8007990:	4651      	mov	r1, sl
 8007992:	2201      	movs	r2, #1
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fc7f 	bl	8008298 <__lshift>
 800799a:	4631      	mov	r1, r6
 800799c:	4682      	mov	sl, r0
 800799e:	f000 fce7 	bl	8008370 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	dc96      	bgt.n	80078d4 <_dtoa_r+0xabc>
 80079a6:	d102      	bne.n	80079ae <_dtoa_r+0xb96>
 80079a8:	f019 0f01 	tst.w	r9, #1
 80079ac:	d192      	bne.n	80078d4 <_dtoa_r+0xabc>
 80079ae:	462b      	mov	r3, r5
 80079b0:	461d      	mov	r5, r3
 80079b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b6:	2a30      	cmp	r2, #48	; 0x30
 80079b8:	d0fa      	beq.n	80079b0 <_dtoa_r+0xb98>
 80079ba:	e6dd      	b.n	8007778 <_dtoa_r+0x960>
 80079bc:	9a00      	ldr	r2, [sp, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d189      	bne.n	80078d6 <_dtoa_r+0xabe>
 80079c2:	f10b 0b01 	add.w	fp, fp, #1
 80079c6:	2331      	movs	r3, #49	; 0x31
 80079c8:	e796      	b.n	80078f8 <_dtoa_r+0xae0>
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <_dtoa_r+0xbdc>)
 80079cc:	f7ff ba99 	b.w	8006f02 <_dtoa_r+0xea>
 80079d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f47f aa6d 	bne.w	8006eb2 <_dtoa_r+0x9a>
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <_dtoa_r+0xbe0>)
 80079da:	f7ff ba92 	b.w	8006f02 <_dtoa_r+0xea>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dcb5      	bgt.n	8007950 <_dtoa_r+0xb38>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	f73f aeb1 	bgt.w	800774e <_dtoa_r+0x936>
 80079ec:	e7b0      	b.n	8007950 <_dtoa_r+0xb38>
 80079ee:	bf00      	nop
 80079f0:	08008bb4 	.word	0x08008bb4
 80079f4:	08008b14 	.word	0x08008b14
 80079f8:	08008b38 	.word	0x08008b38

080079fc <_free_r>:
 80079fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079fe:	2900      	cmp	r1, #0
 8007a00:	d044      	beq.n	8007a8c <_free_r+0x90>
 8007a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a06:	9001      	str	r0, [sp, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a0e:	bfb8      	it	lt
 8007a10:	18e4      	addlt	r4, r4, r3
 8007a12:	f7fe fff3 	bl	80069fc <__malloc_lock>
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <_free_r+0x94>)
 8007a18:	9801      	ldr	r0, [sp, #4]
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	b933      	cbnz	r3, 8007a2c <_free_r+0x30>
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	6014      	str	r4, [r2, #0]
 8007a22:	b003      	add	sp, #12
 8007a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a28:	f7fe bfee 	b.w	8006a08 <__malloc_unlock>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d908      	bls.n	8007a42 <_free_r+0x46>
 8007a30:	6825      	ldr	r5, [r4, #0]
 8007a32:	1961      	adds	r1, r4, r5
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf01      	itttt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	1949      	addeq	r1, r1, r5
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	e7ed      	b.n	8007a1e <_free_r+0x22>
 8007a42:	461a      	mov	r2, r3
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b10b      	cbz	r3, 8007a4c <_free_r+0x50>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d9fa      	bls.n	8007a42 <_free_r+0x46>
 8007a4c:	6811      	ldr	r1, [r2, #0]
 8007a4e:	1855      	adds	r5, r2, r1
 8007a50:	42a5      	cmp	r5, r4
 8007a52:	d10b      	bne.n	8007a6c <_free_r+0x70>
 8007a54:	6824      	ldr	r4, [r4, #0]
 8007a56:	4421      	add	r1, r4
 8007a58:	1854      	adds	r4, r2, r1
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	d1e0      	bne.n	8007a22 <_free_r+0x26>
 8007a60:	681c      	ldr	r4, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	440c      	add	r4, r1
 8007a68:	6014      	str	r4, [r2, #0]
 8007a6a:	e7da      	b.n	8007a22 <_free_r+0x26>
 8007a6c:	d902      	bls.n	8007a74 <_free_r+0x78>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	e7d6      	b.n	8007a22 <_free_r+0x26>
 8007a74:	6825      	ldr	r5, [r4, #0]
 8007a76:	1961      	adds	r1, r4, r5
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf04      	itt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	bf04      	itt	eq
 8007a84:	1949      	addeq	r1, r1, r5
 8007a86:	6021      	streq	r1, [r4, #0]
 8007a88:	6054      	str	r4, [r2, #4]
 8007a8a:	e7ca      	b.n	8007a22 <_free_r+0x26>
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bd30      	pop	{r4, r5, pc}
 8007a90:	200005bc 	.word	0x200005bc

08007a94 <__sfputc_r>:
 8007a94:	6893      	ldr	r3, [r2, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	b410      	push	{r4}
 8007a9c:	6093      	str	r3, [r2, #8]
 8007a9e:	da08      	bge.n	8007ab2 <__sfputc_r+0x1e>
 8007aa0:	6994      	ldr	r4, [r2, #24]
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	db01      	blt.n	8007aaa <__sfputc_r+0x16>
 8007aa6:	290a      	cmp	r1, #10
 8007aa8:	d103      	bne.n	8007ab2 <__sfputc_r+0x1e>
 8007aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aae:	f000 bda2 	b.w	80085f6 <__swbuf_r>
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	1c58      	adds	r0, r3, #1
 8007ab6:	6010      	str	r0, [r2, #0]
 8007ab8:	7019      	strb	r1, [r3, #0]
 8007aba:	4608      	mov	r0, r1
 8007abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <__sfputs_r>:
 8007ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	18d5      	adds	r5, r2, r3
 8007acc:	42ac      	cmp	r4, r5
 8007ace:	d101      	bne.n	8007ad4 <__sfputs_r+0x12>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e007      	b.n	8007ae4 <__sfputs_r+0x22>
 8007ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad8:	463a      	mov	r2, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffda 	bl	8007a94 <__sfputc_r>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d1f3      	bne.n	8007acc <__sfputs_r+0xa>
 8007ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ae8 <_vfiprintf_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	460d      	mov	r5, r1
 8007aee:	b09d      	sub	sp, #116	; 0x74
 8007af0:	4614      	mov	r4, r2
 8007af2:	4698      	mov	r8, r3
 8007af4:	4606      	mov	r6, r0
 8007af6:	b118      	cbz	r0, 8007b00 <_vfiprintf_r+0x18>
 8007af8:	6a03      	ldr	r3, [r0, #32]
 8007afa:	b90b      	cbnz	r3, 8007b00 <_vfiprintf_r+0x18>
 8007afc:	f7ff f816 	bl	8006b2c <__sinit>
 8007b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_vfiprintf_r+0x2a>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_vfiprintf_r+0x2a>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0e:	f7ff f8f8 	bl	8006d02 <__retarget_lock_acquire_recursive>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	071b      	lsls	r3, r3, #28
 8007b16:	d501      	bpl.n	8007b1c <_vfiprintf_r+0x34>
 8007b18:	692b      	ldr	r3, [r5, #16]
 8007b1a:	b99b      	cbnz	r3, 8007b44 <_vfiprintf_r+0x5c>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f000 fda6 	bl	8008670 <__swsetup_r>
 8007b24:	b170      	cbz	r0, 8007b44 <_vfiprintf_r+0x5c>
 8007b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b28:	07dc      	lsls	r4, r3, #31
 8007b2a:	d504      	bpl.n	8007b36 <_vfiprintf_r+0x4e>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b30:	b01d      	add	sp, #116	; 0x74
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	0598      	lsls	r0, r3, #22
 8007b3a:	d4f7      	bmi.n	8007b2c <_vfiprintf_r+0x44>
 8007b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3e:	f7ff f8e1 	bl	8006d04 <__retarget_lock_release_recursive>
 8007b42:	e7f3      	b.n	8007b2c <_vfiprintf_r+0x44>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b52:	2330      	movs	r3, #48	; 0x30
 8007b54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d08 <_vfiprintf_r+0x220>
 8007b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5c:	f04f 0901 	mov.w	r9, #1
 8007b60:	4623      	mov	r3, r4
 8007b62:	469a      	mov	sl, r3
 8007b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b68:	b10a      	cbz	r2, 8007b6e <_vfiprintf_r+0x86>
 8007b6a:	2a25      	cmp	r2, #37	; 0x25
 8007b6c:	d1f9      	bne.n	8007b62 <_vfiprintf_r+0x7a>
 8007b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b72:	d00b      	beq.n	8007b8c <_vfiprintf_r+0xa4>
 8007b74:	465b      	mov	r3, fp
 8007b76:	4622      	mov	r2, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ffa1 	bl	8007ac2 <__sfputs_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	f000 80a9 	beq.w	8007cd8 <_vfiprintf_r+0x1f0>
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	445a      	add	r2, fp
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80a1 	beq.w	8007cd8 <_vfiprintf_r+0x1f0>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba0:	f10a 0a01 	add.w	sl, sl, #1
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bac:	931a      	str	r3, [sp, #104]	; 0x68
 8007bae:	4654      	mov	r4, sl
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4854      	ldr	r0, [pc, #336]	; (8007d08 <_vfiprintf_r+0x220>)
 8007bb8:	f7f8 fb32 	bl	8000220 <memchr>
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	b9d8      	cbnz	r0, 8007bf8 <_vfiprintf_r+0x110>
 8007bc0:	06d1      	lsls	r1, r2, #27
 8007bc2:	bf44      	itt	mi
 8007bc4:	2320      	movmi	r3, #32
 8007bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bca:	0713      	lsls	r3, r2, #28
 8007bcc:	bf44      	itt	mi
 8007bce:	232b      	movmi	r3, #43	; 0x2b
 8007bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bda:	d015      	beq.n	8007c08 <_vfiprintf_r+0x120>
 8007bdc:	9a07      	ldr	r2, [sp, #28]
 8007bde:	4654      	mov	r4, sl
 8007be0:	2000      	movs	r0, #0
 8007be2:	f04f 0c0a 	mov.w	ip, #10
 8007be6:	4621      	mov	r1, r4
 8007be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bec:	3b30      	subs	r3, #48	; 0x30
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d94d      	bls.n	8007c8e <_vfiprintf_r+0x1a6>
 8007bf2:	b1b0      	cbz	r0, 8007c22 <_vfiprintf_r+0x13a>
 8007bf4:	9207      	str	r2, [sp, #28]
 8007bf6:	e014      	b.n	8007c22 <_vfiprintf_r+0x13a>
 8007bf8:	eba0 0308 	sub.w	r3, r0, r8
 8007bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	46a2      	mov	sl, r4
 8007c06:	e7d2      	b.n	8007bae <_vfiprintf_r+0xc6>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	1d19      	adds	r1, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	9103      	str	r1, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bfbb      	ittet	lt
 8007c14:	425b      	neglt	r3, r3
 8007c16:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1a:	9307      	strge	r3, [sp, #28]
 8007c1c:	9307      	strlt	r3, [sp, #28]
 8007c1e:	bfb8      	it	lt
 8007c20:	9204      	strlt	r2, [sp, #16]
 8007c22:	7823      	ldrb	r3, [r4, #0]
 8007c24:	2b2e      	cmp	r3, #46	; 0x2e
 8007c26:	d10c      	bne.n	8007c42 <_vfiprintf_r+0x15a>
 8007c28:	7863      	ldrb	r3, [r4, #1]
 8007c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2c:	d134      	bne.n	8007c98 <_vfiprintf_r+0x1b0>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfb8      	it	lt
 8007c3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c3e:	3402      	adds	r4, #2
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d18 <_vfiprintf_r+0x230>
 8007c46:	7821      	ldrb	r1, [r4, #0]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7f8 fae8 	bl	8000220 <memchr>
 8007c50:	b138      	cbz	r0, 8007c62 <_vfiprintf_r+0x17a>
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	eba0 000a 	sub.w	r0, r0, sl
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	4082      	lsls	r2, r0
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c66:	4829      	ldr	r0, [pc, #164]	; (8007d0c <_vfiprintf_r+0x224>)
 8007c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6c:	2206      	movs	r2, #6
 8007c6e:	f7f8 fad7 	bl	8000220 <memchr>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d03f      	beq.n	8007cf6 <_vfiprintf_r+0x20e>
 8007c76:	4b26      	ldr	r3, [pc, #152]	; (8007d10 <_vfiprintf_r+0x228>)
 8007c78:	bb1b      	cbnz	r3, 8007cc2 <_vfiprintf_r+0x1da>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	f023 0307 	bic.w	r3, r3, #7
 8007c82:	3308      	adds	r3, #8
 8007c84:	9303      	str	r3, [sp, #12]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	443b      	add	r3, r7
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	e768      	b.n	8007b60 <_vfiprintf_r+0x78>
 8007c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c92:	460c      	mov	r4, r1
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7a6      	b.n	8007be6 <_vfiprintf_r+0xfe>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	3401      	adds	r4, #1
 8007c9c:	9305      	str	r3, [sp, #20]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f04f 0c0a 	mov.w	ip, #10
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007caa:	3a30      	subs	r2, #48	; 0x30
 8007cac:	2a09      	cmp	r2, #9
 8007cae:	d903      	bls.n	8007cb8 <_vfiprintf_r+0x1d0>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0c6      	beq.n	8007c42 <_vfiprintf_r+0x15a>
 8007cb4:	9105      	str	r1, [sp, #20]
 8007cb6:	e7c4      	b.n	8007c42 <_vfiprintf_r+0x15a>
 8007cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7f0      	b.n	8007ca4 <_vfiprintf_r+0x1bc>
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <_vfiprintf_r+0x22c>)
 8007cca:	a904      	add	r1, sp, #16
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7fe fa27 	bl	8006120 <_printf_float>
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	1c78      	adds	r0, r7, #1
 8007cd6:	d1d6      	bne.n	8007c86 <_vfiprintf_r+0x19e>
 8007cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cda:	07d9      	lsls	r1, r3, #31
 8007cdc:	d405      	bmi.n	8007cea <_vfiprintf_r+0x202>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	059a      	lsls	r2, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_vfiprintf_r+0x202>
 8007ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ce6:	f7ff f80d 	bl	8006d04 <__retarget_lock_release_recursive>
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	065b      	lsls	r3, r3, #25
 8007cee:	f53f af1d 	bmi.w	8007b2c <_vfiprintf_r+0x44>
 8007cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf4:	e71c      	b.n	8007b30 <_vfiprintf_r+0x48>
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_vfiprintf_r+0x22c>)
 8007cfe:	a904      	add	r1, sp, #16
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7fe fd59 	bl	80067b8 <_printf_i>
 8007d06:	e7e4      	b.n	8007cd2 <_vfiprintf_r+0x1ea>
 8007d08:	08008bc5 	.word	0x08008bc5
 8007d0c:	08008bcf 	.word	0x08008bcf
 8007d10:	08006121 	.word	0x08006121
 8007d14:	08007ac3 	.word	0x08007ac3
 8007d18:	08008bcb 	.word	0x08008bcb

08007d1c <__sflush_r>:
 8007d1c:	898a      	ldrh	r2, [r1, #12]
 8007d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	0710      	lsls	r0, r2, #28
 8007d26:	460c      	mov	r4, r1
 8007d28:	d458      	bmi.n	8007ddc <__sflush_r+0xc0>
 8007d2a:	684b      	ldr	r3, [r1, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc05      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dc02      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d0f9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d48:	682f      	ldr	r7, [r5, #0]
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	d032      	beq.n	8007db6 <__sflush_r+0x9a>
 8007d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	075a      	lsls	r2, r3, #29
 8007d56:	d505      	bpl.n	8007d64 <__sflush_r+0x48>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	1ac0      	subs	r0, r0, r3
 8007d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d5e:	b10b      	cbz	r3, 8007d64 <__sflush_r+0x48>
 8007d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d62:	1ac0      	subs	r0, r0, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	4602      	mov	r2, r0
 8007d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	d106      	bne.n	8007d84 <__sflush_r+0x68>
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	291d      	cmp	r1, #29
 8007d7a:	d82b      	bhi.n	8007dd4 <__sflush_r+0xb8>
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <__sflush_r+0x108>)
 8007d7e:	410a      	asrs	r2, r1
 8007d80:	07d6      	lsls	r6, r2, #31
 8007d82:	d427      	bmi.n	8007dd4 <__sflush_r+0xb8>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	04d9      	lsls	r1, r3, #19
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	d504      	bpl.n	8007d9a <__sflush_r+0x7e>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0x7c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b903      	cbnz	r3, 8007d9a <__sflush_r+0x7e>
 8007d98:	6560      	str	r0, [r4, #84]	; 0x54
 8007d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9c:	602f      	str	r7, [r5, #0]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d0c9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d002      	beq.n	8007db0 <__sflush_r+0x94>
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff fe26 	bl	80079fc <_free_r>
 8007db0:	2000      	movs	r0, #0
 8007db2:	6360      	str	r0, [r4, #52]	; 0x34
 8007db4:	e7c0      	b.n	8007d38 <__sflush_r+0x1c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b0      	blx	r6
 8007dbc:	1c41      	adds	r1, r0, #1
 8007dbe:	d1c8      	bne.n	8007d52 <__sflush_r+0x36>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0c5      	beq.n	8007d52 <__sflush_r+0x36>
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0xb2>
 8007dca:	2b16      	cmp	r3, #22
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0xb6>
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	e7b1      	b.n	8007d36 <__sflush_r+0x1a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	e7ad      	b.n	8007d38 <__sflush_r+0x1c>
 8007ddc:	690f      	ldr	r7, [r1, #16]
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	d0a9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007de2:	0793      	lsls	r3, r2, #30
 8007de4:	680e      	ldr	r6, [r1, #0]
 8007de6:	bf08      	it	eq
 8007de8:	694b      	ldreq	r3, [r1, #20]
 8007dea:	600f      	str	r7, [r1, #0]
 8007dec:	bf18      	it	ne
 8007dee:	2300      	movne	r3, #0
 8007df0:	eba6 0807 	sub.w	r8, r6, r7
 8007df4:	608b      	str	r3, [r1, #8]
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dd9c      	ble.n	8007d36 <__sflush_r+0x1a>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e00:	4643      	mov	r3, r8
 8007e02:	463a      	mov	r2, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b0      	blx	r6
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	dc06      	bgt.n	8007e1a <__sflush_r+0xfe>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e18:	e78e      	b.n	8007d38 <__sflush_r+0x1c>
 8007e1a:	4407      	add	r7, r0
 8007e1c:	eba8 0800 	sub.w	r8, r8, r0
 8007e20:	e7e9      	b.n	8007df6 <__sflush_r+0xda>
 8007e22:	bf00      	nop
 8007e24:	dfbffffe 	.word	0xdfbffffe

08007e28 <_fflush_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b913      	cbnz	r3, 8007e38 <_fflush_r+0x10>
 8007e32:	2500      	movs	r5, #0
 8007e34:	4628      	mov	r0, r5
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	b118      	cbz	r0, 8007e42 <_fflush_r+0x1a>
 8007e3a:	6a03      	ldr	r3, [r0, #32]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <_fflush_r+0x1a>
 8007e3e:	f7fe fe75 	bl	8006b2c <__sinit>
 8007e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f3      	beq.n	8007e32 <_fflush_r+0xa>
 8007e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e4c:	07d0      	lsls	r0, r2, #31
 8007e4e:	d404      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e50:	0599      	lsls	r1, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e56:	f7fe ff54 	bl	8006d02 <__retarget_lock_acquire_recursive>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f7ff ff5d 	bl	8007d1c <__sflush_r>
 8007e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	4605      	mov	r5, r0
 8007e68:	d4e4      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	059b      	lsls	r3, r3, #22
 8007e6e:	d4e1      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e72:	f7fe ff47 	bl	8006d04 <__retarget_lock_release_recursive>
 8007e76:	e7dd      	b.n	8007e34 <_fflush_r+0xc>

08007e78 <_Balloc>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	69c6      	ldr	r6, [r0, #28]
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	b976      	cbnz	r6, 8007ea0 <_Balloc+0x28>
 8007e82:	2010      	movs	r0, #16
 8007e84:	f7fe fb82 	bl	800658c <malloc>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	61e0      	str	r0, [r4, #28]
 8007e8c:	b920      	cbnz	r0, 8007e98 <_Balloc+0x20>
 8007e8e:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <_Balloc+0x78>)
 8007e90:	4818      	ldr	r0, [pc, #96]	; (8007ef4 <_Balloc+0x7c>)
 8007e92:	216b      	movs	r1, #107	; 0x6b
 8007e94:	f000 fd1c 	bl	80088d0 <__assert_func>
 8007e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e9c:	6006      	str	r6, [r0, #0]
 8007e9e:	60c6      	str	r6, [r0, #12]
 8007ea0:	69e6      	ldr	r6, [r4, #28]
 8007ea2:	68f3      	ldr	r3, [r6, #12]
 8007ea4:	b183      	cbz	r3, 8007ec8 <_Balloc+0x50>
 8007ea6:	69e3      	ldr	r3, [r4, #28]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eae:	b9b8      	cbnz	r0, 8007ee0 <_Balloc+0x68>
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8007eb6:	1d72      	adds	r2, r6, #5
 8007eb8:	0092      	lsls	r2, r2, #2
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fd26 	bl	800890c <_calloc_r>
 8007ec0:	b160      	cbz	r0, 8007edc <_Balloc+0x64>
 8007ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ec6:	e00e      	b.n	8007ee6 <_Balloc+0x6e>
 8007ec8:	2221      	movs	r2, #33	; 0x21
 8007eca:	2104      	movs	r1, #4
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fd1d 	bl	800890c <_calloc_r>
 8007ed2:	69e3      	ldr	r3, [r4, #28]
 8007ed4:	60f0      	str	r0, [r6, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e4      	bne.n	8007ea6 <_Balloc+0x2e>
 8007edc:	2000      	movs	r0, #0
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	6802      	ldr	r2, [r0, #0]
 8007ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007eec:	e7f7      	b.n	8007ede <_Balloc+0x66>
 8007eee:	bf00      	nop
 8007ef0:	08008b45 	.word	0x08008b45
 8007ef4:	08008bd6 	.word	0x08008bd6

08007ef8 <_Bfree>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	69c6      	ldr	r6, [r0, #28]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b976      	cbnz	r6, 8007f20 <_Bfree+0x28>
 8007f02:	2010      	movs	r0, #16
 8007f04:	f7fe fb42 	bl	800658c <malloc>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	61e8      	str	r0, [r5, #28]
 8007f0c:	b920      	cbnz	r0, 8007f18 <_Bfree+0x20>
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <_Bfree+0x3c>)
 8007f10:	4809      	ldr	r0, [pc, #36]	; (8007f38 <_Bfree+0x40>)
 8007f12:	218f      	movs	r1, #143	; 0x8f
 8007f14:	f000 fcdc 	bl	80088d0 <__assert_func>
 8007f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f1c:	6006      	str	r6, [r0, #0]
 8007f1e:	60c6      	str	r6, [r0, #12]
 8007f20:	b13c      	cbz	r4, 8007f32 <_Bfree+0x3a>
 8007f22:	69eb      	ldr	r3, [r5, #28]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f2c:	6021      	str	r1, [r4, #0]
 8007f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	08008b45 	.word	0x08008b45
 8007f38:	08008bd6 	.word	0x08008bd6

08007f3c <__multadd>:
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	690d      	ldr	r5, [r1, #16]
 8007f42:	4607      	mov	r7, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	461e      	mov	r6, r3
 8007f48:	f101 0c14 	add.w	ip, r1, #20
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f52:	b299      	uxth	r1, r3
 8007f54:	fb02 6101 	mla	r1, r2, r1, r6
 8007f58:	0c1e      	lsrs	r6, r3, #16
 8007f5a:	0c0b      	lsrs	r3, r1, #16
 8007f5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f60:	b289      	uxth	r1, r1
 8007f62:	3001      	adds	r0, #1
 8007f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f68:	4285      	cmp	r5, r0
 8007f6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f72:	dcec      	bgt.n	8007f4e <__multadd+0x12>
 8007f74:	b30e      	cbz	r6, 8007fba <__multadd+0x7e>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dc19      	bgt.n	8007fb0 <__multadd+0x74>
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4638      	mov	r0, r7
 8007f80:	3101      	adds	r1, #1
 8007f82:	f7ff ff79 	bl	8007e78 <_Balloc>
 8007f86:	4680      	mov	r8, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <__multadd+0x5a>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <__multadd+0x84>)
 8007f8e:	480d      	ldr	r0, [pc, #52]	; (8007fc4 <__multadd+0x88>)
 8007f90:	21ba      	movs	r1, #186	; 0xba
 8007f92:	f000 fc9d 	bl	80088d0 <__assert_func>
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	3202      	adds	r2, #2
 8007f9a:	f104 010c 	add.w	r1, r4, #12
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	300c      	adds	r0, #12
 8007fa2:	f000 fc87 	bl	80088b4 <memcpy>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ffa5 	bl	8007ef8 <_Bfree>
 8007fae:	4644      	mov	r4, r8
 8007fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	615e      	str	r6, [r3, #20]
 8007fb8:	6125      	str	r5, [r4, #16]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	08008bb4 	.word	0x08008bb4
 8007fc4:	08008bd6 	.word	0x08008bd6

08007fc8 <__hi0bits>:
 8007fc8:	0c03      	lsrs	r3, r0, #16
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	b9d3      	cbnz	r3, 8008004 <__hi0bits+0x3c>
 8007fce:	0400      	lsls	r0, r0, #16
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fd6:	bf04      	itt	eq
 8007fd8:	0200      	lsleq	r0, r0, #8
 8007fda:	3308      	addeq	r3, #8
 8007fdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fe0:	bf04      	itt	eq
 8007fe2:	0100      	lsleq	r0, r0, #4
 8007fe4:	3304      	addeq	r3, #4
 8007fe6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fea:	bf04      	itt	eq
 8007fec:	0080      	lsleq	r0, r0, #2
 8007fee:	3302      	addeq	r3, #2
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	db05      	blt.n	8008000 <__hi0bits+0x38>
 8007ff4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ff8:	f103 0301 	add.w	r3, r3, #1
 8007ffc:	bf08      	it	eq
 8007ffe:	2320      	moveq	r3, #32
 8008000:	4618      	mov	r0, r3
 8008002:	4770      	bx	lr
 8008004:	2300      	movs	r3, #0
 8008006:	e7e4      	b.n	8007fd2 <__hi0bits+0xa>

08008008 <__lo0bits>:
 8008008:	6803      	ldr	r3, [r0, #0]
 800800a:	f013 0207 	ands.w	r2, r3, #7
 800800e:	d00c      	beq.n	800802a <__lo0bits+0x22>
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d422      	bmi.n	800805a <__lo0bits+0x52>
 8008014:	079a      	lsls	r2, r3, #30
 8008016:	bf49      	itett	mi
 8008018:	085b      	lsrmi	r3, r3, #1
 800801a:	089b      	lsrpl	r3, r3, #2
 800801c:	6003      	strmi	r3, [r0, #0]
 800801e:	2201      	movmi	r2, #1
 8008020:	bf5c      	itt	pl
 8008022:	6003      	strpl	r3, [r0, #0]
 8008024:	2202      	movpl	r2, #2
 8008026:	4610      	mov	r0, r2
 8008028:	4770      	bx	lr
 800802a:	b299      	uxth	r1, r3
 800802c:	b909      	cbnz	r1, 8008032 <__lo0bits+0x2a>
 800802e:	0c1b      	lsrs	r3, r3, #16
 8008030:	2210      	movs	r2, #16
 8008032:	b2d9      	uxtb	r1, r3
 8008034:	b909      	cbnz	r1, 800803a <__lo0bits+0x32>
 8008036:	3208      	adds	r2, #8
 8008038:	0a1b      	lsrs	r3, r3, #8
 800803a:	0719      	lsls	r1, r3, #28
 800803c:	bf04      	itt	eq
 800803e:	091b      	lsreq	r3, r3, #4
 8008040:	3204      	addeq	r2, #4
 8008042:	0799      	lsls	r1, r3, #30
 8008044:	bf04      	itt	eq
 8008046:	089b      	lsreq	r3, r3, #2
 8008048:	3202      	addeq	r2, #2
 800804a:	07d9      	lsls	r1, r3, #31
 800804c:	d403      	bmi.n	8008056 <__lo0bits+0x4e>
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	f102 0201 	add.w	r2, r2, #1
 8008054:	d003      	beq.n	800805e <__lo0bits+0x56>
 8008056:	6003      	str	r3, [r0, #0]
 8008058:	e7e5      	b.n	8008026 <__lo0bits+0x1e>
 800805a:	2200      	movs	r2, #0
 800805c:	e7e3      	b.n	8008026 <__lo0bits+0x1e>
 800805e:	2220      	movs	r2, #32
 8008060:	e7e1      	b.n	8008026 <__lo0bits+0x1e>
	...

08008064 <__i2b>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	2101      	movs	r1, #1
 800806a:	f7ff ff05 	bl	8007e78 <_Balloc>
 800806e:	4602      	mov	r2, r0
 8008070:	b928      	cbnz	r0, 800807e <__i2b+0x1a>
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <__i2b+0x24>)
 8008074:	4805      	ldr	r0, [pc, #20]	; (800808c <__i2b+0x28>)
 8008076:	f240 1145 	movw	r1, #325	; 0x145
 800807a:	f000 fc29 	bl	80088d0 <__assert_func>
 800807e:	2301      	movs	r3, #1
 8008080:	6144      	str	r4, [r0, #20]
 8008082:	6103      	str	r3, [r0, #16]
 8008084:	bd10      	pop	{r4, pc}
 8008086:	bf00      	nop
 8008088:	08008bb4 	.word	0x08008bb4
 800808c:	08008bd6 	.word	0x08008bd6

08008090 <__multiply>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4691      	mov	r9, r2
 8008096:	690a      	ldr	r2, [r1, #16]
 8008098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	bfb8      	it	lt
 80080a0:	460b      	movlt	r3, r1
 80080a2:	460c      	mov	r4, r1
 80080a4:	bfbc      	itt	lt
 80080a6:	464c      	movlt	r4, r9
 80080a8:	4699      	movlt	r9, r3
 80080aa:	6927      	ldr	r7, [r4, #16]
 80080ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	6861      	ldr	r1, [r4, #4]
 80080b4:	eb07 060a 	add.w	r6, r7, sl
 80080b8:	42b3      	cmp	r3, r6
 80080ba:	b085      	sub	sp, #20
 80080bc:	bfb8      	it	lt
 80080be:	3101      	addlt	r1, #1
 80080c0:	f7ff feda 	bl	8007e78 <_Balloc>
 80080c4:	b930      	cbnz	r0, 80080d4 <__multiply+0x44>
 80080c6:	4602      	mov	r2, r0
 80080c8:	4b44      	ldr	r3, [pc, #272]	; (80081dc <__multiply+0x14c>)
 80080ca:	4845      	ldr	r0, [pc, #276]	; (80081e0 <__multiply+0x150>)
 80080cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080d0:	f000 fbfe 	bl	80088d0 <__assert_func>
 80080d4:	f100 0514 	add.w	r5, r0, #20
 80080d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080dc:	462b      	mov	r3, r5
 80080de:	2200      	movs	r2, #0
 80080e0:	4543      	cmp	r3, r8
 80080e2:	d321      	bcc.n	8008128 <__multiply+0x98>
 80080e4:	f104 0314 	add.w	r3, r4, #20
 80080e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080ec:	f109 0314 	add.w	r3, r9, #20
 80080f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080f4:	9202      	str	r2, [sp, #8]
 80080f6:	1b3a      	subs	r2, r7, r4
 80080f8:	3a15      	subs	r2, #21
 80080fa:	f022 0203 	bic.w	r2, r2, #3
 80080fe:	3204      	adds	r2, #4
 8008100:	f104 0115 	add.w	r1, r4, #21
 8008104:	428f      	cmp	r7, r1
 8008106:	bf38      	it	cc
 8008108:	2204      	movcc	r2, #4
 800810a:	9201      	str	r2, [sp, #4]
 800810c:	9a02      	ldr	r2, [sp, #8]
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	429a      	cmp	r2, r3
 8008112:	d80c      	bhi.n	800812e <__multiply+0x9e>
 8008114:	2e00      	cmp	r6, #0
 8008116:	dd03      	ble.n	8008120 <__multiply+0x90>
 8008118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05b      	beq.n	80081d8 <__multiply+0x148>
 8008120:	6106      	str	r6, [r0, #16]
 8008122:	b005      	add	sp, #20
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	f843 2b04 	str.w	r2, [r3], #4
 800812c:	e7d8      	b.n	80080e0 <__multiply+0x50>
 800812e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008132:	f1ba 0f00 	cmp.w	sl, #0
 8008136:	d024      	beq.n	8008182 <__multiply+0xf2>
 8008138:	f104 0e14 	add.w	lr, r4, #20
 800813c:	46a9      	mov	r9, r5
 800813e:	f04f 0c00 	mov.w	ip, #0
 8008142:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008146:	f8d9 1000 	ldr.w	r1, [r9]
 800814a:	fa1f fb82 	uxth.w	fp, r2
 800814e:	b289      	uxth	r1, r1
 8008150:	fb0a 110b 	mla	r1, sl, fp, r1
 8008154:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008158:	f8d9 2000 	ldr.w	r2, [r9]
 800815c:	4461      	add	r1, ip
 800815e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008162:	fb0a c20b 	mla	r2, sl, fp, ip
 8008166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800816a:	b289      	uxth	r1, r1
 800816c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008170:	4577      	cmp	r7, lr
 8008172:	f849 1b04 	str.w	r1, [r9], #4
 8008176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800817a:	d8e2      	bhi.n	8008142 <__multiply+0xb2>
 800817c:	9a01      	ldr	r2, [sp, #4]
 800817e:	f845 c002 	str.w	ip, [r5, r2]
 8008182:	9a03      	ldr	r2, [sp, #12]
 8008184:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008188:	3304      	adds	r3, #4
 800818a:	f1b9 0f00 	cmp.w	r9, #0
 800818e:	d021      	beq.n	80081d4 <__multiply+0x144>
 8008190:	6829      	ldr	r1, [r5, #0]
 8008192:	f104 0c14 	add.w	ip, r4, #20
 8008196:	46ae      	mov	lr, r5
 8008198:	f04f 0a00 	mov.w	sl, #0
 800819c:	f8bc b000 	ldrh.w	fp, [ip]
 80081a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081a4:	fb09 220b 	mla	r2, r9, fp, r2
 80081a8:	4452      	add	r2, sl
 80081aa:	b289      	uxth	r1, r1
 80081ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081b0:	f84e 1b04 	str.w	r1, [lr], #4
 80081b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80081b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081bc:	f8be 1000 	ldrh.w	r1, [lr]
 80081c0:	fb09 110a 	mla	r1, r9, sl, r1
 80081c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081c8:	4567      	cmp	r7, ip
 80081ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081ce:	d8e5      	bhi.n	800819c <__multiply+0x10c>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	50a9      	str	r1, [r5, r2]
 80081d4:	3504      	adds	r5, #4
 80081d6:	e799      	b.n	800810c <__multiply+0x7c>
 80081d8:	3e01      	subs	r6, #1
 80081da:	e79b      	b.n	8008114 <__multiply+0x84>
 80081dc:	08008bb4 	.word	0x08008bb4
 80081e0:	08008bd6 	.word	0x08008bd6

080081e4 <__pow5mult>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4615      	mov	r5, r2
 80081ea:	f012 0203 	ands.w	r2, r2, #3
 80081ee:	4606      	mov	r6, r0
 80081f0:	460f      	mov	r7, r1
 80081f2:	d007      	beq.n	8008204 <__pow5mult+0x20>
 80081f4:	4c25      	ldr	r4, [pc, #148]	; (800828c <__pow5mult+0xa8>)
 80081f6:	3a01      	subs	r2, #1
 80081f8:	2300      	movs	r3, #0
 80081fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081fe:	f7ff fe9d 	bl	8007f3c <__multadd>
 8008202:	4607      	mov	r7, r0
 8008204:	10ad      	asrs	r5, r5, #2
 8008206:	d03d      	beq.n	8008284 <__pow5mult+0xa0>
 8008208:	69f4      	ldr	r4, [r6, #28]
 800820a:	b97c      	cbnz	r4, 800822c <__pow5mult+0x48>
 800820c:	2010      	movs	r0, #16
 800820e:	f7fe f9bd 	bl	800658c <malloc>
 8008212:	4602      	mov	r2, r0
 8008214:	61f0      	str	r0, [r6, #28]
 8008216:	b928      	cbnz	r0, 8008224 <__pow5mult+0x40>
 8008218:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <__pow5mult+0xac>)
 800821a:	481e      	ldr	r0, [pc, #120]	; (8008294 <__pow5mult+0xb0>)
 800821c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008220:	f000 fb56 	bl	80088d0 <__assert_func>
 8008224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008228:	6004      	str	r4, [r0, #0]
 800822a:	60c4      	str	r4, [r0, #12]
 800822c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008234:	b94c      	cbnz	r4, 800824a <__pow5mult+0x66>
 8008236:	f240 2171 	movw	r1, #625	; 0x271
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ff12 	bl	8008064 <__i2b>
 8008240:	2300      	movs	r3, #0
 8008242:	f8c8 0008 	str.w	r0, [r8, #8]
 8008246:	4604      	mov	r4, r0
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	07eb      	lsls	r3, r5, #31
 8008250:	d50a      	bpl.n	8008268 <__pow5mult+0x84>
 8008252:	4639      	mov	r1, r7
 8008254:	4622      	mov	r2, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f7ff ff1a 	bl	8008090 <__multiply>
 800825c:	4639      	mov	r1, r7
 800825e:	4680      	mov	r8, r0
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff fe49 	bl	8007ef8 <_Bfree>
 8008266:	4647      	mov	r7, r8
 8008268:	106d      	asrs	r5, r5, #1
 800826a:	d00b      	beq.n	8008284 <__pow5mult+0xa0>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	b938      	cbnz	r0, 8008280 <__pow5mult+0x9c>
 8008270:	4622      	mov	r2, r4
 8008272:	4621      	mov	r1, r4
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff ff0b 	bl	8008090 <__multiply>
 800827a:	6020      	str	r0, [r4, #0]
 800827c:	f8c0 9000 	str.w	r9, [r0]
 8008280:	4604      	mov	r4, r0
 8008282:	e7e4      	b.n	800824e <__pow5mult+0x6a>
 8008284:	4638      	mov	r0, r7
 8008286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828a:	bf00      	nop
 800828c:	08008d20 	.word	0x08008d20
 8008290:	08008b45 	.word	0x08008b45
 8008294:	08008bd6 	.word	0x08008bd6

08008298 <__lshift>:
 8008298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	6849      	ldr	r1, [r1, #4]
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	4607      	mov	r7, r0
 80082aa:	4691      	mov	r9, r2
 80082ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082b0:	f108 0601 	add.w	r6, r8, #1
 80082b4:	42b3      	cmp	r3, r6
 80082b6:	db0b      	blt.n	80082d0 <__lshift+0x38>
 80082b8:	4638      	mov	r0, r7
 80082ba:	f7ff fddd 	bl	8007e78 <_Balloc>
 80082be:	4605      	mov	r5, r0
 80082c0:	b948      	cbnz	r0, 80082d6 <__lshift+0x3e>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <__lshift+0xd0>)
 80082c6:	4829      	ldr	r0, [pc, #164]	; (800836c <__lshift+0xd4>)
 80082c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082cc:	f000 fb00 	bl	80088d0 <__assert_func>
 80082d0:	3101      	adds	r1, #1
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	e7ee      	b.n	80082b4 <__lshift+0x1c>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f100 0114 	add.w	r1, r0, #20
 80082dc:	f100 0210 	add.w	r2, r0, #16
 80082e0:	4618      	mov	r0, r3
 80082e2:	4553      	cmp	r3, sl
 80082e4:	db33      	blt.n	800834e <__lshift+0xb6>
 80082e6:	6920      	ldr	r0, [r4, #16]
 80082e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082ec:	f104 0314 	add.w	r3, r4, #20
 80082f0:	f019 091f 	ands.w	r9, r9, #31
 80082f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082fc:	d02b      	beq.n	8008356 <__lshift+0xbe>
 80082fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008302:	468a      	mov	sl, r1
 8008304:	2200      	movs	r2, #0
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	fa00 f009 	lsl.w	r0, r0, r9
 800830c:	4310      	orrs	r0, r2
 800830e:	f84a 0b04 	str.w	r0, [sl], #4
 8008312:	f853 2b04 	ldr.w	r2, [r3], #4
 8008316:	459c      	cmp	ip, r3
 8008318:	fa22 f20e 	lsr.w	r2, r2, lr
 800831c:	d8f3      	bhi.n	8008306 <__lshift+0x6e>
 800831e:	ebac 0304 	sub.w	r3, ip, r4
 8008322:	3b15      	subs	r3, #21
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	3304      	adds	r3, #4
 800832a:	f104 0015 	add.w	r0, r4, #21
 800832e:	4584      	cmp	ip, r0
 8008330:	bf38      	it	cc
 8008332:	2304      	movcc	r3, #4
 8008334:	50ca      	str	r2, [r1, r3]
 8008336:	b10a      	cbz	r2, 800833c <__lshift+0xa4>
 8008338:	f108 0602 	add.w	r6, r8, #2
 800833c:	3e01      	subs	r6, #1
 800833e:	4638      	mov	r0, r7
 8008340:	612e      	str	r6, [r5, #16]
 8008342:	4621      	mov	r1, r4
 8008344:	f7ff fdd8 	bl	8007ef8 <_Bfree>
 8008348:	4628      	mov	r0, r5
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008352:	3301      	adds	r3, #1
 8008354:	e7c5      	b.n	80082e2 <__lshift+0x4a>
 8008356:	3904      	subs	r1, #4
 8008358:	f853 2b04 	ldr.w	r2, [r3], #4
 800835c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008360:	459c      	cmp	ip, r3
 8008362:	d8f9      	bhi.n	8008358 <__lshift+0xc0>
 8008364:	e7ea      	b.n	800833c <__lshift+0xa4>
 8008366:	bf00      	nop
 8008368:	08008bb4 	.word	0x08008bb4
 800836c:	08008bd6 	.word	0x08008bd6

08008370 <__mcmp>:
 8008370:	b530      	push	{r4, r5, lr}
 8008372:	6902      	ldr	r2, [r0, #16]
 8008374:	690c      	ldr	r4, [r1, #16]
 8008376:	1b12      	subs	r2, r2, r4
 8008378:	d10e      	bne.n	8008398 <__mcmp+0x28>
 800837a:	f100 0314 	add.w	r3, r0, #20
 800837e:	3114      	adds	r1, #20
 8008380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800838c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008390:	42a5      	cmp	r5, r4
 8008392:	d003      	beq.n	800839c <__mcmp+0x2c>
 8008394:	d305      	bcc.n	80083a2 <__mcmp+0x32>
 8008396:	2201      	movs	r2, #1
 8008398:	4610      	mov	r0, r2
 800839a:	bd30      	pop	{r4, r5, pc}
 800839c:	4283      	cmp	r3, r0
 800839e:	d3f3      	bcc.n	8008388 <__mcmp+0x18>
 80083a0:	e7fa      	b.n	8008398 <__mcmp+0x28>
 80083a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a6:	e7f7      	b.n	8008398 <__mcmp+0x28>

080083a8 <__mdiff>:
 80083a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	4606      	mov	r6, r0
 80083b0:	4611      	mov	r1, r2
 80083b2:	4620      	mov	r0, r4
 80083b4:	4690      	mov	r8, r2
 80083b6:	f7ff ffdb 	bl	8008370 <__mcmp>
 80083ba:	1e05      	subs	r5, r0, #0
 80083bc:	d110      	bne.n	80083e0 <__mdiff+0x38>
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff fd59 	bl	8007e78 <_Balloc>
 80083c6:	b930      	cbnz	r0, 80083d6 <__mdiff+0x2e>
 80083c8:	4b3a      	ldr	r3, [pc, #232]	; (80084b4 <__mdiff+0x10c>)
 80083ca:	4602      	mov	r2, r0
 80083cc:	f240 2137 	movw	r1, #567	; 0x237
 80083d0:	4839      	ldr	r0, [pc, #228]	; (80084b8 <__mdiff+0x110>)
 80083d2:	f000 fa7d 	bl	80088d0 <__assert_func>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e0:	bfa4      	itt	ge
 80083e2:	4643      	movge	r3, r8
 80083e4:	46a0      	movge	r8, r4
 80083e6:	4630      	mov	r0, r6
 80083e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083ec:	bfa6      	itte	ge
 80083ee:	461c      	movge	r4, r3
 80083f0:	2500      	movge	r5, #0
 80083f2:	2501      	movlt	r5, #1
 80083f4:	f7ff fd40 	bl	8007e78 <_Balloc>
 80083f8:	b920      	cbnz	r0, 8008404 <__mdiff+0x5c>
 80083fa:	4b2e      	ldr	r3, [pc, #184]	; (80084b4 <__mdiff+0x10c>)
 80083fc:	4602      	mov	r2, r0
 80083fe:	f240 2145 	movw	r1, #581	; 0x245
 8008402:	e7e5      	b.n	80083d0 <__mdiff+0x28>
 8008404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008408:	6926      	ldr	r6, [r4, #16]
 800840a:	60c5      	str	r5, [r0, #12]
 800840c:	f104 0914 	add.w	r9, r4, #20
 8008410:	f108 0514 	add.w	r5, r8, #20
 8008414:	f100 0e14 	add.w	lr, r0, #20
 8008418:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800841c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008420:	f108 0210 	add.w	r2, r8, #16
 8008424:	46f2      	mov	sl, lr
 8008426:	2100      	movs	r1, #0
 8008428:	f859 3b04 	ldr.w	r3, [r9], #4
 800842c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008430:	fa11 f88b 	uxtah	r8, r1, fp
 8008434:	b299      	uxth	r1, r3
 8008436:	0c1b      	lsrs	r3, r3, #16
 8008438:	eba8 0801 	sub.w	r8, r8, r1
 800843c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008440:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008444:	fa1f f888 	uxth.w	r8, r8
 8008448:	1419      	asrs	r1, r3, #16
 800844a:	454e      	cmp	r6, r9
 800844c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008450:	f84a 3b04 	str.w	r3, [sl], #4
 8008454:	d8e8      	bhi.n	8008428 <__mdiff+0x80>
 8008456:	1b33      	subs	r3, r6, r4
 8008458:	3b15      	subs	r3, #21
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	3304      	adds	r3, #4
 8008460:	3415      	adds	r4, #21
 8008462:	42a6      	cmp	r6, r4
 8008464:	bf38      	it	cc
 8008466:	2304      	movcc	r3, #4
 8008468:	441d      	add	r5, r3
 800846a:	4473      	add	r3, lr
 800846c:	469e      	mov	lr, r3
 800846e:	462e      	mov	r6, r5
 8008470:	4566      	cmp	r6, ip
 8008472:	d30e      	bcc.n	8008492 <__mdiff+0xea>
 8008474:	f10c 0203 	add.w	r2, ip, #3
 8008478:	1b52      	subs	r2, r2, r5
 800847a:	f022 0203 	bic.w	r2, r2, #3
 800847e:	3d03      	subs	r5, #3
 8008480:	45ac      	cmp	ip, r5
 8008482:	bf38      	it	cc
 8008484:	2200      	movcc	r2, #0
 8008486:	4413      	add	r3, r2
 8008488:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800848c:	b17a      	cbz	r2, 80084ae <__mdiff+0x106>
 800848e:	6107      	str	r7, [r0, #16]
 8008490:	e7a4      	b.n	80083dc <__mdiff+0x34>
 8008492:	f856 8b04 	ldr.w	r8, [r6], #4
 8008496:	fa11 f288 	uxtah	r2, r1, r8
 800849a:	1414      	asrs	r4, r2, #16
 800849c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084a0:	b292      	uxth	r2, r2
 80084a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80084a6:	f84e 2b04 	str.w	r2, [lr], #4
 80084aa:	1421      	asrs	r1, r4, #16
 80084ac:	e7e0      	b.n	8008470 <__mdiff+0xc8>
 80084ae:	3f01      	subs	r7, #1
 80084b0:	e7ea      	b.n	8008488 <__mdiff+0xe0>
 80084b2:	bf00      	nop
 80084b4:	08008bb4 	.word	0x08008bb4
 80084b8:	08008bd6 	.word	0x08008bd6

080084bc <__d2b>:
 80084bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084c0:	460f      	mov	r7, r1
 80084c2:	2101      	movs	r1, #1
 80084c4:	ec59 8b10 	vmov	r8, r9, d0
 80084c8:	4616      	mov	r6, r2
 80084ca:	f7ff fcd5 	bl	8007e78 <_Balloc>
 80084ce:	4604      	mov	r4, r0
 80084d0:	b930      	cbnz	r0, 80084e0 <__d2b+0x24>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <__d2b+0xac>)
 80084d6:	4825      	ldr	r0, [pc, #148]	; (800856c <__d2b+0xb0>)
 80084d8:	f240 310f 	movw	r1, #783	; 0x30f
 80084dc:	f000 f9f8 	bl	80088d0 <__assert_func>
 80084e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084e8:	bb2d      	cbnz	r5, 8008536 <__d2b+0x7a>
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	f1b8 0300 	subs.w	r3, r8, #0
 80084f0:	d026      	beq.n	8008540 <__d2b+0x84>
 80084f2:	4668      	mov	r0, sp
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	f7ff fd87 	bl	8008008 <__lo0bits>
 80084fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084fe:	b1e8      	cbz	r0, 800853c <__d2b+0x80>
 8008500:	f1c0 0320 	rsb	r3, r0, #32
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	430b      	orrs	r3, r1
 800850a:	40c2      	lsrs	r2, r0
 800850c:	6163      	str	r3, [r4, #20]
 800850e:	9201      	str	r2, [sp, #4]
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	61a3      	str	r3, [r4, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	bf14      	ite	ne
 8008518:	2202      	movne	r2, #2
 800851a:	2201      	moveq	r2, #1
 800851c:	6122      	str	r2, [r4, #16]
 800851e:	b1bd      	cbz	r5, 8008550 <__d2b+0x94>
 8008520:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008524:	4405      	add	r5, r0
 8008526:	603d      	str	r5, [r7, #0]
 8008528:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800852c:	6030      	str	r0, [r6, #0]
 800852e:	4620      	mov	r0, r4
 8008530:	b003      	add	sp, #12
 8008532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800853a:	e7d6      	b.n	80084ea <__d2b+0x2e>
 800853c:	6161      	str	r1, [r4, #20]
 800853e:	e7e7      	b.n	8008510 <__d2b+0x54>
 8008540:	a801      	add	r0, sp, #4
 8008542:	f7ff fd61 	bl	8008008 <__lo0bits>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	6163      	str	r3, [r4, #20]
 800854a:	3020      	adds	r0, #32
 800854c:	2201      	movs	r2, #1
 800854e:	e7e5      	b.n	800851c <__d2b+0x60>
 8008550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008558:	6038      	str	r0, [r7, #0]
 800855a:	6918      	ldr	r0, [r3, #16]
 800855c:	f7ff fd34 	bl	8007fc8 <__hi0bits>
 8008560:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008564:	e7e2      	b.n	800852c <__d2b+0x70>
 8008566:	bf00      	nop
 8008568:	08008bb4 	.word	0x08008bb4
 800856c:	08008bd6 	.word	0x08008bd6

08008570 <__sread>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	f000 f978 	bl	800886c <_read_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	bfab      	itete	ge
 8008580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008582:	89a3      	ldrhlt	r3, [r4, #12]
 8008584:	181b      	addge	r3, r3, r0
 8008586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800858a:	bfac      	ite	ge
 800858c:	6563      	strge	r3, [r4, #84]	; 0x54
 800858e:	81a3      	strhlt	r3, [r4, #12]
 8008590:	bd10      	pop	{r4, pc}

08008592 <__swrite>:
 8008592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	461f      	mov	r7, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	05db      	lsls	r3, r3, #23
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d505      	bpl.n	80085b0 <__swrite+0x1e>
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2302      	movs	r3, #2
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f94c 	bl	8008848 <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	f000 b963 	b.w	8008890 <_write_r>

080085ca <__sseek>:
 80085ca:	b510      	push	{r4, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 f939 	bl	8008848 <_lseek_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	bf15      	itete	ne
 80085dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strheq	r3, [r4, #12]
 80085e8:	bf18      	it	ne
 80085ea:	81a3      	strhne	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__sclose>:
 80085ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f2:	f000 b8f7 	b.w	80087e4 <_close_r>

080085f6 <__swbuf_r>:
 80085f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f8:	460e      	mov	r6, r1
 80085fa:	4614      	mov	r4, r2
 80085fc:	4605      	mov	r5, r0
 80085fe:	b118      	cbz	r0, 8008608 <__swbuf_r+0x12>
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	b90b      	cbnz	r3, 8008608 <__swbuf_r+0x12>
 8008604:	f7fe fa92 	bl	8006b2c <__sinit>
 8008608:	69a3      	ldr	r3, [r4, #24]
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	071a      	lsls	r2, r3, #28
 8008610:	d525      	bpl.n	800865e <__swbuf_r+0x68>
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	b31b      	cbz	r3, 800865e <__swbuf_r+0x68>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	6922      	ldr	r2, [r4, #16]
 800861a:	1a98      	subs	r0, r3, r2
 800861c:	6963      	ldr	r3, [r4, #20]
 800861e:	b2f6      	uxtb	r6, r6
 8008620:	4283      	cmp	r3, r0
 8008622:	4637      	mov	r7, r6
 8008624:	dc04      	bgt.n	8008630 <__swbuf_r+0x3a>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff fbfd 	bl	8007e28 <_fflush_r>
 800862e:	b9e0      	cbnz	r0, 800866a <__swbuf_r+0x74>
 8008630:	68a3      	ldr	r3, [r4, #8]
 8008632:	3b01      	subs	r3, #1
 8008634:	60a3      	str	r3, [r4, #8]
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	701e      	strb	r6, [r3, #0]
 800863e:	6962      	ldr	r2, [r4, #20]
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	429a      	cmp	r2, r3
 8008644:	d004      	beq.n	8008650 <__swbuf_r+0x5a>
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	07db      	lsls	r3, r3, #31
 800864a:	d506      	bpl.n	800865a <__swbuf_r+0x64>
 800864c:	2e0a      	cmp	r6, #10
 800864e:	d104      	bne.n	800865a <__swbuf_r+0x64>
 8008650:	4621      	mov	r1, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f7ff fbe8 	bl	8007e28 <_fflush_r>
 8008658:	b938      	cbnz	r0, 800866a <__swbuf_r+0x74>
 800865a:	4638      	mov	r0, r7
 800865c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865e:	4621      	mov	r1, r4
 8008660:	4628      	mov	r0, r5
 8008662:	f000 f805 	bl	8008670 <__swsetup_r>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0d5      	beq.n	8008616 <__swbuf_r+0x20>
 800866a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800866e:	e7f4      	b.n	800865a <__swbuf_r+0x64>

08008670 <__swsetup_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4b2a      	ldr	r3, [pc, #168]	; (800871c <__swsetup_r+0xac>)
 8008674:	4605      	mov	r5, r0
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	460c      	mov	r4, r1
 800867a:	b118      	cbz	r0, 8008684 <__swsetup_r+0x14>
 800867c:	6a03      	ldr	r3, [r0, #32]
 800867e:	b90b      	cbnz	r3, 8008684 <__swsetup_r+0x14>
 8008680:	f7fe fa54 	bl	8006b2c <__sinit>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868a:	0718      	lsls	r0, r3, #28
 800868c:	d422      	bmi.n	80086d4 <__swsetup_r+0x64>
 800868e:	06d9      	lsls	r1, r3, #27
 8008690:	d407      	bmi.n	80086a2 <__swsetup_r+0x32>
 8008692:	2309      	movs	r3, #9
 8008694:	602b      	str	r3, [r5, #0]
 8008696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a0:	e034      	b.n	800870c <__swsetup_r+0x9c>
 80086a2:	0758      	lsls	r0, r3, #29
 80086a4:	d512      	bpl.n	80086cc <__swsetup_r+0x5c>
 80086a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a8:	b141      	cbz	r1, 80086bc <__swsetup_r+0x4c>
 80086aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ae:	4299      	cmp	r1, r3
 80086b0:	d002      	beq.n	80086b8 <__swsetup_r+0x48>
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7ff f9a2 	bl	80079fc <_free_r>
 80086b8:	2300      	movs	r3, #0
 80086ba:	6363      	str	r3, [r4, #52]	; 0x34
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	2300      	movs	r3, #0
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f043 0308 	orr.w	r3, r3, #8
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	b94b      	cbnz	r3, 80086ec <__swsetup_r+0x7c>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e2:	d003      	beq.n	80086ec <__swsetup_r+0x7c>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f840 	bl	800876c <__smakebuf_r>
 80086ec:	89a0      	ldrh	r0, [r4, #12]
 80086ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f2:	f010 0301 	ands.w	r3, r0, #1
 80086f6:	d00a      	beq.n	800870e <__swsetup_r+0x9e>
 80086f8:	2300      	movs	r3, #0
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	425b      	negs	r3, r3
 8008700:	61a3      	str	r3, [r4, #24]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	b943      	cbnz	r3, 8008718 <__swsetup_r+0xa8>
 8008706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800870a:	d1c4      	bne.n	8008696 <__swsetup_r+0x26>
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	0781      	lsls	r1, r0, #30
 8008710:	bf58      	it	pl
 8008712:	6963      	ldrpl	r3, [r4, #20]
 8008714:	60a3      	str	r3, [r4, #8]
 8008716:	e7f4      	b.n	8008702 <__swsetup_r+0x92>
 8008718:	2000      	movs	r0, #0
 800871a:	e7f7      	b.n	800870c <__swsetup_r+0x9c>
 800871c:	200000dc 	.word	0x200000dc

08008720 <__swhatbuf_r>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	2900      	cmp	r1, #0
 800872a:	b096      	sub	sp, #88	; 0x58
 800872c:	4615      	mov	r5, r2
 800872e:	461e      	mov	r6, r3
 8008730:	da0d      	bge.n	800874e <__swhatbuf_r+0x2e>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008738:	f04f 0100 	mov.w	r1, #0
 800873c:	bf0c      	ite	eq
 800873e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008742:	2340      	movne	r3, #64	; 0x40
 8008744:	2000      	movs	r0, #0
 8008746:	6031      	str	r1, [r6, #0]
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	b016      	add	sp, #88	; 0x58
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	466a      	mov	r2, sp
 8008750:	f000 f858 	bl	8008804 <_fstat_r>
 8008754:	2800      	cmp	r0, #0
 8008756:	dbec      	blt.n	8008732 <__swhatbuf_r+0x12>
 8008758:	9901      	ldr	r1, [sp, #4]
 800875a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800875e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008762:	4259      	negs	r1, r3
 8008764:	4159      	adcs	r1, r3
 8008766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876a:	e7eb      	b.n	8008744 <__swhatbuf_r+0x24>

0800876c <__smakebuf_r>:
 800876c:	898b      	ldrh	r3, [r1, #12]
 800876e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008770:	079d      	lsls	r5, r3, #30
 8008772:	4606      	mov	r6, r0
 8008774:	460c      	mov	r4, r1
 8008776:	d507      	bpl.n	8008788 <__smakebuf_r+0x1c>
 8008778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	2301      	movs	r3, #1
 8008782:	6163      	str	r3, [r4, #20]
 8008784:	b002      	add	sp, #8
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	ab01      	add	r3, sp, #4
 800878a:	466a      	mov	r2, sp
 800878c:	f7ff ffc8 	bl	8008720 <__swhatbuf_r>
 8008790:	9900      	ldr	r1, [sp, #0]
 8008792:	4605      	mov	r5, r0
 8008794:	4630      	mov	r0, r6
 8008796:	f7fd ff21 	bl	80065dc <_malloc_r>
 800879a:	b948      	cbnz	r0, 80087b0 <__smakebuf_r+0x44>
 800879c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a0:	059a      	lsls	r2, r3, #22
 80087a2:	d4ef      	bmi.n	8008784 <__smakebuf_r+0x18>
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	f043 0302 	orr.w	r3, r3, #2
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	e7e3      	b.n	8008778 <__smakebuf_r+0xc>
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	6020      	str	r0, [r4, #0]
 80087b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	9b00      	ldr	r3, [sp, #0]
 80087bc:	6163      	str	r3, [r4, #20]
 80087be:	9b01      	ldr	r3, [sp, #4]
 80087c0:	6120      	str	r0, [r4, #16]
 80087c2:	b15b      	cbz	r3, 80087dc <__smakebuf_r+0x70>
 80087c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 f82d 	bl	8008828 <_isatty_r>
 80087ce:	b128      	cbz	r0, 80087dc <__smakebuf_r+0x70>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	431d      	orrs	r5, r3
 80087e0:	81a5      	strh	r5, [r4, #12]
 80087e2:	e7cf      	b.n	8008784 <__smakebuf_r+0x18>

080087e4 <_close_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_close_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f9 fe4f 	bl	8002492 <_close>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_close_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_close_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000704 	.word	0x20000704

08008804 <_fstat_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_fstat_r+0x20>)
 8008808:	2300      	movs	r3, #0
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	f7f9 fe4a 	bl	80024aa <_fstat>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d102      	bne.n	8008820 <_fstat_r+0x1c>
 800881a:	682b      	ldr	r3, [r5, #0]
 800881c:	b103      	cbz	r3, 8008820 <_fstat_r+0x1c>
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	bf00      	nop
 8008824:	20000704 	.word	0x20000704

08008828 <_isatty_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d06      	ldr	r5, [pc, #24]	; (8008844 <_isatty_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7f9 fe49 	bl	80024ca <_isatty>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_isatty_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_isatty_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	20000704 	.word	0x20000704

08008848 <_lseek_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d07      	ldr	r5, [pc, #28]	; (8008868 <_lseek_r+0x20>)
 800884c:	4604      	mov	r4, r0
 800884e:	4608      	mov	r0, r1
 8008850:	4611      	mov	r1, r2
 8008852:	2200      	movs	r2, #0
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f7f9 fe42 	bl	80024e0 <_lseek>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_lseek_r+0x1e>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_lseek_r+0x1e>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	20000704 	.word	0x20000704

0800886c <_read_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_read_r+0x20>)
 8008870:	4604      	mov	r4, r0
 8008872:	4608      	mov	r0, r1
 8008874:	4611      	mov	r1, r2
 8008876:	2200      	movs	r2, #0
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f7f9 fdec 	bl	8002458 <_read>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_read_r+0x1e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_read_r+0x1e>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	20000704 	.word	0x20000704

08008890 <_write_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d07      	ldr	r5, [pc, #28]	; (80088b0 <_write_r+0x20>)
 8008894:	4604      	mov	r4, r0
 8008896:	4608      	mov	r0, r1
 8008898:	4611      	mov	r1, r2
 800889a:	2200      	movs	r2, #0
 800889c:	602a      	str	r2, [r5, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	f7f9 f86c 	bl	800197c <_write>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_write_r+0x1e>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_write_r+0x1e>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	20000704 	.word	0x20000704

080088b4 <memcpy>:
 80088b4:	440a      	add	r2, r1
 80088b6:	4291      	cmp	r1, r2
 80088b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088bc:	d100      	bne.n	80088c0 <memcpy+0xc>
 80088be:	4770      	bx	lr
 80088c0:	b510      	push	{r4, lr}
 80088c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ca:	4291      	cmp	r1, r2
 80088cc:	d1f9      	bne.n	80088c2 <memcpy+0xe>
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <__assert_func>:
 80088d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d2:	4614      	mov	r4, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__assert_func+0x2c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	68d8      	ldr	r0, [r3, #12]
 80088de:	b14c      	cbz	r4, 80088f4 <__assert_func+0x24>
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <__assert_func+0x30>)
 80088e2:	9100      	str	r1, [sp, #0]
 80088e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088e8:	4906      	ldr	r1, [pc, #24]	; (8008904 <__assert_func+0x34>)
 80088ea:	462b      	mov	r3, r5
 80088ec:	f000 f836 	bl	800895c <fiprintf>
 80088f0:	f000 f853 	bl	800899a <abort>
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <__assert_func+0x38>)
 80088f6:	461c      	mov	r4, r3
 80088f8:	e7f3      	b.n	80088e2 <__assert_func+0x12>
 80088fa:	bf00      	nop
 80088fc:	200000dc 	.word	0x200000dc
 8008900:	08008e37 	.word	0x08008e37
 8008904:	08008e44 	.word	0x08008e44
 8008908:	08008e72 	.word	0x08008e72

0800890c <_calloc_r>:
 800890c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890e:	fba1 2402 	umull	r2, r4, r1, r2
 8008912:	b94c      	cbnz	r4, 8008928 <_calloc_r+0x1c>
 8008914:	4611      	mov	r1, r2
 8008916:	9201      	str	r2, [sp, #4]
 8008918:	f7fd fe60 	bl	80065dc <_malloc_r>
 800891c:	9a01      	ldr	r2, [sp, #4]
 800891e:	4605      	mov	r5, r0
 8008920:	b930      	cbnz	r0, 8008930 <_calloc_r+0x24>
 8008922:	4628      	mov	r0, r5
 8008924:	b003      	add	sp, #12
 8008926:	bd30      	pop	{r4, r5, pc}
 8008928:	220c      	movs	r2, #12
 800892a:	6002      	str	r2, [r0, #0]
 800892c:	2500      	movs	r5, #0
 800892e:	e7f8      	b.n	8008922 <_calloc_r+0x16>
 8008930:	4621      	mov	r1, r4
 8008932:	f7fe f99f 	bl	8006c74 <memset>
 8008936:	e7f4      	b.n	8008922 <_calloc_r+0x16>

08008938 <__ascii_mbtowc>:
 8008938:	b082      	sub	sp, #8
 800893a:	b901      	cbnz	r1, 800893e <__ascii_mbtowc+0x6>
 800893c:	a901      	add	r1, sp, #4
 800893e:	b142      	cbz	r2, 8008952 <__ascii_mbtowc+0x1a>
 8008940:	b14b      	cbz	r3, 8008956 <__ascii_mbtowc+0x1e>
 8008942:	7813      	ldrb	r3, [r2, #0]
 8008944:	600b      	str	r3, [r1, #0]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	1e10      	subs	r0, r2, #0
 800894a:	bf18      	it	ne
 800894c:	2001      	movne	r0, #1
 800894e:	b002      	add	sp, #8
 8008950:	4770      	bx	lr
 8008952:	4610      	mov	r0, r2
 8008954:	e7fb      	b.n	800894e <__ascii_mbtowc+0x16>
 8008956:	f06f 0001 	mvn.w	r0, #1
 800895a:	e7f8      	b.n	800894e <__ascii_mbtowc+0x16>

0800895c <fiprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b503      	push	{r0, r1, lr}
 8008960:	4601      	mov	r1, r0
 8008962:	ab03      	add	r3, sp, #12
 8008964:	4805      	ldr	r0, [pc, #20]	; (800897c <fiprintf+0x20>)
 8008966:	f853 2b04 	ldr.w	r2, [r3], #4
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f7ff f8bb 	bl	8007ae8 <_vfiprintf_r>
 8008972:	b002      	add	sp, #8
 8008974:	f85d eb04 	ldr.w	lr, [sp], #4
 8008978:	b003      	add	sp, #12
 800897a:	4770      	bx	lr
 800897c:	200000dc 	.word	0x200000dc

08008980 <__ascii_wctomb>:
 8008980:	b149      	cbz	r1, 8008996 <__ascii_wctomb+0x16>
 8008982:	2aff      	cmp	r2, #255	; 0xff
 8008984:	bf85      	ittet	hi
 8008986:	238a      	movhi	r3, #138	; 0x8a
 8008988:	6003      	strhi	r3, [r0, #0]
 800898a:	700a      	strbls	r2, [r1, #0]
 800898c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008990:	bf98      	it	ls
 8008992:	2001      	movls	r0, #1
 8008994:	4770      	bx	lr
 8008996:	4608      	mov	r0, r1
 8008998:	4770      	bx	lr

0800899a <abort>:
 800899a:	b508      	push	{r3, lr}
 800899c:	2006      	movs	r0, #6
 800899e:	f000 f82b 	bl	80089f8 <raise>
 80089a2:	2001      	movs	r0, #1
 80089a4:	f7f9 fd4e 	bl	8002444 <_exit>

080089a8 <_raise_r>:
 80089a8:	291f      	cmp	r1, #31
 80089aa:	b538      	push	{r3, r4, r5, lr}
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	d904      	bls.n	80089bc <_raise_r+0x14>
 80089b2:	2316      	movs	r3, #22
 80089b4:	6003      	str	r3, [r0, #0]
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089be:	b112      	cbz	r2, 80089c6 <_raise_r+0x1e>
 80089c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089c4:	b94b      	cbnz	r3, 80089da <_raise_r+0x32>
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f830 	bl	8008a2c <_getpid_r>
 80089cc:	462a      	mov	r2, r5
 80089ce:	4601      	mov	r1, r0
 80089d0:	4620      	mov	r0, r4
 80089d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d6:	f000 b817 	b.w	8008a08 <_kill_r>
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d00a      	beq.n	80089f4 <_raise_r+0x4c>
 80089de:	1c59      	adds	r1, r3, #1
 80089e0:	d103      	bne.n	80089ea <_raise_r+0x42>
 80089e2:	2316      	movs	r3, #22
 80089e4:	6003      	str	r3, [r0, #0]
 80089e6:	2001      	movs	r0, #1
 80089e8:	e7e7      	b.n	80089ba <_raise_r+0x12>
 80089ea:	2400      	movs	r4, #0
 80089ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089f0:	4628      	mov	r0, r5
 80089f2:	4798      	blx	r3
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7e0      	b.n	80089ba <_raise_r+0x12>

080089f8 <raise>:
 80089f8:	4b02      	ldr	r3, [pc, #8]	; (8008a04 <raise+0xc>)
 80089fa:	4601      	mov	r1, r0
 80089fc:	6818      	ldr	r0, [r3, #0]
 80089fe:	f7ff bfd3 	b.w	80089a8 <_raise_r>
 8008a02:	bf00      	nop
 8008a04:	200000dc 	.word	0x200000dc

08008a08 <_kill_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d07      	ldr	r5, [pc, #28]	; (8008a28 <_kill_r+0x20>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	f7f9 fd05 	bl	8002424 <_kill>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d102      	bne.n	8008a24 <_kill_r+0x1c>
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	b103      	cbz	r3, 8008a24 <_kill_r+0x1c>
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000704 	.word	0x20000704

08008a2c <_getpid_r>:
 8008a2c:	f7f9 bcf2 	b.w	8002414 <_getpid>

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
