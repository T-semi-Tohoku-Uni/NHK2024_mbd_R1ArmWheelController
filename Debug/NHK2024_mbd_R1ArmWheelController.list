
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000068  08006f10  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006f10  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014991  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000283e  00000000  00000000  00034a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d16  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a83  00000000  00000000  000390de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001313d  00000000  00000000  00061b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001081e9  00000000  00000000  00074c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005080  00000000  00000000  0017ce88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00181f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006d88 	.word	0x08006d88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006d88 	.word	0x08006d88

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_FDCAN_RxFifo1Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Set Interrupt Handler
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	uint8_t FDCAN3_RxData[8];
	// Error Handling
	printf("FIFO1 callback\r\n");
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <HAL_FDCAN_RxFifo1Callback+0x60>)
 80005c8:	f005 fd76 	bl	80060b8 <puts>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01c      	beq.n	8000610 <HAL_FDCAN_RxFifo1Callback+0x54>
	if (hfdcan != &hfdcan3) return;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_FDCAN_RxFifo1Callback+0x64>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d11a      	bne.n	8000614 <HAL_FDCAN_RxFifo1Callback+0x58>

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &FDCAN3_RxHeader, FDCAN3_RxData) != HAL_OK) {
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_FDCAN_RxFifo1Callback+0x68>)
 80005e4:	2141      	movs	r1, #65	; 0x41
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f002 ffb8 	bl	800355c <HAL_FDCAN_GetRxMessage>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d007      	beq.n	8000602 <HAL_FDCAN_RxFifo1Callback+0x46>
		printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <HAL_FDCAN_RxFifo1Callback+0x6c>)
 80005fa:	f005 fcf7 	bl	8005fec <iprintf>
		Error_Handler();
 80005fe:	f000 fa7f 	bl	8000b00 <Error_Handler>
	}

	switch(FDCAN3_RxHeader.Identifier) {
		default:
			printf("CAN ID %" PRIu32 "is not cached from FIFO1 callback\r\n", FDCAN3_RxHeader.Identifier);
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_FDCAN_RxFifo1Callback+0x68>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <HAL_FDCAN_RxFifo1Callback+0x70>)
 800060a:	f005 fcef 	bl	8005fec <iprintf>
 800060e:	e002      	b.n	8000616 <HAL_FDCAN_RxFifo1Callback+0x5a>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <HAL_FDCAN_RxFifo1Callback+0x5a>
	if (hfdcan != &hfdcan3) return;
 8000614:	bf00      	nop
	}
}
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	08006da0 	.word	0x08006da0
 8000620:	20000150 	.word	0x20000150
 8000624:	2000026c 	.word	0x2000026c
 8000628:	08006db0 	.word	0x08006db0
 800062c:	08006dc4 	.word	0x08006dc4

08000630 <_write>:

int _write(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b29a      	uxth	r2, r3
 8000640:	2308      	movs	r3, #8
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <_write+0x24>)
 8000646:	f004 fd63 	bl	8005110 <HAL_UART_Transmit>
    return len;
 800064a:	687b      	ldr	r3, [r7, #4]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200001b4 	.word	0x200001b4

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fce3 	bl	8001026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f828 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fa28 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f9fc 	bl	8000a64 <MX_DMA_Init>
  MX_ADC1_Init();
 800066c:	f000 f86e 	bl	800074c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000670:	f000 f9ae 	bl	80009d0 <MX_LPUART1_UART_Init>
  MX_FDCAN3_Init();
 8000674:	f000 f912 	bl	800089c <MX_FDCAN3_Init>
  /* USER CODE BEGIN 2 */

  // Start ADC and save at DMA
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000678:	217f      	movs	r1, #127	; 0x7f
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <main+0x4c>)
 800067c:	f002 f874 	bl	8002768 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
 8000680:	2204      	movs	r2, #4
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <main+0x50>)
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x4c>)
 8000686:	f001 f961 	bl	800194c <HAL_ADC_Start_DMA>

  printf("Complete Initialize\r\n");
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <main+0x54>)
 800068c:	f005 fd14 	bl	80060b8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		printf("%d\r\n", arm_positions[0]);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <main+0x50>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <main+0x58>)
 8000698:	f005 fca8 	bl	8005fec <iprintf>
  		HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fd33 	bl	8001108 <HAL_Delay>
  		printf("%d\r\n", arm_positions[0]);
 80006a2:	e7f5      	b.n	8000690 <main+0x38>
 80006a4:	20000084 	.word	0x20000084
 80006a8:	20000294 	.word	0x20000294
 80006ac:	08006df4 	.word	0x08006df4
 80006b0:	08006e0c 	.word	0x08006e0c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2238      	movs	r2, #56	; 0x38
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fd00 	bl	80060c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006da:	f003 fca9 	bl	8004030 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f8:	230a      	movs	r3, #10
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fd33 	bl	8004178 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000718:	f000 f9f2 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f004 f831 	bl	800479c <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000740:	f000 f9de 	bl	8000b00 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2220      	movs	r2, #32
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fcaf 	bl	80060c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <MX_ADC1_Init+0x13c>)
 800076c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000772:	4b45      	ldr	r3, [pc, #276]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000778:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	4b43      	ldr	r3, [pc, #268]	; (8000888 <MX_ADC1_Init+0x13c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000786:	4b40      	ldr	r3, [pc, #256]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <MX_ADC1_Init+0x13c>)
 800078e:	2201      	movs	r2, #1
 8000790:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000792:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000794:	2204      	movs	r2, #4
 8000796:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000798:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <MX_ADC1_Init+0x13c>)
 800079a:	2200      	movs	r2, #0
 800079c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800079e:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007d6:	f000 fefd 	bl	80015d4 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007e0:	f000 f98e 	bl	8000b00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4826      	ldr	r0, [pc, #152]	; (8000888 <MX_ADC1_Init+0x13c>)
 80007f0:	f002 f81c 	bl	800282c <HAL_ADCEx_MultiModeConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 f981 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0x140>)
 8000800:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000802:	2306      	movs	r3, #6
 8000804:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000806:	2307      	movs	r3, #7
 8000808:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080a:	237f      	movs	r3, #127	; 0x7f
 800080c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800080e:	2304      	movs	r3, #4
 8000810:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_ADC1_Init+0x13c>)
 800081c:	f001 f988 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000826:	f000 f96b 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0x144>)
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800082e:	230c      	movs	r3, #12
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000838:	f001 f97a 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000842:	f000 f95d 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_ADC1_Init+0x148>)
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800084a:	2312      	movs	r3, #18
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000854:	f001 f96c 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800085e:	f000 f94f 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_ADC1_Init+0x14c>)
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000866:	2318      	movs	r3, #24
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_ADC1_Init+0x13c>)
 8000870:	f001 f95e 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800087a:	f000 f941 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	; 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084
 800088c:	04300002 	.word	0x04300002
 8000890:	08600004 	.word	0x08600004
 8000894:	19200040 	.word	0x19200040
 8000898:	1d500080 	.word	0x1d500080

0800089c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008a4:	4a48      	ldr	r2, [pc, #288]	; (80009c8 <MX_FDCAN3_Init+0x12c>)
 80008a6:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008a8:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008bc:	2200      	movs	r2, #0
 80008be:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80008c0:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80008c6:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 80008cc:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 80008d8:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008da:	220f      	movs	r2, #15
 80008dc:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80008f0:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80008fe:	2201      	movs	r2, #1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 8000904:	2200      	movs	r2, #0
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 800090a:	2200      	movs	r2, #0
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 8000910:	f002 fc16 	bl	8003140 <HAL_FDCAN_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 800091a:	f000 f8f1 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  // Set TXHeader
	FDCAN3_TxHeader.IdType = FDCAN_STANDARD_ID;
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_FDCAN3_Init+0x130>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
	FDCAN3_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MX_FDCAN3_Init+0x130>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	FDCAN3_TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_FDCAN3_Init+0x130>)
 800092c:	2208      	movs	r2, #8
 800092e:	60da      	str	r2, [r3, #12]
	FDCAN3_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_FDCAN3_Init+0x130>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
	FDCAN3_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_FDCAN3_Init+0x130>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
	FDCAN3_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_FDCAN3_Init+0x130>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
	FDCAN3_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_FDCAN3_Init+0x130>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
	FDCAN3_TxHeader.MessageMarker = 0;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_FDCAN3_Init+0x130>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]

	// Set FDCAN3 filter config
	FDCAN_FilterTypeDef FDCAN3_sFilterConfig;
	FDCAN3_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
	FDCAN3_sFilterConfig.FilterIndex = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
	FDCAN3_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
	FDCAN3_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 800095a:	2302      	movs	r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
	FDCAN3_sFilterConfig.FilterID1 = 0x000;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
	FDCAN3_sFilterConfig.FilterID2 = 0x7ff;
 8000962:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000966:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN3_sFilterConfig) != HAL_OK) {
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 800096e:	f002 fd41 	bl	80033f4 <HAL_FDCAN_ConfigFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_FDCAN3_Init+0xe0>
		Error_Handler();
 8000978:	f000 f8c2 	bl	8000b00 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 800097c:	2300      	movs	r3, #0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	2202      	movs	r2, #2
 8000984:	2102      	movs	r1, #2
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 8000988:	f002 fd8e 	bl	80034a8 <HAL_FDCAN_ConfigGlobalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_FDCAN3_Init+0xfa>
		Error_Handler();
 8000992:	f000 f8b5 	bl	8000b00 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 8000998:	f002 fdb7 	bl	800350a <HAL_FDCAN_Start>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_FDCAN3_Init+0x10a>
		Error_Handler();
 80009a2:	f000 f8ad 	bl	8000b00 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_FDCAN3_Init+0x128>)
 80009ac:	f002 fede 	bl	800376c <HAL_FDCAN_ActivateNotification>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_FDCAN3_Init+0x11e>
		Error_Handler();
 80009b6:	f000 f8a3 	bl	8000b00 <Error_Handler>
	}
  /* USER CODE END FDCAN3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000150 	.word	0x20000150
 80009c8:	40006c00 	.word	0x40006c00
 80009cc:	20000248 	.word	0x20000248

080009d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <MX_LPUART1_UART_Init+0x90>)
 80009d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a14:	f004 fb2c 	bl	8005070 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f86f 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a26:	f005 f955 	bl	8005cd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a30:	f000 f866 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a38:	f005 f98a 	bl	8005d50 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f85d 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_LPUART1_UART_Init+0x8c>)
 8000a48:	f005 f90b 	bl	8005c62 <HAL_UARTEx_DisableFifoMode>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a52:	f000 f855 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001b4 	.word	0x200001b4
 8000a60:	40008000 	.word	0x40008000

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6493      	str	r3, [r2, #72]	; 0x48
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_DMA_Init+0x50>)
 8000a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f002 f8a7 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f002 f8be 	bl	8002c26 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_GPIO_Init+0x44>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <MX_GPIO_Init+0x44>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_GPIO_Init+0x44>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_GPIO_Init+0x44>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <MX_GPIO_Init+0x44>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_GPIO_Init+0x44>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0a0      	sub	sp, #128	; 0x80
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	2254      	movs	r2, #84	; 0x54
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 faa7 	bl	80060c8 <memset>
  if(hadc->Instance==ADC1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b82:	d177      	bne.n	8000c74 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 f81d 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff ffae 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_ADC_MspInit+0x128>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000c00:	f003 f894 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c04:	2303      	movs	r3, #3
 8000c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f003 f887 	bl	8003d2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_ADC_MspInit+0x134>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c26:	2205      	movs	r2, #5
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c5a:	f001 ffff 	bl	8002c5c <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000c64:	f7ff ff4c 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3780      	adds	r7, #128	; 0x80
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000800 	.word	0x48000800
 8000c84:	200000f0 	.word	0x200000f0
 8000c88:	40020008 	.word	0x40020008

08000c8c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09e      	sub	sp, #120	; 0x78
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2254      	movs	r2, #84	; 0x54
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fa0b 	bl	80060c8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <HAL_FDCAN_MspInit+0xcc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d149      	bne.n	8000d50 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 ff81 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000cd8:	f7ff ff12 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_FDCAN_MspInit+0xd0>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PA8     ------> FDCAN3_RX
    PA15     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000d0c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f002 fffe 	bl	8003d2c <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2058      	movs	r0, #88	; 0x58
 8000d36:	f001 ff5c 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000d3a:	2058      	movs	r0, #88	; 0x58
 8000d3c:	f001 ff73 	bl	8002c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2059      	movs	r0, #89	; 0x59
 8000d46:	f001 ff54 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000d4a:	2059      	movs	r0, #89	; 0x59
 8000d4c:	f001 ff6b 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3778      	adds	r7, #120	; 0x78
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40006c00 	.word	0x40006c00
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09e      	sub	sp, #120	; 0x78
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 f9a1 	bl	80060c8 <memset>
  if(huart->Instance==LPUART1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d136      	bne.n	8000dfe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d90:	2320      	movs	r3, #32
 8000d92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 ff19 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff feaa 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000dec:	230c      	movs	r3, #12
 8000dee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f002 ff97 	bl	8003d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3778      	adds	r7, #120	; 0x78
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40008000 	.word	0x40008000
 8000e0c:	40021000 	.word	0x40021000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f936 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA1_Channel1_IRQHandler+0x10>)
 8000e6a:	f002 f81a 	bl	8002ea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000f0 	.word	0x200000f0

08000e78 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <FDCAN3_IT0_IRQHandler+0x10>)
 8000e7e:	f002 fd5b 	bl	8003938 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000150 	.word	0x20000150

08000e8c <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <FDCAN3_IT1_IRQHandler+0x10>)
 8000e92:	f002 fd51 	bl	8003938 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000150 	.word	0x20000150

08000ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	605a      	str	r2, [r3, #4]
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_isatty>:

int _isatty(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f005 f8b0 	bl	80060d8 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20020000 	.word	0x20020000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	2000029c 	.word	0x2000029c
 8000fac:	200003f0 	.word	0x200003f0

08000fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f005 f86f 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001006:	f7ff fb27 	bl	8000658 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   r0, =_estack
 800100c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001018:	08006ea8 	.word	0x08006ea8
  ldr r2, =_sbss
 800101c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001020:	200003f0 	.word	0x200003f0

08001024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_2_IRQHandler>

08001026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f001 fdd3 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	200f      	movs	r0, #15
 8001038:	f000 f80e 	bl	8001058 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e001      	b.n	800104c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001048:	f7ff fd60 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	79fb      	ldrb	r3, [r7, #7]

}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_InitTick+0x68>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d022      	beq.n	80010b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_InitTick+0x6c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_InitTick+0x68>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001078:	fbb1 f3f3 	udiv	r3, r1, r3
 800107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fdde 	bl	8002c42 <HAL_SYSTICK_Config>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10f      	bne.n	80010ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d809      	bhi.n	80010a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001092:	2200      	movs	r2, #0
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109a:	f001 fdaa 	bl	8002bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_InitTick+0x70>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e007      	b.n	80010b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e004      	b.n	80010b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e001      	b.n	80010b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_IncTick+0x1c>)
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200002a0 	.word	0x200002a0
 80010ec:	20000008 	.word	0x20000008

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200002a0 	.word	0x200002a0

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001120:	d004      	beq.n	800112c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_Delay+0x40>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112c:	bf00      	nop
 800112e:	f7ff ffdf 	bl	80010f0 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	d8f7      	bhi.n	800112e <HAL_Delay+0x26>
  {
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000008 	.word	0x20000008

0800114c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3360      	adds	r3, #96	; 0x60
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <LL_ADC_SetOffset+0x44>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	03fff000 	.word	0x03fff000

080011fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3360      	adds	r3, #96	; 0x60
 800120a:	461a      	mov	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3360      	adds	r3, #96	; 0x60
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800125e:	b480      	push	{r7}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3360      	adds	r3, #96	; 0x60
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	431a      	orrs	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001288:	bf00      	nop
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3360      	adds	r3, #96	; 0x60
 80012a4:	461a      	mov	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	615a      	str	r2, [r3, #20]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3330      	adds	r3, #48	; 0x30
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	211f      	movs	r1, #31
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 011f 	and.w	r1, r3, #31
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136e:	b480      	push	{r7}
 8001370:	b087      	sub	sp, #28
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3314      	adds	r3, #20
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0e5b      	lsrs	r3, r3, #25
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0d1b      	lsrs	r3, r3, #20
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2107      	movs	r1, #7
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0d1b      	lsrs	r3, r3, #20
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0318 	and.w	r3, r3, #24
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e8:	40d9      	lsrs	r1, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	400b      	ands	r3, r1
 80013ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	0007ffff 	.word	0x0007ffff

0800140c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6093      	str	r3, [r2, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001500:	f043 0202 	orr.w	r2, r3, #2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <LL_ADC_IsEnabled+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_IsEnabled+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d101      	bne.n	8001552 <LL_ADC_IsDisableOngoing+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_IsDisableOngoing+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1a9      	b.n	8001942 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff faa9 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff19 	bl	800144c <LL_ADC_IsDeepPowerDownEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff feff 	bl	8001428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff34 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d115      	bne.n	8001666 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff18 	bl	8001474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001644:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <HAL_ADC_Init+0x2e4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	4a9c      	ldr	r2, [pc, #624]	; (80018bc <HAL_ADC_Init+0x2e8>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	3301      	adds	r3, #1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001658:	e002      	b.n	8001660 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff16 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	f043 0210 	orr.w	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff76 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 800169c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 8142 	bne.w	8001930 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 813e 	bne.w	8001930 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016bc:	f043 0202 	orr.w	r2, r3, #2
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff23 	bl	8001514 <LL_ADC_IsEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d141      	bne.n	8001758 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016dc:	d004      	beq.n	80016e8 <HAL_ADC_Init+0x114>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a77      	ldr	r2, [pc, #476]	; (80018c0 <HAL_ADC_Init+0x2ec>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d10f      	bne.n	8001708 <HAL_ADC_Init+0x134>
 80016e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016ec:	f7ff ff12 	bl	8001514 <LL_ADC_IsEnabled>
 80016f0:	4604      	mov	r4, r0
 80016f2:	4873      	ldr	r0, [pc, #460]	; (80018c0 <HAL_ADC_Init+0x2ec>)
 80016f4:	f7ff ff0e 	bl	8001514 <LL_ADC_IsEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4323      	orrs	r3, r4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e012      	b.n	800172e <HAL_ADC_Init+0x15a>
 8001708:	486e      	ldr	r0, [pc, #440]	; (80018c4 <HAL_ADC_Init+0x2f0>)
 800170a:	f7ff ff03 	bl	8001514 <LL_ADC_IsEnabled>
 800170e:	4604      	mov	r4, r0
 8001710:	486d      	ldr	r0, [pc, #436]	; (80018c8 <HAL_ADC_Init+0x2f4>)
 8001712:	f7ff feff 	bl	8001514 <LL_ADC_IsEnabled>
 8001716:	4603      	mov	r3, r0
 8001718:	431c      	orrs	r4, r3
 800171a:	486c      	ldr	r0, [pc, #432]	; (80018cc <HAL_ADC_Init+0x2f8>)
 800171c:	f7ff fefa 	bl	8001514 <LL_ADC_IsEnabled>
 8001720:	4603      	mov	r3, r0
 8001722:	4323      	orrs	r3, r4
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x172>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <HAL_ADC_Init+0x2ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x176>
 8001746:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <HAL_ADC_Init+0x2fc>)
 8001748:	e000      	b.n	800174c <HAL_ADC_Init+0x178>
 800174a:	4a62      	ldr	r2, [pc, #392]	; (80018d4 <HAL_ADC_Init+0x300>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff fcfa 	bl	800114c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7f5b      	ldrb	r3, [r3, #29]
 800175c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001762:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001768:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800176e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001776:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001782:	2b01      	cmp	r3, #1
 8001784:	d106      	bne.n	8001794 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	045b      	lsls	r3, r3, #17
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_ADC_Init+0x304>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fee5 	bl	80015ae <LL_ADC_INJ_IsConversionOngoing>
 80017e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d17f      	bne.n	80018ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d17c      	bne.n	80018ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	430b      	orrs	r3, r1
 800181a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d017      	beq.n	8001854 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800183c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6911      	ldr	r1, [r2, #16]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001852:	e013      	b.n	800187c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001862:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001878:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001882:	2b01      	cmp	r3, #1
 8001884:	d12a      	bne.n	80018dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018a8:	430a      	orrs	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	e019      	b.n	80018ec <HAL_ADC_Init+0x318>
 80018b8:	20000000 	.word	0x20000000
 80018bc:	053e2d63 	.word	0x053e2d63
 80018c0:	50000100 	.word	0x50000100
 80018c4:	50000400 	.word	0x50000400
 80018c8:	50000500 	.word	0x50000500
 80018cc:	50000600 	.word	0x50000600
 80018d0:	50000300 	.word	0x50000300
 80018d4:	50000700 	.word	0x50000700
 80018d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d10c      	bne.n	800190e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f023 010f 	bic.w	r1, r3, #15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	e007      	b.n	800191e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 020f 	bic.w	r2, r2, #15
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	65da      	str	r2, [r3, #92]	; 0x5c
 800192e:	e007      	b.n	8001940 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001940:	7ffb      	ldrb	r3, [r7, #31]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	bf00      	nop

0800194c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001960:	d004      	beq.n	800196c <HAL_ADC_Start_DMA+0x20>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a5a      	ldr	r2, [pc, #360]	; (8001ad0 <HAL_ADC_Start_DMA+0x184>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_ADC_Start_DMA+0x24>
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_ADC_Start_DMA+0x188>)
 800196e:	e000      	b.n	8001972 <HAL_ADC_Start_DMA+0x26>
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_ADC_Start_DMA+0x18c>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fd4a 	bl	800140c <LL_ADC_GetMultimode>
 8001978:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe02 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 809b 	bne.w	8001ac2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADC_Start_DMA+0x4e>
 8001996:	2302      	movs	r3, #2
 8001998:	e096      	b.n	8001ac8 <HAL_ADC_Start_DMA+0x17c>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_ADC_Start_DMA+0x190>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d008      	beq.n	80019be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d002      	beq.n	80019be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d17a      	bne.n	8001ab4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fcf6 	bl	80023b0 <ADC_Enable>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d16d      	bne.n	8001aaa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_ADC_Start_DMA+0x184>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d009      	beq.n	8001a00 <HAL_ADC_Start_DMA+0xb4>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_ADC_Start_DMA+0x194>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d002      	beq.n	80019fc <HAL_ADC_Start_DMA+0xb0>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	e003      	b.n	8001a04 <HAL_ADC_Start_DMA+0xb8>
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_ADC_Start_DMA+0x198>)
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Start_DMA+0xb8>
 8001a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d002      	beq.n	8001a12 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f023 0206 	bic.w	r2, r3, #6
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	661a      	str	r2, [r3, #96]	; 0x60
 8001a36:	e002      	b.n	8001a3e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <HAL_ADC_Start_DMA+0x19c>)
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_ADC_Start_DMA+0x1a0>)
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <HAL_ADC_Start_DMA+0x1a4>)
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	221c      	movs	r2, #28
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0210 	orr.w	r2, r2, #16
 8001a74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3340      	adds	r3, #64	; 0x40
 8001a90:	4619      	mov	r1, r3
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f001 f989 	bl	8002dac <HAL_DMA_Start_IT>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fd5c 	bl	8001560 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001aa8:	e00d      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001ab2:	e008      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001ac0:	e001      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	50000100 	.word	0x50000100
 8001ad4:	50000300 	.word	0x50000300
 8001ad8:	50000700 	.word	0x50000700
 8001adc:	50000600 	.word	0x50000600
 8001ae0:	50000500 	.word	0x50000500
 8001ae4:	50000400 	.word	0x50000400
 8001ae8:	0800259b 	.word	0x0800259b
 8001aec:	08002673 	.word	0x08002673
 8001af0:	0800268f 	.word	0x0800268f

08001af4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b6      	sub	sp, #216	; 0xd8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x24>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f000 bc13 	b.w	800237a <HAL_ADC_ConfigChannel+0x84a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd11 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 83f3 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fbcb 	bl	8001316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fcff 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd0b 	bl	80015ae <LL_ADC_INJ_IsConversionOngoing>
 8001b98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 81d9 	bne.w	8001f58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 81d4 	bne.w	8001f58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb8:	d10f      	bne.n	8001bda <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff fbd2 	bl	800136e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fb79 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001bd8:	e00e      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f7ff fbc1 	bl	800136e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fb69 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d022      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6919      	ldr	r1, [r3, #16]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c2a:	f7ff fac3 	bl	80011b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f7ff fb0f 	bl	800125e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x126>
 8001c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c54:	e000      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x128>
 8001c56:	2300      	movs	r3, #0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f7ff fb1b 	bl	8001294 <LL_ADC_SetOffsetSaturation>
 8001c5e:	e17b      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fac8 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x15c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fabd 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	e01e      	b.n	8001cca <HAL_ADC_ConfigChannel+0x19a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fab2 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e004      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	e018      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1e4>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e004      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fa81 	bl	8001228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fa65 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x222>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa5a 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	e01e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x260>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fa4f 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e004      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x278>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	e018      	b.n	8001dda <HAL_ADC_ConfigChannel+0x2aa>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	e004      	b.n	8001dda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d106      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fa1e 	bl	8001228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2102      	movs	r1, #2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fa02 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x2e8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2102      	movs	r1, #2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f9f7 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	f003 021f 	and.w	r2, r3, #31
 8001e16:	e01e      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x326>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f9ec 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e46:	2320      	movs	r3, #32
 8001e48:	e004      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x33e>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	e016      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x36c>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e004      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d106      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f9bd 	bl	8001228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f9a1 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10a      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x3aa>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2103      	movs	r1, #3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f996 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	e017      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x3da>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f98b 	bl	80011fc <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d105      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3f2>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0e9b      	lsrs	r3, r3, #26
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	e011      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x416>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e003      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2103      	movs	r1, #3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f968 	bl	8001228 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fad9 	bl	8001514 <LL_ADC_IsEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 813d 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fa24 	bl	80013c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4aa2      	ldr	r2, [pc, #648]	; (800220c <HAL_ADC_ConfigChannel+0x6dc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f040 812e 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x480>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	bf94      	ite	ls
 8001fa8:	2301      	movls	r3, #1
 8001faa:	2300      	movhi	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e019      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x4b4>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	bf94      	ite	ls
 8001fde:	2301      	movls	r3, #1
 8001fe0:	2300      	movhi	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d079      	beq.n	80020dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x4d4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002002:	e015      	b.n	8002030 <HAL_ADC_ConfigChannel+0x500>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002014:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x520>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	e017      	b.n	8002080 <HAL_ADC_ConfigChannel+0x550>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800206c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	ea42 0103 	orr.w	r1, r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x576>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	051b      	lsls	r3, r3, #20
 80020a4:	e018      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x5a8>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e003      	b.n	80020ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80020c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d8:	430b      	orrs	r3, r1
 80020da:	e07e      	b.n	80021da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x5c8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	3301      	adds	r3, #1
 80020f0:	069b      	lsls	r3, r3, #26
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f6:	e015      	b.n	8002124 <HAL_ADC_ConfigChannel+0x5f4>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x614>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	e017      	b.n	8002174 <HAL_ADC_ConfigChannel+0x644>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	61fb      	str	r3, [r7, #28]
  return result;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	ea42 0103 	orr.w	r1, r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x670>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	3b1e      	subs	r3, #30
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219e:	e01b      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x6a8>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	613b      	str	r3, [r7, #16]
  return result;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	051b      	lsls	r3, r3, #20
 80021d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021de:	4619      	mov	r1, r3
 80021e0:	f7ff f8c5 	bl	800136e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_ADC_ConfigChannel+0x6e0>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80be 	beq.w	800236e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021fa:	d004      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x6d6>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_ADC_ConfigChannel+0x6e4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10a      	bne.n	800221c <HAL_ADC_ConfigChannel+0x6ec>
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_ADC_ConfigChannel+0x6e8>)
 8002208:	e009      	b.n	800221e <HAL_ADC_ConfigChannel+0x6ee>
 800220a:	bf00      	nop
 800220c:	407f0000 	.word	0x407f0000
 8002210:	80080000 	.word	0x80080000
 8002214:	50000100 	.word	0x50000100
 8002218:	50000300 	.word	0x50000300
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_ADC_ConfigChannel+0x854>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ffba 	bl	8001198 <LL_ADC_GetCommonPathInternalCh>
 8002224:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_ADC_ConfigChannel+0x858>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_ADC_ConfigChannel+0x70c>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_ADC_ConfigChannel+0x85c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d13a      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d134      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002250:	d005      	beq.n	800225e <HAL_ADC_ConfigChannel+0x72e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_ADC_ConfigChannel+0x860>)
 8002258:	4293      	cmp	r3, r2
 800225a:	f040 8085 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002266:	d004      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x742>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a49      	ldr	r2, [pc, #292]	; (8002394 <HAL_ADC_ConfigChannel+0x864>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x746>
 8002272:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_ADC_ConfigChannel+0x868>)
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x748>
 8002276:	4a43      	ldr	r2, [pc, #268]	; (8002384 <HAL_ADC_ConfigChannel+0x854>)
 8002278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f7fe ff75 	bl	8001172 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002288:	4b44      	ldr	r3, [pc, #272]	; (800239c <HAL_ADC_ConfigChannel+0x86c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	4a44      	ldr	r2, [pc, #272]	; (80023a0 <HAL_ADC_ConfigChannel+0x870>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a2:	e002      	b.n	80022aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b0:	e05a      	b.n	8002368 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_ADC_ConfigChannel+0x874>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d125      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11f      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a31      	ldr	r2, [pc, #196]	; (8002394 <HAL_ADC_ConfigChannel+0x864>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d104      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x7ac>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_ADC_ConfigChannel+0x878>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d047      	beq.n	800236c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x7c0>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <HAL_ADC_ConfigChannel+0x864>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x7c4>
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_ADC_ConfigChannel+0x868>)
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x7c6>
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_ADC_ConfigChannel+0x854>)
 80022f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f7fe ff36 	bl	8001172 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002306:	e031      	b.n	800236c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_ADC_ConfigChannel+0x87c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12d      	bne.n	800236e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d127      	bne.n	800236e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_ADC_ConfigChannel+0x864>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002330:	d004      	beq.n	800233c <HAL_ADC_ConfigChannel+0x80c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_ADC_ConfigChannel+0x864>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x810>
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_ADC_ConfigChannel+0x868>)
 800233e:	e000      	b.n	8002342 <HAL_ADC_ConfigChannel+0x812>
 8002340:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_ADC_ConfigChannel+0x854>)
 8002342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f7fe ff10 	bl	8001172 <LL_ADC_SetCommonPathInternalCh>
 8002352:	e00c      	b.n	800236e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002366:	e002      	b.n	800236e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002368:	bf00      	nop
 800236a:	e000      	b.n	800236e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800236c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002376:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800237a:	4618      	mov	r0, r3
 800237c:	37d8      	adds	r7, #216	; 0xd8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	50000700 	.word	0x50000700
 8002388:	c3210000 	.word	0xc3210000
 800238c:	90c00010 	.word	0x90c00010
 8002390:	50000600 	.word	0x50000600
 8002394:	50000100 	.word	0x50000100
 8002398:	50000300 	.word	0x50000300
 800239c:	20000000 	.word	0x20000000
 80023a0:	053e2d63 	.word	0x053e2d63
 80023a4:	c7520000 	.word	0xc7520000
 80023a8:	50000500 	.word	0x50000500
 80023ac:	cb840000 	.word	0xcb840000

080023b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f8a7 	bl	8001514 <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d176      	bne.n	80024ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <ADC_Enable+0x114>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e062      	b.n	80024bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f862 	bl	80014c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002408:	d004      	beq.n	8002414 <ADC_Enable+0x64>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <ADC_Enable+0x118>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <ADC_Enable+0x68>
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <ADC_Enable+0x11c>)
 8002416:	e000      	b.n	800241a <ADC_Enable+0x6a>
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <ADC_Enable+0x120>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe febc 	bl	8001198 <LL_ADC_GetCommonPathInternalCh>
 8002420:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002426:	2b00      	cmp	r3, #0
 8002428:	d013      	beq.n	8002452 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <ADC_Enable+0x124>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <ADC_Enable+0x128>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002444:	e002      	b.n	800244c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002452:	f7fe fe4d 	bl	80010f0 <HAL_GetTick>
 8002456:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002458:	e028      	b.n	80024ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f858 	bl	8001514 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f828 	bl	80014c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002474:	f7fe fe3c 	bl	80010f0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d914      	bls.n	80024ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d00d      	beq.n	80024ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	f043 0210 	orr.w	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d1cf      	bne.n	800245a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	8000003f 	.word	0x8000003f
 80024c8:	50000100 	.word	0x50000100
 80024cc:	50000300 	.word	0x50000300
 80024d0:	50000700 	.word	0x50000700
 80024d4:	20000000 	.word	0x20000000
 80024d8:	053e2d63 	.word	0x053e2d63

080024dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f826 	bl	800153a <LL_ADC_IsDisableOngoing>
 80024ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f80d 	bl	8001514 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d047      	beq.n	8002590 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d144      	bne.n	8002590 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030d 	and.w	r3, r3, #13
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10c      	bne.n	800252e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ffe7 	bl	80014ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2203      	movs	r2, #3
 8002524:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002526:	f7fe fde3 	bl	80010f0 <HAL_GetTick>
 800252a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252c:	e029      	b.n	8002582 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e023      	b.n	8002592 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800254a:	f7fe fdd1 	bl	80010f0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d914      	bls.n	8002582 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1dc      	bne.n	800254a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d14b      	bne.n	800264c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d021      	beq.n	8002612 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fe8c 	bl	80012f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d032      	beq.n	8002644 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12b      	bne.n	8002644 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11f      	bne.n	8002644 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002610:	e018      	b.n	8002644 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff fa55 	bl	8001af4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800264a:	e00e      	b.n	800266a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff fa5f 	bl	8001b1c <HAL_ADC_ErrorCallback>
}
 800265e:	e004      	b.n	800266a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff fa41 	bl	8001b08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fa31 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <LL_ADC_IsEnabled>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsEnabled+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsEnabled+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_StartCalibration>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002704:	4313      	orrs	r3, r2
 8002706:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_IsCalibrationOnGoing>:
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800272a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800272e:	d101      	bne.n	8002734 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_REG_IsConversionOngoing>:
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d101      	bne.n	800275a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_ADCEx_Calibration_Start+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e04d      	b.n	8002820 <HAL_ADCEx_Calibration_Start+0xb8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fea5 	bl	80024dc <ADC_Disable>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d136      	bne.n	800280a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a4:	f023 0302 	bic.w	r3, r3, #2
 80027a8:	f043 0202 	orr.w	r2, r3, #2
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff96 	bl	80026e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027bc:	e014      	b.n	80027e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_ADCEx_Calibration_Start+0xc0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d90d      	bls.n	80027e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f023 0312 	bic.w	r3, r3, #18
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e01b      	b.n	8002820 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff94 	bl	800271a <LL_ADC_IsCalibrationOnGoing>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e2      	bne.n	80027be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
 8002808:	e005      	b.n	8002816 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	0004de01 	.word	0x0004de01

0800282c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b0a1      	sub	sp, #132	; 0x84
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e0e7      	b.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002852:	2300      	movs	r3, #0
 8002854:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002856:	2300      	movs	r3, #0
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002862:	d102      	bne.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	e009      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d102      	bne.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002874:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	e001      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0be      	b.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff4f 	bl	8002742 <LL_ADC_REG_IsConversionOngoing>
 80028a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff49 	bl	8002742 <LL_ADC_REG_IsConversionOngoing>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80a0 	bne.w	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 809c 	bne.w	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c8:	d004      	beq.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a55      	ldr	r2, [pc, #340]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d101      	bne.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028d4:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028d6:	e000      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d04b      	beq.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f6:	035b      	lsls	r3, r3, #13
 80028f8:	430b      	orrs	r3, r1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002908:	d004      	beq.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a45      	ldr	r2, [pc, #276]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10f      	bne.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002914:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002918:	f7ff fed3 	bl	80026c2 <LL_ADC_IsEnabled>
 800291c:	4604      	mov	r4, r0
 800291e:	4841      	ldr	r0, [pc, #260]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002920:	f7ff fecf 	bl	80026c2 <LL_ADC_IsEnabled>
 8002924:	4603      	mov	r3, r0
 8002926:	4323      	orrs	r3, r4
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e012      	b.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002934:	483c      	ldr	r0, [pc, #240]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002936:	f7ff fec4 	bl	80026c2 <LL_ADC_IsEnabled>
 800293a:	4604      	mov	r4, r0
 800293c:	483b      	ldr	r0, [pc, #236]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800293e:	f7ff fec0 	bl	80026c2 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	431c      	orrs	r4, r3
 8002946:	483c      	ldr	r0, [pc, #240]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002948:	f7ff febb 	bl	80026c2 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d056      	beq.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002966:	f023 030f 	bic.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	430a      	orrs	r2, r1
 8002974:	431a      	orrs	r2, r3
 8002976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002978:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800297a:	e047      	b.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800297c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002986:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10f      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800299c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029a0:	f7ff fe8f 	bl	80026c2 <LL_ADC_IsEnabled>
 80029a4:	4604      	mov	r4, r0
 80029a6:	481f      	ldr	r0, [pc, #124]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029a8:	f7ff fe8b 	bl	80026c2 <LL_ADC_IsEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4323      	orrs	r3, r4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e012      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029be:	f7ff fe80 	bl	80026c2 <LL_ADC_IsEnabled>
 80029c2:	4604      	mov	r4, r0
 80029c4:	4819      	ldr	r0, [pc, #100]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029c6:	f7ff fe7c 	bl	80026c2 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	431c      	orrs	r4, r3
 80029ce:	481a      	ldr	r0, [pc, #104]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029d0:	f7ff fe77 	bl	80026c2 <LL_ADC_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4323      	orrs	r3, r4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ee:	f023 030f 	bic.w	r3, r3, #15
 80029f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f6:	e009      	b.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a0a:	e000      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3784      	adds	r7, #132	; 0x84
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	50000100 	.word	0x50000100
 8002a28:	50000400 	.word	0x50000400
 8002a2c:	50000500 	.word	0x50000500
 8002a30:	50000300 	.word	0x50000300
 8002a34:	50000700 	.word	0x50000700
 8002a38:	50000600 	.word	0x50000600

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff40 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff33 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa4 	bl	8002b98 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e08d      	b.n	8002d8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_DMA_Init+0x138>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d80f      	bhi.n	8002c9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_DMA_Init+0x13c>)
 8002c82:	4413      	add	r3, r2
 8002c84:	4a45      	ldr	r2, [pc, #276]	; (8002d9c <HAL_DMA_Init+0x140>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	009a      	lsls	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_DMA_Init+0x144>)
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_DMA_Init+0x148>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_DMA_Init+0x140>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <HAL_DMA_Init+0x14c>)
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9b6 	bl	800307c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d18:	d102      	bne.n	8002d20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_DMA_Init+0x104>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d80c      	bhi.n	8002d60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9d6 	bl	80030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	e008      	b.n	8002d72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40020407 	.word	0x40020407
 8002d98:	bffdfff8 	.word	0xbffdfff8
 8002d9c:	cccccccd 	.word	0xcccccccd
 8002da0:	40020000 	.word	0x40020000
 8002da4:	bffdfbf8 	.word	0xbffdfbf8
 8002da8:	40020400 	.word	0x40020400

08002dac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Start_IT+0x20>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e066      	b.n	8002e9a <HAL_DMA_Start_IT+0xee>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d155      	bne.n	8002e8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f8fb 	bl	8003000 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 020e 	orr.w	r2, r2, #14
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00f      	b.n	8002e44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 020a 	orr.w	r2, r2, #10
 8002e42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e005      	b.n	8002e98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d026      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x7a>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f003 021f 	and.w	r2, r3, #31
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2104      	movs	r1, #4
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d071      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f1a:	e06c      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2202      	movs	r2, #2
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02e      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d029      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020a 	bic.w	r2, r2, #10
 8002f56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d038      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f8c:	e033      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2208      	movs	r2, #8
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d025      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 020e 	bic.w	r2, r2, #14
 8002fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
}
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003016:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f202 	lsl.w	r2, r1, r2
 800303c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b10      	cmp	r3, #16
 800304c:	d108      	bne.n	8003060 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800305e:	e007      	b.n	8003070 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d802      	bhi.n	8003096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e001      	b.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003098:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3b08      	subs	r3, #8
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2201      	movs	r2, #1
 80030d0:	409a      	lsls	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40020407 	.word	0x40020407
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020820 	.word	0x40020820
 80030f0:	cccccccd 	.word	0xcccccccd
 80030f4:	40020880 	.word	0x40020880

080030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800311a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	1000823f 	.word	0x1000823f
 800313c:	40020940 	.word	0x40020940

08003140 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e147      	b.n	80033e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fd90 	bl	8000c8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0210 	bic.w	r2, r2, #16
 800317a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7fd ffb8 	bl	80010f0 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003182:	e012      	b.n	80031aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003184:	f7fd ffb4 	bl	80010f0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d90b      	bls.n	80031aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e11b      	b.n	80033e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d0e5      	beq.n	8003184 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c8:	f7fd ff92 	bl	80010f0 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031ce:	e012      	b.n	80031f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031d0:	f7fd ff8e 	bl	80010f0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b0a      	cmp	r3, #10
 80031dc:	d90b      	bls.n	80031f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0f5      	b.n	80033e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0e5      	beq.n	80031d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0202 	orr.w	r2, r2, #2
 8003212:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a74      	ldr	r2, [pc, #464]	; (80033ec <HAL_FDCAN_Init+0x2ac>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d103      	bne.n	8003226 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800321e:	4a74      	ldr	r2, [pc, #464]	; (80033f0 <HAL_FDCAN_Init+0x2b0>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7c1b      	ldrb	r3, [r3, #16]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323c:	619a      	str	r2, [r3, #24]
 800323e:	e007      	b.n	8003250 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7c5b      	ldrb	r3, [r3, #17]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d108      	bne.n	800326a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003266:	619a      	str	r2, [r3, #24]
 8003268:	e007      	b.n	800327a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003278:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7c9b      	ldrb	r3, [r3, #18]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003290:	619a      	str	r2, [r3, #24]
 8003292:	e007      	b.n	80032a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80032c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0210 	bic.w	r2, r2, #16
 80032d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0204 	orr.w	r2, r2, #4
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	e02c      	b.n	800334e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d028      	beq.n	800334e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d01c      	beq.n	800333e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003312:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0210 	orr.w	r2, r2, #16
 8003322:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d110      	bne.n	800334e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e007      	b.n	800334e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	3b01      	subs	r3, #1
 8003354:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	3b01      	subs	r3, #1
 800335c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800335e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003366:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	3b01      	subs	r3, #1
 8003370:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003376:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003378:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003382:	d115      	bne.n	80033b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	3b01      	subs	r3, #1
 8003390:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003392:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	3b01      	subs	r3, #1
 800339a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800339c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fc44 	bl	8003c54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40006400 	.word	0x40006400
 80033f0:	40006500 	.word	0x40006500

080033f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003404:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d002      	beq.n	8003412 <HAL_FDCAN_ConfigFilter+0x1e>
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d13d      	bne.n	800348e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003426:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800342e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e01d      	b.n	800348a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	075a      	lsls	r2, r3, #29
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	079a      	lsls	r2, r3, #30
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3304      	adds	r3, #4
 8003482:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e006      	b.n	800349c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d116      	bne.n	80034f0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	011a      	lsls	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	431a      	orrs	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	431a      	orrs	r2, r3
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e006      	b.n	80034fe <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d110      	bne.n	8003540 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e006      	b.n	800354e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003574:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003576:	7efb      	ldrb	r3, [r7, #27]
 8003578:	2b02      	cmp	r3, #2
 800357a:	f040 80e8 	bne.w	800374e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d137      	bne.n	80035f4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0db      	b.n	800375c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10a      	bne.n	80035cc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80035c8:	2301      	movs	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	e036      	b.n	8003662 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0a3      	b.n	800375c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10a      	bne.n	800363c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003638:	2301      	movs	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e005      	b.n	8003692 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	3304      	adds	r3, #4
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e1b      	lsrs	r3, r3, #24
 80036e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0fda      	lsrs	r2, r3, #31
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	3304      	adds	r3, #4
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	e00a      	b.n	800371e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	441a      	add	r2, r3
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	440b      	add	r3, r1
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	3301      	adds	r3, #1
 800371c:	623b      	str	r3, [r7, #32]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	461a      	mov	r2, r3
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	4293      	cmp	r3, r2
 800372c:	d3ec      	bcc.n	8003708 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d105      	bne.n	8003740 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800373e:	e004      	b.n	800374a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e006      	b.n	800375c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	f043 0208 	orr.w	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	372c      	adds	r7, #44	; 0x2c
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	08006e2c 	.word	0x08006e2c

0800376c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800377e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d003      	beq.n	800378e <HAL_FDCAN_ActivateNotification+0x22>
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b02      	cmp	r3, #2
 800378a:	f040 80c8 	bne.w	800391e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d03b      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d031      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d027      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01d      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00c      	beq.n	8003832 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13b      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d131      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d127      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11d      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0202 	orr.w	r2, r2, #2
 80038cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	430a      	orrs	r2, r1
 8003906:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e006      	b.n	800392c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	f043 0202 	orr.w	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003954:	4013      	ands	r3, r2
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396c:	4013      	ands	r3, r2
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	4013      	ands	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003992:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	4013      	ands	r3, r2
 800399e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039aa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2240      	movs	r2, #64	; 0x40
 80039e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f916 	bl	8003c16 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d019      	beq.n	8003a28 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d014      	beq.n	8003a28 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a06:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8d8 	bl	8003bd8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8a2 	bl	8003b82 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8a2 	bl	8003b98 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fc fda9 	bl	80005bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f890 	bl	8003bae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003aaa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f87c 	bl	8003bc2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f880 	bl	8003bee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f878 	bl	8003c02 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003b4a:	69f9      	ldr	r1, [r7, #28]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f876 	bl	8003c3e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f858 	bl	8003c2a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3730      	adds	r7, #48	; 0x30
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003c5e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d103      	bne.n	8003c72 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003c70:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d103      	bne.n	8003c84 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003c82:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c92:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	041a      	lsls	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	061a      	lsls	r2, r3, #24
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e005      	b.n	8003d06 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3f3      	bcc.n	8003cfa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	4000a400 	.word	0x4000a400
 8003d24:	40006800 	.word	0x40006800
 8003d28:	40006c00 	.word	0x40006c00

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d3a:	e15a      	b.n	8003ff2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 814c 	beq.w	8003fec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d005      	beq.n	8003d6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d130      	bne.n	8003dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003da2:	2201      	movs	r2, #1
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 0201 	and.w	r2, r3, #1
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d017      	beq.n	8003e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d123      	bne.n	8003e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	6939      	ldr	r1, [r7, #16]
 8003e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	2203      	movs	r2, #3
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0203 	and.w	r2, r3, #3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80a6 	beq.w	8003fec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea0:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6613      	str	r3, [r2, #96]	; 0x60
 8003eac:	4b58      	ldr	r3, [pc, #352]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb8:	4a56      	ldr	r2, [pc, #344]	; (8004014 <HAL_GPIO_Init+0x2e8>)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	220f      	movs	r2, #15
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ee2:	d01f      	beq.n	8003f24 <HAL_GPIO_Init+0x1f8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a4c      	ldr	r2, [pc, #304]	; (8004018 <HAL_GPIO_Init+0x2ec>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d019      	beq.n	8003f20 <HAL_GPIO_Init+0x1f4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a4b      	ldr	r2, [pc, #300]	; (800401c <HAL_GPIO_Init+0x2f0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_GPIO_Init+0x1f0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	; (8004020 <HAL_GPIO_Init+0x2f4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00d      	beq.n	8003f18 <HAL_GPIO_Init+0x1ec>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a49      	ldr	r2, [pc, #292]	; (8004024 <HAL_GPIO_Init+0x2f8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <HAL_GPIO_Init+0x1e8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_GPIO_Init+0x1e4>
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	e00a      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f10:	2306      	movs	r3, #6
 8003f12:	e008      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e006      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e004      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e002      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f24:	2300      	movs	r3, #0
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	f002 0203 	and.w	r2, r2, #3
 8003f2c:	0092      	lsls	r2, r2, #2
 8003f2e:	4093      	lsls	r3, r2
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f36:	4937      	ldr	r1, [pc, #220]	; (8004014 <HAL_GPIO_Init+0x2e8>)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f68:	4a30      	ldr	r2, [pc, #192]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f92:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f47f ae9d 	bne.w	8003d3c <HAL_GPIO_Init+0x10>
  }
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40021000 	.word	0x40021000
 8004014:	40010000 	.word	0x40010000
 8004018:	48000400 	.word	0x48000400
 800401c:	48000800 	.word	0x48000800
 8004020:	48000c00 	.word	0x48000c00
 8004024:	48001000 	.word	0x48001000
 8004028:	48001400 	.word	0x48001400
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d141      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800403e:	4b4b      	ldr	r3, [pc, #300]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d131      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800404c:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004052:	4a46      	ldr	r2, [pc, #280]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004064:	4a41      	ldr	r2, [pc, #260]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2232      	movs	r2, #50	; 0x32
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0c9b      	lsrs	r3, r3, #18
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	e002      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408a:	4b38      	ldr	r3, [pc, #224]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d102      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d158      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e057      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b6:	4a2d      	ldr	r2, [pc, #180]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040c0:	e04d      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d141      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d131      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e8:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f8:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2232      	movs	r2, #50	; 0x32
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	0c9b      	lsrs	r3, r3, #18
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	e002      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d102      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d112      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e011      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800414c:	e007      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40007000 	.word	0x40007000
 8004170:	20000000 	.word	0x20000000
 8004174:	431bde83 	.word	0x431bde83

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e2fe      	b.n	8004788 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d075      	beq.n	8004282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b97      	ldr	r3, [pc, #604]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4b94      	ldr	r3, [pc, #592]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3e>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_OscConfig+0x44>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x108>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d157      	bne.n	8004280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e2d9      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x74>
 80041de:	4b85      	ldr	r3, [pc, #532]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a84      	ldr	r2, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7b      	ldr	r2, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 8004210:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fc ff5e 	bl	80010f0 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fc ff5a 	bl	80010f0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e29e      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xc0>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fc ff4a 	bl	80010f0 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fc ff46 	bl	80010f0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e28a      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004272:	4b60      	ldr	r3, [pc, #384]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0xe8>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004298:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d102      	bne.n	80042ae <HAL_RCC_OscConfig+0x136>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_OscConfig+0x13c>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d11f      	bne.n	80042f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_OscConfig+0x154>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e25d      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	4946      	ldr	r1, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042e0:	4b45      	ldr	r3, [pc, #276]	; (80043f8 <HAL_RCC_OscConfig+0x280>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc feb7 	bl	8001058 <HAL_InitTick>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d043      	beq.n	8004378 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e249      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fc fef2 	bl	80010f0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fc feee 	bl	80010f0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e232      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	492d      	ldr	r1, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
 8004342:	e01a      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800434a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fc fece 	bl	80010f0 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fc feca 	bl	80010f0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e20e      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1e0>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d041      	beq.n	800440a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fc fea7 	bl	80010f0 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fc fea3 	bl	80010f0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1e7      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ef      	beq.n	80043a6 <HAL_RCC_OscConfig+0x22e>
 80043c6:	e020      	b.n	800440a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fc fe8a 	bl	80010f0 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043de:	e00d      	b.n	80043fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fc fe86 	bl	80010f0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d906      	bls.n	80043fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1ca      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043fc:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ea      	bne.n	80043e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80a6 	beq.w	8004564 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800441c:	4b84      	ldr	r3, [pc, #528]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x2b4>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x2b6>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	4a7e      	ldr	r2, [pc, #504]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
 800443e:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	4b79      	ldr	r3, [pc, #484]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fc fe43 	bl	80010f0 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fc fe3f 	bl	80010f0 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e183      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_RCC_OscConfig+0x32e>
 8004494:	4b66      	ldr	r3, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a4:	e024      	b.n	80044f0 <HAL_RCC_OscConfig+0x378>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d110      	bne.n	80044d0 <HAL_RCC_OscConfig+0x358>
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	4a5a      	ldr	r2, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ce:	e00f      	b.n	80044f0 <HAL_RCC_OscConfig+0x378>
 80044d0:	4b57      	ldr	r3, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	4a56      	ldr	r2, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	4a52      	ldr	r2, [pc, #328]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d016      	beq.n	8004526 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc fdfa 	bl	80010f0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc fdf6 	bl	80010f0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e138      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ed      	beq.n	8004500 <HAL_RCC_OscConfig+0x388>
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fc fde3 	bl	80010f0 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fc fddf 	bl	80010f0 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e121      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004544:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ed      	bne.n	800452e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004552:	7ffb      	ldrb	r3, [r7, #31]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d03c      	beq.n	80045ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01c      	beq.n	80045b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457e:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fc fdb2 	bl	80010f0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004590:	f7fc fdae 	bl	80010f0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e0f2      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ef      	beq.n	8004590 <HAL_RCC_OscConfig+0x418>
 80045b0:	e01b      	b.n	80045ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fc fd95 	bl	80010f0 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ca:	f7fc fd91 	bl	80010f0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0d5      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ef      	bne.n	80045ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80c9 	beq.w	8004786 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	f000 8083 	beq.w	8004708 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d15e      	bne.n	80046c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fc fd6b 	bl	80010f0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	e00c      	b.n	8004638 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fc fd67 	bl	80010f0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d905      	bls.n	8004638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0ab      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004638:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ec      	bne.n	800461e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	4b52      	ldr	r3, [pc, #328]	; (8004794 <HAL_RCC_OscConfig+0x61c>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6a11      	ldr	r1, [r2, #32]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004654:	3a01      	subs	r2, #1
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800465e:	0212      	lsls	r2, r2, #8
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0552      	lsls	r2, r2, #21
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0652      	lsls	r2, r2, #25
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800467e:	06d2      	lsls	r2, r2, #27
 8004680:	430a      	orrs	r2, r1
 8004682:	4943      	ldr	r1, [pc, #268]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 8004684:	4313      	orrs	r3, r2
 8004686:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a40      	ldr	r2, [pc, #256]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fc fd26 	bl	80010f0 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fc fd22 	bl	80010f0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e066      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x530>
 80046c6:	e05e      	b.n	8004786 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a30      	ldr	r2, [pc, #192]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fc fd0c 	bl	80010f0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fc fd08 	bl	80010f0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04c      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046fa:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4924      	ldr	r1, [pc, #144]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <HAL_RCC_OscConfig+0x620>)
 8004702:	4013      	ands	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
 8004706:	e03e      	b.n	8004786 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e039      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004714:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <HAL_RCC_OscConfig+0x618>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0203 	and.w	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	429a      	cmp	r2, r3
 8004726:	d12c      	bne.n	8004782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	3b01      	subs	r3, #1
 8004734:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d123      	bne.n	8004782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d11b      	bne.n	8004782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d113      	bne.n	8004782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d109      	bne.n	8004782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	019f800c 	.word	0x019f800c
 8004798:	feeefffc 	.word	0xfeeefffc

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e11e      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b91      	ldr	r3, [pc, #580]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b8e      	ldr	r3, [pc, #568]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 020f 	bic.w	r2, r3, #15
 80047ca:	498c      	ldr	r1, [pc, #560]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e106      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d073      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d129      	bne.n	800484c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f8:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0f4      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004808:	f000 f99e 	bl	8004b48 <RCC_GetSysClockFreqFromPLLSource>
 800480c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4a7c      	ldr	r2, [pc, #496]	; (8004a04 <HAL_RCC_ClockConfig+0x268>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d93f      	bls.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004816:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d033      	beq.n	8004896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d12f      	bne.n	8004896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483e:	4a70      	ldr	r2, [pc, #448]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e024      	b.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0c6      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	4b66      	ldr	r3, [pc, #408]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0be      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004874:	f000 f8ce 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4a61      	ldr	r2, [pc, #388]	; (8004a04 <HAL_RCC_ClockConfig+0x268>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d909      	bls.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004896:	4b5a      	ldr	r3, [pc, #360]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 0203 	bic.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4957      	ldr	r1, [pc, #348]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fc fc22 	bl	80010f0 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	f7fc fc1e 	bl	80010f0 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e095      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1eb      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f0:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004910:	4a3b      	ldr	r2, [pc, #236]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4936      	ldr	r1, [pc, #216]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	e008      	b.n	800493e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d105      	bne.n	800493e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d21d      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 020f 	bic.w	r2, r3, #15
 8004954:	4929      	ldr	r1, [pc, #164]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800495c:	f7fc fbc8 	bl	80010f0 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fc fbc4 	bl	80010f0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e03b      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d1ed      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4917      	ldr	r1, [pc, #92]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	490f      	ldr	r1, [pc, #60]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c6:	f000 f825 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	490c      	ldr	r1, [pc, #48]	; (8004a08 <HAL_RCC_ClockConfig+0x26c>)
 80049d8:	5ccb      	ldrb	r3, [r1, r3]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x270>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x274>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fb34 	bl	8001058 <HAL_InitTick>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40021000 	.word	0x40021000
 8004a04:	04c4b400 	.word	0x04c4b400
 8004a08:	08006e14 	.word	0x08006e14
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d102      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e047      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e03e      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d136      	bne.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	0a12      	lsrs	r2, r2, #8
 8004a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
      break;
 8004a80:	e00c      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	0a12      	lsrs	r2, r2, #8
 8004a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
      break;
 8004a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0e5b      	lsrs	r3, r3, #25
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e001      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004abc:	693b      	ldr	r3, [r7, #16]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	007a1200 	.word	0x007a1200

08004ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000000 	.word	0x20000000

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	08006e24 	.word	0x08006e24

08004b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b20:	f7ff ffda 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0adb      	lsrs	r3, r3, #11
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4904      	ldr	r1, [pc, #16]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	08006e24 	.word	0x08006e24

08004b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10c      	bne.n	8004b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	0a12      	lsrs	r2, r2, #8
 8004b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
    break;
 8004b84:	e00c      	b.n	8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	0a12      	lsrs	r2, r2, #8
 8004b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
    break;
 8004b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bba:	687b      	ldr	r3, [r7, #4]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	007a1200 	.word	0x007a1200
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8098 	beq.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	4a3f      	ldr	r2, [pc, #252]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a39      	ldr	r2, [pc, #228]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c2a:	f7fc fa61 	bl	80010f0 <HAL_GetTick>
 8004c2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c30:	e009      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c32:	f7fc fa5d 	bl	80010f0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d902      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	74fb      	strb	r3, [r7, #19]
        break;
 8004c44:	e005      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ef      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d159      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca0:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fc fa1d 	bl	80010f0 <HAL_GetTick>
 8004cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fc fa19 	bl	80010f0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ec      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	4903      	ldr	r1, [pc, #12]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	74bb      	strb	r3, [r7, #18]
 8004d02:	e005      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d10:	7c7b      	ldrb	r3, [r7, #17]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4ba7      	ldr	r3, [pc, #668]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	4aa6      	ldr	r2, [pc, #664]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d2e:	4ba1      	ldr	r3, [pc, #644]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f023 0203 	bic.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	499d      	ldr	r1, [pc, #628]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d50:	4b98      	ldr	r3, [pc, #608]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f023 020c 	bic.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	4995      	ldr	r1, [pc, #596]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d72:	4b90      	ldr	r3, [pc, #576]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	498c      	ldr	r1, [pc, #560]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d94:	4b87      	ldr	r3, [pc, #540]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4984      	ldr	r1, [pc, #528]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004db6:	4b7f      	ldr	r3, [pc, #508]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	497b      	ldr	r1, [pc, #492]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dd8:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	4973      	ldr	r1, [pc, #460]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfa:	4b6e      	ldr	r3, [pc, #440]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	496a      	ldr	r1, [pc, #424]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e1c:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4962      	ldr	r1, [pc, #392]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e3e:	4b5d      	ldr	r3, [pc, #372]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	4959      	ldr	r1, [pc, #356]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e60:	4b54      	ldr	r3, [pc, #336]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e66:	f023 0203 	bic.w	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	4951      	ldr	r1, [pc, #324]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e82:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4948      	ldr	r1, [pc, #288]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea4:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4940      	ldr	r1, [pc, #256]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	4932      	ldr	r1, [pc, #200]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efa:	d105      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efc:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	4924      	ldr	r1, [pc, #144]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d019      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa2:	d109      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a02      	ldr	r2, [pc, #8]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
 8004fb0:	e002      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4926      	ldr	r1, [pc, #152]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe4:	4b21      	ldr	r3, [pc, #132]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	4918      	ldr	r1, [pc, #96]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005026:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800503a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	490a      	ldr	r1, [pc, #40]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005060:	7cbb      	ldrb	r3, [r7, #18]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e042      	b.n	8005108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fb fe63 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2224      	movs	r2, #36	; 0x24
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fbb2 	bl	8005824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8b3 	bl	800522c <UART_SetConfig>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e01b      	b.n	8005108 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fc31 	bl	8005968 <UART_CheckIdleState>
 8005106:	4603      	mov	r3, r0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	2b20      	cmp	r3, #32
 8005128:	d17b      	bne.n	8005222 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_UART_Transmit+0x26>
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e074      	b.n	8005224 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	; 0x21
 8005146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800514a:	f7fb ffd1 	bl	80010f0 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d108      	bne.n	800517c <HAL_UART_Transmit+0x6c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e003      	b.n	8005184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005184:	e030      	b.n	80051e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fc93 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e03d      	b.n	8005224 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	3302      	adds	r3, #2
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e007      	b.n	80051d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1c8      	bne.n	8005186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fc5c 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e006      	b.n	8005224 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005230:	b08c      	sub	sp, #48	; 0x30
 8005232:	af00      	add	r7, sp, #0
 8005234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	431a      	orrs	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	431a      	orrs	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	4313      	orrs	r3, r2
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4baa      	ldr	r3, [pc, #680]	; (8005504 <UART_SetConfig+0x2d8>)
 800525c:	4013      	ands	r3, r2
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005264:	430b      	orrs	r3, r1
 8005266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a9f      	ldr	r2, [pc, #636]	; (8005508 <UART_SetConfig+0x2dc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	4313      	orrs	r3, r2
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f023 010f 	bic.w	r1, r3, #15
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a90      	ldr	r2, [pc, #576]	; (800550c <UART_SetConfig+0x2e0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d125      	bne.n	800531c <UART_SetConfig+0xf0>
 80052d0:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <UART_SetConfig+0x2e4>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d81a      	bhi.n	8005314 <UART_SetConfig+0xe8>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0xb8>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005305 	.word	0x08005305
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fa:	e116      	b.n	800552a <UART_SetConfig+0x2fe>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005302:	e112      	b.n	800552a <UART_SetConfig+0x2fe>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530a:	e10e      	b.n	800552a <UART_SetConfig+0x2fe>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005312:	e10a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531a:	e106      	b.n	800552a <UART_SetConfig+0x2fe>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7c      	ldr	r2, [pc, #496]	; (8005514 <UART_SetConfig+0x2e8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d138      	bne.n	8005398 <UART_SetConfig+0x16c>
 8005326:	4b7a      	ldr	r3, [pc, #488]	; (8005510 <UART_SetConfig+0x2e4>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d82d      	bhi.n	8005390 <UART_SetConfig+0x164>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x110>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005371 	.word	0x08005371
 8005340:	08005391 	.word	0x08005391
 8005344:	08005391 	.word	0x08005391
 8005348:	08005391 	.word	0x08005391
 800534c:	08005381 	.word	0x08005381
 8005350:	08005391 	.word	0x08005391
 8005354:	08005391 	.word	0x08005391
 8005358:	08005391 	.word	0x08005391
 800535c:	08005379 	.word	0x08005379
 8005360:	08005391 	.word	0x08005391
 8005364:	08005391 	.word	0x08005391
 8005368:	08005391 	.word	0x08005391
 800536c:	08005389 	.word	0x08005389
 8005370:	2300      	movs	r3, #0
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005376:	e0d8      	b.n	800552a <UART_SetConfig+0x2fe>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537e:	e0d4      	b.n	800552a <UART_SetConfig+0x2fe>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005386:	e0d0      	b.n	800552a <UART_SetConfig+0x2fe>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538e:	e0cc      	b.n	800552a <UART_SetConfig+0x2fe>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005396:	e0c8      	b.n	800552a <UART_SetConfig+0x2fe>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <UART_SetConfig+0x2ec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d125      	bne.n	80053ee <UART_SetConfig+0x1c2>
 80053a2:	4b5b      	ldr	r3, [pc, #364]	; (8005510 <UART_SetConfig+0x2e4>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053ac:	2b30      	cmp	r3, #48	; 0x30
 80053ae:	d016      	beq.n	80053de <UART_SetConfig+0x1b2>
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d818      	bhi.n	80053e6 <UART_SetConfig+0x1ba>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d00a      	beq.n	80053ce <UART_SetConfig+0x1a2>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d814      	bhi.n	80053e6 <UART_SetConfig+0x1ba>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <UART_SetConfig+0x19a>
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d008      	beq.n	80053d6 <UART_SetConfig+0x1aa>
 80053c4:	e00f      	b.n	80053e6 <UART_SetConfig+0x1ba>
 80053c6:	2300      	movs	r3, #0
 80053c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053cc:	e0ad      	b.n	800552a <UART_SetConfig+0x2fe>
 80053ce:	2302      	movs	r3, #2
 80053d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d4:	e0a9      	b.n	800552a <UART_SetConfig+0x2fe>
 80053d6:	2304      	movs	r3, #4
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053dc:	e0a5      	b.n	800552a <UART_SetConfig+0x2fe>
 80053de:	2308      	movs	r3, #8
 80053e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e4:	e0a1      	b.n	800552a <UART_SetConfig+0x2fe>
 80053e6:	2310      	movs	r3, #16
 80053e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ec:	e09d      	b.n	800552a <UART_SetConfig+0x2fe>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4a      	ldr	r2, [pc, #296]	; (800551c <UART_SetConfig+0x2f0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d125      	bne.n	8005444 <UART_SetConfig+0x218>
 80053f8:	4b45      	ldr	r3, [pc, #276]	; (8005510 <UART_SetConfig+0x2e4>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005402:	2bc0      	cmp	r3, #192	; 0xc0
 8005404:	d016      	beq.n	8005434 <UART_SetConfig+0x208>
 8005406:	2bc0      	cmp	r3, #192	; 0xc0
 8005408:	d818      	bhi.n	800543c <UART_SetConfig+0x210>
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d00a      	beq.n	8005424 <UART_SetConfig+0x1f8>
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d814      	bhi.n	800543c <UART_SetConfig+0x210>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x1f0>
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d008      	beq.n	800542c <UART_SetConfig+0x200>
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x210>
 800541c:	2300      	movs	r3, #0
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005422:	e082      	b.n	800552a <UART_SetConfig+0x2fe>
 8005424:	2302      	movs	r3, #2
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542a:	e07e      	b.n	800552a <UART_SetConfig+0x2fe>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e07a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e076      	b.n	800552a <UART_SetConfig+0x2fe>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e072      	b.n	800552a <UART_SetConfig+0x2fe>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a35      	ldr	r2, [pc, #212]	; (8005520 <UART_SetConfig+0x2f4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d12a      	bne.n	80054a4 <UART_SetConfig+0x278>
 800544e:	4b30      	ldr	r3, [pc, #192]	; (8005510 <UART_SetConfig+0x2e4>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545c:	d01a      	beq.n	8005494 <UART_SetConfig+0x268>
 800545e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005462:	d81b      	bhi.n	800549c <UART_SetConfig+0x270>
 8005464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005468:	d00c      	beq.n	8005484 <UART_SetConfig+0x258>
 800546a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546e:	d815      	bhi.n	800549c <UART_SetConfig+0x270>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <UART_SetConfig+0x250>
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d008      	beq.n	800548c <UART_SetConfig+0x260>
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x270>
 800547c:	2300      	movs	r3, #0
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005482:	e052      	b.n	800552a <UART_SetConfig+0x2fe>
 8005484:	2302      	movs	r3, #2
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e04e      	b.n	800552a <UART_SetConfig+0x2fe>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e04a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e046      	b.n	800552a <UART_SetConfig+0x2fe>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a2:	e042      	b.n	800552a <UART_SetConfig+0x2fe>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <UART_SetConfig+0x2dc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d13a      	bne.n	8005524 <UART_SetConfig+0x2f8>
 80054ae:	4b18      	ldr	r3, [pc, #96]	; (8005510 <UART_SetConfig+0x2e4>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054bc:	d01a      	beq.n	80054f4 <UART_SetConfig+0x2c8>
 80054be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054c2:	d81b      	bhi.n	80054fc <UART_SetConfig+0x2d0>
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c8:	d00c      	beq.n	80054e4 <UART_SetConfig+0x2b8>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d815      	bhi.n	80054fc <UART_SetConfig+0x2d0>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <UART_SetConfig+0x2b0>
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d008      	beq.n	80054ec <UART_SetConfig+0x2c0>
 80054da:	e00f      	b.n	80054fc <UART_SetConfig+0x2d0>
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e2:	e022      	b.n	800552a <UART_SetConfig+0x2fe>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ea:	e01e      	b.n	800552a <UART_SetConfig+0x2fe>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f2:	e01a      	b.n	800552a <UART_SetConfig+0x2fe>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fa:	e016      	b.n	800552a <UART_SetConfig+0x2fe>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005502:	e012      	b.n	800552a <UART_SetConfig+0x2fe>
 8005504:	cfff69f3 	.word	0xcfff69f3
 8005508:	40008000 	.word	0x40008000
 800550c:	40013800 	.word	0x40013800
 8005510:	40021000 	.word	0x40021000
 8005514:	40004400 	.word	0x40004400
 8005518:	40004800 	.word	0x40004800
 800551c:	40004c00 	.word	0x40004c00
 8005520:	40005000 	.word	0x40005000
 8005524:	2310      	movs	r3, #16
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4aae      	ldr	r2, [pc, #696]	; (80057e8 <UART_SetConfig+0x5bc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	f040 8097 	bne.w	8005664 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800553a:	2b08      	cmp	r3, #8
 800553c:	d823      	bhi.n	8005586 <UART_SetConfig+0x35a>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x318>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005569 	.word	0x08005569
 8005548:	08005587 	.word	0x08005587
 800554c:	08005571 	.word	0x08005571
 8005550:	08005587 	.word	0x08005587
 8005554:	08005577 	.word	0x08005577
 8005558:	08005587 	.word	0x08005587
 800555c:	08005587 	.word	0x08005587
 8005560:	08005587 	.word	0x08005587
 8005564:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7ff fac2 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 800556c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b9e      	ldr	r3, [pc, #632]	; (80057ec <UART_SetConfig+0x5c0>)
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7ff fa4d 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8130 	beq.w	80057fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	4a94      	ldr	r2, [pc, #592]	; (80057f0 <UART_SetConfig+0x5c4>)
 80055a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d305      	bcc.n	80055ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055d0:	e113      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	2200      	movs	r2, #0
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	60fa      	str	r2, [r7, #12]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	4a84      	ldr	r2, [pc, #528]	; (80057f0 <UART_SetConfig+0x5c4>)
 80055e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2200      	movs	r2, #0
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f4:	f7fa fe64 	bl	80002c0 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	020b      	lsls	r3, r1, #8
 800560a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800560e:	0202      	lsls	r2, r0, #8
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	6849      	ldr	r1, [r1, #4]
 8005614:	0849      	lsrs	r1, r1, #1
 8005616:	2000      	movs	r0, #0
 8005618:	460c      	mov	r4, r1
 800561a:	4605      	mov	r5, r0
 800561c:	eb12 0804 	adds.w	r8, r2, r4
 8005620:	eb43 0905 	adc.w	r9, r3, r5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	469a      	mov	sl, r3
 800562c:	4693      	mov	fp, r2
 800562e:	4652      	mov	r2, sl
 8005630:	465b      	mov	r3, fp
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fe43 	bl	80002c0 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4613      	mov	r3, r2
 8005640:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005648:	d308      	bcc.n	800565c <UART_SetConfig+0x430>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d204      	bcs.n	800565c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a3a      	ldr	r2, [r7, #32]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e0ce      	b.n	80057fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005662:	e0ca      	b.n	80057fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d166      	bne.n	800573c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800566e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005672:	2b08      	cmp	r3, #8
 8005674:	d827      	bhi.n	80056c6 <UART_SetConfig+0x49a>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x450>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7ff fa26 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 80056a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7ff fa38 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4e      	ldr	r3, [pc, #312]	; (80057ec <UART_SetConfig+0x5c0>)
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7ff f9ad 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8090 	beq.w	80057fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <UART_SetConfig+0x5c4>)
 80056e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ec:	005a      	lsls	r2, r3, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	441a      	add	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d916      	bls.n	8005734 <UART_SetConfig+0x508>
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d212      	bcs.n	8005734 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f023 030f 	bic.w	r3, r3, #15
 8005716:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	b29a      	uxth	r2, r3
 8005724:	8bfb      	ldrh	r3, [r7, #30]
 8005726:	4313      	orrs	r3, r2
 8005728:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	8bfa      	ldrh	r2, [r7, #30]
 8005730:	60da      	str	r2, [r3, #12]
 8005732:	e062      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800573a:	e05e      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800573c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005740:	2b08      	cmp	r3, #8
 8005742:	d828      	bhi.n	8005796 <UART_SetConfig+0x56a>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x520>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005771 	.word	0x08005771
 8005750:	08005779 	.word	0x08005779
 8005754:	08005781 	.word	0x08005781
 8005758:	08005797 	.word	0x08005797
 800575c:	08005787 	.word	0x08005787
 8005760:	08005797 	.word	0x08005797
 8005764:	08005797 	.word	0x08005797
 8005768:	08005797 	.word	0x08005797
 800576c:	0800578f 	.word	0x0800578f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7ff f9be 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005776:	e014      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7ff f9d0 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800577e:	e010      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005780:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <UART_SetConfig+0x5c0>)
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005784:	e00d      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005786:	f7ff f945 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800578c:	e009      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005794:	e005      	b.n	80057a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057a0:	bf00      	nop
    }

    if (pclk != 0U)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d028      	beq.n	80057fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <UART_SetConfig+0x5c4>)
 80057ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	441a      	add	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d910      	bls.n	80057f4 <UART_SetConfig+0x5c8>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d20c      	bcs.n	80057f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e009      	b.n	80057fa <UART_SetConfig+0x5ce>
 80057e6:	bf00      	nop
 80057e8:	40008000 	.word	0x40008000
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	08006e3c 	.word	0x08006e3c
      }
      else
      {
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2201      	movs	r2, #1
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005816:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800581a:	4618      	mov	r0, r3
 800581c:	3730      	adds	r7, #48	; 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d10a      	bne.n	800593a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	; 0x60
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fb fbba 	bl	80010f0 <HAL_GetTick>
 800597c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d12f      	bne.n	80059ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f88e 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d022      	beq.n	80059ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	653b      	str	r3, [r7, #80]	; 0x50
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
 80059c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e063      	b.n	8005ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d149      	bne.n	8005a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a02:	2200      	movs	r2, #0
 8005a04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f857 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d03c      	beq.n	8005a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	623b      	str	r3, [r7, #32]
   return(result);
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	69b9      	ldr	r1, [r7, #24]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	617b      	str	r3, [r7, #20]
   return(result);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e012      	b.n	8005ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3758      	adds	r7, #88	; 0x58
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005acc:	e04f      	b.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad4:	d04b      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fb fb0b 	bl	80010f0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e04e      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d037      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d034      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d031      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d110      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f838 	bl	8005b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e029      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d111      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f81e 	bl	8005b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e00f      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d0a0      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b095      	sub	sp, #84	; 0x54
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e6      	bne.n	8005b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d118      	bne.n	8005c42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 0310 	bic.w	r3, r3, #16
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c56:	bf00      	nop
 8005c58:	3754      	adds	r7, #84	; 0x54
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e027      	b.n	8005cc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	; 0x24
 8005c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e02d      	b.n	8005d48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f84f 	bl	8005dcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e02d      	b.n	8005dc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2224      	movs	r2, #36	; 0x24
 8005d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f811 	bl	8005dcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d108      	bne.n	8005dee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dec:	e031      	b.n	8005e52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dee:	2308      	movs	r3, #8
 8005df0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005df2:	2308      	movs	r3, #8
 8005df4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	0e5b      	lsrs	r3, r3, #25
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	0f5b      	lsrs	r3, r3, #29
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	7b3a      	ldrb	r2, [r7, #12]
 8005e1a:	4911      	ldr	r1, [pc, #68]	; (8005e60 <UARTEx_SetNbDataToProcess+0x94>)
 8005e1c:	5c8a      	ldrb	r2, [r1, r2]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e22:	7b3a      	ldrb	r2, [r7, #12]
 8005e24:	490f      	ldr	r1, [pc, #60]	; (8005e64 <UARTEx_SetNbDataToProcess+0x98>)
 8005e26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e28:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	7b7a      	ldrb	r2, [r7, #13]
 8005e38:	4909      	ldr	r1, [pc, #36]	; (8005e60 <UARTEx_SetNbDataToProcess+0x94>)
 8005e3a:	5c8a      	ldrb	r2, [r1, r2]
 8005e3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e40:	7b7a      	ldrb	r2, [r7, #13]
 8005e42:	4908      	ldr	r1, [pc, #32]	; (8005e64 <UARTEx_SetNbDataToProcess+0x98>)
 8005e44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	08006e54 	.word	0x08006e54
 8005e64:	08006e5c 	.word	0x08006e5c

08005e68 <std>:
 8005e68:	2300      	movs	r3, #0
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e76:	6083      	str	r3, [r0, #8]
 8005e78:	8181      	strh	r1, [r0, #12]
 8005e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e7c:	81c2      	strh	r2, [r0, #14]
 8005e7e:	6183      	str	r3, [r0, #24]
 8005e80:	4619      	mov	r1, r3
 8005e82:	2208      	movs	r2, #8
 8005e84:	305c      	adds	r0, #92	; 0x5c
 8005e86:	f000 f91f 	bl	80060c8 <memset>
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <std+0x58>)
 8005e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <std+0x5c>)
 8005e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <std+0x60>)
 8005e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <std+0x64>)
 8005e98:	6323      	str	r3, [r4, #48]	; 0x30
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <std+0x68>)
 8005e9c:	6224      	str	r4, [r4, #32]
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d006      	beq.n	8005eb0 <std+0x48>
 8005ea2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ea6:	4294      	cmp	r4, r2
 8005ea8:	d002      	beq.n	8005eb0 <std+0x48>
 8005eaa:	33d0      	adds	r3, #208	; 0xd0
 8005eac:	429c      	cmp	r4, r3
 8005eae:	d105      	bne.n	8005ebc <std+0x54>
 8005eb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb8:	f000 b938 	b.w	800612c <__retarget_lock_init_recursive>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	0800698d 	.word	0x0800698d
 8005ec4:	080069af 	.word	0x080069af
 8005ec8:	080069e7 	.word	0x080069e7
 8005ecc:	08006a0b 	.word	0x08006a0b
 8005ed0:	200002a4 	.word	0x200002a4

08005ed4 <stdio_exit_handler>:
 8005ed4:	4a02      	ldr	r2, [pc, #8]	; (8005ee0 <stdio_exit_handler+0xc>)
 8005ed6:	4903      	ldr	r1, [pc, #12]	; (8005ee4 <stdio_exit_handler+0x10>)
 8005ed8:	4803      	ldr	r0, [pc, #12]	; (8005ee8 <stdio_exit_handler+0x14>)
 8005eda:	f000 b869 	b.w	8005fb0 <_fwalk_sglue>
 8005ede:	bf00      	nop
 8005ee0:	2000000c 	.word	0x2000000c
 8005ee4:	08006925 	.word	0x08006925
 8005ee8:	20000018 	.word	0x20000018

08005eec <cleanup_stdio>:
 8005eec:	6841      	ldr	r1, [r0, #4]
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <cleanup_stdio+0x34>)
 8005ef0:	4299      	cmp	r1, r3
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	d001      	beq.n	8005efc <cleanup_stdio+0x10>
 8005ef8:	f000 fd14 	bl	8006924 <_fflush_r>
 8005efc:	68a1      	ldr	r1, [r4, #8]
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <cleanup_stdio+0x38>)
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d002      	beq.n	8005f0a <cleanup_stdio+0x1e>
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fd0d 	bl	8006924 <_fflush_r>
 8005f0a:	68e1      	ldr	r1, [r4, #12]
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <cleanup_stdio+0x3c>)
 8005f0e:	4299      	cmp	r1, r3
 8005f10:	d004      	beq.n	8005f1c <cleanup_stdio+0x30>
 8005f12:	4620      	mov	r0, r4
 8005f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f18:	f000 bd04 	b.w	8006924 <_fflush_r>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	bf00      	nop
 8005f20:	200002a4 	.word	0x200002a4
 8005f24:	2000030c 	.word	0x2000030c
 8005f28:	20000374 	.word	0x20000374

08005f2c <global_stdio_init.part.0>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <global_stdio_init.part.0+0x30>)
 8005f30:	4c0b      	ldr	r4, [pc, #44]	; (8005f60 <global_stdio_init.part.0+0x34>)
 8005f32:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <global_stdio_init.part.0+0x38>)
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	4620      	mov	r0, r4
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	f7ff ff94 	bl	8005e68 <std>
 8005f40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f44:	2201      	movs	r2, #1
 8005f46:	2109      	movs	r1, #9
 8005f48:	f7ff ff8e 	bl	8005e68 <std>
 8005f4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f50:	2202      	movs	r2, #2
 8005f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f56:	2112      	movs	r1, #18
 8005f58:	f7ff bf86 	b.w	8005e68 <std>
 8005f5c:	200003dc 	.word	0x200003dc
 8005f60:	200002a4 	.word	0x200002a4
 8005f64:	08005ed5 	.word	0x08005ed5

08005f68 <__sfp_lock_acquire>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__sfp_lock_acquire+0x8>)
 8005f6a:	f000 b8e0 	b.w	800612e <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	200003e1 	.word	0x200003e1

08005f74 <__sfp_lock_release>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sfp_lock_release+0x8>)
 8005f76:	f000 b8db 	b.w	8006130 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	200003e1 	.word	0x200003e1

08005f80 <__sinit>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	f7ff fff0 	bl	8005f68 <__sfp_lock_acquire>
 8005f88:	6a23      	ldr	r3, [r4, #32]
 8005f8a:	b11b      	cbz	r3, 8005f94 <__sinit+0x14>
 8005f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f90:	f7ff bff0 	b.w	8005f74 <__sfp_lock_release>
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__sinit+0x28>)
 8005f96:	6223      	str	r3, [r4, #32]
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <__sinit+0x2c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f5      	bne.n	8005f8c <__sinit+0xc>
 8005fa0:	f7ff ffc4 	bl	8005f2c <global_stdio_init.part.0>
 8005fa4:	e7f2      	b.n	8005f8c <__sinit+0xc>
 8005fa6:	bf00      	nop
 8005fa8:	08005eed 	.word	0x08005eed
 8005fac:	200003dc 	.word	0x200003dc

08005fb0 <_fwalk_sglue>:
 8005fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	4688      	mov	r8, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	2600      	movs	r6, #0
 8005fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fc4:	d505      	bpl.n	8005fd2 <_fwalk_sglue+0x22>
 8005fc6:	6824      	ldr	r4, [r4, #0]
 8005fc8:	2c00      	cmp	r4, #0
 8005fca:	d1f7      	bne.n	8005fbc <_fwalk_sglue+0xc>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d907      	bls.n	8005fe8 <_fwalk_sglue+0x38>
 8005fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	d003      	beq.n	8005fe8 <_fwalk_sglue+0x38>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	47c0      	blx	r8
 8005fe6:	4306      	orrs	r6, r0
 8005fe8:	3568      	adds	r5, #104	; 0x68
 8005fea:	e7e9      	b.n	8005fc0 <_fwalk_sglue+0x10>

08005fec <iprintf>:
 8005fec:	b40f      	push	{r0, r1, r2, r3}
 8005fee:	b507      	push	{r0, r1, r2, lr}
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <iprintf+0x20>)
 8005ff2:	ab04      	add	r3, sp, #16
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffa:	6881      	ldr	r1, [r0, #8]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	f000 f8c1 	bl	8006184 <_vfiprintf_r>
 8006002:	b003      	add	sp, #12
 8006004:	f85d eb04 	ldr.w	lr, [sp], #4
 8006008:	b004      	add	sp, #16
 800600a:	4770      	bx	lr
 800600c:	20000064 	.word	0x20000064

08006010 <_puts_r>:
 8006010:	6a03      	ldr	r3, [r0, #32]
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	6884      	ldr	r4, [r0, #8]
 8006016:	4605      	mov	r5, r0
 8006018:	460e      	mov	r6, r1
 800601a:	b90b      	cbnz	r3, 8006020 <_puts_r+0x10>
 800601c:	f7ff ffb0 	bl	8005f80 <__sinit>
 8006020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006022:	07db      	lsls	r3, r3, #31
 8006024:	d405      	bmi.n	8006032 <_puts_r+0x22>
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	0598      	lsls	r0, r3, #22
 800602a:	d402      	bmi.n	8006032 <_puts_r+0x22>
 800602c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602e:	f000 f87e 	bl	800612e <__retarget_lock_acquire_recursive>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	0719      	lsls	r1, r3, #28
 8006036:	d513      	bpl.n	8006060 <_puts_r+0x50>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	b18b      	cbz	r3, 8006060 <_puts_r+0x50>
 800603c:	3e01      	subs	r6, #1
 800603e:	68a3      	ldr	r3, [r4, #8]
 8006040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006044:	3b01      	subs	r3, #1
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	b9e9      	cbnz	r1, 8006086 <_puts_r+0x76>
 800604a:	2b00      	cmp	r3, #0
 800604c:	da2e      	bge.n	80060ac <_puts_r+0x9c>
 800604e:	4622      	mov	r2, r4
 8006050:	210a      	movs	r1, #10
 8006052:	4628      	mov	r0, r5
 8006054:	f000 fcdd 	bl	8006a12 <__swbuf_r>
 8006058:	3001      	adds	r0, #1
 800605a:	d007      	beq.n	800606c <_puts_r+0x5c>
 800605c:	250a      	movs	r5, #10
 800605e:	e007      	b.n	8006070 <_puts_r+0x60>
 8006060:	4621      	mov	r1, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fd12 	bl	8006a8c <__swsetup_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	d0e7      	beq.n	800603c <_puts_r+0x2c>
 800606c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006072:	07da      	lsls	r2, r3, #31
 8006074:	d405      	bmi.n	8006082 <_puts_r+0x72>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	059b      	lsls	r3, r3, #22
 800607a:	d402      	bmi.n	8006082 <_puts_r+0x72>
 800607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607e:	f000 f857 	bl	8006130 <__retarget_lock_release_recursive>
 8006082:	4628      	mov	r0, r5
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	2b00      	cmp	r3, #0
 8006088:	da04      	bge.n	8006094 <_puts_r+0x84>
 800608a:	69a2      	ldr	r2, [r4, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	dc06      	bgt.n	800609e <_puts_r+0x8e>
 8006090:	290a      	cmp	r1, #10
 8006092:	d004      	beq.n	800609e <_puts_r+0x8e>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	e7cf      	b.n	800603e <_puts_r+0x2e>
 800609e:	4622      	mov	r2, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fcb6 	bl	8006a12 <__swbuf_r>
 80060a6:	3001      	adds	r0, #1
 80060a8:	d1c9      	bne.n	800603e <_puts_r+0x2e>
 80060aa:	e7df      	b.n	800606c <_puts_r+0x5c>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	250a      	movs	r5, #10
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	701d      	strb	r5, [r3, #0]
 80060b6:	e7db      	b.n	8006070 <_puts_r+0x60>

080060b8 <puts>:
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <puts+0xc>)
 80060ba:	4601      	mov	r1, r0
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	f7ff bfa7 	b.w	8006010 <_puts_r>
 80060c2:	bf00      	nop
 80060c4:	20000064 	.word	0x20000064

080060c8 <memset>:
 80060c8:	4402      	add	r2, r0
 80060ca:	4603      	mov	r3, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memset+0xa>
 80060d0:	4770      	bx	lr
 80060d2:	f803 1b01 	strb.w	r1, [r3], #1
 80060d6:	e7f9      	b.n	80060cc <memset+0x4>

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	; (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000064 	.word	0x20000064

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	; (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	; (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	; (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	; (8006128 <__libc_init_array+0x44>)
 80060f8:	f000 fe46 	bl	8006d88 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	08006ea0 	.word	0x08006ea0
 8006120:	08006ea0 	.word	0x08006ea0
 8006124:	08006ea0 	.word	0x08006ea0
 8006128:	08006ea4 	.word	0x08006ea4

0800612c <__retarget_lock_init_recursive>:
 800612c:	4770      	bx	lr

0800612e <__retarget_lock_acquire_recursive>:
 800612e:	4770      	bx	lr

08006130 <__retarget_lock_release_recursive>:
 8006130:	4770      	bx	lr

08006132 <__sfputc_r>:
 8006132:	6893      	ldr	r3, [r2, #8]
 8006134:	3b01      	subs	r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	b410      	push	{r4}
 800613a:	6093      	str	r3, [r2, #8]
 800613c:	da08      	bge.n	8006150 <__sfputc_r+0x1e>
 800613e:	6994      	ldr	r4, [r2, #24]
 8006140:	42a3      	cmp	r3, r4
 8006142:	db01      	blt.n	8006148 <__sfputc_r+0x16>
 8006144:	290a      	cmp	r1, #10
 8006146:	d103      	bne.n	8006150 <__sfputc_r+0x1e>
 8006148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800614c:	f000 bc61 	b.w	8006a12 <__swbuf_r>
 8006150:	6813      	ldr	r3, [r2, #0]
 8006152:	1c58      	adds	r0, r3, #1
 8006154:	6010      	str	r0, [r2, #0]
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	4608      	mov	r0, r1
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615e:	4770      	bx	lr

08006160 <__sfputs_r>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	4614      	mov	r4, r2
 8006168:	18d5      	adds	r5, r2, r3
 800616a:	42ac      	cmp	r4, r5
 800616c:	d101      	bne.n	8006172 <__sfputs_r+0x12>
 800616e:	2000      	movs	r0, #0
 8006170:	e007      	b.n	8006182 <__sfputs_r+0x22>
 8006172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006176:	463a      	mov	r2, r7
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ffda 	bl	8006132 <__sfputc_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d1f3      	bne.n	800616a <__sfputs_r+0xa>
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006184 <_vfiprintf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	460d      	mov	r5, r1
 800618a:	b09d      	sub	sp, #116	; 0x74
 800618c:	4614      	mov	r4, r2
 800618e:	4698      	mov	r8, r3
 8006190:	4606      	mov	r6, r0
 8006192:	b118      	cbz	r0, 800619c <_vfiprintf_r+0x18>
 8006194:	6a03      	ldr	r3, [r0, #32]
 8006196:	b90b      	cbnz	r3, 800619c <_vfiprintf_r+0x18>
 8006198:	f7ff fef2 	bl	8005f80 <__sinit>
 800619c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800619e:	07d9      	lsls	r1, r3, #31
 80061a0:	d405      	bmi.n	80061ae <_vfiprintf_r+0x2a>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	059a      	lsls	r2, r3, #22
 80061a6:	d402      	bmi.n	80061ae <_vfiprintf_r+0x2a>
 80061a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061aa:	f7ff ffc0 	bl	800612e <__retarget_lock_acquire_recursive>
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	071b      	lsls	r3, r3, #28
 80061b2:	d501      	bpl.n	80061b8 <_vfiprintf_r+0x34>
 80061b4:	692b      	ldr	r3, [r5, #16]
 80061b6:	b99b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x5c>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f000 fc66 	bl	8006a8c <__swsetup_r>
 80061c0:	b170      	cbz	r0, 80061e0 <_vfiprintf_r+0x5c>
 80061c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c4:	07dc      	lsls	r4, r3, #31
 80061c6:	d504      	bpl.n	80061d2 <_vfiprintf_r+0x4e>
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061cc:	b01d      	add	sp, #116	; 0x74
 80061ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d2:	89ab      	ldrh	r3, [r5, #12]
 80061d4:	0598      	lsls	r0, r3, #22
 80061d6:	d4f7      	bmi.n	80061c8 <_vfiprintf_r+0x44>
 80061d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061da:	f7ff ffa9 	bl	8006130 <__retarget_lock_release_recursive>
 80061de:	e7f3      	b.n	80061c8 <_vfiprintf_r+0x44>
 80061e0:	2300      	movs	r3, #0
 80061e2:	9309      	str	r3, [sp, #36]	; 0x24
 80061e4:	2320      	movs	r3, #32
 80061e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ee:	2330      	movs	r3, #48	; 0x30
 80061f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80063a4 <_vfiprintf_r+0x220>
 80061f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f8:	f04f 0901 	mov.w	r9, #1
 80061fc:	4623      	mov	r3, r4
 80061fe:	469a      	mov	sl, r3
 8006200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006204:	b10a      	cbz	r2, 800620a <_vfiprintf_r+0x86>
 8006206:	2a25      	cmp	r2, #37	; 0x25
 8006208:	d1f9      	bne.n	80061fe <_vfiprintf_r+0x7a>
 800620a:	ebba 0b04 	subs.w	fp, sl, r4
 800620e:	d00b      	beq.n	8006228 <_vfiprintf_r+0xa4>
 8006210:	465b      	mov	r3, fp
 8006212:	4622      	mov	r2, r4
 8006214:	4629      	mov	r1, r5
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ffa2 	bl	8006160 <__sfputs_r>
 800621c:	3001      	adds	r0, #1
 800621e:	f000 80a9 	beq.w	8006374 <_vfiprintf_r+0x1f0>
 8006222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006224:	445a      	add	r2, fp
 8006226:	9209      	str	r2, [sp, #36]	; 0x24
 8006228:	f89a 3000 	ldrb.w	r3, [sl]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a1 	beq.w	8006374 <_vfiprintf_r+0x1f0>
 8006232:	2300      	movs	r3, #0
 8006234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800623c:	f10a 0a01 	add.w	sl, sl, #1
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	9307      	str	r3, [sp, #28]
 8006244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006248:	931a      	str	r3, [sp, #104]	; 0x68
 800624a:	4654      	mov	r4, sl
 800624c:	2205      	movs	r2, #5
 800624e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006252:	4854      	ldr	r0, [pc, #336]	; (80063a4 <_vfiprintf_r+0x220>)
 8006254:	f7f9 ffe4 	bl	8000220 <memchr>
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	b9d8      	cbnz	r0, 8006294 <_vfiprintf_r+0x110>
 800625c:	06d1      	lsls	r1, r2, #27
 800625e:	bf44      	itt	mi
 8006260:	2320      	movmi	r3, #32
 8006262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006266:	0713      	lsls	r3, r2, #28
 8006268:	bf44      	itt	mi
 800626a:	232b      	movmi	r3, #43	; 0x2b
 800626c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006270:	f89a 3000 	ldrb.w	r3, [sl]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d015      	beq.n	80062a4 <_vfiprintf_r+0x120>
 8006278:	9a07      	ldr	r2, [sp, #28]
 800627a:	4654      	mov	r4, sl
 800627c:	2000      	movs	r0, #0
 800627e:	f04f 0c0a 	mov.w	ip, #10
 8006282:	4621      	mov	r1, r4
 8006284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006288:	3b30      	subs	r3, #48	; 0x30
 800628a:	2b09      	cmp	r3, #9
 800628c:	d94d      	bls.n	800632a <_vfiprintf_r+0x1a6>
 800628e:	b1b0      	cbz	r0, 80062be <_vfiprintf_r+0x13a>
 8006290:	9207      	str	r2, [sp, #28]
 8006292:	e014      	b.n	80062be <_vfiprintf_r+0x13a>
 8006294:	eba0 0308 	sub.w	r3, r0, r8
 8006298:	fa09 f303 	lsl.w	r3, r9, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	46a2      	mov	sl, r4
 80062a2:	e7d2      	b.n	800624a <_vfiprintf_r+0xc6>
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	1d19      	adds	r1, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	9103      	str	r1, [sp, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfbb      	ittet	lt
 80062b0:	425b      	neglt	r3, r3
 80062b2:	f042 0202 	orrlt.w	r2, r2, #2
 80062b6:	9307      	strge	r3, [sp, #28]
 80062b8:	9307      	strlt	r3, [sp, #28]
 80062ba:	bfb8      	it	lt
 80062bc:	9204      	strlt	r2, [sp, #16]
 80062be:	7823      	ldrb	r3, [r4, #0]
 80062c0:	2b2e      	cmp	r3, #46	; 0x2e
 80062c2:	d10c      	bne.n	80062de <_vfiprintf_r+0x15a>
 80062c4:	7863      	ldrb	r3, [r4, #1]
 80062c6:	2b2a      	cmp	r3, #42	; 0x2a
 80062c8:	d134      	bne.n	8006334 <_vfiprintf_r+0x1b0>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	1d1a      	adds	r2, r3, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	9203      	str	r2, [sp, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfb8      	it	lt
 80062d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062da:	3402      	adds	r4, #2
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80063b4 <_vfiprintf_r+0x230>
 80062e2:	7821      	ldrb	r1, [r4, #0]
 80062e4:	2203      	movs	r2, #3
 80062e6:	4650      	mov	r0, sl
 80062e8:	f7f9 ff9a 	bl	8000220 <memchr>
 80062ec:	b138      	cbz	r0, 80062fe <_vfiprintf_r+0x17a>
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	eba0 000a 	sub.w	r0, r0, sl
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	4082      	lsls	r2, r0
 80062f8:	4313      	orrs	r3, r2
 80062fa:	3401      	adds	r4, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006302:	4829      	ldr	r0, [pc, #164]	; (80063a8 <_vfiprintf_r+0x224>)
 8006304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006308:	2206      	movs	r2, #6
 800630a:	f7f9 ff89 	bl	8000220 <memchr>
 800630e:	2800      	cmp	r0, #0
 8006310:	d03f      	beq.n	8006392 <_vfiprintf_r+0x20e>
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <_vfiprintf_r+0x228>)
 8006314:	bb1b      	cbnz	r3, 800635e <_vfiprintf_r+0x1da>
 8006316:	9b03      	ldr	r3, [sp, #12]
 8006318:	3307      	adds	r3, #7
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	3308      	adds	r3, #8
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	443b      	add	r3, r7
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	e768      	b.n	80061fc <_vfiprintf_r+0x78>
 800632a:	fb0c 3202 	mla	r2, ip, r2, r3
 800632e:	460c      	mov	r4, r1
 8006330:	2001      	movs	r0, #1
 8006332:	e7a6      	b.n	8006282 <_vfiprintf_r+0xfe>
 8006334:	2300      	movs	r3, #0
 8006336:	3401      	adds	r4, #1
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	4619      	mov	r1, r3
 800633c:	f04f 0c0a 	mov.w	ip, #10
 8006340:	4620      	mov	r0, r4
 8006342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006346:	3a30      	subs	r2, #48	; 0x30
 8006348:	2a09      	cmp	r2, #9
 800634a:	d903      	bls.n	8006354 <_vfiprintf_r+0x1d0>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0c6      	beq.n	80062de <_vfiprintf_r+0x15a>
 8006350:	9105      	str	r1, [sp, #20]
 8006352:	e7c4      	b.n	80062de <_vfiprintf_r+0x15a>
 8006354:	fb0c 2101 	mla	r1, ip, r1, r2
 8006358:	4604      	mov	r4, r0
 800635a:	2301      	movs	r3, #1
 800635c:	e7f0      	b.n	8006340 <_vfiprintf_r+0x1bc>
 800635e:	ab03      	add	r3, sp, #12
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	462a      	mov	r2, r5
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <_vfiprintf_r+0x22c>)
 8006366:	a904      	add	r1, sp, #16
 8006368:	4630      	mov	r0, r6
 800636a:	f3af 8000 	nop.w
 800636e:	4607      	mov	r7, r0
 8006370:	1c78      	adds	r0, r7, #1
 8006372:	d1d6      	bne.n	8006322 <_vfiprintf_r+0x19e>
 8006374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006376:	07d9      	lsls	r1, r3, #31
 8006378:	d405      	bmi.n	8006386 <_vfiprintf_r+0x202>
 800637a:	89ab      	ldrh	r3, [r5, #12]
 800637c:	059a      	lsls	r2, r3, #22
 800637e:	d402      	bmi.n	8006386 <_vfiprintf_r+0x202>
 8006380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006382:	f7ff fed5 	bl	8006130 <__retarget_lock_release_recursive>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	065b      	lsls	r3, r3, #25
 800638a:	f53f af1d 	bmi.w	80061c8 <_vfiprintf_r+0x44>
 800638e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006390:	e71c      	b.n	80061cc <_vfiprintf_r+0x48>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <_vfiprintf_r+0x22c>)
 800639a:	a904      	add	r1, sp, #16
 800639c:	4630      	mov	r0, r6
 800639e:	f000 f919 	bl	80065d4 <_printf_i>
 80063a2:	e7e4      	b.n	800636e <_vfiprintf_r+0x1ea>
 80063a4:	08006e64 	.word	0x08006e64
 80063a8:	08006e6e 	.word	0x08006e6e
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006161 	.word	0x08006161
 80063b4:	08006e6a 	.word	0x08006e6a

080063b8 <sbrk_aligned>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4e0e      	ldr	r6, [pc, #56]	; (80063f4 <sbrk_aligned+0x3c>)
 80063bc:	460c      	mov	r4, r1
 80063be:	6831      	ldr	r1, [r6, #0]
 80063c0:	4605      	mov	r5, r0
 80063c2:	b911      	cbnz	r1, 80063ca <sbrk_aligned+0x12>
 80063c4:	f000 fc72 	bl	8006cac <_sbrk_r>
 80063c8:	6030      	str	r0, [r6, #0]
 80063ca:	4621      	mov	r1, r4
 80063cc:	4628      	mov	r0, r5
 80063ce:	f000 fc6d 	bl	8006cac <_sbrk_r>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d00a      	beq.n	80063ec <sbrk_aligned+0x34>
 80063d6:	1cc4      	adds	r4, r0, #3
 80063d8:	f024 0403 	bic.w	r4, r4, #3
 80063dc:	42a0      	cmp	r0, r4
 80063de:	d007      	beq.n	80063f0 <sbrk_aligned+0x38>
 80063e0:	1a21      	subs	r1, r4, r0
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fc62 	bl	8006cac <_sbrk_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d101      	bne.n	80063f0 <sbrk_aligned+0x38>
 80063ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	200003e8 	.word	0x200003e8

080063f8 <_malloc_r>:
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fc:	1ccd      	adds	r5, r1, #3
 80063fe:	f025 0503 	bic.w	r5, r5, #3
 8006402:	3508      	adds	r5, #8
 8006404:	2d0c      	cmp	r5, #12
 8006406:	bf38      	it	cc
 8006408:	250c      	movcc	r5, #12
 800640a:	2d00      	cmp	r5, #0
 800640c:	4607      	mov	r7, r0
 800640e:	db01      	blt.n	8006414 <_malloc_r+0x1c>
 8006410:	42a9      	cmp	r1, r5
 8006412:	d905      	bls.n	8006420 <_malloc_r+0x28>
 8006414:	230c      	movs	r3, #12
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	2600      	movs	r6, #0
 800641a:	4630      	mov	r0, r6
 800641c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006420:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064f4 <_malloc_r+0xfc>
 8006424:	f000 faa6 	bl	8006974 <__malloc_lock>
 8006428:	f8d8 3000 	ldr.w	r3, [r8]
 800642c:	461c      	mov	r4, r3
 800642e:	bb5c      	cbnz	r4, 8006488 <_malloc_r+0x90>
 8006430:	4629      	mov	r1, r5
 8006432:	4638      	mov	r0, r7
 8006434:	f7ff ffc0 	bl	80063b8 <sbrk_aligned>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	4604      	mov	r4, r0
 800643c:	d155      	bne.n	80064ea <_malloc_r+0xf2>
 800643e:	f8d8 4000 	ldr.w	r4, [r8]
 8006442:	4626      	mov	r6, r4
 8006444:	2e00      	cmp	r6, #0
 8006446:	d145      	bne.n	80064d4 <_malloc_r+0xdc>
 8006448:	2c00      	cmp	r4, #0
 800644a:	d048      	beq.n	80064de <_malloc_r+0xe6>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	4631      	mov	r1, r6
 8006450:	4638      	mov	r0, r7
 8006452:	eb04 0903 	add.w	r9, r4, r3
 8006456:	f000 fc29 	bl	8006cac <_sbrk_r>
 800645a:	4581      	cmp	r9, r0
 800645c:	d13f      	bne.n	80064de <_malloc_r+0xe6>
 800645e:	6821      	ldr	r1, [r4, #0]
 8006460:	1a6d      	subs	r5, r5, r1
 8006462:	4629      	mov	r1, r5
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa7 	bl	80063b8 <sbrk_aligned>
 800646a:	3001      	adds	r0, #1
 800646c:	d037      	beq.n	80064de <_malloc_r+0xe6>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	442b      	add	r3, r5
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	f8d8 3000 	ldr.w	r3, [r8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d038      	beq.n	80064ee <_malloc_r+0xf6>
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	42a2      	cmp	r2, r4
 8006480:	d12b      	bne.n	80064da <_malloc_r+0xe2>
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e00f      	b.n	80064a8 <_malloc_r+0xb0>
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	1b52      	subs	r2, r2, r5
 800648c:	d41f      	bmi.n	80064ce <_malloc_r+0xd6>
 800648e:	2a0b      	cmp	r2, #11
 8006490:	d917      	bls.n	80064c2 <_malloc_r+0xca>
 8006492:	1961      	adds	r1, r4, r5
 8006494:	42a3      	cmp	r3, r4
 8006496:	6025      	str	r5, [r4, #0]
 8006498:	bf18      	it	ne
 800649a:	6059      	strne	r1, [r3, #4]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	bf08      	it	eq
 80064a0:	f8c8 1000 	streq.w	r1, [r8]
 80064a4:	5162      	str	r2, [r4, r5]
 80064a6:	604b      	str	r3, [r1, #4]
 80064a8:	4638      	mov	r0, r7
 80064aa:	f104 060b 	add.w	r6, r4, #11
 80064ae:	f000 fa67 	bl	8006980 <__malloc_unlock>
 80064b2:	f026 0607 	bic.w	r6, r6, #7
 80064b6:	1d23      	adds	r3, r4, #4
 80064b8:	1af2      	subs	r2, r6, r3
 80064ba:	d0ae      	beq.n	800641a <_malloc_r+0x22>
 80064bc:	1b9b      	subs	r3, r3, r6
 80064be:	50a3      	str	r3, [r4, r2]
 80064c0:	e7ab      	b.n	800641a <_malloc_r+0x22>
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	6862      	ldr	r2, [r4, #4]
 80064c6:	d1dd      	bne.n	8006484 <_malloc_r+0x8c>
 80064c8:	f8c8 2000 	str.w	r2, [r8]
 80064cc:	e7ec      	b.n	80064a8 <_malloc_r+0xb0>
 80064ce:	4623      	mov	r3, r4
 80064d0:	6864      	ldr	r4, [r4, #4]
 80064d2:	e7ac      	b.n	800642e <_malloc_r+0x36>
 80064d4:	4634      	mov	r4, r6
 80064d6:	6876      	ldr	r6, [r6, #4]
 80064d8:	e7b4      	b.n	8006444 <_malloc_r+0x4c>
 80064da:	4613      	mov	r3, r2
 80064dc:	e7cc      	b.n	8006478 <_malloc_r+0x80>
 80064de:	230c      	movs	r3, #12
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4638      	mov	r0, r7
 80064e4:	f000 fa4c 	bl	8006980 <__malloc_unlock>
 80064e8:	e797      	b.n	800641a <_malloc_r+0x22>
 80064ea:	6025      	str	r5, [r4, #0]
 80064ec:	e7dc      	b.n	80064a8 <_malloc_r+0xb0>
 80064ee:	605b      	str	r3, [r3, #4]
 80064f0:	deff      	udf	#255	; 0xff
 80064f2:	bf00      	nop
 80064f4:	200003e4 	.word	0x200003e4

080064f8 <_printf_common>:
 80064f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	4616      	mov	r6, r2
 80064fe:	4699      	mov	r9, r3
 8006500:	688a      	ldr	r2, [r1, #8]
 8006502:	690b      	ldr	r3, [r1, #16]
 8006504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006508:	4293      	cmp	r3, r2
 800650a:	bfb8      	it	lt
 800650c:	4613      	movlt	r3, r2
 800650e:	6033      	str	r3, [r6, #0]
 8006510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006514:	4607      	mov	r7, r0
 8006516:	460c      	mov	r4, r1
 8006518:	b10a      	cbz	r2, 800651e <_printf_common+0x26>
 800651a:	3301      	adds	r3, #1
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	0699      	lsls	r1, r3, #26
 8006522:	bf42      	ittt	mi
 8006524:	6833      	ldrmi	r3, [r6, #0]
 8006526:	3302      	addmi	r3, #2
 8006528:	6033      	strmi	r3, [r6, #0]
 800652a:	6825      	ldr	r5, [r4, #0]
 800652c:	f015 0506 	ands.w	r5, r5, #6
 8006530:	d106      	bne.n	8006540 <_printf_common+0x48>
 8006532:	f104 0a19 	add.w	sl, r4, #25
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	6832      	ldr	r2, [r6, #0]
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	42ab      	cmp	r3, r5
 800653e:	dc26      	bgt.n	800658e <_printf_common+0x96>
 8006540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006544:	1e13      	subs	r3, r2, #0
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	bf18      	it	ne
 800654a:	2301      	movne	r3, #1
 800654c:	0692      	lsls	r2, r2, #26
 800654e:	d42b      	bmi.n	80065a8 <_printf_common+0xb0>
 8006550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006554:	4649      	mov	r1, r9
 8006556:	4638      	mov	r0, r7
 8006558:	47c0      	blx	r8
 800655a:	3001      	adds	r0, #1
 800655c:	d01e      	beq.n	800659c <_printf_common+0xa4>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	2b04      	cmp	r3, #4
 8006568:	bf02      	ittt	eq
 800656a:	68e5      	ldreq	r5, [r4, #12]
 800656c:	6833      	ldreq	r3, [r6, #0]
 800656e:	1aed      	subeq	r5, r5, r3
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	bf0c      	ite	eq
 8006574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006578:	2500      	movne	r5, #0
 800657a:	4293      	cmp	r3, r2
 800657c:	bfc4      	itt	gt
 800657e:	1a9b      	subgt	r3, r3, r2
 8006580:	18ed      	addgt	r5, r5, r3
 8006582:	2600      	movs	r6, #0
 8006584:	341a      	adds	r4, #26
 8006586:	42b5      	cmp	r5, r6
 8006588:	d11a      	bne.n	80065c0 <_printf_common+0xc8>
 800658a:	2000      	movs	r0, #0
 800658c:	e008      	b.n	80065a0 <_printf_common+0xa8>
 800658e:	2301      	movs	r3, #1
 8006590:	4652      	mov	r2, sl
 8006592:	4649      	mov	r1, r9
 8006594:	4638      	mov	r0, r7
 8006596:	47c0      	blx	r8
 8006598:	3001      	adds	r0, #1
 800659a:	d103      	bne.n	80065a4 <_printf_common+0xac>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	3501      	adds	r5, #1
 80065a6:	e7c6      	b.n	8006536 <_printf_common+0x3e>
 80065a8:	18e1      	adds	r1, r4, r3
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	2030      	movs	r0, #48	; 0x30
 80065ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065b2:	4422      	add	r2, r4
 80065b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065bc:	3302      	adds	r3, #2
 80065be:	e7c7      	b.n	8006550 <_printf_common+0x58>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4622      	mov	r2, r4
 80065c4:	4649      	mov	r1, r9
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c0      	blx	r8
 80065ca:	3001      	adds	r0, #1
 80065cc:	d0e6      	beq.n	800659c <_printf_common+0xa4>
 80065ce:	3601      	adds	r6, #1
 80065d0:	e7d9      	b.n	8006586 <_printf_common+0x8e>
	...

080065d4 <_printf_i>:
 80065d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	7e0f      	ldrb	r7, [r1, #24]
 80065da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065dc:	2f78      	cmp	r7, #120	; 0x78
 80065de:	4691      	mov	r9, r2
 80065e0:	4680      	mov	r8, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	469a      	mov	sl, r3
 80065e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ea:	d807      	bhi.n	80065fc <_printf_i+0x28>
 80065ec:	2f62      	cmp	r7, #98	; 0x62
 80065ee:	d80a      	bhi.n	8006606 <_printf_i+0x32>
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	f000 80d4 	beq.w	800679e <_printf_i+0x1ca>
 80065f6:	2f58      	cmp	r7, #88	; 0x58
 80065f8:	f000 80c0 	beq.w	800677c <_printf_i+0x1a8>
 80065fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006604:	e03a      	b.n	800667c <_printf_i+0xa8>
 8006606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800660a:	2b15      	cmp	r3, #21
 800660c:	d8f6      	bhi.n	80065fc <_printf_i+0x28>
 800660e:	a101      	add	r1, pc, #4	; (adr r1, 8006614 <_printf_i+0x40>)
 8006610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006614:	0800666d 	.word	0x0800666d
 8006618:	08006681 	.word	0x08006681
 800661c:	080065fd 	.word	0x080065fd
 8006620:	080065fd 	.word	0x080065fd
 8006624:	080065fd 	.word	0x080065fd
 8006628:	080065fd 	.word	0x080065fd
 800662c:	08006681 	.word	0x08006681
 8006630:	080065fd 	.word	0x080065fd
 8006634:	080065fd 	.word	0x080065fd
 8006638:	080065fd 	.word	0x080065fd
 800663c:	080065fd 	.word	0x080065fd
 8006640:	08006785 	.word	0x08006785
 8006644:	080066ad 	.word	0x080066ad
 8006648:	0800673f 	.word	0x0800673f
 800664c:	080065fd 	.word	0x080065fd
 8006650:	080065fd 	.word	0x080065fd
 8006654:	080067a7 	.word	0x080067a7
 8006658:	080065fd 	.word	0x080065fd
 800665c:	080066ad 	.word	0x080066ad
 8006660:	080065fd 	.word	0x080065fd
 8006664:	080065fd 	.word	0x080065fd
 8006668:	08006747 	.word	0x08006747
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800667c:	2301      	movs	r3, #1
 800667e:	e09f      	b.n	80067c0 <_printf_i+0x1ec>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	0607      	lsls	r7, r0, #24
 8006686:	f103 0104 	add.w	r1, r3, #4
 800668a:	6029      	str	r1, [r5, #0]
 800668c:	d501      	bpl.n	8006692 <_printf_i+0xbe>
 800668e:	681e      	ldr	r6, [r3, #0]
 8006690:	e003      	b.n	800669a <_printf_i+0xc6>
 8006692:	0646      	lsls	r6, r0, #25
 8006694:	d5fb      	bpl.n	800668e <_printf_i+0xba>
 8006696:	f9b3 6000 	ldrsh.w	r6, [r3]
 800669a:	2e00      	cmp	r6, #0
 800669c:	da03      	bge.n	80066a6 <_printf_i+0xd2>
 800669e:	232d      	movs	r3, #45	; 0x2d
 80066a0:	4276      	negs	r6, r6
 80066a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a6:	485a      	ldr	r0, [pc, #360]	; (8006810 <_printf_i+0x23c>)
 80066a8:	230a      	movs	r3, #10
 80066aa:	e012      	b.n	80066d2 <_printf_i+0xfe>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	1d19      	adds	r1, r3, #4
 80066b2:	6029      	str	r1, [r5, #0]
 80066b4:	0605      	lsls	r5, r0, #24
 80066b6:	d501      	bpl.n	80066bc <_printf_i+0xe8>
 80066b8:	681e      	ldr	r6, [r3, #0]
 80066ba:	e002      	b.n	80066c2 <_printf_i+0xee>
 80066bc:	0641      	lsls	r1, r0, #25
 80066be:	d5fb      	bpl.n	80066b8 <_printf_i+0xe4>
 80066c0:	881e      	ldrh	r6, [r3, #0]
 80066c2:	4853      	ldr	r0, [pc, #332]	; (8006810 <_printf_i+0x23c>)
 80066c4:	2f6f      	cmp	r7, #111	; 0x6f
 80066c6:	bf0c      	ite	eq
 80066c8:	2308      	moveq	r3, #8
 80066ca:	230a      	movne	r3, #10
 80066cc:	2100      	movs	r1, #0
 80066ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066d2:	6865      	ldr	r5, [r4, #4]
 80066d4:	60a5      	str	r5, [r4, #8]
 80066d6:	2d00      	cmp	r5, #0
 80066d8:	bfa2      	ittt	ge
 80066da:	6821      	ldrge	r1, [r4, #0]
 80066dc:	f021 0104 	bicge.w	r1, r1, #4
 80066e0:	6021      	strge	r1, [r4, #0]
 80066e2:	b90e      	cbnz	r6, 80066e8 <_printf_i+0x114>
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	d04b      	beq.n	8006780 <_printf_i+0x1ac>
 80066e8:	4615      	mov	r5, r2
 80066ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80066ee:	fb03 6711 	mls	r7, r3, r1, r6
 80066f2:	5dc7      	ldrb	r7, [r0, r7]
 80066f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066f8:	4637      	mov	r7, r6
 80066fa:	42bb      	cmp	r3, r7
 80066fc:	460e      	mov	r6, r1
 80066fe:	d9f4      	bls.n	80066ea <_printf_i+0x116>
 8006700:	2b08      	cmp	r3, #8
 8006702:	d10b      	bne.n	800671c <_printf_i+0x148>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07de      	lsls	r6, r3, #31
 8006708:	d508      	bpl.n	800671c <_printf_i+0x148>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	6861      	ldr	r1, [r4, #4]
 800670e:	4299      	cmp	r1, r3
 8006710:	bfde      	ittt	le
 8006712:	2330      	movle	r3, #48	; 0x30
 8006714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006718:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800671c:	1b52      	subs	r2, r2, r5
 800671e:	6122      	str	r2, [r4, #16]
 8006720:	f8cd a000 	str.w	sl, [sp]
 8006724:	464b      	mov	r3, r9
 8006726:	aa03      	add	r2, sp, #12
 8006728:	4621      	mov	r1, r4
 800672a:	4640      	mov	r0, r8
 800672c:	f7ff fee4 	bl	80064f8 <_printf_common>
 8006730:	3001      	adds	r0, #1
 8006732:	d14a      	bne.n	80067ca <_printf_i+0x1f6>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006738:	b004      	add	sp, #16
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	f043 0320 	orr.w	r3, r3, #32
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	4833      	ldr	r0, [pc, #204]	; (8006814 <_printf_i+0x240>)
 8006748:	2778      	movs	r7, #120	; 0x78
 800674a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	6829      	ldr	r1, [r5, #0]
 8006752:	061f      	lsls	r7, r3, #24
 8006754:	f851 6b04 	ldr.w	r6, [r1], #4
 8006758:	d402      	bmi.n	8006760 <_printf_i+0x18c>
 800675a:	065f      	lsls	r7, r3, #25
 800675c:	bf48      	it	mi
 800675e:	b2b6      	uxthmi	r6, r6
 8006760:	07df      	lsls	r7, r3, #31
 8006762:	bf48      	it	mi
 8006764:	f043 0320 	orrmi.w	r3, r3, #32
 8006768:	6029      	str	r1, [r5, #0]
 800676a:	bf48      	it	mi
 800676c:	6023      	strmi	r3, [r4, #0]
 800676e:	b91e      	cbnz	r6, 8006778 <_printf_i+0x1a4>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	f023 0320 	bic.w	r3, r3, #32
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	2310      	movs	r3, #16
 800677a:	e7a7      	b.n	80066cc <_printf_i+0xf8>
 800677c:	4824      	ldr	r0, [pc, #144]	; (8006810 <_printf_i+0x23c>)
 800677e:	e7e4      	b.n	800674a <_printf_i+0x176>
 8006780:	4615      	mov	r5, r2
 8006782:	e7bd      	b.n	8006700 <_printf_i+0x12c>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	6826      	ldr	r6, [r4, #0]
 8006788:	6961      	ldr	r1, [r4, #20]
 800678a:	1d18      	adds	r0, r3, #4
 800678c:	6028      	str	r0, [r5, #0]
 800678e:	0635      	lsls	r5, r6, #24
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	d501      	bpl.n	8006798 <_printf_i+0x1c4>
 8006794:	6019      	str	r1, [r3, #0]
 8006796:	e002      	b.n	800679e <_printf_i+0x1ca>
 8006798:	0670      	lsls	r0, r6, #25
 800679a:	d5fb      	bpl.n	8006794 <_printf_i+0x1c0>
 800679c:	8019      	strh	r1, [r3, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	4615      	mov	r5, r2
 80067a4:	e7bc      	b.n	8006720 <_printf_i+0x14c>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	602a      	str	r2, [r5, #0]
 80067ac:	681d      	ldr	r5, [r3, #0]
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	2100      	movs	r1, #0
 80067b2:	4628      	mov	r0, r5
 80067b4:	f7f9 fd34 	bl	8000220 <memchr>
 80067b8:	b108      	cbz	r0, 80067be <_printf_i+0x1ea>
 80067ba:	1b40      	subs	r0, r0, r5
 80067bc:	6060      	str	r0, [r4, #4]
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	2300      	movs	r3, #0
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c8:	e7aa      	b.n	8006720 <_printf_i+0x14c>
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	462a      	mov	r2, r5
 80067ce:	4649      	mov	r1, r9
 80067d0:	4640      	mov	r0, r8
 80067d2:	47d0      	blx	sl
 80067d4:	3001      	adds	r0, #1
 80067d6:	d0ad      	beq.n	8006734 <_printf_i+0x160>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	079b      	lsls	r3, r3, #30
 80067dc:	d413      	bmi.n	8006806 <_printf_i+0x232>
 80067de:	68e0      	ldr	r0, [r4, #12]
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	4298      	cmp	r0, r3
 80067e4:	bfb8      	it	lt
 80067e6:	4618      	movlt	r0, r3
 80067e8:	e7a6      	b.n	8006738 <_printf_i+0x164>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4632      	mov	r2, r6
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	47d0      	blx	sl
 80067f4:	3001      	adds	r0, #1
 80067f6:	d09d      	beq.n	8006734 <_printf_i+0x160>
 80067f8:	3501      	adds	r5, #1
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	9903      	ldr	r1, [sp, #12]
 80067fe:	1a5b      	subs	r3, r3, r1
 8006800:	42ab      	cmp	r3, r5
 8006802:	dcf2      	bgt.n	80067ea <_printf_i+0x216>
 8006804:	e7eb      	b.n	80067de <_printf_i+0x20a>
 8006806:	2500      	movs	r5, #0
 8006808:	f104 0619 	add.w	r6, r4, #25
 800680c:	e7f5      	b.n	80067fa <_printf_i+0x226>
 800680e:	bf00      	nop
 8006810:	08006e75 	.word	0x08006e75
 8006814:	08006e86 	.word	0x08006e86

08006818 <__sflush_r>:
 8006818:	898a      	ldrh	r2, [r1, #12]
 800681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681e:	4605      	mov	r5, r0
 8006820:	0710      	lsls	r0, r2, #28
 8006822:	460c      	mov	r4, r1
 8006824:	d458      	bmi.n	80068d8 <__sflush_r+0xc0>
 8006826:	684b      	ldr	r3, [r1, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dc05      	bgt.n	8006838 <__sflush_r+0x20>
 800682c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	dc02      	bgt.n	8006838 <__sflush_r+0x20>
 8006832:	2000      	movs	r0, #0
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800683a:	2e00      	cmp	r6, #0
 800683c:	d0f9      	beq.n	8006832 <__sflush_r+0x1a>
 800683e:	2300      	movs	r3, #0
 8006840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006844:	682f      	ldr	r7, [r5, #0]
 8006846:	6a21      	ldr	r1, [r4, #32]
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	d032      	beq.n	80068b2 <__sflush_r+0x9a>
 800684c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	075a      	lsls	r2, r3, #29
 8006852:	d505      	bpl.n	8006860 <__sflush_r+0x48>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	1ac0      	subs	r0, r0, r3
 8006858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800685a:	b10b      	cbz	r3, 8006860 <__sflush_r+0x48>
 800685c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800685e:	1ac0      	subs	r0, r0, r3
 8006860:	2300      	movs	r3, #0
 8006862:	4602      	mov	r2, r0
 8006864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006866:	6a21      	ldr	r1, [r4, #32]
 8006868:	4628      	mov	r0, r5
 800686a:	47b0      	blx	r6
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	d106      	bne.n	8006880 <__sflush_r+0x68>
 8006872:	6829      	ldr	r1, [r5, #0]
 8006874:	291d      	cmp	r1, #29
 8006876:	d82b      	bhi.n	80068d0 <__sflush_r+0xb8>
 8006878:	4a29      	ldr	r2, [pc, #164]	; (8006920 <__sflush_r+0x108>)
 800687a:	410a      	asrs	r2, r1
 800687c:	07d6      	lsls	r6, r2, #31
 800687e:	d427      	bmi.n	80068d0 <__sflush_r+0xb8>
 8006880:	2200      	movs	r2, #0
 8006882:	6062      	str	r2, [r4, #4]
 8006884:	04d9      	lsls	r1, r3, #19
 8006886:	6922      	ldr	r2, [r4, #16]
 8006888:	6022      	str	r2, [r4, #0]
 800688a:	d504      	bpl.n	8006896 <__sflush_r+0x7e>
 800688c:	1c42      	adds	r2, r0, #1
 800688e:	d101      	bne.n	8006894 <__sflush_r+0x7c>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b903      	cbnz	r3, 8006896 <__sflush_r+0x7e>
 8006894:	6560      	str	r0, [r4, #84]	; 0x54
 8006896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006898:	602f      	str	r7, [r5, #0]
 800689a:	2900      	cmp	r1, #0
 800689c:	d0c9      	beq.n	8006832 <__sflush_r+0x1a>
 800689e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a2:	4299      	cmp	r1, r3
 80068a4:	d002      	beq.n	80068ac <__sflush_r+0x94>
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fa22 	bl	8006cf0 <_free_r>
 80068ac:	2000      	movs	r0, #0
 80068ae:	6360      	str	r0, [r4, #52]	; 0x34
 80068b0:	e7c0      	b.n	8006834 <__sflush_r+0x1c>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b0      	blx	r6
 80068b8:	1c41      	adds	r1, r0, #1
 80068ba:	d1c8      	bne.n	800684e <__sflush_r+0x36>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0c5      	beq.n	800684e <__sflush_r+0x36>
 80068c2:	2b1d      	cmp	r3, #29
 80068c4:	d001      	beq.n	80068ca <__sflush_r+0xb2>
 80068c6:	2b16      	cmp	r3, #22
 80068c8:	d101      	bne.n	80068ce <__sflush_r+0xb6>
 80068ca:	602f      	str	r7, [r5, #0]
 80068cc:	e7b1      	b.n	8006832 <__sflush_r+0x1a>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	e7ad      	b.n	8006834 <__sflush_r+0x1c>
 80068d8:	690f      	ldr	r7, [r1, #16]
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d0a9      	beq.n	8006832 <__sflush_r+0x1a>
 80068de:	0793      	lsls	r3, r2, #30
 80068e0:	680e      	ldr	r6, [r1, #0]
 80068e2:	bf08      	it	eq
 80068e4:	694b      	ldreq	r3, [r1, #20]
 80068e6:	600f      	str	r7, [r1, #0]
 80068e8:	bf18      	it	ne
 80068ea:	2300      	movne	r3, #0
 80068ec:	eba6 0807 	sub.w	r8, r6, r7
 80068f0:	608b      	str	r3, [r1, #8]
 80068f2:	f1b8 0f00 	cmp.w	r8, #0
 80068f6:	dd9c      	ble.n	8006832 <__sflush_r+0x1a>
 80068f8:	6a21      	ldr	r1, [r4, #32]
 80068fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068fc:	4643      	mov	r3, r8
 80068fe:	463a      	mov	r2, r7
 8006900:	4628      	mov	r0, r5
 8006902:	47b0      	blx	r6
 8006904:	2800      	cmp	r0, #0
 8006906:	dc06      	bgt.n	8006916 <__sflush_r+0xfe>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006914:	e78e      	b.n	8006834 <__sflush_r+0x1c>
 8006916:	4407      	add	r7, r0
 8006918:	eba8 0800 	sub.w	r8, r8, r0
 800691c:	e7e9      	b.n	80068f2 <__sflush_r+0xda>
 800691e:	bf00      	nop
 8006920:	dfbffffe 	.word	0xdfbffffe

08006924 <_fflush_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	4605      	mov	r5, r0
 800692a:	460c      	mov	r4, r1
 800692c:	b913      	cbnz	r3, 8006934 <_fflush_r+0x10>
 800692e:	2500      	movs	r5, #0
 8006930:	4628      	mov	r0, r5
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	b118      	cbz	r0, 800693e <_fflush_r+0x1a>
 8006936:	6a03      	ldr	r3, [r0, #32]
 8006938:	b90b      	cbnz	r3, 800693e <_fflush_r+0x1a>
 800693a:	f7ff fb21 	bl	8005f80 <__sinit>
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f3      	beq.n	800692e <_fflush_r+0xa>
 8006946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006948:	07d0      	lsls	r0, r2, #31
 800694a:	d404      	bmi.n	8006956 <_fflush_r+0x32>
 800694c:	0599      	lsls	r1, r3, #22
 800694e:	d402      	bmi.n	8006956 <_fflush_r+0x32>
 8006950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006952:	f7ff fbec 	bl	800612e <__retarget_lock_acquire_recursive>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	f7ff ff5d 	bl	8006818 <__sflush_r>
 800695e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006960:	07da      	lsls	r2, r3, #31
 8006962:	4605      	mov	r5, r0
 8006964:	d4e4      	bmi.n	8006930 <_fflush_r+0xc>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d4e1      	bmi.n	8006930 <_fflush_r+0xc>
 800696c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696e:	f7ff fbdf 	bl	8006130 <__retarget_lock_release_recursive>
 8006972:	e7dd      	b.n	8006930 <_fflush_r+0xc>

08006974 <__malloc_lock>:
 8006974:	4801      	ldr	r0, [pc, #4]	; (800697c <__malloc_lock+0x8>)
 8006976:	f7ff bbda 	b.w	800612e <__retarget_lock_acquire_recursive>
 800697a:	bf00      	nop
 800697c:	200003e0 	.word	0x200003e0

08006980 <__malloc_unlock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_unlock+0x8>)
 8006982:	f7ff bbd5 	b.w	8006130 <__retarget_lock_release_recursive>
 8006986:	bf00      	nop
 8006988:	200003e0 	.word	0x200003e0

0800698c <__sread>:
 800698c:	b510      	push	{r4, lr}
 800698e:	460c      	mov	r4, r1
 8006990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006994:	f000 f978 	bl	8006c88 <_read_r>
 8006998:	2800      	cmp	r0, #0
 800699a:	bfab      	itete	ge
 800699c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800699e:	89a3      	ldrhlt	r3, [r4, #12]
 80069a0:	181b      	addge	r3, r3, r0
 80069a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069a6:	bfac      	ite	ge
 80069a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80069aa:	81a3      	strhlt	r3, [r4, #12]
 80069ac:	bd10      	pop	{r4, pc}

080069ae <__swrite>:
 80069ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	461f      	mov	r7, r3
 80069b4:	898b      	ldrh	r3, [r1, #12]
 80069b6:	05db      	lsls	r3, r3, #23
 80069b8:	4605      	mov	r5, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	4616      	mov	r6, r2
 80069be:	d505      	bpl.n	80069cc <__swrite+0x1e>
 80069c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c4:	2302      	movs	r3, #2
 80069c6:	2200      	movs	r2, #0
 80069c8:	f000 f94c 	bl	8006c64 <_lseek_r>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	4628      	mov	r0, r5
 80069de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e2:	f000 b973 	b.w	8006ccc <_write_r>

080069e6 <__sseek>:
 80069e6:	b510      	push	{r4, lr}
 80069e8:	460c      	mov	r4, r1
 80069ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ee:	f000 f939 	bl	8006c64 <_lseek_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	bf15      	itete	ne
 80069f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80069fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a02:	81a3      	strheq	r3, [r4, #12]
 8006a04:	bf18      	it	ne
 8006a06:	81a3      	strhne	r3, [r4, #12]
 8006a08:	bd10      	pop	{r4, pc}

08006a0a <__sclose>:
 8006a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0e:	f000 b8f7 	b.w	8006c00 <_close_r>

08006a12 <__swbuf_r>:
 8006a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a14:	460e      	mov	r6, r1
 8006a16:	4614      	mov	r4, r2
 8006a18:	4605      	mov	r5, r0
 8006a1a:	b118      	cbz	r0, 8006a24 <__swbuf_r+0x12>
 8006a1c:	6a03      	ldr	r3, [r0, #32]
 8006a1e:	b90b      	cbnz	r3, 8006a24 <__swbuf_r+0x12>
 8006a20:	f7ff faae 	bl	8005f80 <__sinit>
 8006a24:	69a3      	ldr	r3, [r4, #24]
 8006a26:	60a3      	str	r3, [r4, #8]
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	071a      	lsls	r2, r3, #28
 8006a2c:	d525      	bpl.n	8006a7a <__swbuf_r+0x68>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	b31b      	cbz	r3, 8006a7a <__swbuf_r+0x68>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	6922      	ldr	r2, [r4, #16]
 8006a36:	1a98      	subs	r0, r3, r2
 8006a38:	6963      	ldr	r3, [r4, #20]
 8006a3a:	b2f6      	uxtb	r6, r6
 8006a3c:	4283      	cmp	r3, r0
 8006a3e:	4637      	mov	r7, r6
 8006a40:	dc04      	bgt.n	8006a4c <__swbuf_r+0x3a>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff ff6d 	bl	8006924 <_fflush_r>
 8006a4a:	b9e0      	cbnz	r0, 8006a86 <__swbuf_r+0x74>
 8006a4c:	68a3      	ldr	r3, [r4, #8]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	6022      	str	r2, [r4, #0]
 8006a58:	701e      	strb	r6, [r3, #0]
 8006a5a:	6962      	ldr	r2, [r4, #20]
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d004      	beq.n	8006a6c <__swbuf_r+0x5a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	07db      	lsls	r3, r3, #31
 8006a66:	d506      	bpl.n	8006a76 <__swbuf_r+0x64>
 8006a68:	2e0a      	cmp	r6, #10
 8006a6a:	d104      	bne.n	8006a76 <__swbuf_r+0x64>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f7ff ff58 	bl	8006924 <_fflush_r>
 8006a74:	b938      	cbnz	r0, 8006a86 <__swbuf_r+0x74>
 8006a76:	4638      	mov	r0, r7
 8006a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 f805 	bl	8006a8c <__swsetup_r>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d0d5      	beq.n	8006a32 <__swbuf_r+0x20>
 8006a86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a8a:	e7f4      	b.n	8006a76 <__swbuf_r+0x64>

08006a8c <__swsetup_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4b2a      	ldr	r3, [pc, #168]	; (8006b38 <__swsetup_r+0xac>)
 8006a90:	4605      	mov	r5, r0
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	460c      	mov	r4, r1
 8006a96:	b118      	cbz	r0, 8006aa0 <__swsetup_r+0x14>
 8006a98:	6a03      	ldr	r3, [r0, #32]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <__swsetup_r+0x14>
 8006a9c:	f7ff fa70 	bl	8005f80 <__sinit>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aa6:	0718      	lsls	r0, r3, #28
 8006aa8:	d422      	bmi.n	8006af0 <__swsetup_r+0x64>
 8006aaa:	06d9      	lsls	r1, r3, #27
 8006aac:	d407      	bmi.n	8006abe <__swsetup_r+0x32>
 8006aae:	2309      	movs	r3, #9
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006abc:	e034      	b.n	8006b28 <__swsetup_r+0x9c>
 8006abe:	0758      	lsls	r0, r3, #29
 8006ac0:	d512      	bpl.n	8006ae8 <__swsetup_r+0x5c>
 8006ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ac4:	b141      	cbz	r1, 8006ad8 <__swsetup_r+0x4c>
 8006ac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aca:	4299      	cmp	r1, r3
 8006acc:	d002      	beq.n	8006ad4 <__swsetup_r+0x48>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 f90e 	bl	8006cf0 <_free_r>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6363      	str	r3, [r4, #52]	; 0x34
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6063      	str	r3, [r4, #4]
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f043 0308 	orr.w	r3, r3, #8
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	b94b      	cbnz	r3, 8006b08 <__swsetup_r+0x7c>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afe:	d003      	beq.n	8006b08 <__swsetup_r+0x7c>
 8006b00:	4621      	mov	r1, r4
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f840 	bl	8006b88 <__smakebuf_r>
 8006b08:	89a0      	ldrh	r0, [r4, #12]
 8006b0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b0e:	f010 0301 	ands.w	r3, r0, #1
 8006b12:	d00a      	beq.n	8006b2a <__swsetup_r+0x9e>
 8006b14:	2300      	movs	r3, #0
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	6963      	ldr	r3, [r4, #20]
 8006b1a:	425b      	negs	r3, r3
 8006b1c:	61a3      	str	r3, [r4, #24]
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	b943      	cbnz	r3, 8006b34 <__swsetup_r+0xa8>
 8006b22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b26:	d1c4      	bne.n	8006ab2 <__swsetup_r+0x26>
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	0781      	lsls	r1, r0, #30
 8006b2c:	bf58      	it	pl
 8006b2e:	6963      	ldrpl	r3, [r4, #20]
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	e7f4      	b.n	8006b1e <__swsetup_r+0x92>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e7f7      	b.n	8006b28 <__swsetup_r+0x9c>
 8006b38:	20000064 	.word	0x20000064

08006b3c <__swhatbuf_r>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b44:	2900      	cmp	r1, #0
 8006b46:	b096      	sub	sp, #88	; 0x58
 8006b48:	4615      	mov	r5, r2
 8006b4a:	461e      	mov	r6, r3
 8006b4c:	da0d      	bge.n	8006b6a <__swhatbuf_r+0x2e>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	bf0c      	ite	eq
 8006b5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b5e:	2340      	movne	r3, #64	; 0x40
 8006b60:	2000      	movs	r0, #0
 8006b62:	6031      	str	r1, [r6, #0]
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	b016      	add	sp, #88	; 0x58
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
 8006b6a:	466a      	mov	r2, sp
 8006b6c:	f000 f858 	bl	8006c20 <_fstat_r>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	dbec      	blt.n	8006b4e <__swhatbuf_r+0x12>
 8006b74:	9901      	ldr	r1, [sp, #4]
 8006b76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b7e:	4259      	negs	r1, r3
 8006b80:	4159      	adcs	r1, r3
 8006b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b86:	e7eb      	b.n	8006b60 <__swhatbuf_r+0x24>

08006b88 <__smakebuf_r>:
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b8c:	079d      	lsls	r5, r3, #30
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	d507      	bpl.n	8006ba4 <__smakebuf_r+0x1c>
 8006b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	6163      	str	r3, [r4, #20]
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	ab01      	add	r3, sp, #4
 8006ba6:	466a      	mov	r2, sp
 8006ba8:	f7ff ffc8 	bl	8006b3c <__swhatbuf_r>
 8006bac:	9900      	ldr	r1, [sp, #0]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff fc21 	bl	80063f8 <_malloc_r>
 8006bb6:	b948      	cbnz	r0, 8006bcc <__smakebuf_r+0x44>
 8006bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbc:	059a      	lsls	r2, r3, #22
 8006bbe:	d4ef      	bmi.n	8006ba0 <__smakebuf_r+0x18>
 8006bc0:	f023 0303 	bic.w	r3, r3, #3
 8006bc4:	f043 0302 	orr.w	r3, r3, #2
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	e7e3      	b.n	8006b94 <__smakebuf_r+0xc>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	6020      	str	r0, [r4, #0]
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	6163      	str	r3, [r4, #20]
 8006bda:	9b01      	ldr	r3, [sp, #4]
 8006bdc:	6120      	str	r0, [r4, #16]
 8006bde:	b15b      	cbz	r3, 8006bf8 <__smakebuf_r+0x70>
 8006be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f82d 	bl	8006c44 <_isatty_r>
 8006bea:	b128      	cbz	r0, 8006bf8 <__smakebuf_r+0x70>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	431d      	orrs	r5, r3
 8006bfc:	81a5      	strh	r5, [r4, #12]
 8006bfe:	e7cf      	b.n	8006ba0 <__smakebuf_r+0x18>

08006c00 <_close_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_close_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa f965 	bl	8000eda <_close>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_close_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_close_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	200003ec 	.word	0x200003ec

08006c20 <_fstat_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	; (8006c40 <_fstat_r+0x20>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	f7fa f960 	bl	8000ef2 <_fstat>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d102      	bne.n	8006c3c <_fstat_r+0x1c>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b103      	cbz	r3, 8006c3c <_fstat_r+0x1c>
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	200003ec 	.word	0x200003ec

08006c44 <_isatty_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d06      	ldr	r5, [pc, #24]	; (8006c60 <_isatty_r+0x1c>)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fa f95f 	bl	8000f12 <_isatty>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_isatty_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_isatty_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	200003ec 	.word	0x200003ec

08006c64 <_lseek_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d07      	ldr	r5, [pc, #28]	; (8006c84 <_lseek_r+0x20>)
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fa f958 	bl	8000f28 <_lseek>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_lseek_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_lseek_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	200003ec 	.word	0x200003ec

08006c88 <_read_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_read_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa f902 	bl	8000ea0 <_read>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_read_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_read_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	200003ec 	.word	0x200003ec

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa f944 	bl	8000f44 <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200003ec 	.word	0x200003ec

08006ccc <_write_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_write_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7f9 fca8 	bl	8000630 <_write>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_write_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_write_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200003ec 	.word	0x200003ec

08006cf0 <_free_r>:
 8006cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d044      	beq.n	8006d80 <_free_r+0x90>
 8006cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006d02:	bfb8      	it	lt
 8006d04:	18e4      	addlt	r4, r4, r3
 8006d06:	f7ff fe35 	bl	8006974 <__malloc_lock>
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <_free_r+0x94>)
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	b933      	cbnz	r3, 8006d20 <_free_r+0x30>
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	6014      	str	r4, [r2, #0]
 8006d16:	b003      	add	sp, #12
 8006d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d1c:	f7ff be30 	b.w	8006980 <__malloc_unlock>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d908      	bls.n	8006d36 <_free_r+0x46>
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1949      	addeq	r1, r1, r5
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	e7ed      	b.n	8006d12 <_free_r+0x22>
 8006d36:	461a      	mov	r2, r3
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b10b      	cbz	r3, 8006d40 <_free_r+0x50>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d9fa      	bls.n	8006d36 <_free_r+0x46>
 8006d40:	6811      	ldr	r1, [r2, #0]
 8006d42:	1855      	adds	r5, r2, r1
 8006d44:	42a5      	cmp	r5, r4
 8006d46:	d10b      	bne.n	8006d60 <_free_r+0x70>
 8006d48:	6824      	ldr	r4, [r4, #0]
 8006d4a:	4421      	add	r1, r4
 8006d4c:	1854      	adds	r4, r2, r1
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	d1e0      	bne.n	8006d16 <_free_r+0x26>
 8006d54:	681c      	ldr	r4, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	6053      	str	r3, [r2, #4]
 8006d5a:	440c      	add	r4, r1
 8006d5c:	6014      	str	r4, [r2, #0]
 8006d5e:	e7da      	b.n	8006d16 <_free_r+0x26>
 8006d60:	d902      	bls.n	8006d68 <_free_r+0x78>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6003      	str	r3, [r0, #0]
 8006d66:	e7d6      	b.n	8006d16 <_free_r+0x26>
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	1961      	adds	r1, r4, r5
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf04      	itt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	bf04      	itt	eq
 8006d78:	1949      	addeq	r1, r1, r5
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6054      	str	r4, [r2, #4]
 8006d7e:	e7ca      	b.n	8006d16 <_free_r+0x26>
 8006d80:	b003      	add	sp, #12
 8006d82:	bd30      	pop	{r4, r5, pc}
 8006d84:	200003e4 	.word	0x200003e4

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
