
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f90  08005f90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08006000  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08006000  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c1b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f3  00000000  00000000  00031cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b63  00000000  00000000  000351d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ba0  00000000  00000000  00035d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011571  00000000  00000000  0005d8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101d68  00000000  00000000  0006ee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004600  00000000  00000000  00170bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001751ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005edc 	.word	0x08005edc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005edc 	.word	0x08005edc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	2308      	movs	r3, #8
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <_write+0x24>)
 80005d2:	f003 fe47 	bl	8004264 <HAL_UART_Transmit>
    return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000150 	.word	0x20000150

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fbbd 	bl	8000d66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f826 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f980 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f4:	f000 f954 	bl	80008a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005f8:	f000 f860 	bl	80006bc <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005fc:	f000 f906 	bl	800080c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start ADC and save at DMA
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000600:	217f      	movs	r1, #127	; 0x7f
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x48>)
 8000604:	f001 ff50 	bl	80024a8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
 8000608:	2204      	movs	r2, #4
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <main+0x4c>)
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x48>)
 800060e:	f001 f83d 	bl	800168c <HAL_ADC_Start_DMA>

  printf("Complete Initialize\r\n");
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <main+0x50>)
 8000614:	f004 fdfa 	bl	800520c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		printf("%d\r\n", arm_positions[0]);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <main+0x4c>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0x54>)
 8000620:	f004 fd8e 	bl	8005140 <iprintf>
  		HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fc0f 	bl	8000e48 <HAL_Delay>
  		printf("%d\r\n", arm_positions[0]);
 800062a:	e7f5      	b.n	8000618 <main+0x34>
 800062c:	20000084 	.word	0x20000084
 8000630:	200001e4 	.word	0x200001e4
 8000634:	08005ef4 	.word	0x08005ef4
 8000638:	08005f0c 	.word	0x08005f0c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2238      	movs	r2, #56	; 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fde6 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f002 fd8f 	bl	8003184 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fe25 	bl	80032cc <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000688:	f000 f958 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 f923 	bl	80038f0 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b0:	f000 f944 	bl	800093c <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fda1 	bl	800521c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e2:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f0:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000704:	2204      	movs	r2, #4
 8000706:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_ADC1_Init+0x13c>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000710:	2201      	movs	r2, #1
 8000712:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000716:	2204      	movs	r2, #4
 8000718:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <MX_ADC1_Init+0x13c>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_ADC1_Init+0x13c>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000730:	2201      	movs	r2, #1
 8000732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_ADC1_Init+0x13c>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	482c      	ldr	r0, [pc, #176]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000746:	f000 fde5 	bl	8001314 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000750:	f000 f8f4 	bl	800093c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	4619      	mov	r1, r3
 800075e:	4826      	ldr	r0, [pc, #152]	; (80007f8 <MX_ADC1_Init+0x13c>)
 8000760:	f001 ff04 	bl	800256c <HAL_ADCEx_MultiModeConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800076a:	f000 f8e7 	bl	800093c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_ADC1_Init+0x140>)
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2306      	movs	r3, #6
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000776:	2307      	movs	r3, #7
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077a:	237f      	movs	r3, #127	; 0x7f
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077e:	2304      	movs	r3, #4
 8000780:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	481b      	ldr	r0, [pc, #108]	; (80007f8 <MX_ADC1_Init+0x13c>)
 800078c:	f001 f870 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000796:	f000 f8d1 	bl	800093c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC1_Init+0x144>)
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800079e:	230c      	movs	r3, #12
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80007a8:	f001 f862 	bl	8001870 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007b2:	f000 f8c3 	bl	800093c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC1_Init+0x148>)
 80007b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ba:	2312      	movs	r3, #18
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80007c4:	f001 f854 	bl	8001870 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80007ce:	f000 f8b5 	bl	800093c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_ADC1_Init+0x14c>)
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007d6:	2318      	movs	r3, #24
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0x13c>)
 80007e0:	f001 f846 	bl	8001870 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80007ea:	f000 f8a7 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084
 80007fc:	04300002 	.word	0x04300002
 8000800:	08600004 	.word	0x08600004
 8000804:	19200040 	.word	0x19200040
 8000808:	1d500080 	.word	0x1d500080

0800080c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	f003 fcb8 	bl	80041c4 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f86f 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	f004 fae1 	bl	8004e28 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800086c:	f000 f866 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f004 fb16 	bl	8004ea4 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087e:	f000 f85d 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	f004 fa97 	bl	8004db6 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088e:	f000 f855 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000150 	.word	0x20000150
 800089c:	40008000 	.word	0x40008000

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_DMA_Init+0x50>)
 80008a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_DMA_Init+0x50>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6493      	str	r3, [r2, #72]	; 0x48
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_DMA_Init+0x50>)
 80008b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DMA_Init+0x50>)
 80008c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <MX_DMA_Init+0x50>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6493      	str	r3, [r2, #72]	; 0x48
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DMA_Init+0x50>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	200b      	movs	r0, #11
 80008dc:	f002 f829 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e0:	200b      	movs	r0, #11
 80008e2:	f002 f840 	bl	8002966 <HAL_NVIC_EnableIRQ>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_GPIO_Init+0x44>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <MX_GPIO_Init+0x44>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_GPIO_Init+0x44>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_GPIO_Init+0x44>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <MX_GPIO_Init+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_GPIO_Init+0x44>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0a0      	sub	sp, #128	; 0x80
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2254      	movs	r2, #84	; 0x54
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fc33 	bl	800521c <memset>
  if(hadc->Instance==ADC1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009be:	d177      	bne.n	8000ab0 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 f9a9 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009dc:	f7ff ffae 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 80009e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_ADC_MspInit+0x128>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <HAL_ADC_MspInit+0x12c>)
 8000a3c:	f002 fa20 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a40:	2303      	movs	r3, #3
 8000a42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a44:	2303      	movs	r3, #3
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f002 fa13 	bl	8002e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_ADC_MspInit+0x134>)
 8000a5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a62:	2205      	movs	r2, #5
 8000a64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000a96:	f001 ff81 	bl	800299c <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000aa0:	f7ff ff4c 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000aa8:	655a      	str	r2, [r3, #84]	; 0x54
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <HAL_ADC_MspInit+0x130>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3780      	adds	r7, #128	; 0x80
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	200000f0 	.word	0x200000f0
 8000ac4:	40020008 	.word	0x40020008

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	; 0x78
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2254      	movs	r2, #84	; 0x54
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fb97 	bl	800521c <memset>
  if(huart->Instance==LPUART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <HAL_UART_MspInit+0xa8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d136      	bne.n	8000b66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000af8:	2320      	movs	r3, #32
 8000afa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f90f 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b10:	f7ff ff14 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0xac>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b44:	230c      	movs	r3, #12
 8000b46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b54:	230c      	movs	r3, #12
 8000b56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f002 f98d 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3778      	adds	r7, #120	; 0x78
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40008000 	.word	0x40008000
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f922 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel1_IRQHandler+0x10>)
 8000bd2:	f002 f806 	bl	8002be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000f0 	.word	0x200000f0

08000be0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
  }

  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c42:	605a      	str	r2, [r3, #4]
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_isatty>:

int _isatty(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f004 faba 	bl	800522c <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200001ec 	.word	0x200001ec
 8000cec:	20000340 	.word	0x20000340

08000cf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f004 fa79 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d46:	f7ff fc4d 	bl	80005e4 <main>

08000d4a <LoopForever>:

LoopForever:
    b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d58:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 8000d5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d60:	20000340 	.word	0x20000340

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>

08000d66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f001 fdd3 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f80e 	bl	8000d98 <HAL_InitTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e001      	b.n	8000d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d88:	f7ff fdde 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_InitTick+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d022      	beq.n	8000df2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_InitTick+0x6c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_InitTick+0x68>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fdde 	bl	8002982 <HAL_SYSTICK_Config>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10f      	bne.n	8000dec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b0f      	cmp	r3, #15
 8000dd0:	d809      	bhi.n	8000de6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dda:	f001 fdaa 	bl	8002932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x70>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e007      	b.n	8000df6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e004      	b.n	8000df6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e001      	b.n	8000df6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	200001f0 	.word	0x200001f0
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200001f0 	.word	0x200001f0

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e60:	d004      	beq.n	8000e6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_Delay+0x40>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4413      	add	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6c:	bf00      	nop
 8000e6e:	f7ff ffdf 	bl	8000e30 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d8f7      	bhi.n	8000e6e <HAL_Delay+0x26>
  {
  }
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000008 	.word	0x20000008

08000e8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	609a      	str	r2, [r3, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3360      	adds	r3, #96	; 0x60
 8000f06:	461a      	mov	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LL_ADC_SetOffset+0x44>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	03fff000 	.word	0x03fff000

08000f3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3360      	adds	r3, #96	; 0x60
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3360      	adds	r3, #96	; 0x60
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b087      	sub	sp, #28
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3360      	adds	r3, #96	; 0x60
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	615a      	str	r2, [r3, #20]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001056:	b480      	push	{r7}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3330      	adds	r3, #48	; 0x30
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	4413      	add	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	211f      	movs	r1, #31
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	401a      	ands	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0e9b      	lsrs	r3, r3, #26
 800108e:	f003 011f 	and.w	r1, r3, #31
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f003 031f 	and.w	r3, r3, #31
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3314      	adds	r3, #20
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0e5b      	lsrs	r3, r3, #25
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	0d1b      	lsrs	r3, r3, #20
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	2107      	movs	r1, #7
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	0d1b      	lsrs	r3, r3, #20
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0318 	and.w	r3, r3, #24
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001128:	40d9      	lsrs	r1, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	400b      	ands	r3, r1
 800112e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001132:	431a      	orrs	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	0007ffff 	.word	0x0007ffff

0800114c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 031f 	and.w	r3, r3, #31
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6093      	str	r3, [r2, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800119c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011a0:	d101      	bne.n	80011a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011f0:	d101      	bne.n	80011f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800123c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001240:	f043 0202 	orr.w	r2, r3, #2
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <LL_ADC_IsEnabled+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_ADC_IsEnabled+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d101      	bne.n	8001292 <LL_ADC_IsDisableOngoing+0x18>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_IsDisableOngoing+0x1a>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b4:	f043 0204 	orr.w	r2, r3, #4
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d101      	bne.n	80012e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d101      	bne.n	8001306 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1a9      	b.n	8001682 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fb27 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff19 	bl	800118c <LL_ADC_IsDeepPowerDownEnabled>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff feff 	bl	8001168 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff34 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d115      	bne.n	80013a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff18 	bl	80011b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001384:	4b9c      	ldr	r3, [pc, #624]	; (80015f8 <HAL_ADC_Init+0x2e4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	4a9c      	ldr	r2, [pc, #624]	; (80015fc <HAL_ADC_Init+0x2e8>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	3301      	adds	r3, #1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001398:	e002      	b.n	80013a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b01      	subs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f9      	bne.n	800139a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff16 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	f043 0210 	orr.w	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff76 	bl	80012c8 <LL_ADC_REG_IsConversionOngoing>
 80013dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8142 	bne.w	8001670 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 813e 	bne.w	8001670 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013fc:	f043 0202 	orr.w	r2, r3, #2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff23 	bl	8001254 <LL_ADC_IsEnabled>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d141      	bne.n	8001498 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d004      	beq.n	8001428 <HAL_ADC_Init+0x114>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a77      	ldr	r2, [pc, #476]	; (8001600 <HAL_ADC_Init+0x2ec>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10f      	bne.n	8001448 <HAL_ADC_Init+0x134>
 8001428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800142c:	f7ff ff12 	bl	8001254 <LL_ADC_IsEnabled>
 8001430:	4604      	mov	r4, r0
 8001432:	4873      	ldr	r0, [pc, #460]	; (8001600 <HAL_ADC_Init+0x2ec>)
 8001434:	f7ff ff0e 	bl	8001254 <LL_ADC_IsEnabled>
 8001438:	4603      	mov	r3, r0
 800143a:	4323      	orrs	r3, r4
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e012      	b.n	800146e <HAL_ADC_Init+0x15a>
 8001448:	486e      	ldr	r0, [pc, #440]	; (8001604 <HAL_ADC_Init+0x2f0>)
 800144a:	f7ff ff03 	bl	8001254 <LL_ADC_IsEnabled>
 800144e:	4604      	mov	r4, r0
 8001450:	486d      	ldr	r0, [pc, #436]	; (8001608 <HAL_ADC_Init+0x2f4>)
 8001452:	f7ff feff 	bl	8001254 <LL_ADC_IsEnabled>
 8001456:	4603      	mov	r3, r0
 8001458:	431c      	orrs	r4, r3
 800145a:	486c      	ldr	r0, [pc, #432]	; (800160c <HAL_ADC_Init+0x2f8>)
 800145c:	f7ff fefa 	bl	8001254 <LL_ADC_IsEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	4323      	orrs	r3, r4
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d012      	beq.n	8001498 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147a:	d004      	beq.n	8001486 <HAL_ADC_Init+0x172>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <HAL_ADC_Init+0x2ec>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x176>
 8001486:	4a62      	ldr	r2, [pc, #392]	; (8001610 <HAL_ADC_Init+0x2fc>)
 8001488:	e000      	b.n	800148c <HAL_ADC_Init+0x178>
 800148a:	4a62      	ldr	r2, [pc, #392]	; (8001614 <HAL_ADC_Init+0x300>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fcfa 	bl	8000e8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7f5b      	ldrb	r3, [r3, #29]
 800149c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	3b01      	subs	r3, #1
 80014cc:	045b      	lsls	r3, r3, #17
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	4b48      	ldr	r3, [pc, #288]	; (8001618 <HAL_ADC_Init+0x304>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	430b      	orrs	r3, r1
 8001502:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fee5 	bl	80012ee <LL_ADC_INJ_IsConversionOngoing>
 8001524:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d17f      	bne.n	800162c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d17c      	bne.n	800162c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001536:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800153e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	430b      	orrs	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d017      	beq.n	8001594 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001572:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800157c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6911      	ldr	r1, [r2, #16]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001592:	e013      	b.n	80015bc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d12a      	bne.n	800161c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015e8:	430a      	orrs	r2, r1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	e019      	b.n	800162c <HAL_ADC_Init+0x318>
 80015f8:	20000000 	.word	0x20000000
 80015fc:	053e2d63 	.word	0x053e2d63
 8001600:	50000100 	.word	0x50000100
 8001604:	50000400 	.word	0x50000400
 8001608:	50000500 	.word	0x50000500
 800160c:	50000600 	.word	0x50000600
 8001610:	50000300 	.word	0x50000300
 8001614:	50000700 	.word	0x50000700
 8001618:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10c      	bne.n	800164e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f023 010f 	bic.w	r1, r3, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
 800164c:	e007      	b.n	800165e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 020f 	bic.w	r2, r2, #15
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
 800166e:	e007      	b.n	8001680 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	f043 0210 	orr.w	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001680:	7ffb      	ldrb	r3, [r7, #31]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop

0800168c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a0:	d004      	beq.n	80016ac <HAL_ADC_Start_DMA+0x20>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_ADC_Start_DMA+0x184>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_Start_DMA+0x24>
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_ADC_Start_DMA+0x188>)
 80016ae:	e000      	b.n	80016b2 <HAL_ADC_Start_DMA+0x26>
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_ADC_Start_DMA+0x18c>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fd4a 	bl	800114c <LL_ADC_GetMultimode>
 80016b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe02 	bl	80012c8 <LL_ADC_REG_IsConversionOngoing>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 809b 	bne.w	8001802 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Start_DMA+0x4e>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e096      	b.n	8001808 <HAL_ADC_Start_DMA+0x17c>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_ADC_Start_DMA+0x190>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d008      	beq.n	80016fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	d17a      	bne.n	80017f4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fcf6 	bl	80020f0 <ADC_Enable>
 8001704:	4603      	mov	r3, r0
 8001706:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d16d      	bne.n	80017ea <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_ADC_Start_DMA+0x184>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d009      	beq.n	8001740 <HAL_ADC_Start_DMA+0xb4>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_ADC_Start_DMA+0x194>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d002      	beq.n	800173c <HAL_ADC_Start_DMA+0xb0>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	e003      	b.n	8001744 <HAL_ADC_Start_DMA+0xb8>
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_ADC_Start_DMA+0x198>)
 800173e:	e001      	b.n	8001744 <HAL_ADC_Start_DMA+0xb8>
 8001740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	4293      	cmp	r3, r2
 800174a:	d002      	beq.n	8001752 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d105      	bne.n	800175e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f023 0206 	bic.w	r2, r3, #6
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	661a      	str	r2, [r3, #96]	; 0x60
 8001776:	e002      	b.n	800177e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_ADC_Start_DMA+0x19c>)
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_ADC_Start_DMA+0x1a0>)
 800178c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_ADC_Start_DMA+0x1a4>)
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	221c      	movs	r2, #28
 800179c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0210 	orr.w	r2, r2, #16
 80017b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3340      	adds	r3, #64	; 0x40
 80017d0:	4619      	mov	r1, r3
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f001 f989 	bl	8002aec <HAL_DMA_Start_IT>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fd5c 	bl	80012a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80017e8:	e00d      	b.n	8001806 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80017f2:	e008      	b.n	8001806 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001800:	e001      	b.n	8001806 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	50000100 	.word	0x50000100
 8001814:	50000300 	.word	0x50000300
 8001818:	50000700 	.word	0x50000700
 800181c:	50000600 	.word	0x50000600
 8001820:	50000500 	.word	0x50000500
 8001824:	50000400 	.word	0x50000400
 8001828:	080022db 	.word	0x080022db
 800182c:	080023b3 	.word	0x080023b3
 8001830:	080023cf 	.word	0x080023cf

08001834 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0b6      	sub	sp, #216	; 0xd8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x24>
 800188e:	2302      	movs	r3, #2
 8001890:	f000 bc13 	b.w	80020ba <HAL_ADC_ConfigChannel+0x84a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fd11 	bl	80012c8 <LL_ADC_REG_IsConversionOngoing>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 83f3 	bne.w	8002094 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f7ff fbcb 	bl	8001056 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fcff 	bl	80012c8 <LL_ADC_REG_IsConversionOngoing>
 80018ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fd0b 	bl	80012ee <LL_ADC_INJ_IsConversionOngoing>
 80018d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 81d9 	bne.w	8001c98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 81d4 	bne.w	8001c98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018f8:	d10f      	bne.n	800191a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff fbd2 	bl	80010ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb79 	bl	800100a <LL_ADC_SetSamplingTimeCommonConfig>
 8001918:	e00e      	b.n	8001938 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	461a      	mov	r2, r3
 8001928:	f7ff fbc1 	bl	80010ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb69 	bl	800100a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d022      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6919      	ldr	r1, [r3, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800196a:	f7ff fac3 	bl	8000ef4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6919      	ldr	r1, [r3, #16]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff fb0f 	bl	8000f9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x126>
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	e000      	b.n	8001998 <HAL_ADC_ConfigChannel+0x128>
 8001996:	2300      	movs	r3, #0
 8001998:	461a      	mov	r2, r3
 800199a:	f7ff fb1b 	bl	8000fd4 <LL_ADC_SetOffsetSaturation>
 800199e:	e17b      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fac8 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x15c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fabd 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	f003 021f 	and.w	r2, r3, #31
 80019ca:	e01e      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x19a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fab2 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80019fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x1b2>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	e018      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x1e4>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa81 	bl	8000f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa65 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x222>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa5a 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	e01e      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x260>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa4f 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ab0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e004      	b.n	8001ace <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x278>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	e018      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x2aa>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e004      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d106      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa1e 	bl	8000f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2102      	movs	r1, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fa02 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10a      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x2e8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2102      	movs	r1, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f9f7 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	f003 021f 	and.w	r2, r3, #31
 8001b56:	e01e      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x326>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9ec 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e004      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x33e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	e016      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x36c>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e004      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f9bd 	bl	8000f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f9a1 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x3aa>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f996 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	e017      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x3da>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2103      	movs	r1, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f98b 	bl	8000f3c <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c34:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x3f2>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	e011      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x416>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d106      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2103      	movs	r1, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f968 	bl	8000f68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fad9 	bl	8001254 <LL_ADC_IsEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 813d 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f7ff fa24 	bl	8001104 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4aa2      	ldr	r2, [pc, #648]	; (8001f4c <HAL_ADC_ConfigChannel+0x6dc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	f040 812e 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x480>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e019      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x4b4>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d00:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	e003      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	bf94      	ite	ls
 8001d1e:	2301      	movls	r3, #1
 8001d20:	2300      	movhi	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d079      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x4d4>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	069b      	lsls	r3, r3, #26
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d42:	e015      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x500>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d54:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x520>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	e017      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x550>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e003      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x576>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	e018      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x5a8>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e003      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	e07e      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x5c8>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	3301      	adds	r3, #1
 8001e30:	069b      	lsls	r3, r3, #26
 8001e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e36:	e015      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x5f4>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e003      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	069b      	lsls	r3, r3, #26
 8001e60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x614>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	e017      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x644>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	61fb      	str	r3, [r7, #28]
  return result;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e003      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x670>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b1e      	subs	r3, #30
 8001ed8:	051b      	lsls	r3, r3, #20
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ede:	e01b      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x6a8>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	613b      	str	r3, [r7, #16]
  return result;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b1e      	subs	r3, #30
 8001f12:	051b      	lsls	r3, r3, #20
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff f8c5 	bl	80010ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_ADC_ConfigChannel+0x6e0>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80be 	beq.w	80020ae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x6d6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10a      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x6ec>
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_ADC_ConfigChannel+0x6e8>)
 8001f48:	e009      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x6ee>
 8001f4a:	bf00      	nop
 8001f4c:	407f0000 	.word	0x407f0000
 8001f50:	80080000 	.word	0x80080000
 8001f54:	50000100 	.word	0x50000100
 8001f58:	50000300 	.word	0x50000300
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_ADC_ConfigChannel+0x854>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ffba 	bl	8000ed8 <LL_ADC_GetCommonPathInternalCh>
 8001f64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a56      	ldr	r2, [pc, #344]	; (80020c8 <HAL_ADC_ConfigChannel+0x858>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x70c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a55      	ldr	r2, [pc, #340]	; (80020cc <HAL_ADC_ConfigChannel+0x85c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d13a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d134      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f90:	d005      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x72e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_ADC_ConfigChannel+0x860>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f040 8085 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa6:	d004      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x742>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_ADC_ConfigChannel+0x864>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x746>
 8001fb2:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <HAL_ADC_ConfigChannel+0x868>)
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x748>
 8001fb6:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_ADC_ConfigChannel+0x854>)
 8001fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7fe ff75 	bl	8000eb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_ADC_ConfigChannel+0x86c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <HAL_ADC_ConfigChannel+0x870>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fe2:	e002      	b.n	8001fea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff0:	e05a      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_ADC_ConfigChannel+0x874>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d125      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11f      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_ADC_ConfigChannel+0x864>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d104      	bne.n	800201c <HAL_ADC_ConfigChannel+0x7ac>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a34      	ldr	r2, [pc, #208]	; (80020e8 <HAL_ADC_ConfigChannel+0x878>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d047      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002024:	d004      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x7c0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_ADC_ConfigChannel+0x864>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x7c4>
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_ADC_ConfigChannel+0x868>)
 8002032:	e000      	b.n	8002036 <HAL_ADC_ConfigChannel+0x7c6>
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_ADC_ConfigChannel+0x854>)
 8002036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7fe ff36 	bl	8000eb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002046:	e031      	b.n	80020ac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <HAL_ADC_ConfigChannel+0x87c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12d      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d127      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_ADC_ConfigChannel+0x864>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002070:	d004      	beq.n	800207c <HAL_ADC_ConfigChannel+0x80c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_ADC_ConfigChannel+0x864>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x810>
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_ADC_ConfigChannel+0x868>)
 800207e:	e000      	b.n	8002082 <HAL_ADC_ConfigChannel+0x812>
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_ADC_ConfigChannel+0x854>)
 8002082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe ff10 	bl	8000eb2 <LL_ADC_SetCommonPathInternalCh>
 8002092:	e00c      	b.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020a6:	e002      	b.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a8:	bf00      	nop
 80020aa:	e000      	b.n	80020ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80020b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	37d8      	adds	r7, #216	; 0xd8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	50000700 	.word	0x50000700
 80020c8:	c3210000 	.word	0xc3210000
 80020cc:	90c00010 	.word	0x90c00010
 80020d0:	50000600 	.word	0x50000600
 80020d4:	50000100 	.word	0x50000100
 80020d8:	50000300 	.word	0x50000300
 80020dc:	20000000 	.word	0x20000000
 80020e0:	053e2d63 	.word	0x053e2d63
 80020e4:	c7520000 	.word	0xc7520000
 80020e8:	50000500 	.word	0x50000500
 80020ec:	cb840000 	.word	0xcb840000

080020f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f8a7 	bl	8001254 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d176      	bne.n	80021fa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <ADC_Enable+0x114>)
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	f043 0210 	orr.w	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e062      	b.n	80021fc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f862 	bl	8001204 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002148:	d004      	beq.n	8002154 <ADC_Enable+0x64>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <ADC_Enable+0x118>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <ADC_Enable+0x68>
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <ADC_Enable+0x11c>)
 8002156:	e000      	b.n	800215a <ADC_Enable+0x6a>
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <ADC_Enable+0x120>)
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe febc 	bl	8000ed8 <LL_ADC_GetCommonPathInternalCh>
 8002160:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002166:	2b00      	cmp	r3, #0
 8002168:	d013      	beq.n	8002192 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <ADC_Enable+0x124>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	099b      	lsrs	r3, r3, #6
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <ADC_Enable+0x128>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002184:	e002      	b.n	800218c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002192:	f7fe fe4d 	bl	8000e30 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002198:	e028      	b.n	80021ec <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f858 	bl	8001254 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f828 	bl	8001204 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021b4:	f7fe fe3c 	bl	8000e30 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d914      	bls.n	80021ec <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d00d      	beq.n	80021ec <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e007      	b.n	80021fc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d1cf      	bne.n	800219a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	8000003f 	.word	0x8000003f
 8002208:	50000100 	.word	0x50000100
 800220c:	50000300 	.word	0x50000300
 8002210:	50000700 	.word	0x50000700
 8002214:	20000000 	.word	0x20000000
 8002218:	053e2d63 	.word	0x053e2d63

0800221c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f826 	bl	800127a <LL_ADC_IsDisableOngoing>
 800222e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f80d 	bl	8001254 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d047      	beq.n	80022d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d144      	bne.n	80022d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030d 	and.w	r3, r3, #13
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ffe7 	bl	800122c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2203      	movs	r2, #3
 8002264:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002266:	f7fe fde3 	bl	8000e30 <HAL_GetTick>
 800226a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800226c:	e029      	b.n	80022c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e023      	b.n	80022d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800228a:	f7fe fdd1 	bl	8000e30 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d914      	bls.n	80022c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e007      	b.n	80022d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1dc      	bne.n	800228a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d14b      	bne.n	800238c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d021      	beq.n	8002352 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fe8c 	bl	8001030 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d032      	beq.n	8002384 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d12b      	bne.n	8002384 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11f      	bne.n	8002384 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002350:	e018      	b.n	8002384 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff fa55 	bl	8001834 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800238a:	e00e      	b.n	80023aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff fa5f 	bl	800185c <HAL_ADC_ErrorCallback>
}
 800239e:	e004      	b.n	80023aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fa41 	bl	8001848 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff fa31 	bl	800185c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <LL_ADC_IsEnabled>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <LL_ADC_IsEnabled+0x18>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsEnabled+0x1a>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_StartCalibration>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800243a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002444:	4313      	orrs	r3, r2
 8002446:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_IsCalibrationOnGoing>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800246a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800246e:	d101      	bne.n	8002474 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_IsConversionOngoing>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d101      	bne.n	800249a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADCEx_Calibration_Start+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e04d      	b.n	8002560 <HAL_ADCEx_Calibration_Start+0xb8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff fea5 	bl	800221c <ADC_Disable>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d136      	bne.n	800254a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e4:	f023 0302 	bic.w	r3, r3, #2
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6839      	ldr	r1, [r7, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff96 	bl	8002428 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024fc:	e014      	b.n	8002528 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d90d      	bls.n	8002528 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f023 0312 	bic.w	r3, r3, #18
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e01b      	b.n	8002560 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff94 	bl	800245a <LL_ADC_IsCalibrationOnGoing>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e2      	bne.n	80024fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c
 8002548:	e005      	b.n	8002556 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0004de01 	.word	0x0004de01

0800256c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b0a1      	sub	sp, #132	; 0x84
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002586:	2302      	movs	r3, #2
 8002588:	e0e7      	b.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002592:	2300      	movs	r3, #0
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002596:	2300      	movs	r3, #0
 8002598:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a2:	d102      	bne.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	e009      	b.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d102      	bne.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80025b4:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	e001      	b.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0be      	b.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff4f 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 80025e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff49 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80a0 	bne.w	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 809c 	bne.w	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002608:	d004      	beq.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a55      	ldr	r2, [pc, #340]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002616:	e000      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002618:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800261a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d04b      	beq.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002636:	035b      	lsls	r3, r3, #13
 8002638:	430b      	orrs	r3, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002648:	d004      	beq.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a45      	ldr	r2, [pc, #276]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10f      	bne.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002658:	f7ff fed3 	bl	8002402 <LL_ADC_IsEnabled>
 800265c:	4604      	mov	r4, r0
 800265e:	4841      	ldr	r0, [pc, #260]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002660:	f7ff fecf 	bl	8002402 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	4323      	orrs	r3, r4
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e012      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002674:	483c      	ldr	r0, [pc, #240]	; (8002768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002676:	f7ff fec4 	bl	8002402 <LL_ADC_IsEnabled>
 800267a:	4604      	mov	r4, r0
 800267c:	483b      	ldr	r0, [pc, #236]	; (800276c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800267e:	f7ff fec0 	bl	8002402 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	431c      	orrs	r4, r3
 8002686:	483c      	ldr	r0, [pc, #240]	; (8002778 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002688:	f7ff febb 	bl	8002402 <LL_ADC_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	4323      	orrs	r3, r4
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d056      	beq.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026a6:	f023 030f 	bic.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	6811      	ldr	r1, [r2, #0]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026ba:	e047      	b.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d0:	d004      	beq.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a23      	ldr	r2, [pc, #140]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10f      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80026dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026e0:	f7ff fe8f 	bl	8002402 <LL_ADC_IsEnabled>
 80026e4:	4604      	mov	r4, r0
 80026e6:	481f      	ldr	r0, [pc, #124]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026e8:	f7ff fe8b 	bl	8002402 <LL_ADC_IsEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4323      	orrs	r3, r4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e012      	b.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026fc:	481a      	ldr	r0, [pc, #104]	; (8002768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026fe:	f7ff fe80 	bl	8002402 <LL_ADC_IsEnabled>
 8002702:	4604      	mov	r4, r0
 8002704:	4819      	ldr	r0, [pc, #100]	; (800276c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002706:	f7ff fe7c 	bl	8002402 <LL_ADC_IsEnabled>
 800270a:	4603      	mov	r3, r0
 800270c:	431c      	orrs	r4, r3
 800270e:	481a      	ldr	r0, [pc, #104]	; (8002778 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002710:	f7ff fe77 	bl	8002402 <LL_ADC_IsEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	4323      	orrs	r3, r4
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d012      	beq.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800272e:	f023 030f 	bic.w	r3, r3, #15
 8002732:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002734:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002736:	e009      	b.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800274a:	e000      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800274c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800275a:	4618      	mov	r0, r3
 800275c:	3784      	adds	r7, #132	; 0x84
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	bf00      	nop
 8002764:	50000100 	.word	0x50000100
 8002768:	50000400 	.word	0x50000400
 800276c:	50000500 	.word	0x50000500
 8002770:	50000300 	.word	0x50000300
 8002774:	50000700 	.word	0x50000700
 8002778:	50000600 	.word	0x50000600

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff40 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff90 	bl	8002870 <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5f 	bl	800281c <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff33 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa4 	bl	80028d8 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e08d      	b.n	8002aca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_DMA_Init+0x138>)
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d80f      	bhi.n	80029da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_DMA_Init+0x13c>)
 80029c2:	4413      	add	r3, r2
 80029c4:	4a45      	ldr	r2, [pc, #276]	; (8002adc <HAL_DMA_Init+0x140>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	009a      	lsls	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a42      	ldr	r2, [pc, #264]	; (8002ae0 <HAL_DMA_Init+0x144>)
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
 80029d8:	e00e      	b.n	80029f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <HAL_DMA_Init+0x148>)
 80029e2:	4413      	add	r3, r2
 80029e4:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <HAL_DMA_Init+0x140>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <HAL_DMA_Init+0x14c>)
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9b6 	bl	8002dbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a58:	d102      	bne.n	8002a60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d010      	beq.n	8002aa0 <HAL_DMA_Init+0x104>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d80c      	bhi.n	8002aa0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9d6 	bl	8002e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e008      	b.n	8002ab2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40020407 	.word	0x40020407
 8002ad8:	bffdfff8 	.word	0xbffdfff8
 8002adc:	cccccccd 	.word	0xcccccccd
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	bffdfbf8 	.word	0xbffdfbf8
 8002ae8:	40020400 	.word	0x40020400

08002aec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Start_IT+0x20>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e066      	b.n	8002bda <HAL_DMA_Start_IT+0xee>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d155      	bne.n	8002bcc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f8fb 	bl	8002d40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 020e 	orr.w	r2, r2, #14
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e00f      	b.n	8002b84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 020a 	orr.w	r2, r2, #10
 8002b82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e005      	b.n	8002bd8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d026      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x7a>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d021      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0204 	bic.w	r2, r2, #4
 8002c34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2104      	movs	r1, #4
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d071      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c5a:	e06c      	b.n	8002d36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2202      	movs	r2, #2
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02e      	beq.n	8002cce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 020a 	bic.w	r2, r2, #10
 8002c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2102      	movs	r1, #2
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d038      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ccc:	e033      	b.n	8002d36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d025      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020e 	bic.w	r2, r2, #14
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
}
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d108      	bne.n	8002da0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d9e:	e007      	b.n	8002db0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	60da      	str	r2, [r3, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d802      	bhi.n	8002dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e001      	b.n	8002dda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dd8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3b08      	subs	r3, #8
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2201      	movs	r2, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40020407 	.word	0x40020407
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020820 	.word	0x40020820
 8002e30:	cccccccd 	.word	0xcccccccd
 8002e34:	40020880 	.word	0x40020880

08002e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	1000823f 	.word	0x1000823f
 8002e7c:	40020940 	.word	0x40020940

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e8e:	e15a      	b.n	8003146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 814c 	beq.w	8003140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d017      	beq.n	8002f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d123      	bne.n	8002fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a6 	beq.w	8003140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_GPIO_Init+0x2e4>)
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff8:	4a5a      	ldr	r2, [pc, #360]	; (8003164 <HAL_GPIO_Init+0x2e4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8003000:	4b58      	ldr	r3, [pc, #352]	; (8003164 <HAL_GPIO_Init+0x2e4>)
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300c:	4a56      	ldr	r2, [pc, #344]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003036:	d01f      	beq.n	8003078 <HAL_GPIO_Init+0x1f8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_GPIO_Init+0x2ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d019      	beq.n	8003074 <HAL_GPIO_Init+0x1f4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_Init+0x1f0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_GPIO_Init+0x2f4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1ec>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a49      	ldr	r2, [pc, #292]	; (8003178 <HAL_GPIO_Init+0x2f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1e8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a48      	ldr	r2, [pc, #288]	; (800317c <HAL_GPIO_Init+0x2fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1e4>
 8003060:	2305      	movs	r3, #5
 8003062:	e00a      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003064:	2306      	movs	r3, #6
 8003066:	e008      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003068:	2304      	movs	r3, #4
 800306a:	e006      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 800306c:	2303      	movs	r3, #3
 800306e:	e004      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003070:	2302      	movs	r3, #2
 8003072:	e002      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003078:	2300      	movs	r3, #0
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	f002 0203 	and.w	r2, r2, #3
 8003080:	0092      	lsls	r2, r2, #2
 8003082:	4093      	lsls	r3, r2
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800308a:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_GPIO_Init+0x300>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030bc:	4a30      	ldr	r2, [pc, #192]	; (8003180 <HAL_GPIO_Init+0x300>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_GPIO_Init+0x300>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_GPIO_Init+0x300>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_GPIO_Init+0x300>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_GPIO_Init+0x300>)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_GPIO_Init+0x300>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_GPIO_Init+0x300>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f ae9d 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	48000400 	.word	0x48000400
 8003170:	48000800 	.word	0x48000800
 8003174:	48000c00 	.word	0x48000c00
 8003178:	48001000 	.word	0x48001000
 800317c:	48001400 	.word	0x48001400
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d141      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003192:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d131      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a6:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b8:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9b      	lsrs	r3, r3, #18
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d6:	e002      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d102      	bne.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f2      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f2:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d158      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e057      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320a:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003214:	e04d      	b.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321c:	d141      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d131      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2232      	movs	r2, #50	; 0x32
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	0c9b      	lsrs	r3, r3, #18
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003262:	e002      	b.n	800326a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3b01      	subs	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d102      	bne.n	800327e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d112      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e011      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032a0:	e007      	b.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032aa:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40007000 	.word	0x40007000
 80032c4:	20000000 	.word	0x20000000
 80032c8:	431bde83 	.word	0x431bde83

080032cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e2fe      	b.n	80038dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d075      	beq.n	80033d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ea:	4b97      	ldr	r3, [pc, #604]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d102      	bne.n	800330a <HAL_RCC_OscConfig+0x3e>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d002      	beq.n	8003310 <HAL_RCC_OscConfig+0x44>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05b      	beq.n	80033d4 <HAL_RCC_OscConfig+0x108>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d157      	bne.n	80033d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e2d9      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x74>
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a84      	ldr	r2, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x98>
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7b      	ldr	r2, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003364:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a77      	ldr	r2, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b75      	ldr	r3, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fd54 	bl	8000e30 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fd fd50 	bl	8000e30 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e29e      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xc0>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd fd40 	bl	8000e30 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fd3c 	bl	8000e30 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e28a      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c6:	4b60      	ldr	r3, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0xe8>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_OscConfig+0x136>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d002      	beq.n	8003408 <HAL_RCC_OscConfig+0x13c>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11f      	bne.n	8003448 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x154>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e25d      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	4946      	ldr	r1, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003434:	4b45      	ldr	r3, [pc, #276]	; (800354c <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fcad 	bl	8000d98 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d043      	beq.n	80034cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e249      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d023      	beq.n	8003498 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3c      	ldr	r2, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fce8 	bl	8000e30 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fd fce4 	bl	8000e30 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e232      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	492d      	ldr	r1, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
 8003496:	e01a      	b.n	80034ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fcc4 	bl	8000e30 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd fcc0 	bl	8000e30 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e20e      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e0>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d041      	beq.n	800355e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01c      	beq.n	800351c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fc9d 	bl	8000e30 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fd fc99 	bl	8000e30 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1e7      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ef      	beq.n	80034fa <HAL_RCC_OscConfig+0x22e>
 800351a:	e020      	b.n	800355e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fc80 	bl	8000e30 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003532:	e00d      	b.n	8003550 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd fc7c 	bl	8000e30 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d906      	bls.n	8003550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1ca      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ea      	bne.n	8003534 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80a6 	beq.w	80036b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003570:	4b84      	ldr	r3, [pc, #528]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x2b4>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x2b6>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	4a7e      	ldr	r2, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6593      	str	r3, [r2, #88]	; 0x58
 8003592:	4b7c      	ldr	r3, [pc, #496]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	4b79      	ldr	r3, [pc, #484]	; (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fc39 	bl	8000e30 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fc35 	bl	8000e30 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e183      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <HAL_RCC_OscConfig+0x32e>
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f8:	e024      	b.n	8003644 <HAL_RCC_OscConfig+0x378>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d110      	bne.n	8003624 <HAL_RCC_OscConfig+0x358>
 8003602:	4b60      	ldr	r3, [pc, #384]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	4a5e      	ldr	r2, [pc, #376]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	4a5a      	ldr	r2, [pc, #360]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003622:	e00f      	b.n	8003644 <HAL_RCC_OscConfig+0x378>
 8003624:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fbf0 	bl	8000e30 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fbec 	bl	8000e30 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e138      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ed      	beq.n	8003654 <HAL_RCC_OscConfig+0x388>
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fbd9 	bl	8000e30 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fbd5 	bl	8000e30 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e121      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003698:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ed      	bne.n	8003682 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d03c      	beq.n	800373e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01c      	beq.n	8003706 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036cc:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fd fba8 	bl	8000e30 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e4:	f7fd fba4 	bl	8000e30 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0f2      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f6:	4b23      	ldr	r3, [pc, #140]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCC_OscConfig+0x418>
 8003704:	e01b      	b.n	800373e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd fb8b 	bl	8000e30 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800371e:	f7fd fb87 	bl	8000e30 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0d5      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ef      	bne.n	800371e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80c9 	beq.w	80038da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b0c      	cmp	r3, #12
 8003752:	f000 8083 	beq.w	800385c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d15e      	bne.n	800381c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fd fb61 	bl	8000e30 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003770:	e00c      	b.n	800378c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7fd fb5d 	bl	8000e30 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d905      	bls.n	800378c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ab      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378c:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ec      	bne.n	8003772 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_RCC_OscConfig+0x61c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6a11      	ldr	r1, [r2, #32]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	4311      	orrs	r1, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037b2:	0212      	lsls	r2, r2, #8
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0552      	lsls	r2, r2, #21
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037c6:	0852      	lsrs	r2, r2, #1
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0652      	lsls	r2, r2, #25
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037d2:	06d2      	lsls	r2, r2, #27
 80037d4:	430a      	orrs	r2, r1
 80037d6:	4943      	ldr	r1, [pc, #268]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a40      	ldr	r2, [pc, #256]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e8:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a3d      	ldr	r2, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fb1c 	bl	8000e30 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fb18 	bl	8000e30 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e066      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x530>
 800381a:	e05e      	b.n	80038da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fb02 	bl	8000e30 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd fafe 	bl	8000e30 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04c      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003842:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4924      	ldr	r1, [pc, #144]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003856:	4013      	ands	r3, r2
 8003858:	60cb      	str	r3, [r1, #12]
 800385a:	e03e      	b.n	80038da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e039      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_RCC_OscConfig+0x618>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	429a      	cmp	r2, r3
 800387a:	d12c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d123      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11b      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d113      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	019f800c 	.word	0x019f800c
 80038ec:	feeefffc 	.word	0xfeeefffc

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e11e      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b91      	ldr	r3, [pc, #580]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b8e      	ldr	r3, [pc, #568]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 020f 	bic.w	r2, r3, #15
 800391e:	498c      	ldr	r1, [pc, #560]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b8a      	ldr	r3, [pc, #552]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e106      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d073      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d129      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394c:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0f4      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800395c:	f000 f99e 	bl	8003c9c <RCC_GetSysClockFreqFromPLLSource>
 8003960:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4a7c      	ldr	r2, [pc, #496]	; (8003b58 <HAL_RCC_ClockConfig+0x268>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d93f      	bls.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800396a:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	d033      	beq.n	80039ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12f      	bne.n	80039ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398a:	4b72      	ldr	r3, [pc, #456]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003992:	4a70      	ldr	r2, [pc, #448]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e024      	b.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a8:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0c6      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0be      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039c8:	f000 f8ce 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4a61      	ldr	r2, [pc, #388]	; (8003b58 <HAL_RCC_ClockConfig+0x268>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d909      	bls.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039d6:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039de:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4957      	ldr	r1, [pc, #348]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fd fa18 	bl	8000e30 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd fa14 	bl	8000e30 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e095      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d023      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a64:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4936      	ldr	r1, [pc, #216]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a86:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d21d      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 020f 	bic.w	r2, r3, #15
 8003aa8:	4929      	ldr	r1, [pc, #164]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd f9be 	bl	8000e30 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd f9ba 	bl	8000e30 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e03b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1ed      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4917      	ldr	r1, [pc, #92]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490f      	ldr	r1, [pc, #60]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b1a:	f000 f825 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490c      	ldr	r1, [pc, #48]	; (8003b5c <HAL_RCC_ClockConfig+0x26c>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_RCC_ClockConfig+0x270>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd f92a 	bl	8000d98 <HAL_InitTick>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	04c4b400 	.word	0x04c4b400
 8003b5c:	08005f14 	.word	0x08005f14
 8003b60:	20000000 	.word	0x20000000
 8003b64:	20000004 	.word	0x20000004

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e047      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e03e      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d136      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc6:	68d2      	ldr	r2, [r2, #12]
 8003bc8:	0a12      	lsrs	r2, r2, #8
 8003bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
      break;
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	4a10      	ldr	r2, [pc, #64]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	0a12      	lsrs	r2, r2, #8
 8003be4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0e5b      	lsrs	r3, r3, #25
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e001      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c10:	693b      	ldr	r3, [r7, #16]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4904      	ldr	r1, [pc, #16]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08005f24 	.word	0x08005f24

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c74:	f7ff ffda 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4904      	ldr	r1, [pc, #16]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	08005f24 	.word	0x08005f24

08003c9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d10c      	bne.n	8003cda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cca:	68d2      	ldr	r2, [r2, #12]
 8003ccc:	0a12      	lsrs	r2, r2, #8
 8003cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
    break;
 8003cd8:	e00c      	b.n	8003cf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0a12      	lsrs	r2, r2, #8
 8003ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    break;
 8003cf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	0e5b      	lsrs	r3, r3, #25
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d0e:	687b      	ldr	r3, [r7, #4]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	007a1200 	.word	0x007a1200
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8098 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
 8003d62:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a39      	ldr	r2, [pc, #228]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7e:	f7fd f857 	bl	8000e30 <HAL_GetTick>
 8003d82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d84:	e009      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fd f853 	bl	8000e30 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d902      	bls.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	74fb      	strb	r3, [r7, #19]
        break;
 8003d98:	e005      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9a:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ef      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d159      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01e      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd f813 	bl	8000e30 <HAL_GetTick>
 8003e0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0c:	e00b      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fd f80f 	bl	8000e30 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d902      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	74fb      	strb	r3, [r7, #19]
            break;
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ec      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e50:	e008      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e64:	7c7b      	ldrb	r3, [r7, #17]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4ba7      	ldr	r3, [pc, #668]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	4aa6      	ldr	r2, [pc, #664]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e82:	4ba1      	ldr	r3, [pc, #644]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f023 0203 	bic.w	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	499d      	ldr	r1, [pc, #628]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea4:	4b98      	ldr	r3, [pc, #608]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 020c 	bic.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4995      	ldr	r1, [pc, #596]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec6:	4b90      	ldr	r3, [pc, #576]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	498c      	ldr	r1, [pc, #560]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee8:	4b87      	ldr	r3, [pc, #540]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	4984      	ldr	r1, [pc, #528]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	497b      	ldr	r1, [pc, #492]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f2c:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	4973      	ldr	r1, [pc, #460]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4e:	4b6e      	ldr	r3, [pc, #440]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	496a      	ldr	r1, [pc, #424]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f70:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4962      	ldr	r1, [pc, #392]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	4959      	ldr	r1, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb4:	4b54      	ldr	r3, [pc, #336]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	4951      	ldr	r1, [pc, #324]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4948      	ldr	r1, [pc, #288]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4940      	ldr	r1, [pc, #256]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b35      	ldr	r3, [pc, #212]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	4932      	ldr	r1, [pc, #200]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	4924      	ldr	r1, [pc, #144]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	4916      	ldr	r1, [pc, #88]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d019      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4908      	ldr	r1, [pc, #32]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4926      	ldr	r1, [pc, #152]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415e:	4918      	ldr	r1, [pc, #96]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800418a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800418e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	490a      	ldr	r1, [pc, #40]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a6:	d105      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc fc6d 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2224      	movs	r2, #36	; 0x24
 80041f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fbb2 	bl	8004978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8b3 	bl	8004380 <UART_SetConfig>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e01b      	b.n	800425c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fc31 	bl	8004abc <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	2b20      	cmp	r3, #32
 800427c:	d17b      	bne.n	8004376 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Transmit+0x26>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e074      	b.n	8004378 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2221      	movs	r2, #33	; 0x21
 800429a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429e:	f7fc fdc7 	bl	8000e30 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d108      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e003      	b.n	80042d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d8:	e030      	b.n	800433c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fc93 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e03d      	b.n	8004378 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	3302      	adds	r3, #2
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e007      	b.n	800432a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	3301      	adds	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1c8      	bne.n	80042da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fc5c 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e006      	b.n	8004378 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b08c      	sub	sp, #48	; 0x30
 8004386:	af00      	add	r7, sp, #0
 8004388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	431a      	orrs	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	431a      	orrs	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4baa      	ldr	r3, [pc, #680]	; (8004658 <UART_SetConfig+0x2d8>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a9f      	ldr	r2, [pc, #636]	; (800465c <UART_SetConfig+0x2dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004400:	430b      	orrs	r3, r1
 8004402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f023 010f 	bic.w	r1, r3, #15
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a90      	ldr	r2, [pc, #576]	; (8004660 <UART_SetConfig+0x2e0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d125      	bne.n	8004470 <UART_SetConfig+0xf0>
 8004424:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <UART_SetConfig+0x2e4>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d81a      	bhi.n	8004468 <UART_SetConfig+0xe8>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <UART_SetConfig+0xb8>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004459 	.word	0x08004459
 8004440:	08004451 	.word	0x08004451
 8004444:	08004461 	.word	0x08004461
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444e:	e116      	b.n	800467e <UART_SetConfig+0x2fe>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	e112      	b.n	800467e <UART_SetConfig+0x2fe>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445e:	e10e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004466:	e10a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446e:	e106      	b.n	800467e <UART_SetConfig+0x2fe>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <UART_SetConfig+0x2e8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d138      	bne.n	80044ec <UART_SetConfig+0x16c>
 800447a:	4b7a      	ldr	r3, [pc, #488]	; (8004664 <UART_SetConfig+0x2e4>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d82d      	bhi.n	80044e4 <UART_SetConfig+0x164>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x110>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080044e5 	.word	0x080044e5
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044cd 	.word	0x080044cd
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ca:	e0d8      	b.n	800467e <UART_SetConfig+0x2fe>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d2:	e0d4      	b.n	800467e <UART_SetConfig+0x2fe>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044da:	e0d0      	b.n	800467e <UART_SetConfig+0x2fe>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e2:	e0cc      	b.n	800467e <UART_SetConfig+0x2fe>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ea:	e0c8      	b.n	800467e <UART_SetConfig+0x2fe>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5e      	ldr	r2, [pc, #376]	; (800466c <UART_SetConfig+0x2ec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d125      	bne.n	8004542 <UART_SetConfig+0x1c2>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <UART_SetConfig+0x2e4>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d016      	beq.n	8004532 <UART_SetConfig+0x1b2>
 8004504:	2b30      	cmp	r3, #48	; 0x30
 8004506:	d818      	bhi.n	800453a <UART_SetConfig+0x1ba>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d00a      	beq.n	8004522 <UART_SetConfig+0x1a2>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d814      	bhi.n	800453a <UART_SetConfig+0x1ba>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <UART_SetConfig+0x19a>
 8004514:	2b10      	cmp	r3, #16
 8004516:	d008      	beq.n	800452a <UART_SetConfig+0x1aa>
 8004518:	e00f      	b.n	800453a <UART_SetConfig+0x1ba>
 800451a:	2300      	movs	r3, #0
 800451c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004520:	e0ad      	b.n	800467e <UART_SetConfig+0x2fe>
 8004522:	2302      	movs	r3, #2
 8004524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004528:	e0a9      	b.n	800467e <UART_SetConfig+0x2fe>
 800452a:	2304      	movs	r3, #4
 800452c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004530:	e0a5      	b.n	800467e <UART_SetConfig+0x2fe>
 8004532:	2308      	movs	r3, #8
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004538:	e0a1      	b.n	800467e <UART_SetConfig+0x2fe>
 800453a:	2310      	movs	r3, #16
 800453c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004540:	e09d      	b.n	800467e <UART_SetConfig+0x2fe>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4a      	ldr	r2, [pc, #296]	; (8004670 <UART_SetConfig+0x2f0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d125      	bne.n	8004598 <UART_SetConfig+0x218>
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <UART_SetConfig+0x2e4>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004556:	2bc0      	cmp	r3, #192	; 0xc0
 8004558:	d016      	beq.n	8004588 <UART_SetConfig+0x208>
 800455a:	2bc0      	cmp	r3, #192	; 0xc0
 800455c:	d818      	bhi.n	8004590 <UART_SetConfig+0x210>
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d00a      	beq.n	8004578 <UART_SetConfig+0x1f8>
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d814      	bhi.n	8004590 <UART_SetConfig+0x210>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <UART_SetConfig+0x1f0>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0x200>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x210>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004576:	e082      	b.n	800467e <UART_SetConfig+0x2fe>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457e:	e07e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004586:	e07a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458e:	e076      	b.n	800467e <UART_SetConfig+0x2fe>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004596:	e072      	b.n	800467e <UART_SetConfig+0x2fe>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a35      	ldr	r2, [pc, #212]	; (8004674 <UART_SetConfig+0x2f4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d12a      	bne.n	80045f8 <UART_SetConfig+0x278>
 80045a2:	4b30      	ldr	r3, [pc, #192]	; (8004664 <UART_SetConfig+0x2e4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b0:	d01a      	beq.n	80045e8 <UART_SetConfig+0x268>
 80045b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0x270>
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	d00c      	beq.n	80045d8 <UART_SetConfig+0x258>
 80045be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c2:	d815      	bhi.n	80045f0 <UART_SetConfig+0x270>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0x250>
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045cc:	d008      	beq.n	80045e0 <UART_SetConfig+0x260>
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x270>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d6:	e052      	b.n	800467e <UART_SetConfig+0x2fe>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e04e      	b.n	800467e <UART_SetConfig+0x2fe>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	e04a      	b.n	800467e <UART_SetConfig+0x2fe>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ee:	e046      	b.n	800467e <UART_SetConfig+0x2fe>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f6:	e042      	b.n	800467e <UART_SetConfig+0x2fe>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <UART_SetConfig+0x2dc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d13a      	bne.n	8004678 <UART_SetConfig+0x2f8>
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <UART_SetConfig+0x2e4>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800460c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004610:	d01a      	beq.n	8004648 <UART_SetConfig+0x2c8>
 8004612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004616:	d81b      	bhi.n	8004650 <UART_SetConfig+0x2d0>
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461c:	d00c      	beq.n	8004638 <UART_SetConfig+0x2b8>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d815      	bhi.n	8004650 <UART_SetConfig+0x2d0>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <UART_SetConfig+0x2b0>
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462c:	d008      	beq.n	8004640 <UART_SetConfig+0x2c0>
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x2d0>
 8004630:	2300      	movs	r3, #0
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e022      	b.n	800467e <UART_SetConfig+0x2fe>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e01e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e01a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464e:	e016      	b.n	800467e <UART_SetConfig+0x2fe>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004656:	e012      	b.n	800467e <UART_SetConfig+0x2fe>
 8004658:	cfff69f3 	.word	0xcfff69f3
 800465c:	40008000 	.word	0x40008000
 8004660:	40013800 	.word	0x40013800
 8004664:	40021000 	.word	0x40021000
 8004668:	40004400 	.word	0x40004400
 800466c:	40004800 	.word	0x40004800
 8004670:	40004c00 	.word	0x40004c00
 8004674:	40005000 	.word	0x40005000
 8004678:	2310      	movs	r3, #16
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4aae      	ldr	r2, [pc, #696]	; (800493c <UART_SetConfig+0x5bc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	f040 8097 	bne.w	80047b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800468e:	2b08      	cmp	r3, #8
 8004690:	d823      	bhi.n	80046da <UART_SetConfig+0x35a>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x318>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046cb 	.word	0x080046cb
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046db 	.word	0x080046db
 80046b8:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7ff fac2 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80046c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b9e      	ldr	r3, [pc, #632]	; (8004940 <UART_SetConfig+0x5c0>)
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7ff fa4d 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8130 	beq.w	800494e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	4a94      	ldr	r2, [pc, #592]	; (8004944 <UART_SetConfig+0x5c4>)
 80046f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004700:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	429a      	cmp	r2, r3
 8004710:	d305      	bcc.n	800471e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d903      	bls.n	8004726 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004724:	e113      	b.n	800494e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	2200      	movs	r2, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	4a84      	ldr	r2, [pc, #528]	; (8004944 <UART_SetConfig+0x5c4>)
 8004734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004738:	b29b      	uxth	r3, r3
 800473a:	2200      	movs	r2, #0
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004744:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004748:	f7fb fdba 	bl	80002c0 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	020b      	lsls	r3, r1, #8
 800475e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004762:	0202      	lsls	r2, r0, #8
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	6849      	ldr	r1, [r1, #4]
 8004768:	0849      	lsrs	r1, r1, #1
 800476a:	2000      	movs	r0, #0
 800476c:	460c      	mov	r4, r1
 800476e:	4605      	mov	r5, r0
 8004770:	eb12 0804 	adds.w	r8, r2, r4
 8004774:	eb43 0905 	adc.w	r9, r3, r5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	469a      	mov	sl, r3
 8004780:	4693      	mov	fp, r2
 8004782:	4652      	mov	r2, sl
 8004784:	465b      	mov	r3, fp
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f7fb fd99 	bl	80002c0 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4613      	mov	r3, r2
 8004794:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479c:	d308      	bcc.n	80047b0 <UART_SetConfig+0x430>
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	d204      	bcs.n	80047b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e0ce      	b.n	800494e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047b6:	e0ca      	b.n	800494e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d166      	bne.n	8004890 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x49a>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x450>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7ff fa26 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7ff fa38 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b4e      	ldr	r3, [pc, #312]	; (8004940 <UART_SetConfig+0x5c0>)
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7ff f9ad 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8090 	beq.w	800494e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	4a44      	ldr	r2, [pc, #272]	; (8004944 <UART_SetConfig+0x5c4>)
 8004834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004838:	461a      	mov	r2, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004840:	005a      	lsls	r2, r3, #1
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	441a      	add	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d916      	bls.n	8004888 <UART_SetConfig+0x508>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d212      	bcs.n	8004888 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b29a      	uxth	r2, r3
 8004878:	8bfb      	ldrh	r3, [r7, #30]
 800487a:	4313      	orrs	r3, r2
 800487c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	8bfa      	ldrh	r2, [r7, #30]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e062      	b.n	800494e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800488e:	e05e      	b.n	800494e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004894:	2b08      	cmp	r3, #8
 8004896:	d828      	bhi.n	80048ea <UART_SetConfig+0x56a>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <UART_SetConfig+0x520>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048eb 	.word	0x080048eb
 80048b0:	080048db 	.word	0x080048db
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	080048eb 	.word	0x080048eb
 80048bc:	080048eb 	.word	0x080048eb
 80048c0:	080048e3 	.word	0x080048e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7ff f9be 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7ff f9d0 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <UART_SetConfig+0x5c0>)
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7ff f945 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80048de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048e8:	e005      	b.n	80048f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048f4:	bf00      	nop
    }

    if (pclk != 0U)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d028      	beq.n	800494e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	4a10      	ldr	r2, [pc, #64]	; (8004944 <UART_SetConfig+0x5c4>)
 8004902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004906:	461a      	mov	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	fbb3 f2f2 	udiv	r2, r3, r2
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	441a      	add	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d910      	bls.n	8004948 <UART_SetConfig+0x5c8>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d20c      	bcs.n	8004948 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	b29a      	uxth	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x5ce>
 800493a:	bf00      	nop
 800493c:	40008000 	.word	0x40008000
 8004940:	00f42400 	.word	0x00f42400
 8004944:	08005f2c 	.word	0x08005f2c
      }
      else
      {
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2201      	movs	r2, #1
 8004952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2201      	movs	r2, #1
 800495a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2200      	movs	r2, #0
 8004968:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800496a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01a      	beq.n	8004a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a76:	d10a      	bne.n	8004a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b098      	sub	sp, #96	; 0x60
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004acc:	f7fc f9b0 	bl	8000e30 <HAL_GetTick>
 8004ad0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d12f      	bne.n	8004b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f88e 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d022      	beq.n	8004b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e063      	b.n	8004c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d149      	bne.n	8004be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	2200      	movs	r2, #0
 8004b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f857 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d03c      	beq.n	8004be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
 8004b88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e6      	bne.n	8004b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bba:	61fa      	str	r2, [r7, #28]
 8004bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e012      	b.n	8004c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3758      	adds	r7, #88	; 0x58
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	e04f      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d04b      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fc f901 	bl	8000e30 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e04e      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d037      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b80      	cmp	r3, #128	; 0x80
 8004c56:	d034      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d031      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d110      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2208      	movs	r2, #8
 8004c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f838 	bl	8004cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e029      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9c:	d111      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f81e 	bl	8004cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00f      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0a0      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b095      	sub	sp, #84	; 0x54
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e3      	bne.n	8004d24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d118      	bne.n	8004d96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0310 	bic.w	r3, r3, #16
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004daa:	bf00      	nop
 8004dac:	3754      	adds	r7, #84	; 0x54
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_UARTEx_DisableFifoMode+0x16>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e027      	b.n	8004e1c <HAL_UARTEx_DisableFifoMode+0x66>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	; 0x24
 8004dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e02d      	b.n	8004e9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f84f 	bl	8004f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e02d      	b.n	8004f18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f811 	bl	8004f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f40:	e031      	b.n	8004fa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f42:	2308      	movs	r3, #8
 8004f44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f46:	2308      	movs	r3, #8
 8004f48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	0e5b      	lsrs	r3, r3, #25
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	0f5b      	lsrs	r3, r3, #29
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	7b3a      	ldrb	r2, [r7, #12]
 8004f6e:	4911      	ldr	r1, [pc, #68]	; (8004fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f70:	5c8a      	ldrb	r2, [r1, r2]
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f76:	7b3a      	ldrb	r2, [r7, #12]
 8004f78:	490f      	ldr	r1, [pc, #60]	; (8004fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004f7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	7b7a      	ldrb	r2, [r7, #13]
 8004f8c:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f8e:	5c8a      	ldrb	r2, [r1, r2]
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f94:	7b7a      	ldrb	r2, [r7, #13]
 8004f96:	4908      	ldr	r1, [pc, #32]	; (8004fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004f98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	08005f44 	.word	0x08005f44
 8004fb8:	08005f4c 	.word	0x08005f4c

08004fbc <std>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fca:	6083      	str	r3, [r0, #8]
 8004fcc:	8181      	strh	r1, [r0, #12]
 8004fce:	6643      	str	r3, [r0, #100]	; 0x64
 8004fd0:	81c2      	strh	r2, [r0, #14]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	; 0x5c
 8004fda:	f000 f91f 	bl	800521c <memset>
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <std+0x58>)
 8004fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <std+0x5c>)
 8004fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <std+0x60>)
 8004fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <std+0x64>)
 8004fec:	6323      	str	r3, [r4, #48]	; 0x30
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <std+0x68>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d006      	beq.n	8005004 <std+0x48>
 8004ff6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ffa:	4294      	cmp	r4, r2
 8004ffc:	d002      	beq.n	8005004 <std+0x48>
 8004ffe:	33d0      	adds	r3, #208	; 0xd0
 8005000:	429c      	cmp	r4, r3
 8005002:	d105      	bne.n	8005010 <std+0x54>
 8005004:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 b938 	b.w	8005280 <__retarget_lock_init_recursive>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005ae1 	.word	0x08005ae1
 8005018:	08005b03 	.word	0x08005b03
 800501c:	08005b3b 	.word	0x08005b3b
 8005020:	08005b5f 	.word	0x08005b5f
 8005024:	200001f4 	.word	0x200001f4

08005028 <stdio_exit_handler>:
 8005028:	4a02      	ldr	r2, [pc, #8]	; (8005034 <stdio_exit_handler+0xc>)
 800502a:	4903      	ldr	r1, [pc, #12]	; (8005038 <stdio_exit_handler+0x10>)
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <stdio_exit_handler+0x14>)
 800502e:	f000 b869 	b.w	8005104 <_fwalk_sglue>
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
 8005038:	08005a79 	.word	0x08005a79
 800503c:	20000018 	.word	0x20000018

08005040 <cleanup_stdio>:
 8005040:	6841      	ldr	r1, [r0, #4]
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <cleanup_stdio+0x34>)
 8005044:	4299      	cmp	r1, r3
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	d001      	beq.n	8005050 <cleanup_stdio+0x10>
 800504c:	f000 fd14 	bl	8005a78 <_fflush_r>
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <cleanup_stdio+0x38>)
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <cleanup_stdio+0x1e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fd0d 	bl	8005a78 <_fflush_r>
 800505e:	68e1      	ldr	r1, [r4, #12]
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <cleanup_stdio+0x3c>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d004      	beq.n	8005070 <cleanup_stdio+0x30>
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 bd04 	b.w	8005a78 <_fflush_r>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	200001f4 	.word	0x200001f4
 8005078:	2000025c 	.word	0x2000025c
 800507c:	200002c4 	.word	0x200002c4

08005080 <global_stdio_init.part.0>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <global_stdio_init.part.0+0x30>)
 8005084:	4c0b      	ldr	r4, [pc, #44]	; (80050b4 <global_stdio_init.part.0+0x34>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <global_stdio_init.part.0+0x38>)
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2104      	movs	r1, #4
 8005090:	f7ff ff94 	bl	8004fbc <std>
 8005094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005098:	2201      	movs	r2, #1
 800509a:	2109      	movs	r1, #9
 800509c:	f7ff ff8e 	bl	8004fbc <std>
 80050a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050a4:	2202      	movs	r2, #2
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff bf86 	b.w	8004fbc <std>
 80050b0:	2000032c 	.word	0x2000032c
 80050b4:	200001f4 	.word	0x200001f4
 80050b8:	08005029 	.word	0x08005029

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 b8e0 	b.w	8005282 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000331 	.word	0x20000331

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 b8db 	b.w	8005284 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20000331 	.word	0x20000331

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sfp_lock_acquire>
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sfp_lock_release>
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <__sinit+0x28>)
 80050ea:	6223      	str	r3, [r4, #32]
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__sinit+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f5      	bne.n	80050e0 <__sinit+0xc>
 80050f4:	f7ff ffc4 	bl	8005080 <global_stdio_init.part.0>
 80050f8:	e7f2      	b.n	80050e0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	08005041 	.word	0x08005041
 8005100:	2000032c 	.word	0x2000032c

08005104 <_fwalk_sglue>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4607      	mov	r7, r0
 800510a:	4688      	mov	r8, r1
 800510c:	4614      	mov	r4, r2
 800510e:	2600      	movs	r6, #0
 8005110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005114:	f1b9 0901 	subs.w	r9, r9, #1
 8005118:	d505      	bpl.n	8005126 <_fwalk_sglue+0x22>
 800511a:	6824      	ldr	r4, [r4, #0]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d1f7      	bne.n	8005110 <_fwalk_sglue+0xc>
 8005120:	4630      	mov	r0, r6
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d907      	bls.n	800513c <_fwalk_sglue+0x38>
 800512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	d003      	beq.n	800513c <_fwalk_sglue+0x38>
 8005134:	4629      	mov	r1, r5
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	4306      	orrs	r6, r0
 800513c:	3568      	adds	r5, #104	; 0x68
 800513e:	e7e9      	b.n	8005114 <_fwalk_sglue+0x10>

08005140 <iprintf>:
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b507      	push	{r0, r1, r2, lr}
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <iprintf+0x20>)
 8005146:	ab04      	add	r3, sp, #16
 8005148:	6808      	ldr	r0, [r1, #0]
 800514a:	f853 2b04 	ldr.w	r2, [r3], #4
 800514e:	6881      	ldr	r1, [r0, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	f000 f8c1 	bl	80052d8 <_vfiprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	20000064 	.word	0x20000064

08005164 <_puts_r>:
 8005164:	6a03      	ldr	r3, [r0, #32]
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	6884      	ldr	r4, [r0, #8]
 800516a:	4605      	mov	r5, r0
 800516c:	460e      	mov	r6, r1
 800516e:	b90b      	cbnz	r3, 8005174 <_puts_r+0x10>
 8005170:	f7ff ffb0 	bl	80050d4 <__sinit>
 8005174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005176:	07db      	lsls	r3, r3, #31
 8005178:	d405      	bmi.n	8005186 <_puts_r+0x22>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	0598      	lsls	r0, r3, #22
 800517e:	d402      	bmi.n	8005186 <_puts_r+0x22>
 8005180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005182:	f000 f87e 	bl	8005282 <__retarget_lock_acquire_recursive>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d513      	bpl.n	80051b4 <_puts_r+0x50>
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	b18b      	cbz	r3, 80051b4 <_puts_r+0x50>
 8005190:	3e01      	subs	r6, #1
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005198:	3b01      	subs	r3, #1
 800519a:	60a3      	str	r3, [r4, #8]
 800519c:	b9e9      	cbnz	r1, 80051da <_puts_r+0x76>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da2e      	bge.n	8005200 <_puts_r+0x9c>
 80051a2:	4622      	mov	r2, r4
 80051a4:	210a      	movs	r1, #10
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 fcdd 	bl	8005b66 <__swbuf_r>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d007      	beq.n	80051c0 <_puts_r+0x5c>
 80051b0:	250a      	movs	r5, #10
 80051b2:	e007      	b.n	80051c4 <_puts_r+0x60>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 fd12 	bl	8005be0 <__swsetup_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d0e7      	beq.n	8005190 <_puts_r+0x2c>
 80051c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c6:	07da      	lsls	r2, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_puts_r+0x72>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	059b      	lsls	r3, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_puts_r+0x72>
 80051d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d2:	f000 f857 	bl	8005284 <__retarget_lock_release_recursive>
 80051d6:	4628      	mov	r0, r5
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da04      	bge.n	80051e8 <_puts_r+0x84>
 80051de:	69a2      	ldr	r2, [r4, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dc06      	bgt.n	80051f2 <_puts_r+0x8e>
 80051e4:	290a      	cmp	r1, #10
 80051e6:	d004      	beq.n	80051f2 <_puts_r+0x8e>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	e7cf      	b.n	8005192 <_puts_r+0x2e>
 80051f2:	4622      	mov	r2, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 fcb6 	bl	8005b66 <__swbuf_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d1c9      	bne.n	8005192 <_puts_r+0x2e>
 80051fe:	e7df      	b.n	80051c0 <_puts_r+0x5c>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	250a      	movs	r5, #10
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	701d      	strb	r5, [r3, #0]
 800520a:	e7db      	b.n	80051c4 <_puts_r+0x60>

0800520c <puts>:
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <puts+0xc>)
 800520e:	4601      	mov	r1, r0
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f7ff bfa7 	b.w	8005164 <_puts_r>
 8005216:	bf00      	nop
 8005218:	20000064 	.word	0x20000064

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <__errno>:
 800522c:	4b01      	ldr	r3, [pc, #4]	; (8005234 <__errno+0x8>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000064 	.word	0x20000064

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4d0d      	ldr	r5, [pc, #52]	; (8005270 <__libc_init_array+0x38>)
 800523c:	4c0d      	ldr	r4, [pc, #52]	; (8005274 <__libc_init_array+0x3c>)
 800523e:	1b64      	subs	r4, r4, r5
 8005240:	10a4      	asrs	r4, r4, #2
 8005242:	2600      	movs	r6, #0
 8005244:	42a6      	cmp	r6, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	4d0b      	ldr	r5, [pc, #44]	; (8005278 <__libc_init_array+0x40>)
 800524a:	4c0c      	ldr	r4, [pc, #48]	; (800527c <__libc_init_array+0x44>)
 800524c:	f000 fe46 	bl	8005edc <_init>
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	2600      	movs	r6, #0
 8005256:	42a6      	cmp	r6, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005260:	4798      	blx	r3
 8005262:	3601      	adds	r6, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f855 3b04 	ldr.w	r3, [r5], #4
 800526a:	4798      	blx	r3
 800526c:	3601      	adds	r6, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	08005f90 	.word	0x08005f90
 8005274:	08005f90 	.word	0x08005f90
 8005278:	08005f90 	.word	0x08005f90
 800527c:	08005f94 	.word	0x08005f94

08005280 <__retarget_lock_init_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_acquire_recursive>:
 8005282:	4770      	bx	lr

08005284 <__retarget_lock_release_recursive>:
 8005284:	4770      	bx	lr

08005286 <__sfputc_r>:
 8005286:	6893      	ldr	r3, [r2, #8]
 8005288:	3b01      	subs	r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	b410      	push	{r4}
 800528e:	6093      	str	r3, [r2, #8]
 8005290:	da08      	bge.n	80052a4 <__sfputc_r+0x1e>
 8005292:	6994      	ldr	r4, [r2, #24]
 8005294:	42a3      	cmp	r3, r4
 8005296:	db01      	blt.n	800529c <__sfputc_r+0x16>
 8005298:	290a      	cmp	r1, #10
 800529a:	d103      	bne.n	80052a4 <__sfputc_r+0x1e>
 800529c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a0:	f000 bc61 	b.w	8005b66 <__swbuf_r>
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	1c58      	adds	r0, r3, #1
 80052a8:	6010      	str	r0, [r2, #0]
 80052aa:	7019      	strb	r1, [r3, #0]
 80052ac:	4608      	mov	r0, r1
 80052ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <__sfputs_r>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	4614      	mov	r4, r2
 80052bc:	18d5      	adds	r5, r2, r3
 80052be:	42ac      	cmp	r4, r5
 80052c0:	d101      	bne.n	80052c6 <__sfputs_r+0x12>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e007      	b.n	80052d6 <__sfputs_r+0x22>
 80052c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ca:	463a      	mov	r2, r7
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff ffda 	bl	8005286 <__sfputc_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d1f3      	bne.n	80052be <__sfputs_r+0xa>
 80052d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052d8 <_vfiprintf_r>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	460d      	mov	r5, r1
 80052de:	b09d      	sub	sp, #116	; 0x74
 80052e0:	4614      	mov	r4, r2
 80052e2:	4698      	mov	r8, r3
 80052e4:	4606      	mov	r6, r0
 80052e6:	b118      	cbz	r0, 80052f0 <_vfiprintf_r+0x18>
 80052e8:	6a03      	ldr	r3, [r0, #32]
 80052ea:	b90b      	cbnz	r3, 80052f0 <_vfiprintf_r+0x18>
 80052ec:	f7ff fef2 	bl	80050d4 <__sinit>
 80052f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d405      	bmi.n	8005302 <_vfiprintf_r+0x2a>
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	059a      	lsls	r2, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_vfiprintf_r+0x2a>
 80052fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052fe:	f7ff ffc0 	bl	8005282 <__retarget_lock_acquire_recursive>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	071b      	lsls	r3, r3, #28
 8005306:	d501      	bpl.n	800530c <_vfiprintf_r+0x34>
 8005308:	692b      	ldr	r3, [r5, #16]
 800530a:	b99b      	cbnz	r3, 8005334 <_vfiprintf_r+0x5c>
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f000 fc66 	bl	8005be0 <__swsetup_r>
 8005314:	b170      	cbz	r0, 8005334 <_vfiprintf_r+0x5c>
 8005316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005318:	07dc      	lsls	r4, r3, #31
 800531a:	d504      	bpl.n	8005326 <_vfiprintf_r+0x4e>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005320:	b01d      	add	sp, #116	; 0x74
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	0598      	lsls	r0, r3, #22
 800532a:	d4f7      	bmi.n	800531c <_vfiprintf_r+0x44>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7ff ffa9 	bl	8005284 <__retarget_lock_release_recursive>
 8005332:	e7f3      	b.n	800531c <_vfiprintf_r+0x44>
 8005334:	2300      	movs	r3, #0
 8005336:	9309      	str	r3, [sp, #36]	; 0x24
 8005338:	2320      	movs	r3, #32
 800533a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800533e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005342:	2330      	movs	r3, #48	; 0x30
 8005344:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80054f8 <_vfiprintf_r+0x220>
 8005348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800534c:	f04f 0901 	mov.w	r9, #1
 8005350:	4623      	mov	r3, r4
 8005352:	469a      	mov	sl, r3
 8005354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005358:	b10a      	cbz	r2, 800535e <_vfiprintf_r+0x86>
 800535a:	2a25      	cmp	r2, #37	; 0x25
 800535c:	d1f9      	bne.n	8005352 <_vfiprintf_r+0x7a>
 800535e:	ebba 0b04 	subs.w	fp, sl, r4
 8005362:	d00b      	beq.n	800537c <_vfiprintf_r+0xa4>
 8005364:	465b      	mov	r3, fp
 8005366:	4622      	mov	r2, r4
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ffa2 	bl	80052b4 <__sfputs_r>
 8005370:	3001      	adds	r0, #1
 8005372:	f000 80a9 	beq.w	80054c8 <_vfiprintf_r+0x1f0>
 8005376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005378:	445a      	add	r2, fp
 800537a:	9209      	str	r2, [sp, #36]	; 0x24
 800537c:	f89a 3000 	ldrb.w	r3, [sl]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a1 	beq.w	80054c8 <_vfiprintf_r+0x1f0>
 8005386:	2300      	movs	r3, #0
 8005388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800538c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005390:	f10a 0a01 	add.w	sl, sl, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	9307      	str	r3, [sp, #28]
 8005398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800539c:	931a      	str	r3, [sp, #104]	; 0x68
 800539e:	4654      	mov	r4, sl
 80053a0:	2205      	movs	r2, #5
 80053a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a6:	4854      	ldr	r0, [pc, #336]	; (80054f8 <_vfiprintf_r+0x220>)
 80053a8:	f7fa ff3a 	bl	8000220 <memchr>
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	b9d8      	cbnz	r0, 80053e8 <_vfiprintf_r+0x110>
 80053b0:	06d1      	lsls	r1, r2, #27
 80053b2:	bf44      	itt	mi
 80053b4:	2320      	movmi	r3, #32
 80053b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ba:	0713      	lsls	r3, r2, #28
 80053bc:	bf44      	itt	mi
 80053be:	232b      	movmi	r3, #43	; 0x2b
 80053c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c4:	f89a 3000 	ldrb.w	r3, [sl]
 80053c8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ca:	d015      	beq.n	80053f8 <_vfiprintf_r+0x120>
 80053cc:	9a07      	ldr	r2, [sp, #28]
 80053ce:	4654      	mov	r4, sl
 80053d0:	2000      	movs	r0, #0
 80053d2:	f04f 0c0a 	mov.w	ip, #10
 80053d6:	4621      	mov	r1, r4
 80053d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053dc:	3b30      	subs	r3, #48	; 0x30
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d94d      	bls.n	800547e <_vfiprintf_r+0x1a6>
 80053e2:	b1b0      	cbz	r0, 8005412 <_vfiprintf_r+0x13a>
 80053e4:	9207      	str	r2, [sp, #28]
 80053e6:	e014      	b.n	8005412 <_vfiprintf_r+0x13a>
 80053e8:	eba0 0308 	sub.w	r3, r0, r8
 80053ec:	fa09 f303 	lsl.w	r3, r9, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	46a2      	mov	sl, r4
 80053f6:	e7d2      	b.n	800539e <_vfiprintf_r+0xc6>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	1d19      	adds	r1, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9103      	str	r1, [sp, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	bfbb      	ittet	lt
 8005404:	425b      	neglt	r3, r3
 8005406:	f042 0202 	orrlt.w	r2, r2, #2
 800540a:	9307      	strge	r3, [sp, #28]
 800540c:	9307      	strlt	r3, [sp, #28]
 800540e:	bfb8      	it	lt
 8005410:	9204      	strlt	r2, [sp, #16]
 8005412:	7823      	ldrb	r3, [r4, #0]
 8005414:	2b2e      	cmp	r3, #46	; 0x2e
 8005416:	d10c      	bne.n	8005432 <_vfiprintf_r+0x15a>
 8005418:	7863      	ldrb	r3, [r4, #1]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d134      	bne.n	8005488 <_vfiprintf_r+0x1b0>
 800541e:	9b03      	ldr	r3, [sp, #12]
 8005420:	1d1a      	adds	r2, r3, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	9203      	str	r2, [sp, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfb8      	it	lt
 800542a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800542e:	3402      	adds	r4, #2
 8005430:	9305      	str	r3, [sp, #20]
 8005432:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005508 <_vfiprintf_r+0x230>
 8005436:	7821      	ldrb	r1, [r4, #0]
 8005438:	2203      	movs	r2, #3
 800543a:	4650      	mov	r0, sl
 800543c:	f7fa fef0 	bl	8000220 <memchr>
 8005440:	b138      	cbz	r0, 8005452 <_vfiprintf_r+0x17a>
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	eba0 000a 	sub.w	r0, r0, sl
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	4082      	lsls	r2, r0
 800544c:	4313      	orrs	r3, r2
 800544e:	3401      	adds	r4, #1
 8005450:	9304      	str	r3, [sp, #16]
 8005452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005456:	4829      	ldr	r0, [pc, #164]	; (80054fc <_vfiprintf_r+0x224>)
 8005458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800545c:	2206      	movs	r2, #6
 800545e:	f7fa fedf 	bl	8000220 <memchr>
 8005462:	2800      	cmp	r0, #0
 8005464:	d03f      	beq.n	80054e6 <_vfiprintf_r+0x20e>
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <_vfiprintf_r+0x228>)
 8005468:	bb1b      	cbnz	r3, 80054b2 <_vfiprintf_r+0x1da>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	3307      	adds	r3, #7
 800546e:	f023 0307 	bic.w	r3, r3, #7
 8005472:	3308      	adds	r3, #8
 8005474:	9303      	str	r3, [sp, #12]
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	443b      	add	r3, r7
 800547a:	9309      	str	r3, [sp, #36]	; 0x24
 800547c:	e768      	b.n	8005350 <_vfiprintf_r+0x78>
 800547e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005482:	460c      	mov	r4, r1
 8005484:	2001      	movs	r0, #1
 8005486:	e7a6      	b.n	80053d6 <_vfiprintf_r+0xfe>
 8005488:	2300      	movs	r3, #0
 800548a:	3401      	adds	r4, #1
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	4619      	mov	r1, r3
 8005490:	f04f 0c0a 	mov.w	ip, #10
 8005494:	4620      	mov	r0, r4
 8005496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800549a:	3a30      	subs	r2, #48	; 0x30
 800549c:	2a09      	cmp	r2, #9
 800549e:	d903      	bls.n	80054a8 <_vfiprintf_r+0x1d0>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0c6      	beq.n	8005432 <_vfiprintf_r+0x15a>
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	e7c4      	b.n	8005432 <_vfiprintf_r+0x15a>
 80054a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ac:	4604      	mov	r4, r0
 80054ae:	2301      	movs	r3, #1
 80054b0:	e7f0      	b.n	8005494 <_vfiprintf_r+0x1bc>
 80054b2:	ab03      	add	r3, sp, #12
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	462a      	mov	r2, r5
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <_vfiprintf_r+0x22c>)
 80054ba:	a904      	add	r1, sp, #16
 80054bc:	4630      	mov	r0, r6
 80054be:	f3af 8000 	nop.w
 80054c2:	4607      	mov	r7, r0
 80054c4:	1c78      	adds	r0, r7, #1
 80054c6:	d1d6      	bne.n	8005476 <_vfiprintf_r+0x19e>
 80054c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ca:	07d9      	lsls	r1, r3, #31
 80054cc:	d405      	bmi.n	80054da <_vfiprintf_r+0x202>
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	059a      	lsls	r2, r3, #22
 80054d2:	d402      	bmi.n	80054da <_vfiprintf_r+0x202>
 80054d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054d6:	f7ff fed5 	bl	8005284 <__retarget_lock_release_recursive>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	065b      	lsls	r3, r3, #25
 80054de:	f53f af1d 	bmi.w	800531c <_vfiprintf_r+0x44>
 80054e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e4:	e71c      	b.n	8005320 <_vfiprintf_r+0x48>
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_vfiprintf_r+0x22c>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 f919 	bl	8005728 <_printf_i>
 80054f6:	e7e4      	b.n	80054c2 <_vfiprintf_r+0x1ea>
 80054f8:	08005f54 	.word	0x08005f54
 80054fc:	08005f5e 	.word	0x08005f5e
 8005500:	00000000 	.word	0x00000000
 8005504:	080052b5 	.word	0x080052b5
 8005508:	08005f5a 	.word	0x08005f5a

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0e      	ldr	r6, [pc, #56]	; (8005548 <sbrk_aligned+0x3c>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 fc72 	bl	8005e00 <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fc6d 	bl	8005e00 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d00a      	beq.n	8005540 <sbrk_aligned+0x34>
 800552a:	1cc4      	adds	r4, r0, #3
 800552c:	f024 0403 	bic.w	r4, r4, #3
 8005530:	42a0      	cmp	r0, r4
 8005532:	d007      	beq.n	8005544 <sbrk_aligned+0x38>
 8005534:	1a21      	subs	r1, r4, r0
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fc62 	bl	8005e00 <_sbrk_r>
 800553c:	3001      	adds	r0, #1
 800553e:	d101      	bne.n	8005544 <sbrk_aligned+0x38>
 8005540:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	20000338 	.word	0x20000338

0800554c <_malloc_r>:
 800554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005550:	1ccd      	adds	r5, r1, #3
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	2d00      	cmp	r5, #0
 8005560:	4607      	mov	r7, r0
 8005562:	db01      	blt.n	8005568 <_malloc_r+0x1c>
 8005564:	42a9      	cmp	r1, r5
 8005566:	d905      	bls.n	8005574 <_malloc_r+0x28>
 8005568:	230c      	movs	r3, #12
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	2600      	movs	r6, #0
 800556e:	4630      	mov	r0, r6
 8005570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005574:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005648 <_malloc_r+0xfc>
 8005578:	f000 faa6 	bl	8005ac8 <__malloc_lock>
 800557c:	f8d8 3000 	ldr.w	r3, [r8]
 8005580:	461c      	mov	r4, r3
 8005582:	bb5c      	cbnz	r4, 80055dc <_malloc_r+0x90>
 8005584:	4629      	mov	r1, r5
 8005586:	4638      	mov	r0, r7
 8005588:	f7ff ffc0 	bl	800550c <sbrk_aligned>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	4604      	mov	r4, r0
 8005590:	d155      	bne.n	800563e <_malloc_r+0xf2>
 8005592:	f8d8 4000 	ldr.w	r4, [r8]
 8005596:	4626      	mov	r6, r4
 8005598:	2e00      	cmp	r6, #0
 800559a:	d145      	bne.n	8005628 <_malloc_r+0xdc>
 800559c:	2c00      	cmp	r4, #0
 800559e:	d048      	beq.n	8005632 <_malloc_r+0xe6>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	4631      	mov	r1, r6
 80055a4:	4638      	mov	r0, r7
 80055a6:	eb04 0903 	add.w	r9, r4, r3
 80055aa:	f000 fc29 	bl	8005e00 <_sbrk_r>
 80055ae:	4581      	cmp	r9, r0
 80055b0:	d13f      	bne.n	8005632 <_malloc_r+0xe6>
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	1a6d      	subs	r5, r5, r1
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ffa7 	bl	800550c <sbrk_aligned>
 80055be:	3001      	adds	r0, #1
 80055c0:	d037      	beq.n	8005632 <_malloc_r+0xe6>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	442b      	add	r3, r5
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d038      	beq.n	8005642 <_malloc_r+0xf6>
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	42a2      	cmp	r2, r4
 80055d4:	d12b      	bne.n	800562e <_malloc_r+0xe2>
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	e00f      	b.n	80055fc <_malloc_r+0xb0>
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	1b52      	subs	r2, r2, r5
 80055e0:	d41f      	bmi.n	8005622 <_malloc_r+0xd6>
 80055e2:	2a0b      	cmp	r2, #11
 80055e4:	d917      	bls.n	8005616 <_malloc_r+0xca>
 80055e6:	1961      	adds	r1, r4, r5
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	6059      	strne	r1, [r3, #4]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	bf08      	it	eq
 80055f4:	f8c8 1000 	streq.w	r1, [r8]
 80055f8:	5162      	str	r2, [r4, r5]
 80055fa:	604b      	str	r3, [r1, #4]
 80055fc:	4638      	mov	r0, r7
 80055fe:	f104 060b 	add.w	r6, r4, #11
 8005602:	f000 fa67 	bl	8005ad4 <__malloc_unlock>
 8005606:	f026 0607 	bic.w	r6, r6, #7
 800560a:	1d23      	adds	r3, r4, #4
 800560c:	1af2      	subs	r2, r6, r3
 800560e:	d0ae      	beq.n	800556e <_malloc_r+0x22>
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	50a3      	str	r3, [r4, r2]
 8005614:	e7ab      	b.n	800556e <_malloc_r+0x22>
 8005616:	42a3      	cmp	r3, r4
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	d1dd      	bne.n	80055d8 <_malloc_r+0x8c>
 800561c:	f8c8 2000 	str.w	r2, [r8]
 8005620:	e7ec      	b.n	80055fc <_malloc_r+0xb0>
 8005622:	4623      	mov	r3, r4
 8005624:	6864      	ldr	r4, [r4, #4]
 8005626:	e7ac      	b.n	8005582 <_malloc_r+0x36>
 8005628:	4634      	mov	r4, r6
 800562a:	6876      	ldr	r6, [r6, #4]
 800562c:	e7b4      	b.n	8005598 <_malloc_r+0x4c>
 800562e:	4613      	mov	r3, r2
 8005630:	e7cc      	b.n	80055cc <_malloc_r+0x80>
 8005632:	230c      	movs	r3, #12
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4638      	mov	r0, r7
 8005638:	f000 fa4c 	bl	8005ad4 <__malloc_unlock>
 800563c:	e797      	b.n	800556e <_malloc_r+0x22>
 800563e:	6025      	str	r5, [r4, #0]
 8005640:	e7dc      	b.n	80055fc <_malloc_r+0xb0>
 8005642:	605b      	str	r3, [r3, #4]
 8005644:	deff      	udf	#255	; 0xff
 8005646:	bf00      	nop
 8005648:	20000334 	.word	0x20000334

0800564c <_printf_common>:
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	4616      	mov	r6, r2
 8005652:	4699      	mov	r9, r3
 8005654:	688a      	ldr	r2, [r1, #8]
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800565c:	4293      	cmp	r3, r2
 800565e:	bfb8      	it	lt
 8005660:	4613      	movlt	r3, r2
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005668:	4607      	mov	r7, r0
 800566a:	460c      	mov	r4, r1
 800566c:	b10a      	cbz	r2, 8005672 <_printf_common+0x26>
 800566e:	3301      	adds	r3, #1
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	0699      	lsls	r1, r3, #26
 8005676:	bf42      	ittt	mi
 8005678:	6833      	ldrmi	r3, [r6, #0]
 800567a:	3302      	addmi	r3, #2
 800567c:	6033      	strmi	r3, [r6, #0]
 800567e:	6825      	ldr	r5, [r4, #0]
 8005680:	f015 0506 	ands.w	r5, r5, #6
 8005684:	d106      	bne.n	8005694 <_printf_common+0x48>
 8005686:	f104 0a19 	add.w	sl, r4, #25
 800568a:	68e3      	ldr	r3, [r4, #12]
 800568c:	6832      	ldr	r2, [r6, #0]
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	42ab      	cmp	r3, r5
 8005692:	dc26      	bgt.n	80056e2 <_printf_common+0x96>
 8005694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005698:	1e13      	subs	r3, r2, #0
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	bf18      	it	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	0692      	lsls	r2, r2, #26
 80056a2:	d42b      	bmi.n	80056fc <_printf_common+0xb0>
 80056a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a8:	4649      	mov	r1, r9
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	3001      	adds	r0, #1
 80056b0:	d01e      	beq.n	80056f0 <_printf_common+0xa4>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	6922      	ldr	r2, [r4, #16]
 80056b6:	f003 0306 	and.w	r3, r3, #6
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	bf02      	ittt	eq
 80056be:	68e5      	ldreq	r5, [r4, #12]
 80056c0:	6833      	ldreq	r3, [r6, #0]
 80056c2:	1aed      	subeq	r5, r5, r3
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	bf0c      	ite	eq
 80056c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056cc:	2500      	movne	r5, #0
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bfc4      	itt	gt
 80056d2:	1a9b      	subgt	r3, r3, r2
 80056d4:	18ed      	addgt	r5, r5, r3
 80056d6:	2600      	movs	r6, #0
 80056d8:	341a      	adds	r4, #26
 80056da:	42b5      	cmp	r5, r6
 80056dc:	d11a      	bne.n	8005714 <_printf_common+0xc8>
 80056de:	2000      	movs	r0, #0
 80056e0:	e008      	b.n	80056f4 <_printf_common+0xa8>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4652      	mov	r2, sl
 80056e6:	4649      	mov	r1, r9
 80056e8:	4638      	mov	r0, r7
 80056ea:	47c0      	blx	r8
 80056ec:	3001      	adds	r0, #1
 80056ee:	d103      	bne.n	80056f8 <_printf_common+0xac>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f8:	3501      	adds	r5, #1
 80056fa:	e7c6      	b.n	800568a <_printf_common+0x3e>
 80056fc:	18e1      	adds	r1, r4, r3
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	2030      	movs	r0, #48	; 0x30
 8005702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005706:	4422      	add	r2, r4
 8005708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800570c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005710:	3302      	adds	r3, #2
 8005712:	e7c7      	b.n	80056a4 <_printf_common+0x58>
 8005714:	2301      	movs	r3, #1
 8005716:	4622      	mov	r2, r4
 8005718:	4649      	mov	r1, r9
 800571a:	4638      	mov	r0, r7
 800571c:	47c0      	blx	r8
 800571e:	3001      	adds	r0, #1
 8005720:	d0e6      	beq.n	80056f0 <_printf_common+0xa4>
 8005722:	3601      	adds	r6, #1
 8005724:	e7d9      	b.n	80056da <_printf_common+0x8e>
	...

08005728 <_printf_i>:
 8005728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	7e0f      	ldrb	r7, [r1, #24]
 800572e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005730:	2f78      	cmp	r7, #120	; 0x78
 8005732:	4691      	mov	r9, r2
 8005734:	4680      	mov	r8, r0
 8005736:	460c      	mov	r4, r1
 8005738:	469a      	mov	sl, r3
 800573a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800573e:	d807      	bhi.n	8005750 <_printf_i+0x28>
 8005740:	2f62      	cmp	r7, #98	; 0x62
 8005742:	d80a      	bhi.n	800575a <_printf_i+0x32>
 8005744:	2f00      	cmp	r7, #0
 8005746:	f000 80d4 	beq.w	80058f2 <_printf_i+0x1ca>
 800574a:	2f58      	cmp	r7, #88	; 0x58
 800574c:	f000 80c0 	beq.w	80058d0 <_printf_i+0x1a8>
 8005750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005758:	e03a      	b.n	80057d0 <_printf_i+0xa8>
 800575a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800575e:	2b15      	cmp	r3, #21
 8005760:	d8f6      	bhi.n	8005750 <_printf_i+0x28>
 8005762:	a101      	add	r1, pc, #4	; (adr r1, 8005768 <_printf_i+0x40>)
 8005764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005768:	080057c1 	.word	0x080057c1
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005751 	.word	0x08005751
 8005774:	08005751 	.word	0x08005751
 8005778:	08005751 	.word	0x08005751
 800577c:	08005751 	.word	0x08005751
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005751 	.word	0x08005751
 8005788:	08005751 	.word	0x08005751
 800578c:	08005751 	.word	0x08005751
 8005790:	08005751 	.word	0x08005751
 8005794:	080058d9 	.word	0x080058d9
 8005798:	08005801 	.word	0x08005801
 800579c:	08005893 	.word	0x08005893
 80057a0:	08005751 	.word	0x08005751
 80057a4:	08005751 	.word	0x08005751
 80057a8:	080058fb 	.word	0x080058fb
 80057ac:	08005751 	.word	0x08005751
 80057b0:	08005801 	.word	0x08005801
 80057b4:	08005751 	.word	0x08005751
 80057b8:	08005751 	.word	0x08005751
 80057bc:	0800589b 	.word	0x0800589b
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	602a      	str	r2, [r5, #0]
 80057c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d0:	2301      	movs	r3, #1
 80057d2:	e09f      	b.n	8005914 <_printf_i+0x1ec>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	0607      	lsls	r7, r0, #24
 80057da:	f103 0104 	add.w	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0xbe>
 80057e2:	681e      	ldr	r6, [r3, #0]
 80057e4:	e003      	b.n	80057ee <_printf_i+0xc6>
 80057e6:	0646      	lsls	r6, r0, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0xba>
 80057ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	da03      	bge.n	80057fa <_printf_i+0xd2>
 80057f2:	232d      	movs	r3, #45	; 0x2d
 80057f4:	4276      	negs	r6, r6
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fa:	485a      	ldr	r0, [pc, #360]	; (8005964 <_printf_i+0x23c>)
 80057fc:	230a      	movs	r3, #10
 80057fe:	e012      	b.n	8005826 <_printf_i+0xfe>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	0605      	lsls	r5, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xe8>
 800580c:	681e      	ldr	r6, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0xee>
 8005810:	0641      	lsls	r1, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xe4>
 8005814:	881e      	ldrh	r6, [r3, #0]
 8005816:	4853      	ldr	r0, [pc, #332]	; (8005964 <_printf_i+0x23c>)
 8005818:	2f6f      	cmp	r7, #111	; 0x6f
 800581a:	bf0c      	ite	eq
 800581c:	2308      	moveq	r3, #8
 800581e:	230a      	movne	r3, #10
 8005820:	2100      	movs	r1, #0
 8005822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005826:	6865      	ldr	r5, [r4, #4]
 8005828:	60a5      	str	r5, [r4, #8]
 800582a:	2d00      	cmp	r5, #0
 800582c:	bfa2      	ittt	ge
 800582e:	6821      	ldrge	r1, [r4, #0]
 8005830:	f021 0104 	bicge.w	r1, r1, #4
 8005834:	6021      	strge	r1, [r4, #0]
 8005836:	b90e      	cbnz	r6, 800583c <_printf_i+0x114>
 8005838:	2d00      	cmp	r5, #0
 800583a:	d04b      	beq.n	80058d4 <_printf_i+0x1ac>
 800583c:	4615      	mov	r5, r2
 800583e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005842:	fb03 6711 	mls	r7, r3, r1, r6
 8005846:	5dc7      	ldrb	r7, [r0, r7]
 8005848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800584c:	4637      	mov	r7, r6
 800584e:	42bb      	cmp	r3, r7
 8005850:	460e      	mov	r6, r1
 8005852:	d9f4      	bls.n	800583e <_printf_i+0x116>
 8005854:	2b08      	cmp	r3, #8
 8005856:	d10b      	bne.n	8005870 <_printf_i+0x148>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07de      	lsls	r6, r3, #31
 800585c:	d508      	bpl.n	8005870 <_printf_i+0x148>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6861      	ldr	r1, [r4, #4]
 8005862:	4299      	cmp	r1, r3
 8005864:	bfde      	ittt	le
 8005866:	2330      	movle	r3, #48	; 0x30
 8005868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800586c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005870:	1b52      	subs	r2, r2, r5
 8005872:	6122      	str	r2, [r4, #16]
 8005874:	f8cd a000 	str.w	sl, [sp]
 8005878:	464b      	mov	r3, r9
 800587a:	aa03      	add	r2, sp, #12
 800587c:	4621      	mov	r1, r4
 800587e:	4640      	mov	r0, r8
 8005880:	f7ff fee4 	bl	800564c <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	d14a      	bne.n	800591e <_printf_i+0x1f6>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800588c:	b004      	add	sp, #16
 800588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	f043 0320 	orr.w	r3, r3, #32
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	4833      	ldr	r0, [pc, #204]	; (8005968 <_printf_i+0x240>)
 800589c:	2778      	movs	r7, #120	; 0x78
 800589e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	6829      	ldr	r1, [r5, #0]
 80058a6:	061f      	lsls	r7, r3, #24
 80058a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ac:	d402      	bmi.n	80058b4 <_printf_i+0x18c>
 80058ae:	065f      	lsls	r7, r3, #25
 80058b0:	bf48      	it	mi
 80058b2:	b2b6      	uxthmi	r6, r6
 80058b4:	07df      	lsls	r7, r3, #31
 80058b6:	bf48      	it	mi
 80058b8:	f043 0320 	orrmi.w	r3, r3, #32
 80058bc:	6029      	str	r1, [r5, #0]
 80058be:	bf48      	it	mi
 80058c0:	6023      	strmi	r3, [r4, #0]
 80058c2:	b91e      	cbnz	r6, 80058cc <_printf_i+0x1a4>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	f023 0320 	bic.w	r3, r3, #32
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	2310      	movs	r3, #16
 80058ce:	e7a7      	b.n	8005820 <_printf_i+0xf8>
 80058d0:	4824      	ldr	r0, [pc, #144]	; (8005964 <_printf_i+0x23c>)
 80058d2:	e7e4      	b.n	800589e <_printf_i+0x176>
 80058d4:	4615      	mov	r5, r2
 80058d6:	e7bd      	b.n	8005854 <_printf_i+0x12c>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	6826      	ldr	r6, [r4, #0]
 80058dc:	6961      	ldr	r1, [r4, #20]
 80058de:	1d18      	adds	r0, r3, #4
 80058e0:	6028      	str	r0, [r5, #0]
 80058e2:	0635      	lsls	r5, r6, #24
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0x1c4>
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0x1ca>
 80058ec:	0670      	lsls	r0, r6, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0x1c0>
 80058f0:	8019      	strh	r1, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	4615      	mov	r5, r2
 80058f8:	e7bc      	b.n	8005874 <_printf_i+0x14c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	1d1a      	adds	r2, r3, #4
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	681d      	ldr	r5, [r3, #0]
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	2100      	movs	r1, #0
 8005906:	4628      	mov	r0, r5
 8005908:	f7fa fc8a 	bl	8000220 <memchr>
 800590c:	b108      	cbz	r0, 8005912 <_printf_i+0x1ea>
 800590e:	1b40      	subs	r0, r0, r5
 8005910:	6060      	str	r0, [r4, #4]
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	2300      	movs	r3, #0
 8005918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591c:	e7aa      	b.n	8005874 <_printf_i+0x14c>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	462a      	mov	r2, r5
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d0ad      	beq.n	8005888 <_printf_i+0x160>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	079b      	lsls	r3, r3, #30
 8005930:	d413      	bmi.n	800595a <_printf_i+0x232>
 8005932:	68e0      	ldr	r0, [r4, #12]
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	4298      	cmp	r0, r3
 8005938:	bfb8      	it	lt
 800593a:	4618      	movlt	r0, r3
 800593c:	e7a6      	b.n	800588c <_printf_i+0x164>
 800593e:	2301      	movs	r3, #1
 8005940:	4632      	mov	r2, r6
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d09d      	beq.n	8005888 <_printf_i+0x160>
 800594c:	3501      	adds	r5, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	9903      	ldr	r1, [sp, #12]
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	42ab      	cmp	r3, r5
 8005956:	dcf2      	bgt.n	800593e <_printf_i+0x216>
 8005958:	e7eb      	b.n	8005932 <_printf_i+0x20a>
 800595a:	2500      	movs	r5, #0
 800595c:	f104 0619 	add.w	r6, r4, #25
 8005960:	e7f5      	b.n	800594e <_printf_i+0x226>
 8005962:	bf00      	nop
 8005964:	08005f65 	.word	0x08005f65
 8005968:	08005f76 	.word	0x08005f76

0800596c <__sflush_r>:
 800596c:	898a      	ldrh	r2, [r1, #12]
 800596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	0710      	lsls	r0, r2, #28
 8005976:	460c      	mov	r4, r1
 8005978:	d458      	bmi.n	8005a2c <__sflush_r+0xc0>
 800597a:	684b      	ldr	r3, [r1, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	dc05      	bgt.n	800598c <__sflush_r+0x20>
 8005980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	dc02      	bgt.n	800598c <__sflush_r+0x20>
 8005986:	2000      	movs	r0, #0
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800598e:	2e00      	cmp	r6, #0
 8005990:	d0f9      	beq.n	8005986 <__sflush_r+0x1a>
 8005992:	2300      	movs	r3, #0
 8005994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005998:	682f      	ldr	r7, [r5, #0]
 800599a:	6a21      	ldr	r1, [r4, #32]
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	d032      	beq.n	8005a06 <__sflush_r+0x9a>
 80059a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	075a      	lsls	r2, r3, #29
 80059a6:	d505      	bpl.n	80059b4 <__sflush_r+0x48>
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	1ac0      	subs	r0, r0, r3
 80059ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ae:	b10b      	cbz	r3, 80059b4 <__sflush_r+0x48>
 80059b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b2:	1ac0      	subs	r0, r0, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	4602      	mov	r2, r0
 80059b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ba:	6a21      	ldr	r1, [r4, #32]
 80059bc:	4628      	mov	r0, r5
 80059be:	47b0      	blx	r6
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	d106      	bne.n	80059d4 <__sflush_r+0x68>
 80059c6:	6829      	ldr	r1, [r5, #0]
 80059c8:	291d      	cmp	r1, #29
 80059ca:	d82b      	bhi.n	8005a24 <__sflush_r+0xb8>
 80059cc:	4a29      	ldr	r2, [pc, #164]	; (8005a74 <__sflush_r+0x108>)
 80059ce:	410a      	asrs	r2, r1
 80059d0:	07d6      	lsls	r6, r2, #31
 80059d2:	d427      	bmi.n	8005a24 <__sflush_r+0xb8>
 80059d4:	2200      	movs	r2, #0
 80059d6:	6062      	str	r2, [r4, #4]
 80059d8:	04d9      	lsls	r1, r3, #19
 80059da:	6922      	ldr	r2, [r4, #16]
 80059dc:	6022      	str	r2, [r4, #0]
 80059de:	d504      	bpl.n	80059ea <__sflush_r+0x7e>
 80059e0:	1c42      	adds	r2, r0, #1
 80059e2:	d101      	bne.n	80059e8 <__sflush_r+0x7c>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b903      	cbnz	r3, 80059ea <__sflush_r+0x7e>
 80059e8:	6560      	str	r0, [r4, #84]	; 0x54
 80059ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ec:	602f      	str	r7, [r5, #0]
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d0c9      	beq.n	8005986 <__sflush_r+0x1a>
 80059f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d002      	beq.n	8005a00 <__sflush_r+0x94>
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fa22 	bl	8005e44 <_free_r>
 8005a00:	2000      	movs	r0, #0
 8005a02:	6360      	str	r0, [r4, #52]	; 0x34
 8005a04:	e7c0      	b.n	8005988 <__sflush_r+0x1c>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b0      	blx	r6
 8005a0c:	1c41      	adds	r1, r0, #1
 8005a0e:	d1c8      	bne.n	80059a2 <__sflush_r+0x36>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0c5      	beq.n	80059a2 <__sflush_r+0x36>
 8005a16:	2b1d      	cmp	r3, #29
 8005a18:	d001      	beq.n	8005a1e <__sflush_r+0xb2>
 8005a1a:	2b16      	cmp	r3, #22
 8005a1c:	d101      	bne.n	8005a22 <__sflush_r+0xb6>
 8005a1e:	602f      	str	r7, [r5, #0]
 8005a20:	e7b1      	b.n	8005986 <__sflush_r+0x1a>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	e7ad      	b.n	8005988 <__sflush_r+0x1c>
 8005a2c:	690f      	ldr	r7, [r1, #16]
 8005a2e:	2f00      	cmp	r7, #0
 8005a30:	d0a9      	beq.n	8005986 <__sflush_r+0x1a>
 8005a32:	0793      	lsls	r3, r2, #30
 8005a34:	680e      	ldr	r6, [r1, #0]
 8005a36:	bf08      	it	eq
 8005a38:	694b      	ldreq	r3, [r1, #20]
 8005a3a:	600f      	str	r7, [r1, #0]
 8005a3c:	bf18      	it	ne
 8005a3e:	2300      	movne	r3, #0
 8005a40:	eba6 0807 	sub.w	r8, r6, r7
 8005a44:	608b      	str	r3, [r1, #8]
 8005a46:	f1b8 0f00 	cmp.w	r8, #0
 8005a4a:	dd9c      	ble.n	8005986 <__sflush_r+0x1a>
 8005a4c:	6a21      	ldr	r1, [r4, #32]
 8005a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a50:	4643      	mov	r3, r8
 8005a52:	463a      	mov	r2, r7
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b0      	blx	r6
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	dc06      	bgt.n	8005a6a <__sflush_r+0xfe>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a68:	e78e      	b.n	8005988 <__sflush_r+0x1c>
 8005a6a:	4407      	add	r7, r0
 8005a6c:	eba8 0800 	sub.w	r8, r8, r0
 8005a70:	e7e9      	b.n	8005a46 <__sflush_r+0xda>
 8005a72:	bf00      	nop
 8005a74:	dfbffffe 	.word	0xdfbffffe

08005a78 <_fflush_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	690b      	ldr	r3, [r1, #16]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	b913      	cbnz	r3, 8005a88 <_fflush_r+0x10>
 8005a82:	2500      	movs	r5, #0
 8005a84:	4628      	mov	r0, r5
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	b118      	cbz	r0, 8005a92 <_fflush_r+0x1a>
 8005a8a:	6a03      	ldr	r3, [r0, #32]
 8005a8c:	b90b      	cbnz	r3, 8005a92 <_fflush_r+0x1a>
 8005a8e:	f7ff fb21 	bl	80050d4 <__sinit>
 8005a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f3      	beq.n	8005a82 <_fflush_r+0xa>
 8005a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d404      	bmi.n	8005aaa <_fflush_r+0x32>
 8005aa0:	0599      	lsls	r1, r3, #22
 8005aa2:	d402      	bmi.n	8005aaa <_fflush_r+0x32>
 8005aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa6:	f7ff fbec 	bl	8005282 <__retarget_lock_acquire_recursive>
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4621      	mov	r1, r4
 8005aae:	f7ff ff5d 	bl	800596c <__sflush_r>
 8005ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ab4:	07da      	lsls	r2, r3, #31
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	d4e4      	bmi.n	8005a84 <_fflush_r+0xc>
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	059b      	lsls	r3, r3, #22
 8005abe:	d4e1      	bmi.n	8005a84 <_fflush_r+0xc>
 8005ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ac2:	f7ff fbdf 	bl	8005284 <__retarget_lock_release_recursive>
 8005ac6:	e7dd      	b.n	8005a84 <_fflush_r+0xc>

08005ac8 <__malloc_lock>:
 8005ac8:	4801      	ldr	r0, [pc, #4]	; (8005ad0 <__malloc_lock+0x8>)
 8005aca:	f7ff bbda 	b.w	8005282 <__retarget_lock_acquire_recursive>
 8005ace:	bf00      	nop
 8005ad0:	20000330 	.word	0x20000330

08005ad4 <__malloc_unlock>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__malloc_unlock+0x8>)
 8005ad6:	f7ff bbd5 	b.w	8005284 <__retarget_lock_release_recursive>
 8005ada:	bf00      	nop
 8005adc:	20000330 	.word	0x20000330

08005ae0 <__sread>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae8:	f000 f978 	bl	8005ddc <_read_r>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	bfab      	itete	ge
 8005af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005af2:	89a3      	ldrhlt	r3, [r4, #12]
 8005af4:	181b      	addge	r3, r3, r0
 8005af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005afa:	bfac      	ite	ge
 8005afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005afe:	81a3      	strhlt	r3, [r4, #12]
 8005b00:	bd10      	pop	{r4, pc}

08005b02 <__swrite>:
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	461f      	mov	r7, r3
 8005b08:	898b      	ldrh	r3, [r1, #12]
 8005b0a:	05db      	lsls	r3, r3, #23
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	4616      	mov	r6, r2
 8005b12:	d505      	bpl.n	8005b20 <__swrite+0x1e>
 8005b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b18:	2302      	movs	r3, #2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f000 f94c 	bl	8005db8 <_lseek_r>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	463b      	mov	r3, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	f000 b973 	b.w	8005e20 <_write_r>

08005b3a <__sseek>:
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b42:	f000 f939 	bl	8005db8 <_lseek_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	bf15      	itete	ne
 8005b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b56:	81a3      	strheq	r3, [r4, #12]
 8005b58:	bf18      	it	ne
 8005b5a:	81a3      	strhne	r3, [r4, #12]
 8005b5c:	bd10      	pop	{r4, pc}

08005b5e <__sclose>:
 8005b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b62:	f000 b8f7 	b.w	8005d54 <_close_r>

08005b66 <__swbuf_r>:
 8005b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b68:	460e      	mov	r6, r1
 8005b6a:	4614      	mov	r4, r2
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	b118      	cbz	r0, 8005b78 <__swbuf_r+0x12>
 8005b70:	6a03      	ldr	r3, [r0, #32]
 8005b72:	b90b      	cbnz	r3, 8005b78 <__swbuf_r+0x12>
 8005b74:	f7ff faae 	bl	80050d4 <__sinit>
 8005b78:	69a3      	ldr	r3, [r4, #24]
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	071a      	lsls	r2, r3, #28
 8005b80:	d525      	bpl.n	8005bce <__swbuf_r+0x68>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	b31b      	cbz	r3, 8005bce <__swbuf_r+0x68>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	6922      	ldr	r2, [r4, #16]
 8005b8a:	1a98      	subs	r0, r3, r2
 8005b8c:	6963      	ldr	r3, [r4, #20]
 8005b8e:	b2f6      	uxtb	r6, r6
 8005b90:	4283      	cmp	r3, r0
 8005b92:	4637      	mov	r7, r6
 8005b94:	dc04      	bgt.n	8005ba0 <__swbuf_r+0x3a>
 8005b96:	4621      	mov	r1, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f7ff ff6d 	bl	8005a78 <_fflush_r>
 8005b9e:	b9e0      	cbnz	r0, 8005bda <__swbuf_r+0x74>
 8005ba0:	68a3      	ldr	r3, [r4, #8]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	60a3      	str	r3, [r4, #8]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	701e      	strb	r6, [r3, #0]
 8005bae:	6962      	ldr	r2, [r4, #20]
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d004      	beq.n	8005bc0 <__swbuf_r+0x5a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d506      	bpl.n	8005bca <__swbuf_r+0x64>
 8005bbc:	2e0a      	cmp	r6, #10
 8005bbe:	d104      	bne.n	8005bca <__swbuf_r+0x64>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f7ff ff58 	bl	8005a78 <_fflush_r>
 8005bc8:	b938      	cbnz	r0, 8005bda <__swbuf_r+0x74>
 8005bca:	4638      	mov	r0, r7
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 f805 	bl	8005be0 <__swsetup_r>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d0d5      	beq.n	8005b86 <__swbuf_r+0x20>
 8005bda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bde:	e7f4      	b.n	8005bca <__swbuf_r+0x64>

08005be0 <__swsetup_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <__swsetup_r+0xac>)
 8005be4:	4605      	mov	r5, r0
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	460c      	mov	r4, r1
 8005bea:	b118      	cbz	r0, 8005bf4 <__swsetup_r+0x14>
 8005bec:	6a03      	ldr	r3, [r0, #32]
 8005bee:	b90b      	cbnz	r3, 8005bf4 <__swsetup_r+0x14>
 8005bf0:	f7ff fa70 	bl	80050d4 <__sinit>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bfa:	0718      	lsls	r0, r3, #28
 8005bfc:	d422      	bmi.n	8005c44 <__swsetup_r+0x64>
 8005bfe:	06d9      	lsls	r1, r3, #27
 8005c00:	d407      	bmi.n	8005c12 <__swsetup_r+0x32>
 8005c02:	2309      	movs	r3, #9
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c10:	e034      	b.n	8005c7c <__swsetup_r+0x9c>
 8005c12:	0758      	lsls	r0, r3, #29
 8005c14:	d512      	bpl.n	8005c3c <__swsetup_r+0x5c>
 8005c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c18:	b141      	cbz	r1, 8005c2c <__swsetup_r+0x4c>
 8005c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	d002      	beq.n	8005c28 <__swsetup_r+0x48>
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f90e 	bl	8005e44 <_free_r>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	2300      	movs	r3, #0
 8005c36:	6063      	str	r3, [r4, #4]
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f043 0308 	orr.w	r3, r3, #8
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	b94b      	cbnz	r3, 8005c5c <__swsetup_r+0x7c>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c52:	d003      	beq.n	8005c5c <__swsetup_r+0x7c>
 8005c54:	4621      	mov	r1, r4
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 f840 	bl	8005cdc <__smakebuf_r>
 8005c5c:	89a0      	ldrh	r0, [r4, #12]
 8005c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c62:	f010 0301 	ands.w	r3, r0, #1
 8005c66:	d00a      	beq.n	8005c7e <__swsetup_r+0x9e>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	6963      	ldr	r3, [r4, #20]
 8005c6e:	425b      	negs	r3, r3
 8005c70:	61a3      	str	r3, [r4, #24]
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	b943      	cbnz	r3, 8005c88 <__swsetup_r+0xa8>
 8005c76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c7a:	d1c4      	bne.n	8005c06 <__swsetup_r+0x26>
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	0781      	lsls	r1, r0, #30
 8005c80:	bf58      	it	pl
 8005c82:	6963      	ldrpl	r3, [r4, #20]
 8005c84:	60a3      	str	r3, [r4, #8]
 8005c86:	e7f4      	b.n	8005c72 <__swsetup_r+0x92>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e7f7      	b.n	8005c7c <__swsetup_r+0x9c>
 8005c8c:	20000064 	.word	0x20000064

08005c90 <__swhatbuf_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	460c      	mov	r4, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	b096      	sub	sp, #88	; 0x58
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	461e      	mov	r6, r3
 8005ca0:	da0d      	bge.n	8005cbe <__swhatbuf_r+0x2e>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	bf0c      	ite	eq
 8005cae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005cb2:	2340      	movne	r3, #64	; 0x40
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	6031      	str	r1, [r6, #0]
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	b016      	add	sp, #88	; 0x58
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f000 f858 	bl	8005d74 <_fstat_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	dbec      	blt.n	8005ca2 <__swhatbuf_r+0x12>
 8005cc8:	9901      	ldr	r1, [sp, #4]
 8005cca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cd2:	4259      	negs	r1, r3
 8005cd4:	4159      	adcs	r1, r3
 8005cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cda:	e7eb      	b.n	8005cb4 <__swhatbuf_r+0x24>

08005cdc <__smakebuf_r>:
 8005cdc:	898b      	ldrh	r3, [r1, #12]
 8005cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ce0:	079d      	lsls	r5, r3, #30
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	d507      	bpl.n	8005cf8 <__smakebuf_r+0x1c>
 8005ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	6163      	str	r3, [r4, #20]
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	ab01      	add	r3, sp, #4
 8005cfa:	466a      	mov	r2, sp
 8005cfc:	f7ff ffc8 	bl	8005c90 <__swhatbuf_r>
 8005d00:	9900      	ldr	r1, [sp, #0]
 8005d02:	4605      	mov	r5, r0
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff fc21 	bl	800554c <_malloc_r>
 8005d0a:	b948      	cbnz	r0, 8005d20 <__smakebuf_r+0x44>
 8005d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d10:	059a      	lsls	r2, r3, #22
 8005d12:	d4ef      	bmi.n	8005cf4 <__smakebuf_r+0x18>
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	f043 0302 	orr.w	r3, r3, #2
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	e7e3      	b.n	8005ce8 <__smakebuf_r+0xc>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	6020      	str	r0, [r4, #0]
 8005d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	9b00      	ldr	r3, [sp, #0]
 8005d2c:	6163      	str	r3, [r4, #20]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	6120      	str	r0, [r4, #16]
 8005d32:	b15b      	cbz	r3, 8005d4c <__smakebuf_r+0x70>
 8005d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 f82d 	bl	8005d98 <_isatty_r>
 8005d3e:	b128      	cbz	r0, 8005d4c <__smakebuf_r+0x70>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	431d      	orrs	r5, r3
 8005d50:	81a5      	strh	r5, [r4, #12]
 8005d52:	e7cf      	b.n	8005cf4 <__smakebuf_r+0x18>

08005d54 <_close_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d06      	ldr	r5, [pc, #24]	; (8005d70 <_close_r+0x1c>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fa ff5b 	bl	8000c1a <_close>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_close_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_close_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	2000033c 	.word	0x2000033c

08005d74 <_fstat_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	; (8005d94 <_fstat_r+0x20>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	f7fa ff56 	bl	8000c32 <_fstat>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d102      	bne.n	8005d90 <_fstat_r+0x1c>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	b103      	cbz	r3, 8005d90 <_fstat_r+0x1c>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	2000033c 	.word	0x2000033c

08005d98 <_isatty_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_isatty_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fa ff55 	bl	8000c52 <_isatty>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_isatty_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_isatty_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	2000033c 	.word	0x2000033c

08005db8 <_lseek_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	; (8005dd8 <_lseek_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fa ff4e 	bl	8000c68 <_lseek>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_lseek_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_lseek_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	2000033c 	.word	0x2000033c

08005ddc <_read_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	; (8005dfc <_read_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fa fef8 	bl	8000be0 <_read>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_read_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_read_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	2000033c 	.word	0x2000033c

08005e00 <_sbrk_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	; (8005e1c <_sbrk_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fa ff3a 	bl	8000c84 <_sbrk>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_sbrk_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_sbrk_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000033c 	.word	0x2000033c

08005e20 <_write_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_write_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fa fbc4 	bl	80005bc <_write>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_write_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_write_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	2000033c 	.word	0x2000033c

08005e44 <_free_r>:
 8005e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e46:	2900      	cmp	r1, #0
 8005e48:	d044      	beq.n	8005ed4 <_free_r+0x90>
 8005e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4e:	9001      	str	r0, [sp, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f1a1 0404 	sub.w	r4, r1, #4
 8005e56:	bfb8      	it	lt
 8005e58:	18e4      	addlt	r4, r4, r3
 8005e5a:	f7ff fe35 	bl	8005ac8 <__malloc_lock>
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <_free_r+0x94>)
 8005e60:	9801      	ldr	r0, [sp, #4]
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	b933      	cbnz	r3, 8005e74 <_free_r+0x30>
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6014      	str	r4, [r2, #0]
 8005e6a:	b003      	add	sp, #12
 8005e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e70:	f7ff be30 	b.w	8005ad4 <__malloc_unlock>
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d908      	bls.n	8005e8a <_free_r+0x46>
 8005e78:	6825      	ldr	r5, [r4, #0]
 8005e7a:	1961      	adds	r1, r4, r5
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	bf01      	itttt	eq
 8005e80:	6819      	ldreq	r1, [r3, #0]
 8005e82:	685b      	ldreq	r3, [r3, #4]
 8005e84:	1949      	addeq	r1, r1, r5
 8005e86:	6021      	streq	r1, [r4, #0]
 8005e88:	e7ed      	b.n	8005e66 <_free_r+0x22>
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b10b      	cbz	r3, 8005e94 <_free_r+0x50>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d9fa      	bls.n	8005e8a <_free_r+0x46>
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	1855      	adds	r5, r2, r1
 8005e98:	42a5      	cmp	r5, r4
 8005e9a:	d10b      	bne.n	8005eb4 <_free_r+0x70>
 8005e9c:	6824      	ldr	r4, [r4, #0]
 8005e9e:	4421      	add	r1, r4
 8005ea0:	1854      	adds	r4, r2, r1
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	d1e0      	bne.n	8005e6a <_free_r+0x26>
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	6053      	str	r3, [r2, #4]
 8005eae:	440c      	add	r4, r1
 8005eb0:	6014      	str	r4, [r2, #0]
 8005eb2:	e7da      	b.n	8005e6a <_free_r+0x26>
 8005eb4:	d902      	bls.n	8005ebc <_free_r+0x78>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	6003      	str	r3, [r0, #0]
 8005eba:	e7d6      	b.n	8005e6a <_free_r+0x26>
 8005ebc:	6825      	ldr	r5, [r4, #0]
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf04      	itt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	6063      	str	r3, [r4, #4]
 8005eca:	bf04      	itt	eq
 8005ecc:	1949      	addeq	r1, r1, r5
 8005ece:	6021      	streq	r1, [r4, #0]
 8005ed0:	6054      	str	r4, [r2, #4]
 8005ed2:	e7ca      	b.n	8005e6a <_free_r+0x26>
 8005ed4:	b003      	add	sp, #12
 8005ed6:	bd30      	pop	{r4, r5, pc}
 8005ed8:	20000334 	.word	0x20000334

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
