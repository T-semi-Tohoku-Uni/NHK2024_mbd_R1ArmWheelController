
NHK2024_mbd_R1ArmWheelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008c90  08008c90  00018c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800913c  0800913c  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009144  08009144  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009144  08009144  00019144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800914c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000250  08009398  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08009398  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015db7  00000000  00000000  000202bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cb  00000000  00000000  00036076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f47  00000000  00000000  00039df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027022  00000000  00000000  0003ad37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b5a  00000000  00000000  00061d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001046bf  00000000  00000000  000778b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064cc  00000000  00000000  0017bf74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00182440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008c78 	.word	0x08008c78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08008c78 	.word	0x08008c78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <pid_init>:
    PID *pid,
    double control_cycle,
    double kp, float kd, float ki,
    double setpoint,
    double integral_min, double integral_max
) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f9c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000fa0:	ed87 1b08 	vstr	d1, [r7, #32]
 8000fa4:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8000fa8:	edc7 2a07 	vstr	s5, [r7, #28]
 8000fac:	ed87 3b04 	vstr	d3, [r7, #16]
 8000fb0:	ed87 4b02 	vstr	d4, [r7, #8]
 8000fb4:	ed87 5b00 	vstr	d5, [r7]
    pid -> control_cycle = control_cycle;
 8000fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fbe:	e9c1 2300 	strd	r2, r3, [r1]
    pid -> kp = kp;
 8000fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid -> kd = kd;
 8000fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fce:	f7ff fae3 	bl	8000598 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid -> ki = ki;
 8000fdc:	69f8      	ldr	r0, [r7, #28]
 8000fde:	f7ff fadb 	bl	8000598 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fe8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid -> setpoint = setpoint;
 8000fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral_max = integral_max;
 8000ff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    pid -> integral_min = integral_min;
 8001000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001006:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid -> integral = 0;
 800100a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0;
 8001018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <pid_compute>:

double pid_compute(
    PID *pid,
    double input
) {
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	ed87 0b00 	vstr	d0, [r7]
    double error = pid -> setpoint - input;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001044:	f7ff f948 	bl	80002d8 <__aeabi_dsub>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid -> integral += error * pid -> control_cycle;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001060:	f7ff faf2 	bl	8000648 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f936 	bl	80002dc <__adddf3>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    // アンチワインドアップ
    if (pid -> integral > pid -> integral_max) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001086:	f7ff fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <pid_compute+0x70>
        pid -> integral = pid -> integral_max;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800109c:	e010      	b.n	80010c0 <pid_compute+0x92>
    } else if (pid -> integral < pid -> integral_min) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010aa:	f7ff fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <pid_compute+0x92>
        pid -> integral = pid -> integral_min;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    double derivative = (error - pid->last_error) / pid -> control_cycle;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ca:	f7ff f905 	bl	80002d8 <__aeabi_dsub>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbde 	bl	800089c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // PID出力の計算
    double output = (pid -> kp * error) + (pid -> ki * pid -> integral) + (pid -> kd * derivative);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f2:	f7ff faa9 	bl	8000648 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800110a:	f7ff fa9d 	bl	8000648 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f8e1 	bl	80002dc <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4614      	mov	r4, r2
 8001120:	461d      	mov	r5, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112c:	f7ff fa8c 	bl	8000648 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8d0 	bl	80002dc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // 更新
    pid -> last_error = error;
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800114a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return output;
 800114e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001152:	ec43 2b17 	vmov	d7, r2, r3
}
 8001156:	eeb0 0a47 	vmov.f32	s0, s14
 800115a:	eef0 0a67 	vmov.f32	s1, s15
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bdb0      	pop	{r4, r5, r7, pc}

08001164 <pid_reset_setpoint>:

void pid_reset_setpoint(
    PID *pid,
    double setpoint
) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	ed87 0b00 	vstr	d0, [r7]
    pid -> setpoint = setpoint;
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001176:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid -> integral = 0; // TODO: check if this is necessary
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid -> last_error = 0; // TODO: check if this is necessary
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <int32_t_pid_compute>:

int int32_t_pid_compute(
    PID *pid,
    double input
) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	ed87 0b00 	vstr	d0, [r7]
    return (int)pid_compute(pid, input);
 80011ae:	ed97 0b00 	vldr	d0, [r7]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff3b 	bl	800102e <pid_compute>
 80011b8:	ec53 2b10 	vmov	r2, r3, d0
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcf2 	bl	8000ba8 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <ResetToHomePosition>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* --- アームの原点を取るための関数たち --- */
void ResetToHomePosition() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  // 実行前の初期化
  // PIDの制御を一旦止める
  HAL_TIM_Base_Stop_IT(&htim6);
 80011d6:	484e      	ldr	r0, [pc, #312]	; (8001310 <ResetToHomePosition+0x140>)
 80011d8:	f003 fdf4 	bl	8004dc4 <HAL_TIM_Base_Stop_IT>
  // MotorStateの初期化
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e014      	b.n	800120c <ResetToHomePosition+0x3c>
      arm_motor[arm_index].pos = 0;
 80011e2:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <ResetToHomePosition+0x144>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f103 0108 	add.w	r1, r3, #8
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
      arm_motor[arm_index].vel = 0;
 80011fa:	4a46      	ldr	r2, [pc, #280]	; (8001314 <ResetToHomePosition+0x144>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	dde7      	ble.n	80011e2 <ResetToHomePosition+0x12>
  }
  // それぞれのスイッチの変数を全てfalseにする
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	e007      	b.n	8001228 <ResetToHomePosition+0x58>
      isPushedRestHomePositionButton[arm_index] = false;
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <ResetToHomePosition+0x148>)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
  for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	ddf4      	ble.n	8001218 <ResetToHomePosition+0x48>
  }

  if (!HAL_GPIO_ReadPin(Arm0Switch_GPIO_Port, Arm0Switch_Pin)) {
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f002 fc2e 	bl	8003a94 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d107      	bne.n	800124e <ResetToHomePosition+0x7e>
      InitMotorState(0);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f8e8 	bl	8001414 <InitMotorState>
      setMotorVel();
 8001244:	f000 f93e 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[0] = true;
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <ResetToHomePosition+0x148>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
  }
  if (!HAL_GPIO_ReadPin(Arm1Switch_GPIO_Port, Arm1Switch_Pin)) {
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f002 fc1e 	bl	8003a94 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <ResetToHomePosition+0x9e>
      InitMotorState(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 f8d8 	bl	8001414 <InitMotorState>
      setMotorVel();
 8001264:	f000 f92e 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[1] = true;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <ResetToHomePosition+0x148>)
 800126a:	2201      	movs	r2, #1
 800126c:	705a      	strb	r2, [r3, #1]
  }
  if (!HAL_GPIO_ReadPin(Arm2Switch_GPIO_Port, Arm2Switch_Pin)) {
 800126e:	2102      	movs	r1, #2
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f002 fc0e 	bl	8003a94 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d107      	bne.n	800128e <ResetToHomePosition+0xbe>
      InitMotorState(2);
 800127e:	2002      	movs	r0, #2
 8001280:	f000 f8c8 	bl	8001414 <InitMotorState>
      setMotorVel();
 8001284:	f000 f91e 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[2] = true;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <ResetToHomePosition+0x148>)
 800128a:	2201      	movs	r2, #1
 800128c:	709a      	strb	r2, [r3, #2]
  }
  if (!HAL_GPIO_ReadPin(Arm3Switch_GPIO_Port, Arm3Switch_Pin)) {
 800128e:	2101      	movs	r1, #1
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f002 fbfe 	bl	8003a94 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <ResetToHomePosition+0xde>
      InitMotorState(3);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f8b8 	bl	8001414 <InitMotorState>
      setMotorVel();
 80012a4:	f000 f90e 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[3] = true;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <ResetToHomePosition+0x148>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	70da      	strb	r2, [r3, #3]
  /*
   * アームをリミットスイッチまで動かす
   * スイッチが押されたら停止する
   * タイマーの切り忘れがないように注意
   */
  HAL_TIM_Base_Start_IT(&htim7);
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <ResetToHomePosition+0x14c>)
 80012b0:	f003 fd10 	bl	8004cd4 <HAL_TIM_Base_Start_IT>

  // 全部がスイッチにタッチするまで待つ
  printf("while\r\n");
 80012b4:	481a      	ldr	r0, [pc, #104]	; (8001320 <ResetToHomePosition+0x150>)
 80012b6:	f005 fdf9 	bl	8006eac <puts>
  while (
 80012ba:	bf00      	nop
      !isPushedRestHomePositionButton[0] ||
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <ResetToHomePosition+0x148>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
      !isPushedRestHomePositionButton[2] ||
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f8      	bne.n	80012bc <ResetToHomePosition+0xec>
      !isPushedRestHomePositionButton[1] ||
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <ResetToHomePosition+0x148>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	f083 0301 	eor.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[0] ||
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f1      	bne.n	80012bc <ResetToHomePosition+0xec>
      !isPushedRestHomePositionButton[2] ||
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <ResetToHomePosition+0x148>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[1] ||
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ea      	bne.n	80012bc <ResetToHomePosition+0xec>
      !isPushedRestHomePositionButton[3]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <ResetToHomePosition+0x148>)
 80012e8:	78db      	ldrb	r3, [r3, #3]
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
      !isPushedRestHomePositionButton[2] ||
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e3      	bne.n	80012bc <ResetToHomePosition+0xec>
  ) {
  }

  printf("Complete\r\n");
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <ResetToHomePosition+0x154>)
 80012f6:	f005 fdd9 	bl	8006eac <puts>

  // PIDの制御を再開
  // 原点初期化用のタイマーを停止して、PIDを再開する
  HAL_TIM_Base_Stop_IT(&htim7);
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <ResetToHomePosition+0x14c>)
 80012fc:	f003 fd62 	bl	8004dc4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <ResetToHomePosition+0x140>)
 8001302:	f003 fce7 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200003d8 	.word	0x200003d8
 8001314:	20000558 	.word	0x20000558
 8001318:	200005ac 	.word	0x200005ac
 800131c:	20000424 	.word	0x20000424
 8001320:	08008c90 	.word	0x08008c90
 8001324:	08008c98 	.word	0x08008c98

08001328 <HAL_GPIO_EXTI_Callback>:

/*
 * 原点調節用のスイッチの割り込み関数
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Arm0Switch_Pin && !isHolPushedFlagForPreventChattering[0])
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	2b80      	cmp	r3, #128	; 0x80
 8001336:	d114      	bne.n	8001362 <HAL_GPIO_EXTI_Callback+0x3a>
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f083 0301 	eor.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_EXTI_Callback+0x3a>
  {
      printf("Arm 0 initialized\r\n");
 8001346:	482e      	ldr	r0, [pc, #184]	; (8001400 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001348:	f005 fdb0 	bl	8006eac <puts>
      InitMotorState(0); // motorStateを再初期化する
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f861 	bl	8001414 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001352:	f000 f8b7 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[0] = true;
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
      isHolPushedFlagForPreventChattering[0] = true; // チャタリング防止用
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
  }

  if (GPIO_Pin == Arm1Switch_Pin && !isHolPushedFlagForPreventChattering[1])
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b40      	cmp	r3, #64	; 0x40
 8001366:	d114      	bne.n	8001392 <HAL_GPIO_EXTI_Callback+0x6a>
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800136a:	785b      	ldrb	r3, [r3, #1]
 800136c:	f083 0301 	eor.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_EXTI_Callback+0x6a>
  {
//      printf("[Initialize Position]: ARM 1\r\n");
      printf("Arm 1 initialized\r\n");
 8001376:	4824      	ldr	r0, [pc, #144]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001378:	f005 fd98 	bl	8006eac <puts>
      InitMotorState(1); // motorStateを再初期化する
 800137c:	2001      	movs	r0, #1
 800137e:	f000 f849 	bl	8001414 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 8001382:	f000 f89f 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[1] = true;
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001388:	2201      	movs	r2, #1
 800138a:	705a      	strb	r2, [r3, #1]
      isHolPushedFlagForPreventChattering[1] = true; // チャタリング防止用
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800138e:	2201      	movs	r2, #1
 8001390:	705a      	strb	r2, [r3, #1]
  }

  if (GPIO_Pin == Arm2Switch_Pin && !isHolPushedFlagForPreventChattering[2])
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d114      	bne.n	80013c2 <HAL_GPIO_EXTI_Callback+0x9a>
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_EXTI_Callback+0x9a>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      printf("Arm 2 initialized\r\n");
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <HAL_GPIO_EXTI_Callback+0xe4>)
 80013a8:	f005 fd80 	bl	8006eac <puts>
      InitMotorState(2); // motorStateを再初期化する
 80013ac:	2002      	movs	r0, #2
 80013ae:	f000 f831 	bl	8001414 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 80013b2:	f000 f887 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[2] = true;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	709a      	strb	r2, [r3, #2]
      isHolPushedFlagForPreventChattering[2] = true; // チャタリング防止用
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	709a      	strb	r2, [r3, #2]
  }

  if (GPIO_Pin == Arm3Switch_Pin && !isHolPushedFlagForPreventChattering[3])
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d114      	bne.n	80013f2 <HAL_GPIO_EXTI_Callback+0xca>
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_EXTI_Callback+0xca>
  {
//      printf("[Initialize Position]: ARM 4\r\n");
      printf("Arm 3 initialized\r\n");
 80013d6:	480e      	ldr	r0, [pc, #56]	; (8001410 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013d8:	f005 fd68 	bl	8006eac <puts>
      InitMotorState(3); // motorStateを再初期化する
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f819 	bl	8001414 <InitMotorState>
      setMotorVel(); // 再初期化したモーターの速度を0にする（InitMotorStateで変更したvelがCANに流されて反映される）
 80013e2:	f000 f86f 	bl	80014c4 <setMotorVel>
      isPushedRestHomePositionButton[3] = true;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	70da      	strb	r2, [r3, #3]
      isHolPushedFlagForPreventChattering[3] = true; // チャタリング防止用
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd4>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	70da      	strb	r2, [r3, #3]
  }
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000598 	.word	0x20000598
 8001400:	08008ca4 	.word	0x08008ca4
 8001404:	200005ac 	.word	0x200005ac
 8001408:	08008cb8 	.word	0x08008cb8
 800140c:	08008ccc 	.word	0x08008ccc
 8001410:	08008ce0 	.word	0x08008ce0

08001414 <InitMotorState>:

/*
 * CANIDがmotorIDのモータのarm_positions(アームの位置)情報を初期化する
 */
void InitMotorState(uint8_t motorID) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  arm_motor[motorID].vel = 0;
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <InitMotorState+0x3c>)
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
  arm_motor[motorID].pos = ArmInitializeSwitchPosition[motorID];
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	79f9      	ldrb	r1, [r7, #7]
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <InitMotorState+0x40>)
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <InitMotorState+0x3c>)
 800143a:	0109      	lsls	r1, r1, #4
 800143c:	4401      	add	r1, r0
 800143e:	3108      	adds	r1, #8
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000558 	.word	0x20000558
 8001454:	20000000 	.word	0x20000000

08001458 <MoveToOriginAndHold>:

/*
 * 原点が押されるまでモーターを原点方向に回し続ける関数.
 * 原点到着後はタイマーが止まるまでその場に居続ける
 */
void MoveToOriginAndHold(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
//  int16_t vel_settings[4] = {0, 0, 0, 0};
//
  if (!isPushedRestHomePositionButton[0]) {
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MoveToOriginAndHold+0x64>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f083 0301 	eor.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <MoveToOriginAndHold+0x1a>
        arm_motor[0].vel = -500;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MoveToOriginAndHold+0x68>)
 800146c:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8001470:	801a      	strh	r2, [r3, #0]
  }
  if (!isPushedRestHomePositionButton[1]) {
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MoveToOriginAndHold+0x64>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <MoveToOriginAndHold+0x30>
      arm_motor[1].vel =  500;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MoveToOriginAndHold+0x68>)
 8001482:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001486:	821a      	strh	r2, [r3, #16]
  }
  if (!isPushedRestHomePositionButton[2]) {
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MoveToOriginAndHold+0x64>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <MoveToOriginAndHold+0x46>
      arm_motor[2].vel = -500;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MoveToOriginAndHold+0x68>)
 8001498:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 800149c:	841a      	strh	r2, [r3, #32]
  }
  if (!isPushedRestHomePositionButton[3]) {
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MoveToOriginAndHold+0x64>)
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <MoveToOriginAndHold+0x5c>
      arm_motor[3].vel = 500;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <MoveToOriginAndHold+0x68>)
 80014ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014b2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  setMotorVel();
 80014b4:	f000 f806 	bl	80014c4 <setMotorVel>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200005ac 	.word	0x200005ac
 80014c0:	20000558 	.word	0x20000558

080014c4 <setMotorVel>:

void setMotorVel() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
    uint8_t motor_vel_value[8];

    // update controller output
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e01f      	b.n	8001510 <setMotorVel+0x4c>
        motor_vel_value[arm_index*2] = arm_motor[arm_index].vel >> 8;
 80014d0:	4a1a      	ldr	r2, [pc, #104]	; (800153c <setMotorVel+0x78>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	121b      	asrs	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	3310      	adds	r3, #16
 80014e8:	443b      	add	r3, r7
 80014ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
        motor_vel_value[arm_index*2+1] = arm_motor[arm_index].vel & 0xFF;
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <setMotorVel+0x78>)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	3301      	adds	r3, #1
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	3310      	adds	r3, #16
 8001504:	443b      	add	r3, r7
 8001506:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b03      	cmp	r3, #3
 8001514:	dddc      	ble.n	80014d0 <setMotorVel+0xc>
    }

    FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <setMotorVel+0x7c>)
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	601a      	str	r2, [r3, #0]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, motor_vel_value) != HAL_OK) {
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	461a      	mov	r2, r3
 8001522:	4907      	ldr	r1, [pc, #28]	; (8001540 <setMotorVel+0x7c>)
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <setMotorVel+0x80>)
 8001526:	f001 fc94 	bl	8002e52 <HAL_FDCAN_AddMessageToTxFifoQ>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <setMotorVel+0x70>
        Error_Handler();
 8001530:	f000 fdf0 	bl	8002114 <Error_Handler>
    }
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000558 	.word	0x20000558
 8001540:	20000508 	.word	0x20000508
 8001544:	200002d0 	.word	0x200002d0

08001548 <HAL_TIM_PeriodElapsedCallback>:

// Set timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

	// For arm position adc
	if (htim == &htim6) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x14>
	    // TODO: enable this func to enable PID
			ARM_Position_PID_Cycle();
 8001558:	f000 fa54 	bl	8001a04 <ARM_Position_PID_Cycle>
	}
	// アームの原点調節をするときに使用する. それ以外はdisable
	if (htim == &htim7) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d110      	bne.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x3e>
	    homePositionResetTimer += 1;
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	1c54      	adds	r4, r2, #1
 800156c:	f143 0500 	adc.w	r5, r3, #0
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001572:	e9c3 4500 	strd	r4, r5, [r3]
	    printf("%d\r\n", homePositionResetTimer);
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	4820      	ldr	r0, [pc, #128]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800157e:	f005 fc2f 	bl	8006de0 <iprintf>
	    MoveToOriginAndHold();
 8001582:	f7ff ff69 	bl	8001458 <MoveToOriginAndHold>
	}

	// チャタリング防止用. 100KHzで回している。10msなったら解除
	if (htim == &htim16) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12d      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0xa2>
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e027      	b.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x9c>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d11a      	bne.n	80015dc <HAL_TIM_PeriodElapsedCallback+0x94>
	        holdTimer[arm_index]++;
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        // 10ms立ったら再度初期化
	        if (holdTimer[arm_index] == 1000) {
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c4:	d10b      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x96>
	            holdTimer[arm_index] = 0;
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2100      	movs	r1, #0
 80015cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	            isHolPushedFlagForPreventChattering[arm_index] = false;
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e000      	b.n	80015de <HAL_TIM_PeriodElapsedCallback+0x96>
	        if (!isHolPushedFlagForPreventChattering[arm_index]) continue;
 80015dc:	bf00      	nop
	    for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	ddd4      	ble.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x4c>
	        }
//	        printf("%d\r\n", isHolPushedFlagForPreventChattering[arm_index]);
	    }
	}
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003d8 	.word	0x200003d8
 80015f8:	20000424 	.word	0x20000424
 80015fc:	200005b0 	.word	0x200005b0
 8001600:	08008cf4 	.word	0x08008cf4
 8001604:	20000470 	.word	0x20000470
 8001608:	20000598 	.word	0x20000598
 800160c:	2000059c 	.word	0x2000059c

08001610 <HAL_FDCAN_RxFifo0Callback>:

// Set Interrupt Handler for FDCAN1 (raspberrypi, other stm ..)
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint8_t FDCAN1_RxData[2] = {0};
 800161a:	2300      	movs	r3, #0
 800161c:	813b      	strh	r3, [r7, #8]

  // Error Handling
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 809d 	beq.w	8001764 <HAL_FDCAN_RxFifo0Callback+0x154>
  if (hfdcan != &hfdcan1) return;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800162e:	4293      	cmp	r3, r2
 8001630:	f040 809a 	bne.w	8001768 <HAL_FDCAN_RxFifo0Callback+0x158>

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN1_RxHeader, FDCAN1_RxData) != HAL_OK) {
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4a4f      	ldr	r2, [pc, #316]	; (8001778 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f001 fc4d 	bl	8002edc <HAL_FDCAN_GetRxMessage>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_FDCAN_RxFifo0Callback+0x48>
      printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164c:	4619      	mov	r1, r3
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <HAL_FDCAN_RxFifo0Callback+0x16c>)
 8001650:	f005 fbc6 	bl	8006de0 <iprintf>
      Error_Handler();
 8001654:	f000 fd5e 	bl	8002114 <Error_Handler>
  }

  if (FDCAN1_RxHeader.Identifier == CANID_SEEDLING_SET_ARM_POSITION) {
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001660:	f040 8085 	bne.w	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
      // プログラムを有効化する
      isProgramRun = true;
 8001664:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_FDCAN_RxFifo0Callback+0x170>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
      switch(FDCAN1_RxData[0]) {
 800166a:	7a3b      	ldrb	r3, [r7, #8]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d87d      	bhi.n	800176c <HAL_FDCAN_RxFifo0Callback+0x15c>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	08001689 	.word	0x08001689
 800167c:	080016cf 	.word	0x080016cf
 8001680:	08001717 	.word	0x08001717
 8001684:	0800175f 	.word	0x0800175f
        case 0:
          printf("PICKUP\r\n");
 8001688:	483e      	ldr	r0, [pc, #248]	; (8001784 <HAL_FDCAN_RxFifo0Callback+0x174>)
 800168a:	f005 fc0f 	bl	8006eac <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e018      	b.n	80016c6 <HAL_FDCAN_RxFifo0Callback+0xb6>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[0][arm_index]);
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_FDCAN_RxFifo0Callback+0x178>)
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	18cc      	adds	r4, r1, r3
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <HAL_FDCAN_RxFifo0Callback+0x17c>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff61 	bl	8000574 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b10 	vmov	d0, r2, r3
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff fd52 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	dde3      	ble.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x84>
          }
          break;
 80016cc:	e04f      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
        case 1:
          printf("PUT OUTSIDE\r\n");
 80016ce:	4830      	ldr	r0, [pc, #192]	; (8001790 <HAL_FDCAN_RxFifo0Callback+0x180>)
 80016d0:	f005 fbec 	bl	8006eac <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	e019      	b.n	800170e <HAL_FDCAN_RxFifo0Callback+0xfe>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[1][arm_index]);
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_FDCAN_RxFifo0Callback+0x178>)
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	18cc      	adds	r4, r1, r3
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_FDCAN_RxFifo0Callback+0x17c>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	3304      	adds	r3, #4
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff3d 	bl	8000574 <__aeabi_i2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ec43 2b10 	vmov	d0, r2, r3
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fd2e 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	3301      	adds	r3, #1
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b03      	cmp	r3, #3
 8001712:	dde2      	ble.n	80016da <HAL_FDCAN_RxFifo0Callback+0xca>
          }
          break;
 8001714:	e02b      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
        case 2:
          printf("PUT INSIDE\r\n");
 8001716:	481f      	ldr	r0, [pc, #124]	; (8001794 <HAL_FDCAN_RxFifo0Callback+0x184>)
 8001718:	f005 fbc8 	bl	8006eac <puts>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e019      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x146>
              pid_reset_setpoint(&PID_For_ARM_POS[arm_index], setpoint[2][arm_index]);
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_FDCAN_RxFifo0Callback+0x178>)
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	18cc      	adds	r4, r1, r3
 8001732:	4a16      	ldr	r2, [pc, #88]	; (800178c <HAL_FDCAN_RxFifo0Callback+0x17c>)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3308      	adds	r3, #8
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff19 	bl	8000574 <__aeabi_i2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	ec43 2b10 	vmov	d0, r2, r3
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff fd0a 	bl	8001164 <pid_reset_setpoint>
          for(int arm_index=0; arm_index < 4; arm_index++ ) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b03      	cmp	r3, #3
 800175a:	dde2      	ble.n	8001722 <HAL_FDCAN_RxFifo0Callback+0x112>
          }
          break;
 800175c:	e007      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175e:	b672      	cpsid	i
}
 8001760:	bf00      	nop
        case 3:
          // TODO: disable FDCAN3 and reset program
          __disable_irq();
          break;
 8001762:	e004      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET) return;
 8001764:	bf00      	nop
 8001766:	e002      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
  if (hfdcan != &hfdcan1) return;
 8001768:	bf00      	nop
 800176a:	e000      	b.n	800176e <HAL_FDCAN_RxFifo0Callback+0x15e>
        default:
          break; // TODO : send RuntimeError to raspbeerypi
 800176c:	bf00      	nop
      }
  }
}
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	2000026c 	.word	0x2000026c
 8001778:	200004e0 	.word	0x200004e0
 800177c:	08008cfc 	.word	0x08008cfc
 8001780:	200005b8 	.word	0x200005b8
 8001784:	08008d10 	.word	0x08008d10
 8001788:	200005bc 	.word	0x200005bc
 800178c:	20000048 	.word	0x20000048
 8001790:	08008d18 	.word	0x08008d18
 8001794:	08008d28 	.word	0x08008d28

08001798 <rpm_to_signed>:

float rpm_to_signed(uint16_t angular_velocity) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  if (angular_velocity <= UINT16_MAX/2) {
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db05      	blt.n	80017b6 <rpm_to_signed+0x1e>
      return (float)(angular_velocity);
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	e007      	b.n	80017c6 <rpm_to_signed+0x2e>
  } else {
      return (float)(angular_velocity - UINT16_MAX);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80017bc:	3bff      	subs	r3, #255	; 0xff
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	0000      	movs	r0, r0
	...

080017d8 <HAL_FDCAN_RxFifo1Callback>:
int to_mechanical_angle(uint16_t angle) {
  return (int)((angle / 8191.0) * 360);
}

// Set Interrupt Handler For FDCAN3 (motor at wheel and arm)
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	uint8_t FDCAN3_RxData[8];
	float rpm;
	uint8_t motorID;

	// Error Handling
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d074      	beq.n	80018d6 <HAL_FDCAN_RxFifo1Callback+0xfe>
	if (hfdcan != &hfdcan3) return;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d172      	bne.n	80018da <HAL_FDCAN_RxFifo1Callback+0x102>

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &FDCAN3_RxHeader, FDCAN3_RxData) != HAL_OK) {
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4a40      	ldr	r2, [pc, #256]	; (80018fc <HAL_FDCAN_RxFifo1Callback+0x124>)
 80017fa:	2141      	movs	r1, #65	; 0x41
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f001 fb6d 	bl	8002edc <HAL_FDCAN_GetRxMessage>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_FDCAN_RxFifo1Callback+0x40>
		printf("FDCAN3 error %" PRIu32 "\r\n", hfdcan->ErrorCode); // TODO : send this error to raspberrypi ON FDCAN1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	4619      	mov	r1, r3
 800180e:	483c      	ldr	r0, [pc, #240]	; (8001900 <HAL_FDCAN_RxFifo1Callback+0x128>)
 8001810:	f005 fae6 	bl	8006de0 <iprintf>
		Error_Handler();
 8001814:	f000 fc7e 	bl	8002114 <Error_Handler>
	}

	// Reload IWDG
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8001818:	483a      	ldr	r0, [pc, #232]	; (8001904 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 800181a:	f002 f9d2 	bl	8003bc2 <HAL_IWDG_Refresh>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_FDCAN_RxFifo1Callback+0x50>
  {
    Error_Handler();
 8001824:	f000 fc76 	bl	8002114 <Error_Handler>
  }

//	printf("%d\r\n", motorID);
	motorID = FDCAN3_RxHeader.Identifier - DJI_CANID_TX0 - 1;
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_FDCAN_RxFifo1Callback+0x124>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	77fb      	strb	r3, [r7, #31]
	// uint16_t 0 ~ 65535
	rpm = rpm_to_signed(FDCAN3_RxData[2] << 8 | FDCAN3_RxData[3]);
 8001832:	7abb      	ldrb	r3, [r7, #10]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21b      	sxth	r3, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffa8 	bl	8001798 <rpm_to_signed>
 8001848:	ed87 0a06 	vstr	s0, [r7, #24]
	double motor_vel = (double)(rpm / 60 / REDUCTIONRATIO * GEARNUM * RACKPITCH);
 800184c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001850:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001908 <HAL_FDCAN_RxFifo1Callback+0x130>
 8001854:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001858:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800190c <HAL_FDCAN_RxFifo1Callback+0x134>
 800185c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001860:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001910 <HAL_FDCAN_RxFifo1Callback+0x138>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	ee17 0a90 	vmov	r0, s15
 800186c:	f7fe fe94 	bl	8000598 <__aeabi_f2d>
 8001870:	a31d      	add	r3, pc, #116	; (adr r3, 80018e8 <HAL_FDCAN_RxFifo1Callback+0x110>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fee7 	bl	8000648 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	arm_motor[motorID].vel = motor_vel;
 8001882:	7ffc      	ldrb	r4, [r7, #31]
 8001884:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001888:	f7ff f98e 	bl	8000ba8 <__aeabi_d2iz>
 800188c:	4603      	mov	r3, r0
 800188e:	b219      	sxth	r1, r3
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 8001892:	0123      	lsls	r3, r4, #4
 8001894:	4413      	add	r3, r2
 8001896:	460a      	mov	r2, r1
 8001898:	801a      	strh	r2, [r3, #0]
	arm_motor[motorID].pos += (motor_vel * 0.001);
 800189a:	7ffb      	ldrb	r3, [r7, #31]
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	3308      	adds	r3, #8
 80018a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018a8:	a311      	add	r3, pc, #68	; (adr r3, 80018f0 <HAL_FDCAN_RxFifo1Callback+0x118>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b2:	f7fe fec9 	bl	8000648 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	7ffe      	ldrb	r6, [r7, #31]
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fd0c 	bl	80002dc <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 80018ca:	0131      	lsls	r1, r6, #4
 80018cc:	4401      	add	r1, r0
 80018ce:	3108      	adds	r1, #8
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]
 80018d4:	e002      	b.n	80018dc <HAL_FDCAN_RxFifo1Callback+0x104>
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) == RESET) return;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <HAL_FDCAN_RxFifo1Callback+0x104>
	if (hfdcan != &hfdcan3) return;
 80018da:	bf00      	nop
	// TODO : Add wheel controller
//	switch(FDCAN3_RxHeader.Identifier) {
//		default:
//			printf("CAN ID %" PRIu32 "is not cached from FIFO1 callback\r\n", FDCAN3_RxHeader.Identifier);
//	}
}
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	53c8d4f1 	.word	0x53c8d4f1
 80018ec:	400921fb 	.word	0x400921fb
 80018f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80018f4:	3f50624d 	.word	0x3f50624d
 80018f8:	200002d0 	.word	0x200002d0
 80018fc:	2000052c 	.word	0x2000052c
 8001900:	08008cfc 	.word	0x08008cfc
 8001904:	20000334 	.word	0x20000334
 8001908:	42700000 	.word	0x42700000
 800190c:	42100000 	.word	0x42100000
 8001910:	42000000 	.word	0x42000000
 8001914:	20000558 	.word	0x20000558

08001918 <ARM_Position_PID_Init>:


/* For ARM PID */
static void ARM_Position_PID_Init(void) {
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	ed2d 8b02 	vpush	{d8}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0

	PID_For_ARM_POS = (struct PID *)malloc(4 * sizeof(struct PID));
 8001922:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001926:	f004 ff55 	bl	80067d4 <malloc>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <ARM_Position_PID_Init+0xd8>)
 8001930:	601a      	str	r2, [r3, #0]
	if (PID_For_ARM_POS == NULL) {
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <ARM_Position_PID_Init+0xd8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <ARM_Position_PID_Init+0x26>
			Error_Handler();
 800193a:	f000 fbeb 	bl	8002114 <Error_Handler>
	}

	// initialize element
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	e03c      	b.n	80019be <ARM_Position_PID_Init+0xa6>
			 * ki : 0
			 * setpoint : 1500
			 * -500 : integral_min
			 * 500: integral_max
			 */
			pid_init(&PID_For_ARM_POS[arm_index], 1e-3, P_GAIN_FOR_ARM_POS_SEQ[arm_index], D_GAIN_FOR_ARM_POS, I_GAIN_FOR_ARM_POS, setpoint[0][arm_index], -500, 500);
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <ARM_Position_PID_Init+0xd8>)
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	18cc      	adds	r4, r1, r3
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <ARM_Position_PID_Init+0xdc>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	ed93 8b00 	vldr	d8, [r3]
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <ARM_Position_PID_Init+0xe0>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f945 	bl	8000bf8 <__aeabi_d2f>
 800196e:	4605      	mov	r5, r0
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <ARM_Position_PID_Init+0xe4>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f93d 	bl	8000bf8 <__aeabi_d2f>
 800197e:	4606      	mov	r6, r0
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <ARM_Position_PID_Init+0xe8>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdf3 	bl	8000574 <__aeabi_i2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80019d8 <ARM_Position_PID_Init+0xc0>
 8001996:	ed9f 4b12 	vldr	d4, [pc, #72]	; 80019e0 <ARM_Position_PID_Init+0xc8>
 800199a:	ec43 2b13 	vmov	d3, r2, r3
 800199e:	ee02 6a90 	vmov	s5, r6
 80019a2:	ee02 5a10 	vmov	s4, r5
 80019a6:	eeb0 1a48 	vmov.f32	s2, s16
 80019aa:	eef0 1a68 	vmov.f32	s3, s17
 80019ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80019e8 <ARM_Position_PID_Init+0xd0>
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff faee 	bl	8000f94 <pid_init>
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	ddbf      	ble.n	8001944 <ARM_Position_PID_Init+0x2c>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	ecbd 8b02 	vpop	{d8}
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	f3af 8000 	nop.w
 80019d8:	00000000 	.word	0x00000000
 80019dc:	407f4000 	.word	0x407f4000
 80019e0:	00000000 	.word	0x00000000
 80019e4:	c07f4000 	.word	0xc07f4000
 80019e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ec:	3f50624d 	.word	0x3f50624d
 80019f0:	200005bc 	.word	0x200005bc
 80019f4:	20000020 	.word	0x20000020
 80019f8:	20000040 	.word	0x20000040
 80019fc:	200005c0 	.word	0x200005c0
 8001a00:	20000048 	.word	0x20000048

08001a04 <ARM_Position_PID_Cycle>:

static void ARM_Position_PID_Cycle(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
	// Automatically set adc value to DMA, so don't need to read ADC
	if (PID_For_ARM_POS == NULL) {
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <ARM_Position_PID_Cycle+0x70>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <ARM_Position_PID_Cycle+0x12>
			Error_Handler();
 8001a12:	f000 fb7f 	bl	8002114 <Error_Handler>
//	    arm_positions[1],
//	    arm_positions[2]
//	};

	// update controller output
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	e021      	b.n	8001a60 <ARM_Position_PID_Cycle+0x5c>
	    int32_t pid_val = int32_t_pid_compute(&PID_For_ARM_POS[arm_index], arm_motor[arm_index].pos);
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <ARM_Position_PID_Cycle+0x70>)
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	18ca      	adds	r2, r1, r3
 8001a2c:	4912      	ldr	r1, [pc, #72]	; (8001a78 <ARM_Position_PID_Cycle+0x74>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	3308      	adds	r3, #8
 8001a36:	ed93 7b00 	vldr	d7, [r3]
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff fbad 	bl	80011a2 <int32_t_pid_compute>
 8001a48:	6038      	str	r0, [r7, #0]
			arm_motor[arm_index].vel = pid_val;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b219      	sxth	r1, r3
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <ARM_Position_PID_Cycle+0x74>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	460a      	mov	r2, r1
 8001a58:	801a      	strh	r2, [r3, #0]
	for (int arm_index = 0; arm_index < 4; arm_index++ ) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	ddda      	ble.n	8001a1c <ARM_Position_PID_Cycle+0x18>
//			pid_controller_value[arm_index*2] = pid_for_arm_output >> 8;
//			pid_controller_value[arm_index*2+1] = pid_for_arm_output & 0xFF;
	}
	setMotorVel();
 8001a66:	f7ff fd2d 	bl	80014c4 <setMotorVel>
////	 write new controller value with can
//	FDCAN3_TxHeader.Identifier = DJI_CANID_TX0;
//	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &FDCAN3_TxHeader, pid_controller_value) != HAL_OK) {
//	    Error_Handler();
//	}
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200005bc 	.word	0x200005bc
 8001a78:	20000558 	.word	0x20000558

08001a7c <_write>:

int _write(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <_write+0x24>)
 8001a92:	f003 fd1d 	bl	80054d0 <HAL_UART_Transmit>
    return len;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000344 	.word	0x20000344

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f000 fe45 	bl	8002736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f834 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f000 fab2 	bl	8002018 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001ab4:	f000 f9d4 	bl	8001e60 <MX_LPUART1_UART_Init>
  MX_FDCAN3_Init();
 8001ab8:	f000 f91c 	bl	8001cf4 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 8001abc:	f000 fa1a 	bl	8001ef4 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8001ac0:	f000 f878 	bl	8001bb4 <MX_FDCAN1_Init>
  MX_TIM7_Init();
 8001ac4:	f000 fa4c 	bl	8001f60 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001ac8:	f000 fa80 	bl	8001fcc <MX_TIM16_Init>
  MX_IWDG_Init();
 8001acc:	f000 f9ac 	bl	8001e28 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  printf("arm position pid init\r\n");

  // Initialize PID library
  HAL_TIM_Base_Start_IT(&htim16);
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <main+0x60>)
 8001ad2:	f003 f8ff 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
  ARM_Position_PID_Init();
 8001ad6:	f7ff ff1f 	bl	8001918 <ARM_Position_PID_Init>

  printf("iwdg restart\r\n");
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <main+0x64>)
 8001adc:	f005 f9e6 	bl	8006eac <puts>
  while(!isProgramRun) {
 8001ae0:	bf00      	nop
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <main+0x68>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	f083 0301 	eor.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f8      	bne.n	8001ae2 <main+0x3e>
  }

  // Start ADC and save at DMA
//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&arm_positions, 4);
  printf("start rest to home position\r\n");
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <main+0x6c>)
 8001af2:	f005 f9db 	bl	8006eac <puts>
  ResetToHomePosition();
 8001af6:	f7ff fb6b 	bl	80011d0 <ResetToHomePosition>
	printf("Complete Initialize\r\n");
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <main+0x70>)
 8001afc:	f005 f9d6 	bl	8006eac <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <main+0x5c>
 8001b02:	bf00      	nop
 8001b04:	20000470 	.word	0x20000470
 8001b08:	08008d34 	.word	0x08008d34
 8001b0c:	200005b8 	.word	0x200005b8
 8001b10:	08008d44 	.word	0x08008d44
 8001b14:	08008d64 	.word	0x08008d64

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	2238      	movs	r2, #56	; 0x38
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 f9c8 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b3e:	f002 f851 	bl	8003be4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b42:	230a      	movs	r3, #10
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b4c:	2340      	movs	r3, #64	; 0x40
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b54:	2302      	movs	r3, #2
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b60:	230a      	movs	r3, #10
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f8d9 	bl	8003d2c <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001b80:	f000 fac8 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fbd7 	bl	8004350 <HAL_RCC_ClockConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba8:	f000 fab4 	bl	8002114 <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3750      	adds	r7, #80	; 0x50
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <MX_FDCAN1_Init+0x138>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001bc0:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bc8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bcc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001be0:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001bec:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c28:	482f      	ldr	r0, [pc, #188]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c2a:	f000 ff05 	bl	8002a38 <HAL_FDCAN_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8001c34:	f000 fa6e 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN1_TxHeader.Identifier = 0x000;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  FDCAN1_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  FDCAN1_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  FDCAN1_TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]
  FDCAN1_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  FDCAN1_TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c5c:	615a      	str	r2, [r3, #20]
  FDCAN1_TxHeader.FDFormat = FDCAN_FD_CAN;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c64:	619a      	str	r2, [r3, #24]
  FDCAN1_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  FDCAN1_TxHeader.MessageMarker = 0;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <MX_FDCAN1_Init+0x13c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef FDCAN1_sFilterConfig;
  FDCAN1_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  FDCAN1_sFilterConfig.FilterIndex = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  FDCAN1_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  FDCAN1_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
  FDCAN1_sFilterConfig.FilterID1 = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  FDCAN1_sFilterConfig.FilterID2 = 0x7ff;
 8001c86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c8a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN1_sFilterConfig) != HAL_OK) {
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001c92:	f001 f82b 	bl	8002cec <HAL_FDCAN_ConfigFilter>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001c9c:	f000 fa3a 	bl	8002114 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) !=
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	2102      	movs	r1, #2
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001cac:	f001 f878 	bl	8002da0 <HAL_FDCAN_ConfigGlobalFilter>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_FDCAN1_Init+0x106>
      HAL_OK) {
      Error_Handler();
 8001cb6:	f000 fa2d 	bl	8002114 <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001cbc:	f001 f8a1 	bl	8002e02 <HAL_FDCAN_Start>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_FDCAN1_Init+0x116>
      Error_Handler();
 8001cc6:	f000 fa25 	bl	8002114 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <MX_FDCAN1_Init+0x134>)
 8001cd0:	f001 fa0c 	bl	80030ec <HAL_FDCAN_ActivateNotification>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_FDCAN1_Init+0x12a>
      Error_Handler();
 8001cda:	f000 fa1b 	bl	8002114 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000026c 	.word	0x2000026c
 8001cec:	40006400 	.word	0x40006400
 8001cf0:	200004bc 	.word	0x200004bc

08001cf4 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001cfa:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001cfc:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <MX_FDCAN3_Init+0x12c>)
 8001cfe:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d06:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d26:	2204      	movs	r2, #4
 8001d28:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d32:	220f      	movs	r2, #15
 8001d34:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d38:	2204      	movs	r2, #4
 8001d3a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d3c:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001d66:	482d      	ldr	r0, [pc, #180]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001d68:	f000 fe66 	bl	8002a38 <HAL_FDCAN_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8001d72:	f000 f9cf 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  // Set TXHeader
	FDCAN3_TxHeader.IdType = FDCAN_STANDARD_ID;
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
	FDCAN3_TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
	FDCAN3_TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d84:	2208      	movs	r2, #8
 8001d86:	60da      	str	r2, [r3, #12]
	FDCAN3_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
	FDCAN3_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
	FDCAN3_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
	FDCAN3_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
	FDCAN3_TxHeader.MessageMarker = 0;
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <MX_FDCAN3_Init+0x130>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]

	// Set FDCAN3 filter config
	FDCAN_FilterTypeDef FDCAN3_sFilterConfig;
	FDCAN3_sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
	FDCAN3_sFilterConfig.FilterIndex = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
	FDCAN3_sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
	FDCAN3_sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001db2:	2302      	movs	r3, #2
 8001db4:	60fb      	str	r3, [r7, #12]
	FDCAN3_sFilterConfig.FilterID1 = 0x000;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
	FDCAN3_sFilterConfig.FilterID2 = 0x7ff;
 8001dba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001dbe:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN3_sFilterConfig) != HAL_OK) {
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001dc6:	f000 ff91 	bl	8002cec <HAL_FDCAN_ConfigFilter>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_FDCAN3_Init+0xe0>
		Error_Handler();
 8001dd0:	f000 f9a0 	bl	8002114 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2202      	movs	r2, #2
 8001ddc:	2102      	movs	r1, #2
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001de0:	f000 ffde 	bl	8002da0 <HAL_FDCAN_ConfigGlobalFilter>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_FDCAN3_Init+0xfa>
		Error_Handler();
 8001dea:	f000 f993 	bl	8002114 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001df0:	f001 f807 	bl	8002e02 <HAL_FDCAN_Start>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_FDCAN3_Init+0x10a>
		Error_Handler();
 8001dfa:	f000 f98b 	bl	8002114 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2108      	movs	r1, #8
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_FDCAN3_Init+0x128>)
 8001e04:	f001 f972 	bl	80030ec <HAL_FDCAN_ActivateNotification>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_FDCAN3_Init+0x11e>
		Error_Handler();
 8001e0e:	f000 f981 	bl	8002114 <Error_Handler>
	}
  /* USER CODE END FDCAN3_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200002d0 	.word	0x200002d0
 8001e20:	40006c00 	.word	0x40006c00
 8001e24:	20000508 	.word	0x20000508

08001e28 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_IWDG_Init+0x30>)
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <MX_IWDG_Init+0x34>)
 8001e30:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_IWDG_Init+0x30>)
 8001e34:	2203      	movs	r2, #3
 8001e36:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 99;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_IWDG_Init+0x30>)
 8001e3a:	2263      	movs	r2, #99	; 0x63
 8001e3c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 99;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_IWDG_Init+0x30>)
 8001e40:	2263      	movs	r2, #99	; 0x63
 8001e42:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_IWDG_Init+0x30>)
 8001e46:	f001 fe6d 	bl	8003b24 <HAL_IWDG_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001e50:	f000 f960 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000334 	.word	0x20000334
 8001e5c:	40003000 	.word	0x40003000

08001e60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_LPUART1_UART_Init+0x8c>)
 8001e68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <MX_LPUART1_UART_Init+0x90>)
 8001e6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e84:	220c      	movs	r2, #12
 8001e86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ea0:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001ea2:	f003 fac5 	bl	8005430 <HAL_UART_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001eac:	f000 f932 	bl	8002114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001eb4:	f004 f8ee 	bl	8006094 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001ebe:	f000 f929 	bl	8002114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4808      	ldr	r0, [pc, #32]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001ec6:	f004 f923 	bl	8006110 <HAL_UARTEx_SetRxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001ed0:	f000 f920 	bl	8002114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_LPUART1_UART_Init+0x88>)
 8001ed6:	f004 f8a4 	bl	8006022 <HAL_UARTEx_DisableFifoMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001ee0:	f000 f918 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000344 	.word	0x20000344
 8001eec:	40008000 	.word	0x40008000
 8001ef0:	001e8480 	.word	0x001e8480

08001ef4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <MX_TIM6_Init+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f0c:	2250      	movs	r2, #80	; 0x50
 8001f0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f26:	f002 fe7d 	bl	8004c24 <HAL_TIM_Base_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f30:	f000 f8f0 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_TIM6_Init+0x64>)
 8001f42:	f003 f999 	bl	8005278 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f4c:	f000 f8e2 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003d8 	.word	0x200003d8
 8001f5c:	40001000 	.word	0x40001000

08001f60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_TIM7_Init+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f78:	2250      	movs	r2, #80	; 0x50
 8001f7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f84:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f92:	f002 fe47 	bl	8004c24 <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f9c:	f000 f8ba 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001fae:	f003 f963 	bl	8005278 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001fb8:	f000 f8ac 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000424 	.word	0x20000424
 8001fc8:	40001400 	.word	0x40001400

08001fcc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_TIM16_Init+0x44>)
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <MX_TIM16_Init+0x48>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_TIM16_Init+0x44>)
 8001fd8:	2250      	movs	r2, #80	; 0x50
 8001fda:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_TIM16_Init+0x44>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_TIM16_Init+0x44>)
 8001fe4:	2209      	movs	r2, #9
 8001fe6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_TIM16_Init+0x44>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_TIM16_Init+0x44>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_TIM16_Init+0x44>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_TIM16_Init+0x44>)
 8001ffc:	f002 fe12 	bl	8004c24 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002006:	f000 f885 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000470 	.word	0x20000470
 8002014:	40014400 	.word	0x40014400

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4a35      	ldr	r2, [pc, #212]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <MX_GPIO_Init+0xf0>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <MX_GPIO_Init+0xf0>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	4a29      	ldr	r2, [pc, #164]	; (8002108 <MX_GPIO_Init+0xf0>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <MX_GPIO_Init+0xf0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	2104      	movs	r1, #4
 800207a:	4824      	ldr	r0, [pc, #144]	; (800210c <MX_GPIO_Init+0xf4>)
 800207c:	f001 fd22 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002080:	2303      	movs	r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002084:	2303      	movs	r3, #3
 8002086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	481f      	ldr	r0, [pc, #124]	; (8002110 <MX_GPIO_Init+0xf8>)
 8002094:	f001 fb7c 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arm3Switch_Pin Arm2Switch_Pin Arm1Switch_Pin Arm0Switch_Pin */
  GPIO_InitStruct.Pin = Arm3Switch_Pin|Arm2Switch_Pin|Arm1Switch_Pin|Arm0Switch_Pin;
 8002098:	23c3      	movs	r3, #195	; 0xc3
 800209a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800209c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f001 fb6e 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BoardLED_Pin */
  GPIO_InitStruct.Pin = BoardLED_Pin;
 80020b4:	2304      	movs	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BoardLED_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <MX_GPIO_Init+0xf4>)
 80020cc:	f001 fb60 	bl	8003790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2101      	movs	r1, #1
 80020d4:	2006      	movs	r0, #6
 80020d6:	f000 fc7a 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020da:	2006      	movs	r0, #6
 80020dc:	f000 fc91 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	2007      	movs	r0, #7
 80020e6:	f000 fc72 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020ea:	2007      	movs	r0, #7
 80020ec:	f000 fc89 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2101      	movs	r1, #1
 80020f4:	2017      	movs	r0, #23
 80020f6:	f000 fc6a 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020fa:	2017      	movs	r0, #23
 80020fc:	f000 fc81 	bl	8002a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	48000c00 	.word	0x48000c00
 8002110:	48000800 	.word	0x48000800

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2104      	movs	r1, #4
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <Error_Handler+0x14>)
 800211e:	f001 fcd1 	bl	8003ac4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
}
 8002124:	bf00      	nop
  __disable_irq();
  while (1)
 8002126:	e7fe      	b.n	8002126 <Error_Handler+0x12>
 8002128:	48000c00 	.word	0x48000c00

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6613      	str	r3, [r2, #96]	; 0x60
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x44>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0a0      	sub	sp, #128	; 0x80
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	2254      	movs	r2, #84	; 0x54
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fe91 	bl	8006ebc <memset>
  if(hfdcan->Instance==FDCAN1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a55      	ldr	r2, [pc, #340]	; (80022f4 <HAL_FDCAN_MspInit+0x180>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d14b      	bne.n	800223c <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fae7 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80021c0:	f7ff ffa8 	bl	8002114 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 80021cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10b      	bne.n	80021ee <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002206:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002218:	2309      	movs	r3, #9
 800221a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f001 fab3 	bl	8003790 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2015      	movs	r0, #21
 8002230:	f000 fbcd 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002234:	2015      	movs	r0, #21
 8002236:	f000 fbe4 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800223a:	e057      	b.n	80022ec <HAL_FDCAN_MspInit+0x178>
  else if(hfdcan->Instance==FDCAN3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2f      	ldr	r2, [pc, #188]	; (8002300 <HAL_FDCAN_MspInit+0x18c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d152      	bne.n	80022ec <HAL_FDCAN_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fa96 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8002262:	f7ff ff57 	bl	8002114 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 800226e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_FDCAN_MspInit+0x184>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10b      	bne.n	8002290 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 800227e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_FDCAN_MspInit+0x188>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80022a8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80022ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80022ba:	230b      	movs	r3, #11
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f001 fa62 	bl	8003790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 2, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2102      	movs	r1, #2
 80022d0:	2058      	movs	r0, #88	; 0x58
 80022d2:	f000 fb7c 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80022d6:	2058      	movs	r0, #88	; 0x58
 80022d8:	f000 fb93 	bl	8002a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 2, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2102      	movs	r1, #2
 80022e0:	2059      	movs	r0, #89	; 0x59
 80022e2:	f000 fb74 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80022e6:	2059      	movs	r0, #89	; 0x59
 80022e8:	f000 fb8b 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3780      	adds	r7, #128	; 0x80
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40006400 	.word	0x40006400
 80022f8:	200005c8 	.word	0x200005c8
 80022fc:	40021000 	.word	0x40021000
 8002300:	40006c00 	.word	0x40006c00

08002304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b09e      	sub	sp, #120	; 0x78
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2254      	movs	r2, #84	; 0x54
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fdc9 	bl	8006ebc <memset>
  if(huart->Instance==LPUART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_UART_MspInit+0xa8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d136      	bne.n	80023a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002334:	2320      	movs	r3, #32
 8002336:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fa21 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800234c:	f7ff fee2 	bl	8002114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_UART_MspInit+0xac>)
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_UART_MspInit+0xac>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_UART_MspInit+0xac>)
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_UART_MspInit+0xac>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_UART_MspInit+0xac>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_UART_MspInit+0xac>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002380:	230c      	movs	r3, #12
 8002382:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002390:	230c      	movs	r3, #12
 8002392:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239e:	f001 f9f7 	bl	8003790 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3778      	adds	r7, #120	; 0x78
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40008000 	.word	0x40008000
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_TIM_Base_MspInit+0xac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d114      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a26      	ldr	r2, [pc, #152]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2103      	movs	r1, #3
 80023e2:	2036      	movs	r0, #54	; 0x36
 80023e4:	f000 faf3 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e8:	2036      	movs	r0, #54	; 0x36
 80023ea:	f000 fb0a 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023ee:	e032      	b.n	8002456 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_TIM_Base_MspInit+0xb4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d114      	bne.n	8002424 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 3, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2103      	movs	r1, #3
 8002416:	2037      	movs	r0, #55	; 0x37
 8002418:	f000 fad9 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800241c:	2037      	movs	r0, #55	; 0x37
 800241e:	f000 faf0 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8002422:	e018      	b.n	8002456 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_TIM_Base_MspInit+0xb8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d113      	bne.n	8002456 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	6613      	str	r3, [r2, #96]	; 0x60
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_TIM_Base_MspInit+0xb0>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2104      	movs	r1, #4
 800244a:	2019      	movs	r0, #25
 800244c:	f000 fabf 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002450:	2019      	movs	r0, #25
 8002452:	f000 fad6 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40001000 	.word	0x40001000
 8002464:	40021000 	.word	0x40021000
 8002468:	40001400 	.word	0x40001400
 800246c:	40014400 	.word	0x40014400

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024bc:	f000 f98e 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm3Switch_Pin);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f001 fb13 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm2Switch_Pin);
 80024d6:	2002      	movs	r0, #2
 80024d8:	f001 fb0c 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80024e6:	f000 fee7 	bl	80032b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000026c 	.word	0x2000026c

080024f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm1Switch_Pin);
 80024f8:	2040      	movs	r0, #64	; 0x40
 80024fa:	f001 fafb 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Arm0Switch_Pin);
 80024fe:	2080      	movs	r0, #128	; 0x80
 8002500:	f001 faf8 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800250e:	f002 fc88 	bl	8004e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000470 	.word	0x20000470

0800251c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM6_DAC_IRQHandler+0x10>)
 8002522:	f002 fc7e 	bl	8004e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200003d8 	.word	0x200003d8

08002530 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <TIM7_DAC_IRQHandler+0x10>)
 8002536:	f002 fc74 	bl	8004e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000424 	.word	0x20000424

08002544 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <FDCAN3_IT0_IRQHandler+0x10>)
 800254a:	f000 feb5 	bl	80032b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200002d0 	.word	0x200002d0

08002558 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <FDCAN3_IT1_IRQHandler+0x10>)
 800255e:	f000 feab 	bl	80032b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200002d0 	.word	0x200002d0

0800256c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_kill>:

int _kill(int pid, int sig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002586:	f004 fcb5 	bl	8006ef4 <__errno>
 800258a:	4603      	mov	r3, r0
 800258c:	2216      	movs	r2, #22
 800258e:	601a      	str	r2, [r3, #0]
  return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_exit>:

void _exit (int status)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffe7 	bl	800257c <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ae:	e7fe      	b.n	80025ae <_exit+0x12>

080025b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e00a      	b.n	80025d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c2:	f3af 8000 	nop.w
 80025c6:	4601      	mov	r1, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	b2ca      	uxtb	r2, r1
 80025d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbf0      	blt.n	80025c2 <_read+0x12>
  }

  return len;
 80025e0:	687b      	ldr	r3, [r7, #4]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002612:	605a      	str	r2, [r3, #4]
  return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_isatty>:

int _isatty(int file)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f004 fc36 	bl	8006ef4 <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20020000 	.word	0x20020000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	200005cc 	.word	0x200005cc
 80026bc:	20000720 	.word	0x20000720

080026c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <SystemInit+0x20>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <SystemInit+0x20>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e8:	f7ff ffea 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <LoopForever+0xe>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <LoopForever+0x16>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002712:	f004 fbf5 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002716:	f7ff f9c5 	bl	8001aa4 <main>

0800271a <LoopForever>:

LoopForever:
    b LoopForever
 800271a:	e7fe      	b.n	800271a <LoopForever>
  ldr   r0, =_estack
 800271c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002728:	0800914c 	.word	0x0800914c
  ldr r2, =_sbss
 800272c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002730:	20000720 	.word	0x20000720

08002734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC1_2_IRQHandler>

08002736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f939 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002746:	200f      	movs	r0, #15
 8002748:	f000 f80e 	bl	8002768 <HAL_InitTick>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	e001      	b.n	800275c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002758:	f7ff fce8 	bl	800212c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275c:	79fb      	ldrb	r3, [r7, #7]

}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_InitTick+0x68>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d022      	beq.n	80027c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_InitTick+0x6c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_InitTick+0x68>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002788:	fbb1 f3f3 	udiv	r3, r1, r3
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f944 	bl	8002a1e <HAL_SYSTICK_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10f      	bne.n	80027bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	d809      	bhi.n	80027b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a2:	2200      	movs	r2, #0
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027aa:	f000 f910 	bl	80029ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_InitTick+0x70>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e004      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000080 	.word	0x20000080
 80027d4:	20000078 	.word	0x20000078
 80027d8:	2000007c 	.word	0x2000007c

080027dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x1c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_IncTick+0x20>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_IncTick+0x1c>)
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	200005d0 	.word	0x200005d0
 80027fc:	20000080 	.word	0x20000080

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200005d0 	.word	0x200005d0

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff40 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff90 	bl	800290c <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5f 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff33 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa4 	bl	8002974 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e147      	b.n	8002cda <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fb88 	bl	8002174 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0210 	bic.w	r2, r2, #16
 8002a72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a74:	f7ff fec4 	bl	8002800 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a7a:	e012      	b.n	8002aa2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a7c:	f7ff fec0 	bl	8002800 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b0a      	cmp	r3, #10
 8002a88:	d90b      	bls.n	8002aa2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e11b      	b.n	8002cda <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d0e5      	beq.n	8002a7c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7ff fe9e 	bl	8002800 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ac6:	e012      	b.n	8002aee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ac8:	f7ff fe9a 	bl	8002800 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b0a      	cmp	r3, #10
 8002ad4:	d90b      	bls.n	8002aee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0f5      	b.n	8002cda <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0e5      	beq.n	8002ac8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0202 	orr.w	r2, r2, #2
 8002b0a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a74      	ldr	r2, [pc, #464]	; (8002ce4 <HAL_FDCAN_Init+0x2ac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d103      	bne.n	8002b1e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b16:	4a74      	ldr	r2, [pc, #464]	; (8002ce8 <HAL_FDCAN_Init+0x2b0>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7c1b      	ldrb	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b34:	619a      	str	r2, [r3, #24]
 8002b36:	e007      	b.n	8002b48 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b46:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7c5b      	ldrb	r3, [r3, #17]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d108      	bne.n	8002b62 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	e007      	b.n	8002b72 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b70:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7c9b      	ldrb	r3, [r3, #18]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b88:	619a      	str	r2, [r3, #24]
 8002b8a:	e007      	b.n	8002b9c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b9a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bc0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0210 	bic.w	r2, r2, #16
 8002bd0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0204 	orr.w	r2, r2, #4
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e02c      	b.n	8002c46 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d028      	beq.n	8002c46 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d01c      	beq.n	8002c36 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c0a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0210 	orr.w	r2, r2, #16
 8002c1a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d110      	bne.n	8002c46 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0220 	orr.w	r2, r2, #32
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	e007      	b.n	8002c46 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0220 	orr.w	r2, r2, #32
 8002c44:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c56:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c5e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c6e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c70:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7a:	d115      	bne.n	8002ca8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	3b01      	subs	r3, #1
 8002c88:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c8a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	3b01      	subs	r3, #1
 8002c92:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ca4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ca6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fc7e 	bl	80035c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40006400 	.word	0x40006400
 8002ce8:	40006500 	.word	0x40006500

08002cec <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cfc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d002      	beq.n	8002d0a <HAL_FDCAN_ConfigFilter+0x1e>
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d13d      	bne.n	8002d86 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d119      	bne.n	8002d46 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d1e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002d26:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e01d      	b.n	8002d82 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	075a      	lsls	r2, r3, #29
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	079a      	lsls	r2, r3, #30
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e006      	b.n	8002d94 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d116      	bne.n	8002de8 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	011a      	lsls	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e006      	b.n	8002df6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d110      	bne.n	8002e38 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e006      	b.n	8002e46 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d12c      	bne.n	8002ec4 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e023      	b.n	8002ed2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fbf9 	bl	8003698 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e006      	b.n	8002ed2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	f043 0208 	orr.w	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b08b      	sub	sp, #44	; 0x2c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ef4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002ef6:	7efb      	ldrb	r3, [r7, #27]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f040 80e8 	bne.w	80030ce <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d137      	bne.n	8002f74 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0db      	b.n	80030dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	0e1b      	lsrs	r3, r3, #24
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10a      	bne.n	8002f4c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3e:	0a5b      	lsrs	r3, r3, #9
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e036      	b.n	8002fe2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0a3      	b.n	80030dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9c:	0e1b      	lsrs	r3, r3, #24
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10a      	bne.n	8002fbc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e005      	b.n	8003012 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3304      	adds	r3, #4
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0fda      	lsrs	r2, r3, #31
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	3304      	adds	r3, #4
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	e00a      	b.n	800309e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	441a      	add	r2, r3
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	440b      	add	r3, r1
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	3301      	adds	r3, #1
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	461a      	mov	r2, r3
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d3ec      	bcc.n	8003088 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d105      	bne.n	80030c0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80030be:	e004      	b.n	80030ca <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e006      	b.n	80030dc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	f043 0208 	orr.w	r2, r3, #8
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
  }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	372c      	adds	r7, #44	; 0x2c
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	08008d94 	.word	0x08008d94

080030ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030fe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d003      	beq.n	800310e <HAL_FDCAN_ActivateNotification+0x22>
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	2b02      	cmp	r3, #2
 800310a:	f040 80c8 	bne.w	800329e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d03b      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d031      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d027      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01d      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d013      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d13b      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d131      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d127      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d11d      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0202 	orr.w	r2, r2, #2
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	430a      	orrs	r2, r1
 8003268:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	430a      	orrs	r2, r1
 8003286:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	430a      	orrs	r2, r1
 8003298:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e006      	b.n	80032ac <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	4013      	ands	r3, r2
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ec:	4013      	ands	r3, r2
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	4013      	ands	r3, r2
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003312:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	6a3a      	ldr	r2, [r7, #32]
 800331c:	4013      	ands	r3, r2
 800331e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800332a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	4013      	ands	r3, r2
 8003336:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003346:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f90b 	bl	8003580 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d019      	beq.n	80033a8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d014      	beq.n	80033a8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003386:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80033a0:	6939      	ldr	r1, [r7, #16]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8cd 	bl	8003542 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80033b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8a2 	bl	8003502 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80033cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe f91e 	bl	8001610 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80033e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7fe f9f7 	bl	80017d8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00c      	beq.n	800340e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f885 	bl	8003518 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d018      	beq.n	800344a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d013      	beq.n	800344a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800342a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f871 	bl	800352c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003466:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f875 	bl	8003558 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f86d 	bl	800356c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00f      	beq.n	80034bc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f86b 	bl	80035a8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f84d 	bl	8003594 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80034fa:	bf00      	nop
 80034fc:	3730      	adds	r7, #48	; 0x30
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80035ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d103      	bne.n	80035de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80035dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d103      	bne.n	80035f0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80035ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	041a      	lsls	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003624:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	061a      	lsls	r2, r3, #24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e005      	b.n	8003672 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3304      	adds	r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3f3      	bcc.n	8003666 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	4000a400 	.word	0x4000a400
 8003690:	40006800 	.word	0x40006800
 8003694:	40006c00 	.word	0x40006c00

08003698 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80036b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80036be:	4313      	orrs	r3, r2
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e00a      	b.n	80036da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80036cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80036d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80036d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80036e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80036ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80036f0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	3304      	adds	r3, #4
 8003718:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	3304      	adds	r3, #4
 8003724:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e020      	b.n	800376e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3303      	adds	r3, #3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3302      	adds	r3, #2
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	440b      	add	r3, r1
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003744:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3301      	adds	r3, #1
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	440b      	add	r3, r1
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003752:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	440a      	add	r2, r1
 800375a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800375c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3304      	adds	r3, #4
 8003766:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3304      	adds	r3, #4
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	4a06      	ldr	r2, [pc, #24]	; (800378c <FDCAN_CopyMessageToRAM+0xf4>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	461a      	mov	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4293      	cmp	r3, r2
 800377c:	d3d6      	bcc.n	800372c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	3724      	adds	r7, #36	; 0x24
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	08008d94 	.word	0x08008d94

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800379e:	e15a      	b.n	8003a56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 814c 	beq.w	8003a50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d005      	beq.n	80037d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d130      	bne.n	8003832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003806:	2201      	movs	r2, #1
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 0201 	and.w	r2, r3, #1
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d017      	beq.n	800386e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d123      	bne.n	80038c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	08da      	lsrs	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3208      	adds	r2, #8
 80038bc:	6939      	ldr	r1, [r7, #16]
 80038be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a6 	beq.w	8003a50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003904:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_GPIO_Init+0x2e4>)
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_GPIO_Init+0x2e4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6613      	str	r3, [r2, #96]	; 0x60
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_GPIO_Init+0x2e4>)
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800391c:	4a56      	ldr	r2, [pc, #344]	; (8003a78 <HAL_GPIO_Init+0x2e8>)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003946:	d01f      	beq.n	8003988 <HAL_GPIO_Init+0x1f8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a4c      	ldr	r2, [pc, #304]	; (8003a7c <HAL_GPIO_Init+0x2ec>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d019      	beq.n	8003984 <HAL_GPIO_Init+0x1f4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <HAL_GPIO_Init+0x2f0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_GPIO_Init+0x1f0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <HAL_GPIO_Init+0x2f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00d      	beq.n	800397c <HAL_GPIO_Init+0x1ec>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a49      	ldr	r2, [pc, #292]	; (8003a88 <HAL_GPIO_Init+0x2f8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <HAL_GPIO_Init+0x1e8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <HAL_GPIO_Init+0x2fc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_GPIO_Init+0x1e4>
 8003970:	2305      	movs	r3, #5
 8003972:	e00a      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 8003974:	2306      	movs	r3, #6
 8003976:	e008      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 8003978:	2304      	movs	r3, #4
 800397a:	e006      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 800397c:	2303      	movs	r3, #3
 800397e:	e004      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 8003980:	2302      	movs	r3, #2
 8003982:	e002      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_GPIO_Init+0x1fa>
 8003988:	2300      	movs	r3, #0
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	f002 0203 	and.w	r2, r2, #3
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4093      	lsls	r3, r2
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399a:	4937      	ldr	r1, [pc, #220]	; (8003a78 <HAL_GPIO_Init+0x2e8>)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_GPIO_Init+0x300>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_GPIO_Init+0x300>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_GPIO_Init+0x300>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <HAL_GPIO_Init+0x300>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_GPIO_Init+0x300>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_GPIO_Init+0x300>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <HAL_GPIO_Init+0x300>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_GPIO_Init+0x300>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f ae9d 	bne.w	80037a0 <HAL_GPIO_Init+0x10>
  }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	48000400 	.word	0x48000400
 8003a80:	48000800 	.word	0x48000800
 8003a84:	48000c00 	.word	0x48000c00
 8003a88:	48001000 	.word	0x48001000
 8003a8c:	48001400 	.word	0x48001400
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e001      	b.n	8003ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae0:	e002      	b.n	8003ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fc08 	bl	8001328 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40010400 	.word	0x40010400

08003b24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e041      	b.n	8003bba <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f245 5255 	movw	r2, #21845	; 0x5555
 8003b48:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6852      	ldr	r2, [r2, #4]
 8003b52:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003b5e:	f7fe fe4f 	bl	8002800 <HAL_GetTick>
 8003b62:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003b64:	e00f      	b.n	8003b86 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003b66:	f7fe fe4b 	bl	8002800 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b31      	cmp	r3, #49	; 0x31
 8003b72:	d908      	bls.n	8003b86 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e019      	b.n	8003bba <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e8      	bne.n	8003b66 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d005      	beq.n	8003bae <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	611a      	str	r2, [r3, #16]
 8003bac:	e004      	b.n	8003bb8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d141      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d131      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c06:	4a46      	ldr	r2, [pc, #280]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c10:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c18:	4a41      	ldr	r2, [pc, #260]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c20:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2232      	movs	r2, #50	; 0x32
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	4a3f      	ldr	r2, [pc, #252]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	0c9b      	lsrs	r3, r3, #18
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c36:	e002      	b.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3e:	4b38      	ldr	r3, [pc, #224]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d102      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c52:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5e:	d158      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e057      	b.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c64:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c74:	e04d      	b.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7c:	d141      	bne.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8a:	d131      	bne.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2232      	movs	r2, #50	; 0x32
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	0c9b      	lsrs	r3, r3, #18
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc2:	e002      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	d102      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f2      	bne.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d112      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e011      	b.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d00:	e007      	b.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40007000 	.word	0x40007000
 8003d24:	20000078 	.word	0x20000078
 8003d28:	431bde83 	.word	0x431bde83

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e2fe      	b.n	800433c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d075      	beq.n	8003e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	4b97      	ldr	r3, [pc, #604]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d54:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d102      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3e>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b8d      	ldr	r3, [pc, #564]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e2d9      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x74>
 8003d92:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a84      	ldr	r2, [pc, #528]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7e      	ldr	r2, [pc, #504]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7b      	ldr	r2, [pc, #492]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003dc4:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a77      	ldr	r2, [pc, #476]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b75      	ldr	r3, [pc, #468]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a74      	ldr	r2, [pc, #464]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fd0c 	bl	8002800 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fd08 	bl	8002800 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e29e      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fcf8 	bl	8002800 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fcf4 	bl	8002800 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e28a      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e26:	4b60      	ldr	r3, [pc, #384]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d075      	beq.n	8003f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_OscConfig+0x136>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d002      	beq.n	8003e68 <HAL_RCC_OscConfig+0x13c>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d11f      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e68:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_OscConfig+0x154>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e25d      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	4946      	ldr	r1, [pc, #280]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e94:	4b45      	ldr	r3, [pc, #276]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fc65 	bl	8002768 <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d043      	beq.n	8003f2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e249      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d023      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fca0 	bl	8002800 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fe fc9c 	bl	8002800 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e232      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	492d      	ldr	r1, [pc, #180]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
 8003ef6:	e01a      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fe fc7c 	bl	8002800 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fc78 	bl	8002800 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e20e      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1e0>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d041      	beq.n	8003fbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fe fc55 	bl	8002800 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fc51 	bl	8002800 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1e7      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ef      	beq.n	8003f5a <HAL_RCC_OscConfig+0x22e>
 8003f7a:	e020      	b.n	8003fbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fe fc38 	bl	8002800 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f92:	e00d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fe fc34 	bl	8002800 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d906      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1ca      	b.n	800433c <HAL_RCC_OscConfig+0x610>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb0:	4b8c      	ldr	r3, [pc, #560]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ea      	bne.n	8003f94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a6 	beq.w	8004118 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd0:	4b84      	ldr	r3, [pc, #528]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2b4>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2b6>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	4a7e      	ldr	r2, [pc, #504]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff2:	4b7c      	ldr	r3, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ffe:	2301      	movs	r3, #1
 8004000:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004002:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <HAL_RCC_OscConfig+0x4bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400e:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_RCC_OscConfig+0x4bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a75      	ldr	r2, [pc, #468]	; (80041e8 <HAL_RCC_OscConfig+0x4bc>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fe fbf1 	bl	8002800 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fe fbed 	bl	8002800 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e183      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004034:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <HAL_RCC_OscConfig+0x4bc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d108      	bne.n	800405a <HAL_RCC_OscConfig+0x32e>
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a65      	ldr	r2, [pc, #404]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004058:	e024      	b.n	80040a4 <HAL_RCC_OscConfig+0x378>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d110      	bne.n	8004084 <HAL_RCC_OscConfig+0x358>
 8004062:	4b60      	ldr	r3, [pc, #384]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	4a5e      	ldr	r2, [pc, #376]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004072:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004082:	e00f      	b.n	80040a4 <HAL_RCC_OscConfig+0x378>
 8004084:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	4a56      	ldr	r2, [pc, #344]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a52      	ldr	r2, [pc, #328]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fe fba8 	bl	8002800 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7fe fba4 	bl	8002800 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e138      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ed      	beq.n	80040b4 <HAL_RCC_OscConfig+0x388>
 80040d8:	e015      	b.n	8004106 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fe fb91 	bl	8002800 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe fb8d 	bl	8002800 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e121      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f8:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ed      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004116:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03c      	beq.n	800419e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01c      	beq.n	8004166 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800412c:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004132:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe fb60 	bl	8002800 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004144:	f7fe fb5c 	bl	8002800 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0f2      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0ef      	beq.n	8004144 <HAL_RCC_OscConfig+0x418>
 8004164:	e01b      	b.n	800419e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe fb43 	bl	8002800 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417e:	f7fe fb3f 	bl	8002800 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0d5      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 8004192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ef      	bne.n	800417e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80c9 	beq.w	800433a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	f000 8083 	beq.w	80042bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d15e      	bne.n	800427c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fe fb19 	bl	8002800 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	e00c      	b.n	80041ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fe fb15 	bl	8002800 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d905      	bls.n	80041ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0ab      	b.n	800433c <HAL_RCC_OscConfig+0x610>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ec:	4b55      	ldr	r3, [pc, #340]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ec      	bne.n	80041d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4b52      	ldr	r3, [pc, #328]	; (8004348 <HAL_RCC_OscConfig+0x61c>)
 80041fe:	4013      	ands	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6a11      	ldr	r1, [r2, #32]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004208:	3a01      	subs	r2, #1
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004212:	0212      	lsls	r2, r2, #8
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800421a:	0852      	lsrs	r2, r2, #1
 800421c:	3a01      	subs	r2, #1
 800421e:	0552      	lsls	r2, r2, #21
 8004220:	4311      	orrs	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004226:	0852      	lsrs	r2, r2, #1
 8004228:	3a01      	subs	r2, #1
 800422a:	0652      	lsls	r2, r2, #25
 800422c:	4311      	orrs	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004232:	06d2      	lsls	r2, r2, #27
 8004234:	430a      	orrs	r2, r1
 8004236:	4943      	ldr	r1, [pc, #268]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a40      	ldr	r2, [pc, #256]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004246:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004248:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a3d      	ldr	r2, [pc, #244]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fad4 	bl	8002800 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fad0 	bl	8002800 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e066      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426e:	4b35      	ldr	r3, [pc, #212]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x530>
 800427a:	e05e      	b.n	800433a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427c:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a30      	ldr	r2, [pc, #192]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe faba 	bl	8002800 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe fab6 	bl	8002800 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04c      	b.n	800433c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	4924      	ldr	r1, [pc, #144]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_OscConfig+0x620>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	60cb      	str	r3, [r1, #12]
 80042ba:	e03e      	b.n	800433a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e039      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCC_OscConfig+0x618>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0203 	and.w	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d12c      	bne.n	8004336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	3b01      	subs	r3, #1
 80042e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d123      	bne.n	8004336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d11b      	bne.n	8004336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d113      	bne.n	8004336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d109      	bne.n	8004336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	3b01      	subs	r3, #1
 8004330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000
 8004348:	019f800c 	.word	0x019f800c
 800434c:	feeefffc 	.word	0xfeeefffc

08004350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e11e      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d910      	bls.n	8004398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 020f 	bic.w	r2, r3, #15
 800437e:	498c      	ldr	r1, [pc, #560]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b8a      	ldr	r3, [pc, #552]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e106      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d073      	beq.n	800448c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d129      	bne.n	8004400 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0f4      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043bc:	f000 f99e 	bl	80046fc <RCC_GetSysClockFreqFromPLLSource>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4a7c      	ldr	r2, [pc, #496]	; (80045b8 <HAL_RCC_ClockConfig+0x268>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d93f      	bls.n	800444a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ca:	4b7a      	ldr	r3, [pc, #488]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d033      	beq.n	800444a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d12f      	bne.n	800444a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ea:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	4a70      	ldr	r2, [pc, #448]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e024      	b.n	800444a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d107      	bne.n	8004418 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004408:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0c6      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0be      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004428:	f000 f8ce 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 800442c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4a61      	ldr	r2, [pc, #388]	; (80045b8 <HAL_RCC_ClockConfig+0x268>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d909      	bls.n	800444a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443e:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800444a:	4b5a      	ldr	r3, [pc, #360]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4957      	ldr	r1, [pc, #348]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004458:	4313      	orrs	r3, r2
 800445a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445c:	f7fe f9d0 	bl	8002800 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	e00a      	b.n	800447a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004464:	f7fe f9cc 	bl	8002800 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e095      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 020c 	and.w	r2, r3, #12
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	429a      	cmp	r2, r3
 800448a:	d1eb      	bne.n	8004464 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d023      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a4:	4b43      	ldr	r3, [pc, #268]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a42      	ldr	r2, [pc, #264]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044bc:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044c4:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b39      	ldr	r3, [pc, #228]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4936      	ldr	r1, [pc, #216]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
 80044de:	e008      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d105      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	4a32      	ldr	r2, [pc, #200]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f2:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d21d      	bcs.n	800453c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 020f 	bic.w	r2, r3, #15
 8004508:	4929      	ldr	r1, [pc, #164]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004510:	f7fe f976 	bl	8002800 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	e00a      	b.n	800452e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004518:	f7fe f972 	bl	8002800 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e03b      	b.n	80045a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d1ed      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4917      	ldr	r1, [pc, #92]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490f      	ldr	r1, [pc, #60]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800457a:	f000 f825 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 800457e:	4602      	mov	r2, r0
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <HAL_RCC_ClockConfig+0x264>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	490c      	ldr	r1, [pc, #48]	; (80045bc <HAL_RCC_ClockConfig+0x26c>)
 800458c:	5ccb      	ldrb	r3, [r1, r3]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <HAL_RCC_ClockConfig+0x270>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_RCC_ClockConfig+0x274>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f8e2 	bl	8002768 <HAL_InitTick>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40022000 	.word	0x40022000
 80045b4:	40021000 	.word	0x40021000
 80045b8:	04c4b400 	.word	0x04c4b400
 80045bc:	08008d7c 	.word	0x08008d7c
 80045c0:	20000078 	.word	0x20000078
 80045c4:	2000007c 	.word	0x2000007c

080045c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d102      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	e047      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d102      	bne.n	80045f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e03e      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045f2:	4b23      	ldr	r3, [pc, #140]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d136      	bne.n	800466c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fe:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3301      	adds	r3, #1
 8004614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d10c      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800461c:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_RCC_GetSysClockFreq+0xc0>)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004626:	68d2      	ldr	r2, [r2, #12]
 8004628:	0a12      	lsrs	r2, r2, #8
 800462a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
      break;
 8004634:	e00c      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004640:	68d2      	ldr	r2, [r2, #12]
 8004642:	0a12      	lsrs	r2, r2, #8
 8004644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
      break;
 800464e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0e5b      	lsrs	r3, r3, #25
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	3301      	adds	r3, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e001      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004670:	693b      	ldr	r3, [r7, #16]
}
 8004672:	4618      	mov	r0, r3
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	00f42400 	.word	0x00f42400
 8004688:	007a1200 	.word	0x007a1200

0800468c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000078 	.word	0x20000078

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046a8:	f7ff fff0 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08008d8c 	.word	0x08008d8c

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046d4:	f7ff ffda 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0adb      	lsrs	r3, r3, #11
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	08008d8c 	.word	0x08008d8c

080046fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d10c      	bne.n	800473a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004720:	4a17      	ldr	r2, [pc, #92]	; (8004780 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800472a:	68d2      	ldr	r2, [r2, #12]
 800472c:	0a12      	lsrs	r2, r2, #8
 800472e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
    break;
 8004738:	e00c      	b.n	8004754 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	0a12      	lsrs	r2, r2, #8
 8004748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
    break;
 8004752:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0e5b      	lsrs	r3, r3, #25
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800476e:	687b      	ldr	r3, [r7, #4]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40021000 	.word	0x40021000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	00f42400 	.word	0x00f42400

08004788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004790:	2300      	movs	r3, #0
 8004792:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004794:	2300      	movs	r3, #0
 8004796:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8098 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b43      	ldr	r3, [pc, #268]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
 80047c2:	4b3d      	ldr	r3, [pc, #244]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a39      	ldr	r2, [pc, #228]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047de:	f7fe f80f 	bl	8002800 <HAL_GetTick>
 80047e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	e009      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fe f80b 	bl	8002800 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d902      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	74fb      	strb	r3, [r7, #19]
        break;
 80047f8:	e005      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d159      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480c:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d019      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004828:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004844:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd ffcb 	bl	8002800 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	e00b      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fd ffc7 	bl	8002800 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d902      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	74fb      	strb	r3, [r7, #19]
            break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ec      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b0:	e008      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
 80048b6:	e005      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c4:	7c7b      	ldrb	r3, [r7, #17]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d105      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ca:	4ba7      	ldr	r3, [pc, #668]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	4aa6      	ldr	r2, [pc, #664]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e2:	4ba1      	ldr	r3, [pc, #644]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 0203 	bic.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	499d      	ldr	r1, [pc, #628]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004904:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 020c 	bic.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4995      	ldr	r1, [pc, #596]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004926:	4b90      	ldr	r3, [pc, #576]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	498c      	ldr	r1, [pc, #560]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004948:	4b87      	ldr	r3, [pc, #540]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	4984      	ldr	r1, [pc, #528]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496a:	4b7f      	ldr	r3, [pc, #508]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	497b      	ldr	r1, [pc, #492]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800498c:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4973      	ldr	r1, [pc, #460]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ae:	4b6e      	ldr	r3, [pc, #440]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	496a      	ldr	r1, [pc, #424]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049d0:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4962      	ldr	r1, [pc, #392]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049f2:	4b5d      	ldr	r3, [pc, #372]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4959      	ldr	r1, [pc, #356]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a14:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	4951      	ldr	r1, [pc, #324]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a36:	4b4c      	ldr	r3, [pc, #304]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	4948      	ldr	r1, [pc, #288]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a58:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4940      	ldr	r1, [pc, #256]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a76:	d105      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a78:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	4932      	ldr	r1, [pc, #200]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	4924      	ldr	r1, [pc, #144]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	4916      	ldr	r1, [pc, #88]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d019      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b56:	d109      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a02      	ldr	r2, [pc, #8]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	4926      	ldr	r1, [pc, #152]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d015      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	4918      	ldr	r1, [pc, #96]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d105      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c06:	d105      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c14:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000

08004c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e049      	b.n	8004cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fd fbb2 	bl	80023b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f000 fa54 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e054      	b.n	8004d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d022      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d01d      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a21      	ldr	r2, [pc, #132]	; (8004dac <HAL_TIM_Base_Start_IT+0xd8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d115      	bne.n	8004d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d015      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0xbe>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d011      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e008      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40015000 	.word	0x40015000
 8004dc0:	00010007 	.word	0x00010007

08004dc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <HAL_TIM_Base_Stop_IT+0x48>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	f244 4344 	movw	r3, #17476	; 0x4444
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_Base_Stop_IT+0x48>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0202 	mvn.w	r2, #2
 8004e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f931 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e72:	e005      	b.n	8004e80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f923 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f934 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0204 	mvn.w	r2, #4
 8004ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f90b 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004ebe:	e005      	b.n	8004ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8fd 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f90e 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d020      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01b      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0208 	mvn.w	r2, #8
 8004eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8e5 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004f0a:	e005      	b.n	8004f18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f8d7 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8e8 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f06f 0210 	mvn.w	r2, #16
 8004f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8bf 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004f56:	e005      	b.n	8004f64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8b1 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8c2 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0201 	mvn.w	r2, #1
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fc fadd 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9fe 	bl	80053b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9f6 	bl	80053cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f87c 	bl	80050fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0220 	mvn.w	r2, #32
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9be 	bl	80053a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9ca 	bl	80053e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9c2 	bl	80053f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9ba 	bl	8005408 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9b2 	bl	800541c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a4c      	ldr	r2, [pc, #304]	; (8005254 <TIM_Base_SetConfig+0x144>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d017      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d013      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a49      	ldr	r2, [pc, #292]	; (8005258 <TIM_Base_SetConfig+0x148>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00f      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a48      	ldr	r2, [pc, #288]	; (800525c <TIM_Base_SetConfig+0x14c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a47      	ldr	r2, [pc, #284]	; (8005260 <TIM_Base_SetConfig+0x150>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <TIM_Base_SetConfig+0x154>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0x48>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a45      	ldr	r2, [pc, #276]	; (8005268 <TIM_Base_SetConfig+0x158>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a39      	ldr	r2, [pc, #228]	; (8005254 <TIM_Base_SetConfig+0x144>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d023      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005178:	d01f      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a36      	ldr	r2, [pc, #216]	; (8005258 <TIM_Base_SetConfig+0x148>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a35      	ldr	r2, [pc, #212]	; (800525c <TIM_Base_SetConfig+0x14c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a34      	ldr	r2, [pc, #208]	; (8005260 <TIM_Base_SetConfig+0x150>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a33      	ldr	r2, [pc, #204]	; (8005264 <TIM_Base_SetConfig+0x154>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a33      	ldr	r2, [pc, #204]	; (800526c <TIM_Base_SetConfig+0x15c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a32      	ldr	r2, [pc, #200]	; (8005270 <TIM_Base_SetConfig+0x160>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a31      	ldr	r2, [pc, #196]	; (8005274 <TIM_Base_SetConfig+0x164>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0xaa>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <TIM_Base_SetConfig+0x158>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a18      	ldr	r2, [pc, #96]	; (8005254 <TIM_Base_SetConfig+0x144>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x110>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_Base_SetConfig+0x154>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x110>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1a      	ldr	r2, [pc, #104]	; (800526c <TIM_Base_SetConfig+0x15c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x110>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <TIM_Base_SetConfig+0x160>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x110>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a18      	ldr	r2, [pc, #96]	; (8005274 <TIM_Base_SetConfig+0x164>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x110>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <TIM_Base_SetConfig+0x158>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d105      	bne.n	8005246 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]
  }
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40015000 	.word	0x40015000
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800528c:	2302      	movs	r3, #2
 800528e:	e074      	b.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a34      	ldr	r2, [pc, #208]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a33      	ldr	r2, [pc, #204]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01d      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10c      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40015000 	.word	0x40015000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40014000 	.word	0x40014000

080053a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e042      	b.n	80054c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fc ff55 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2224      	movs	r2, #36	; 0x24
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fbb2 	bl	8005be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8b3 	bl	80055ec <UART_SetConfig>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e01b      	b.n	80054c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fc31 	bl	8005d28 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d17b      	bne.n	80055e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_UART_Transmit+0x26>
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e074      	b.n	80055e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2221      	movs	r2, #33	; 0x21
 8005506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550a:	f7fd f979 	bl	8002800 <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d108      	bne.n	800553c <HAL_UART_Transmit+0x6c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e003      	b.n	8005544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005544:	e030      	b.n	80055a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fc93 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e03d      	b.n	80055e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800557c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3302      	adds	r3, #2
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e007      	b.n	8005596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1c8      	bne.n	8005546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2200      	movs	r2, #0
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fc5c 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f0:	b08c      	sub	sp, #48	; 0x30
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	431a      	orrs	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4313      	orrs	r3, r2
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4baa      	ldr	r3, [pc, #680]	; (80058c4 <UART_SetConfig+0x2d8>)
 800561c:	4013      	ands	r3, r2
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005624:	430b      	orrs	r3, r1
 8005626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a9f      	ldr	r2, [pc, #636]	; (80058c8 <UART_SetConfig+0x2dc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005654:	4313      	orrs	r3, r2
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005662:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800566c:	430b      	orrs	r3, r1
 800566e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	f023 010f 	bic.w	r1, r3, #15
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a90      	ldr	r2, [pc, #576]	; (80058cc <UART_SetConfig+0x2e0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d125      	bne.n	80056dc <UART_SetConfig+0xf0>
 8005690:	4b8f      	ldr	r3, [pc, #572]	; (80058d0 <UART_SetConfig+0x2e4>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b03      	cmp	r3, #3
 800569c:	d81a      	bhi.n	80056d4 <UART_SetConfig+0xe8>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0xb8>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e116      	b.n	80058ea <UART_SetConfig+0x2fe>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e112      	b.n	80058ea <UART_SetConfig+0x2fe>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ca:	e10e      	b.n	80058ea <UART_SetConfig+0x2fe>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d2:	e10a      	b.n	80058ea <UART_SetConfig+0x2fe>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056da:	e106      	b.n	80058ea <UART_SetConfig+0x2fe>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <UART_SetConfig+0x2e8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d138      	bne.n	8005758 <UART_SetConfig+0x16c>
 80056e6:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <UART_SetConfig+0x2e4>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b0c      	cmp	r3, #12
 80056f2:	d82d      	bhi.n	8005750 <UART_SetConfig+0x164>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0x110>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005751 	.word	0x08005751
 8005704:	08005751 	.word	0x08005751
 8005708:	08005751 	.word	0x08005751
 800570c:	08005741 	.word	0x08005741
 8005710:	08005751 	.word	0x08005751
 8005714:	08005751 	.word	0x08005751
 8005718:	08005751 	.word	0x08005751
 800571c:	08005739 	.word	0x08005739
 8005720:	08005751 	.word	0x08005751
 8005724:	08005751 	.word	0x08005751
 8005728:	08005751 	.word	0x08005751
 800572c:	08005749 	.word	0x08005749
 8005730:	2300      	movs	r3, #0
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e0d8      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005738:	2302      	movs	r3, #2
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e0d4      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005746:	e0d0      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574e:	e0cc      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005756:	e0c8      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5e      	ldr	r2, [pc, #376]	; (80058d8 <UART_SetConfig+0x2ec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d125      	bne.n	80057ae <UART_SetConfig+0x1c2>
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <UART_SetConfig+0x2e4>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800576c:	2b30      	cmp	r3, #48	; 0x30
 800576e:	d016      	beq.n	800579e <UART_SetConfig+0x1b2>
 8005770:	2b30      	cmp	r3, #48	; 0x30
 8005772:	d818      	bhi.n	80057a6 <UART_SetConfig+0x1ba>
 8005774:	2b20      	cmp	r3, #32
 8005776:	d00a      	beq.n	800578e <UART_SetConfig+0x1a2>
 8005778:	2b20      	cmp	r3, #32
 800577a:	d814      	bhi.n	80057a6 <UART_SetConfig+0x1ba>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <UART_SetConfig+0x19a>
 8005780:	2b10      	cmp	r3, #16
 8005782:	d008      	beq.n	8005796 <UART_SetConfig+0x1aa>
 8005784:	e00f      	b.n	80057a6 <UART_SetConfig+0x1ba>
 8005786:	2300      	movs	r3, #0
 8005788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578c:	e0ad      	b.n	80058ea <UART_SetConfig+0x2fe>
 800578e:	2302      	movs	r3, #2
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005794:	e0a9      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005796:	2304      	movs	r3, #4
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579c:	e0a5      	b.n	80058ea <UART_SetConfig+0x2fe>
 800579e:	2308      	movs	r3, #8
 80057a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a4:	e0a1      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057a6:	2310      	movs	r3, #16
 80057a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ac:	e09d      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <UART_SetConfig+0x2f0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d125      	bne.n	8005804 <UART_SetConfig+0x218>
 80057b8:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <UART_SetConfig+0x2e4>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057c2:	2bc0      	cmp	r3, #192	; 0xc0
 80057c4:	d016      	beq.n	80057f4 <UART_SetConfig+0x208>
 80057c6:	2bc0      	cmp	r3, #192	; 0xc0
 80057c8:	d818      	bhi.n	80057fc <UART_SetConfig+0x210>
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d00a      	beq.n	80057e4 <UART_SetConfig+0x1f8>
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d814      	bhi.n	80057fc <UART_SetConfig+0x210>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <UART_SetConfig+0x1f0>
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d008      	beq.n	80057ec <UART_SetConfig+0x200>
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x210>
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e2:	e082      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ea:	e07e      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f2:	e07a      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fa:	e076      	b.n	80058ea <UART_SetConfig+0x2fe>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005802:	e072      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a35      	ldr	r2, [pc, #212]	; (80058e0 <UART_SetConfig+0x2f4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d12a      	bne.n	8005864 <UART_SetConfig+0x278>
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <UART_SetConfig+0x2e4>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581c:	d01a      	beq.n	8005854 <UART_SetConfig+0x268>
 800581e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005822:	d81b      	bhi.n	800585c <UART_SetConfig+0x270>
 8005824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005828:	d00c      	beq.n	8005844 <UART_SetConfig+0x258>
 800582a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582e:	d815      	bhi.n	800585c <UART_SetConfig+0x270>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <UART_SetConfig+0x250>
 8005834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005838:	d008      	beq.n	800584c <UART_SetConfig+0x260>
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x270>
 800583c:	2300      	movs	r3, #0
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e052      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e04e      	b.n	80058ea <UART_SetConfig+0x2fe>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e04a      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e046      	b.n	80058ea <UART_SetConfig+0x2fe>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e042      	b.n	80058ea <UART_SetConfig+0x2fe>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <UART_SetConfig+0x2dc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d13a      	bne.n	80058e4 <UART_SetConfig+0x2f8>
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <UART_SetConfig+0x2e4>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587c:	d01a      	beq.n	80058b4 <UART_SetConfig+0x2c8>
 800587e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005882:	d81b      	bhi.n	80058bc <UART_SetConfig+0x2d0>
 8005884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005888:	d00c      	beq.n	80058a4 <UART_SetConfig+0x2b8>
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d815      	bhi.n	80058bc <UART_SetConfig+0x2d0>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <UART_SetConfig+0x2b0>
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d008      	beq.n	80058ac <UART_SetConfig+0x2c0>
 800589a:	e00f      	b.n	80058bc <UART_SetConfig+0x2d0>
 800589c:	2300      	movs	r3, #0
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e022      	b.n	80058ea <UART_SetConfig+0x2fe>
 80058a4:	2302      	movs	r3, #2
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e01e      	b.n	80058ea <UART_SetConfig+0x2fe>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e01a      	b.n	80058ea <UART_SetConfig+0x2fe>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ba:	e016      	b.n	80058ea <UART_SetConfig+0x2fe>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c2:	e012      	b.n	80058ea <UART_SetConfig+0x2fe>
 80058c4:	cfff69f3 	.word	0xcfff69f3
 80058c8:	40008000 	.word	0x40008000
 80058cc:	40013800 	.word	0x40013800
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40004400 	.word	0x40004400
 80058d8:	40004800 	.word	0x40004800
 80058dc:	40004c00 	.word	0x40004c00
 80058e0:	40005000 	.word	0x40005000
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4aae      	ldr	r2, [pc, #696]	; (8005ba8 <UART_SetConfig+0x5bc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	f040 8097 	bne.w	8005a24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d823      	bhi.n	8005946 <UART_SetConfig+0x35a>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x318>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005929 	.word	0x08005929
 8005908:	08005947 	.word	0x08005947
 800590c:	08005931 	.word	0x08005931
 8005910:	08005947 	.word	0x08005947
 8005914:	08005937 	.word	0x08005937
 8005918:	08005947 	.word	0x08005947
 800591c:	08005947 	.word	0x08005947
 8005920:	08005947 	.word	0x08005947
 8005924:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe febc 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b9e      	ldr	r3, [pc, #632]	; (8005bac <UART_SetConfig+0x5c0>)
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005934:	e00d      	b.n	8005952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fe fe47 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8130 	beq.w	8005bba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	4a94      	ldr	r2, [pc, #592]	; (8005bb0 <UART_SetConfig+0x5c4>)
 8005960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005964:	461a      	mov	r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	fbb3 f3f2 	udiv	r3, r3, r2
 800596c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	429a      	cmp	r2, r3
 800597c:	d305      	bcc.n	800598a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	429a      	cmp	r2, r3
 8005988:	d903      	bls.n	8005992 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005990:	e113      	b.n	8005bba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2200      	movs	r2, #0
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	60fa      	str	r2, [r7, #12]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	4a84      	ldr	r2, [pc, #528]	; (8005bb0 <UART_SetConfig+0x5c4>)
 80059a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2200      	movs	r2, #0
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059b4:	f7fb f970 	bl	8000c98 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	020b      	lsls	r3, r1, #8
 80059ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059ce:	0202      	lsls	r2, r0, #8
 80059d0:	6979      	ldr	r1, [r7, #20]
 80059d2:	6849      	ldr	r1, [r1, #4]
 80059d4:	0849      	lsrs	r1, r1, #1
 80059d6:	2000      	movs	r0, #0
 80059d8:	460c      	mov	r4, r1
 80059da:	4605      	mov	r5, r0
 80059dc:	eb12 0804 	adds.w	r8, r2, r4
 80059e0:	eb43 0905 	adc.w	r9, r3, r5
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	469a      	mov	sl, r3
 80059ec:	4693      	mov	fp, r2
 80059ee:	4652      	mov	r2, sl
 80059f0:	465b      	mov	r3, fp
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fb f94f 	bl	8000c98 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4613      	mov	r3, r2
 8005a00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a08:	d308      	bcc.n	8005a1c <UART_SetConfig+0x430>
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	d204      	bcs.n	8005a1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e0ce      	b.n	8005bba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a22:	e0ca      	b.n	8005bba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2c:	d166      	bne.n	8005afc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d827      	bhi.n	8005a86 <UART_SetConfig+0x49a>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0x450>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a87 	.word	0x08005a87
 8005a4c:	08005a77 	.word	0x08005a77
 8005a50:	08005a87 	.word	0x08005a87
 8005a54:	08005a87 	.word	0x08005a87
 8005a58:	08005a87 	.word	0x08005a87
 8005a5c:	08005a7f 	.word	0x08005a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a60:	f7fe fe20 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8005a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a66:	e014      	b.n	8005a92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a68:	f7fe fe32 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a6e:	e010      	b.n	8005a92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a70:	4b4e      	ldr	r3, [pc, #312]	; (8005bac <UART_SetConfig+0x5c0>)
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a74:	e00d      	b.n	8005a92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a76:	f7fe fda7 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a7c:	e009      	b.n	8005a92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a84:	e005      	b.n	8005a92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8090 	beq.w	8005bba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	4a44      	ldr	r2, [pc, #272]	; (8005bb0 <UART_SetConfig+0x5c4>)
 8005aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aac:	005a      	lsls	r2, r3, #1
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	441a      	add	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	d916      	bls.n	8005af4 <UART_SetConfig+0x508>
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d212      	bcs.n	8005af4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f023 030f 	bic.w	r3, r3, #15
 8005ad6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	8bfa      	ldrh	r2, [r7, #30]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	e062      	b.n	8005bba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005afa:	e05e      	b.n	8005bba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x56a>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x520>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fe fdb8 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8005b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b36:	e014      	b.n	8005b62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fe fdca 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b3e:	e010      	b.n	8005b62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <UART_SetConfig+0x5c0>)
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b44:	e00d      	b.n	8005b62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fe fd3f 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 8005b4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b4c:	e009      	b.n	8005b62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b54:	e005      	b.n	8005b62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b60:	bf00      	nop
    }

    if (pclk != 0U)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d028      	beq.n	8005bba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <UART_SetConfig+0x5c4>)
 8005b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	441a      	add	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	d910      	bls.n	8005bb4 <UART_SetConfig+0x5c8>
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d20c      	bcs.n	8005bb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0x5ce>
 8005ba6:	bf00      	nop
 8005ba8:	40008000 	.word	0x40008000
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	08008da4 	.word	0x08008da4
      }
      else
      {
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005bd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3730      	adds	r7, #48	; 0x30
 8005bde:	46bd      	mov	sp, r7
 8005be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce2:	d10a      	bne.n	8005cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b098      	sub	sp, #96	; 0x60
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d38:	f7fc fd62 	bl	8002800 <HAL_GetTick>
 8005d3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d12f      	bne.n	8005dac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f88e 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d022      	beq.n	8005dac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
 8005d86:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e063      	b.n	8005e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d149      	bne.n	8005e4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f857 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d03c      	beq.n	8005e4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	633b      	str	r3, [r7, #48]	; 0x30
 8005df4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e6      	bne.n	8005dd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e26:	61fa      	str	r2, [r7, #28]
 8005e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	617b      	str	r3, [r7, #20]
   return(result);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e5      	bne.n	8005e06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e012      	b.n	8005e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3758      	adds	r7, #88	; 0x58
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8c:	e04f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e94:	d04b      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fc fcb3 	bl	8002800 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e04e      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d037      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	d034      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d031      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d110      	bne.n	8005efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2208      	movs	r2, #8
 8005ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f838 	bl	8005f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e029      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f08:	d111      	bne.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f81e 	bl	8005f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e00f      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d0a0      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b095      	sub	sp, #84	; 0x54
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e3      	bne.n	8005f90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d118      	bne.n	8006002 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0310 	bic.w	r3, r3, #16
 8005fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006016:	bf00      	nop
 8006018:	3754      	adds	r7, #84	; 0x54
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_UARTEx_DisableFifoMode+0x16>
 8006034:	2302      	movs	r3, #2
 8006036:	e027      	b.n	8006088 <HAL_UARTEx_DisableFifoMode+0x66>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	; 0x24
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006066:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e02d      	b.n	8006108 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2224      	movs	r2, #36	; 0x24
 80060b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f84f 	bl	800618c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e02d      	b.n	8006184 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2224      	movs	r2, #36	; 0x24
 8006134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f811 	bl	800618c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	2b00      	cmp	r3, #0
 800619a:	d108      	bne.n	80061ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061ac:	e031      	b.n	8006212 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ae:	2308      	movs	r3, #8
 80061b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061b2:	2308      	movs	r3, #8
 80061b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	0e5b      	lsrs	r3, r3, #25
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	0f5b      	lsrs	r3, r3, #29
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	7b3a      	ldrb	r2, [r7, #12]
 80061da:	4911      	ldr	r1, [pc, #68]	; (8006220 <UARTEx_SetNbDataToProcess+0x94>)
 80061dc:	5c8a      	ldrb	r2, [r1, r2]
 80061de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061e2:	7b3a      	ldrb	r2, [r7, #12]
 80061e4:	490f      	ldr	r1, [pc, #60]	; (8006224 <UARTEx_SetNbDataToProcess+0x98>)
 80061e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	7b7a      	ldrb	r2, [r7, #13]
 80061f8:	4909      	ldr	r1, [pc, #36]	; (8006220 <UARTEx_SetNbDataToProcess+0x94>)
 80061fa:	5c8a      	ldrb	r2, [r1, r2]
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006200:	7b7a      	ldrb	r2, [r7, #13]
 8006202:	4908      	ldr	r1, [pc, #32]	; (8006224 <UARTEx_SetNbDataToProcess+0x98>)
 8006204:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006206:	fb93 f3f2 	sdiv	r3, r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	08008dbc 	.word	0x08008dbc
 8006224:	08008dc4 	.word	0x08008dc4

08006228 <__cvt>:
 8006228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	ec55 4b10 	vmov	r4, r5, d0
 8006230:	2d00      	cmp	r5, #0
 8006232:	460e      	mov	r6, r1
 8006234:	4619      	mov	r1, r3
 8006236:	462b      	mov	r3, r5
 8006238:	bfbb      	ittet	lt
 800623a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800623e:	461d      	movlt	r5, r3
 8006240:	2300      	movge	r3, #0
 8006242:	232d      	movlt	r3, #45	; 0x2d
 8006244:	700b      	strb	r3, [r1, #0]
 8006246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800624c:	4691      	mov	r9, r2
 800624e:	f023 0820 	bic.w	r8, r3, #32
 8006252:	bfbc      	itt	lt
 8006254:	4622      	movlt	r2, r4
 8006256:	4614      	movlt	r4, r2
 8006258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800625c:	d005      	beq.n	800626a <__cvt+0x42>
 800625e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006262:	d100      	bne.n	8006266 <__cvt+0x3e>
 8006264:	3601      	adds	r6, #1
 8006266:	2102      	movs	r1, #2
 8006268:	e000      	b.n	800626c <__cvt+0x44>
 800626a:	2103      	movs	r1, #3
 800626c:	ab03      	add	r3, sp, #12
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	ab02      	add	r3, sp, #8
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	ec45 4b10 	vmov	d0, r4, r5
 8006278:	4653      	mov	r3, sl
 800627a:	4632      	mov	r2, r6
 800627c:	f000 fef0 	bl	8007060 <_dtoa_r>
 8006280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006284:	4607      	mov	r7, r0
 8006286:	d102      	bne.n	800628e <__cvt+0x66>
 8006288:	f019 0f01 	tst.w	r9, #1
 800628c:	d022      	beq.n	80062d4 <__cvt+0xac>
 800628e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006292:	eb07 0906 	add.w	r9, r7, r6
 8006296:	d110      	bne.n	80062ba <__cvt+0x92>
 8006298:	783b      	ldrb	r3, [r7, #0]
 800629a:	2b30      	cmp	r3, #48	; 0x30
 800629c:	d10a      	bne.n	80062b4 <__cvt+0x8c>
 800629e:	2200      	movs	r2, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7fa fc37 	bl	8000b18 <__aeabi_dcmpeq>
 80062aa:	b918      	cbnz	r0, 80062b4 <__cvt+0x8c>
 80062ac:	f1c6 0601 	rsb	r6, r6, #1
 80062b0:	f8ca 6000 	str.w	r6, [sl]
 80062b4:	f8da 3000 	ldr.w	r3, [sl]
 80062b8:	4499      	add	r9, r3
 80062ba:	2200      	movs	r2, #0
 80062bc:	2300      	movs	r3, #0
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7fa fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80062c6:	b108      	cbz	r0, 80062cc <__cvt+0xa4>
 80062c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80062cc:	2230      	movs	r2, #48	; 0x30
 80062ce:	9b03      	ldr	r3, [sp, #12]
 80062d0:	454b      	cmp	r3, r9
 80062d2:	d307      	bcc.n	80062e4 <__cvt+0xbc>
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d8:	1bdb      	subs	r3, r3, r7
 80062da:	4638      	mov	r0, r7
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	b004      	add	sp, #16
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	1c59      	adds	r1, r3, #1
 80062e6:	9103      	str	r1, [sp, #12]
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e7f0      	b.n	80062ce <__cvt+0xa6>

080062ec <__exponent>:
 80062ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ee:	4603      	mov	r3, r0
 80062f0:	2900      	cmp	r1, #0
 80062f2:	bfb8      	it	lt
 80062f4:	4249      	neglt	r1, r1
 80062f6:	f803 2b02 	strb.w	r2, [r3], #2
 80062fa:	bfb4      	ite	lt
 80062fc:	222d      	movlt	r2, #45	; 0x2d
 80062fe:	222b      	movge	r2, #43	; 0x2b
 8006300:	2909      	cmp	r1, #9
 8006302:	7042      	strb	r2, [r0, #1]
 8006304:	dd2a      	ble.n	800635c <__exponent+0x70>
 8006306:	f10d 0207 	add.w	r2, sp, #7
 800630a:	4617      	mov	r7, r2
 800630c:	260a      	movs	r6, #10
 800630e:	4694      	mov	ip, r2
 8006310:	fb91 f5f6 	sdiv	r5, r1, r6
 8006314:	fb06 1415 	mls	r4, r6, r5, r1
 8006318:	3430      	adds	r4, #48	; 0x30
 800631a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800631e:	460c      	mov	r4, r1
 8006320:	2c63      	cmp	r4, #99	; 0x63
 8006322:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006326:	4629      	mov	r1, r5
 8006328:	dcf1      	bgt.n	800630e <__exponent+0x22>
 800632a:	3130      	adds	r1, #48	; 0x30
 800632c:	f1ac 0402 	sub.w	r4, ip, #2
 8006330:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006334:	1c41      	adds	r1, r0, #1
 8006336:	4622      	mov	r2, r4
 8006338:	42ba      	cmp	r2, r7
 800633a:	d30a      	bcc.n	8006352 <__exponent+0x66>
 800633c:	f10d 0209 	add.w	r2, sp, #9
 8006340:	eba2 020c 	sub.w	r2, r2, ip
 8006344:	42bc      	cmp	r4, r7
 8006346:	bf88      	it	hi
 8006348:	2200      	movhi	r2, #0
 800634a:	4413      	add	r3, r2
 800634c:	1a18      	subs	r0, r3, r0
 800634e:	b003      	add	sp, #12
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006352:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006356:	f801 5f01 	strb.w	r5, [r1, #1]!
 800635a:	e7ed      	b.n	8006338 <__exponent+0x4c>
 800635c:	2330      	movs	r3, #48	; 0x30
 800635e:	3130      	adds	r1, #48	; 0x30
 8006360:	7083      	strb	r3, [r0, #2]
 8006362:	70c1      	strb	r1, [r0, #3]
 8006364:	1d03      	adds	r3, r0, #4
 8006366:	e7f1      	b.n	800634c <__exponent+0x60>

08006368 <_printf_float>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	ed2d 8b02 	vpush	{d8}
 8006370:	b08d      	sub	sp, #52	; 0x34
 8006372:	460c      	mov	r4, r1
 8006374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006378:	4616      	mov	r6, r2
 800637a:	461f      	mov	r7, r3
 800637c:	4605      	mov	r5, r0
 800637e:	f000 fda5 	bl	8006ecc <_localeconv_r>
 8006382:	f8d0 a000 	ldr.w	sl, [r0]
 8006386:	4650      	mov	r0, sl
 8006388:	f7f9 ff9a 	bl	80002c0 <strlen>
 800638c:	2300      	movs	r3, #0
 800638e:	930a      	str	r3, [sp, #40]	; 0x28
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	9305      	str	r3, [sp, #20]
 8006394:	f8d8 3000 	ldr.w	r3, [r8]
 8006398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800639c:	3307      	adds	r3, #7
 800639e:	f023 0307 	bic.w	r3, r3, #7
 80063a2:	f103 0208 	add.w	r2, r3, #8
 80063a6:	f8c8 2000 	str.w	r2, [r8]
 80063aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80063b8:	ee08 0a10 	vmov	s16, r0
 80063bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80063c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c4:	4b9e      	ldr	r3, [pc, #632]	; (8006640 <_printf_float+0x2d8>)
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ca:	f7fa fbd7 	bl	8000b7c <__aeabi_dcmpun>
 80063ce:	bb88      	cbnz	r0, 8006434 <_printf_float+0xcc>
 80063d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d4:	4b9a      	ldr	r3, [pc, #616]	; (8006640 <_printf_float+0x2d8>)
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063da:	f7fa fbb1 	bl	8000b40 <__aeabi_dcmple>
 80063de:	bb48      	cbnz	r0, 8006434 <_printf_float+0xcc>
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	f7fa fba0 	bl	8000b2c <__aeabi_dcmplt>
 80063ec:	b110      	cbz	r0, 80063f4 <_printf_float+0x8c>
 80063ee:	232d      	movs	r3, #45	; 0x2d
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f4:	4a93      	ldr	r2, [pc, #588]	; (8006644 <_printf_float+0x2dc>)
 80063f6:	4b94      	ldr	r3, [pc, #592]	; (8006648 <_printf_float+0x2e0>)
 80063f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063fc:	bf94      	ite	ls
 80063fe:	4690      	movls	r8, r2
 8006400:	4698      	movhi	r8, r3
 8006402:	2303      	movs	r3, #3
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	9b05      	ldr	r3, [sp, #20]
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	f04f 0900 	mov.w	r9, #0
 8006412:	9700      	str	r7, [sp, #0]
 8006414:	4633      	mov	r3, r6
 8006416:	aa0b      	add	r2, sp, #44	; 0x2c
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 fa82 	bl	8006924 <_printf_common>
 8006420:	3001      	adds	r0, #1
 8006422:	f040 8090 	bne.w	8006546 <_printf_float+0x1de>
 8006426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642a:	b00d      	add	sp, #52	; 0x34
 800642c:	ecbd 8b02 	vpop	{d8}
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa fb9e 	bl	8000b7c <__aeabi_dcmpun>
 8006440:	b140      	cbz	r0, 8006454 <_printf_float+0xec>
 8006442:	464b      	mov	r3, r9
 8006444:	2b00      	cmp	r3, #0
 8006446:	bfbc      	itt	lt
 8006448:	232d      	movlt	r3, #45	; 0x2d
 800644a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800644e:	4a7f      	ldr	r2, [pc, #508]	; (800664c <_printf_float+0x2e4>)
 8006450:	4b7f      	ldr	r3, [pc, #508]	; (8006650 <_printf_float+0x2e8>)
 8006452:	e7d1      	b.n	80063f8 <_printf_float+0x90>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800645a:	9206      	str	r2, [sp, #24]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	d13f      	bne.n	80064e0 <_printf_float+0x178>
 8006460:	2306      	movs	r3, #6
 8006462:	6063      	str	r3, [r4, #4]
 8006464:	9b05      	ldr	r3, [sp, #20]
 8006466:	6861      	ldr	r1, [r4, #4]
 8006468:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800646c:	2300      	movs	r3, #0
 800646e:	9303      	str	r3, [sp, #12]
 8006470:	ab0a      	add	r3, sp, #40	; 0x28
 8006472:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006476:	ab09      	add	r3, sp, #36	; 0x24
 8006478:	ec49 8b10 	vmov	d0, r8, r9
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006484:	4628      	mov	r0, r5
 8006486:	f7ff fecf 	bl	8006228 <__cvt>
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800648e:	2b47      	cmp	r3, #71	; 0x47
 8006490:	4680      	mov	r8, r0
 8006492:	d108      	bne.n	80064a6 <_printf_float+0x13e>
 8006494:	1cc8      	adds	r0, r1, #3
 8006496:	db02      	blt.n	800649e <_printf_float+0x136>
 8006498:	6863      	ldr	r3, [r4, #4]
 800649a:	4299      	cmp	r1, r3
 800649c:	dd41      	ble.n	8006522 <_printf_float+0x1ba>
 800649e:	f1ab 0302 	sub.w	r3, fp, #2
 80064a2:	fa5f fb83 	uxtb.w	fp, r3
 80064a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064aa:	d820      	bhi.n	80064ee <_printf_float+0x186>
 80064ac:	3901      	subs	r1, #1
 80064ae:	465a      	mov	r2, fp
 80064b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064b4:	9109      	str	r1, [sp, #36]	; 0x24
 80064b6:	f7ff ff19 	bl	80062ec <__exponent>
 80064ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064bc:	1813      	adds	r3, r2, r0
 80064be:	2a01      	cmp	r2, #1
 80064c0:	4681      	mov	r9, r0
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	dc02      	bgt.n	80064cc <_printf_float+0x164>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	07d2      	lsls	r2, r2, #31
 80064ca:	d501      	bpl.n	80064d0 <_printf_float+0x168>
 80064cc:	3301      	adds	r3, #1
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d09c      	beq.n	8006412 <_printf_float+0xaa>
 80064d8:	232d      	movs	r3, #45	; 0x2d
 80064da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064de:	e798      	b.n	8006412 <_printf_float+0xaa>
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	2a47      	cmp	r2, #71	; 0x47
 80064e4:	d1be      	bne.n	8006464 <_printf_float+0xfc>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1bc      	bne.n	8006464 <_printf_float+0xfc>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7b9      	b.n	8006462 <_printf_float+0xfa>
 80064ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064f2:	d118      	bne.n	8006526 <_printf_float+0x1be>
 80064f4:	2900      	cmp	r1, #0
 80064f6:	6863      	ldr	r3, [r4, #4]
 80064f8:	dd0b      	ble.n	8006512 <_printf_float+0x1aa>
 80064fa:	6121      	str	r1, [r4, #16]
 80064fc:	b913      	cbnz	r3, 8006504 <_printf_float+0x19c>
 80064fe:	6822      	ldr	r2, [r4, #0]
 8006500:	07d0      	lsls	r0, r2, #31
 8006502:	d502      	bpl.n	800650a <_printf_float+0x1a2>
 8006504:	3301      	adds	r3, #1
 8006506:	440b      	add	r3, r1
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	65a1      	str	r1, [r4, #88]	; 0x58
 800650c:	f04f 0900 	mov.w	r9, #0
 8006510:	e7de      	b.n	80064d0 <_printf_float+0x168>
 8006512:	b913      	cbnz	r3, 800651a <_printf_float+0x1b2>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	07d2      	lsls	r2, r2, #31
 8006518:	d501      	bpl.n	800651e <_printf_float+0x1b6>
 800651a:	3302      	adds	r3, #2
 800651c:	e7f4      	b.n	8006508 <_printf_float+0x1a0>
 800651e:	2301      	movs	r3, #1
 8006520:	e7f2      	b.n	8006508 <_printf_float+0x1a0>
 8006522:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006528:	4299      	cmp	r1, r3
 800652a:	db05      	blt.n	8006538 <_printf_float+0x1d0>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	6121      	str	r1, [r4, #16]
 8006530:	07d8      	lsls	r0, r3, #31
 8006532:	d5ea      	bpl.n	800650a <_printf_float+0x1a2>
 8006534:	1c4b      	adds	r3, r1, #1
 8006536:	e7e7      	b.n	8006508 <_printf_float+0x1a0>
 8006538:	2900      	cmp	r1, #0
 800653a:	bfd4      	ite	le
 800653c:	f1c1 0202 	rsble	r2, r1, #2
 8006540:	2201      	movgt	r2, #1
 8006542:	4413      	add	r3, r2
 8006544:	e7e0      	b.n	8006508 <_printf_float+0x1a0>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	055a      	lsls	r2, r3, #21
 800654a:	d407      	bmi.n	800655c <_printf_float+0x1f4>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	4642      	mov	r2, r8
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	d12c      	bne.n	80065b4 <_printf_float+0x24c>
 800655a:	e764      	b.n	8006426 <_printf_float+0xbe>
 800655c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006560:	f240 80e0 	bls.w	8006724 <_printf_float+0x3bc>
 8006564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006568:	2200      	movs	r2, #0
 800656a:	2300      	movs	r3, #0
 800656c:	f7fa fad4 	bl	8000b18 <__aeabi_dcmpeq>
 8006570:	2800      	cmp	r0, #0
 8006572:	d034      	beq.n	80065de <_printf_float+0x276>
 8006574:	4a37      	ldr	r2, [pc, #220]	; (8006654 <_printf_float+0x2ec>)
 8006576:	2301      	movs	r3, #1
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	f43f af51 	beq.w	8006426 <_printf_float+0xbe>
 8006584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006588:	429a      	cmp	r2, r3
 800658a:	db02      	blt.n	8006592 <_printf_float+0x22a>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07d8      	lsls	r0, r3, #31
 8006590:	d510      	bpl.n	80065b4 <_printf_float+0x24c>
 8006592:	ee18 3a10 	vmov	r3, s16
 8006596:	4652      	mov	r2, sl
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f af41 	beq.w	8006426 <_printf_float+0xbe>
 80065a4:	f04f 0800 	mov.w	r8, #0
 80065a8:	f104 091a 	add.w	r9, r4, #26
 80065ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ae:	3b01      	subs	r3, #1
 80065b0:	4543      	cmp	r3, r8
 80065b2:	dc09      	bgt.n	80065c8 <_printf_float+0x260>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	079b      	lsls	r3, r3, #30
 80065b8:	f100 8107 	bmi.w	80067ca <_printf_float+0x462>
 80065bc:	68e0      	ldr	r0, [r4, #12]
 80065be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c0:	4298      	cmp	r0, r3
 80065c2:	bfb8      	it	lt
 80065c4:	4618      	movlt	r0, r3
 80065c6:	e730      	b.n	800642a <_printf_float+0xc2>
 80065c8:	2301      	movs	r3, #1
 80065ca:	464a      	mov	r2, r9
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f af27 	beq.w	8006426 <_printf_float+0xbe>
 80065d8:	f108 0801 	add.w	r8, r8, #1
 80065dc:	e7e6      	b.n	80065ac <_printf_float+0x244>
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dc39      	bgt.n	8006658 <_printf_float+0x2f0>
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <_printf_float+0x2ec>)
 80065e6:	2301      	movs	r3, #1
 80065e8:	4631      	mov	r1, r6
 80065ea:	4628      	mov	r0, r5
 80065ec:	47b8      	blx	r7
 80065ee:	3001      	adds	r0, #1
 80065f0:	f43f af19 	beq.w	8006426 <_printf_float+0xbe>
 80065f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d102      	bne.n	8006602 <_printf_float+0x29a>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	07d9      	lsls	r1, r3, #31
 8006600:	d5d8      	bpl.n	80065b4 <_printf_float+0x24c>
 8006602:	ee18 3a10 	vmov	r3, s16
 8006606:	4652      	mov	r2, sl
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af09 	beq.w	8006426 <_printf_float+0xbe>
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	f104 0a1a 	add.w	sl, r4, #26
 800661c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661e:	425b      	negs	r3, r3
 8006620:	454b      	cmp	r3, r9
 8006622:	dc01      	bgt.n	8006628 <_printf_float+0x2c0>
 8006624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006626:	e792      	b.n	800654e <_printf_float+0x1e6>
 8006628:	2301      	movs	r3, #1
 800662a:	4652      	mov	r2, sl
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f aef7 	beq.w	8006426 <_printf_float+0xbe>
 8006638:	f109 0901 	add.w	r9, r9, #1
 800663c:	e7ee      	b.n	800661c <_printf_float+0x2b4>
 800663e:	bf00      	nop
 8006640:	7fefffff 	.word	0x7fefffff
 8006644:	08008dcc 	.word	0x08008dcc
 8006648:	08008dd0 	.word	0x08008dd0
 800664c:	08008dd4 	.word	0x08008dd4
 8006650:	08008dd8 	.word	0x08008dd8
 8006654:	08008ddc 	.word	0x08008ddc
 8006658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665c:	429a      	cmp	r2, r3
 800665e:	bfa8      	it	ge
 8006660:	461a      	movge	r2, r3
 8006662:	2a00      	cmp	r2, #0
 8006664:	4691      	mov	r9, r2
 8006666:	dc37      	bgt.n	80066d8 <_printf_float+0x370>
 8006668:	f04f 0b00 	mov.w	fp, #0
 800666c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006670:	f104 021a 	add.w	r2, r4, #26
 8006674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	eba3 0309 	sub.w	r3, r3, r9
 800667c:	455b      	cmp	r3, fp
 800667e:	dc33      	bgt.n	80066e8 <_printf_float+0x380>
 8006680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006684:	429a      	cmp	r2, r3
 8006686:	db3b      	blt.n	8006700 <_printf_float+0x398>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07da      	lsls	r2, r3, #31
 800668c:	d438      	bmi.n	8006700 <_printf_float+0x398>
 800668e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006692:	eba2 0903 	sub.w	r9, r2, r3
 8006696:	9b05      	ldr	r3, [sp, #20]
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	4591      	cmp	r9, r2
 800669c:	bfa8      	it	ge
 800669e:	4691      	movge	r9, r2
 80066a0:	f1b9 0f00 	cmp.w	r9, #0
 80066a4:	dc35      	bgt.n	8006712 <_printf_float+0x3aa>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ae:	f104 0a1a 	add.w	sl, r4, #26
 80066b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	eba3 0309 	sub.w	r3, r3, r9
 80066bc:	4543      	cmp	r3, r8
 80066be:	f77f af79 	ble.w	80065b4 <_printf_float+0x24c>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f aeaa 	beq.w	8006426 <_printf_float+0xbe>
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	e7ec      	b.n	80066b2 <_printf_float+0x34a>
 80066d8:	4613      	mov	r3, r2
 80066da:	4631      	mov	r1, r6
 80066dc:	4642      	mov	r2, r8
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	d1c0      	bne.n	8006668 <_printf_float+0x300>
 80066e6:	e69e      	b.n	8006426 <_printf_float+0xbe>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	9205      	str	r2, [sp, #20]
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f ae97 	beq.w	8006426 <_printf_float+0xbe>
 80066f8:	9a05      	ldr	r2, [sp, #20]
 80066fa:	f10b 0b01 	add.w	fp, fp, #1
 80066fe:	e7b9      	b.n	8006674 <_printf_float+0x30c>
 8006700:	ee18 3a10 	vmov	r3, s16
 8006704:	4652      	mov	r2, sl
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	d1be      	bne.n	800668e <_printf_float+0x326>
 8006710:	e689      	b.n	8006426 <_printf_float+0xbe>
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	464b      	mov	r3, r9
 8006716:	4442      	add	r2, r8
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	d1c1      	bne.n	80066a6 <_printf_float+0x33e>
 8006722:	e680      	b.n	8006426 <_printf_float+0xbe>
 8006724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006726:	2a01      	cmp	r2, #1
 8006728:	dc01      	bgt.n	800672e <_printf_float+0x3c6>
 800672a:	07db      	lsls	r3, r3, #31
 800672c:	d53a      	bpl.n	80067a4 <_printf_float+0x43c>
 800672e:	2301      	movs	r3, #1
 8006730:	4642      	mov	r2, r8
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	f43f ae74 	beq.w	8006426 <_printf_float+0xbe>
 800673e:	ee18 3a10 	vmov	r3, s16
 8006742:	4652      	mov	r2, sl
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	f43f ae6b 	beq.w	8006426 <_printf_float+0xbe>
 8006750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800675c:	f7fa f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 8006760:	b9d8      	cbnz	r0, 800679a <_printf_float+0x432>
 8006762:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006766:	f108 0201 	add.w	r2, r8, #1
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	d10e      	bne.n	8006792 <_printf_float+0x42a>
 8006774:	e657      	b.n	8006426 <_printf_float+0xbe>
 8006776:	2301      	movs	r3, #1
 8006778:	4652      	mov	r2, sl
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae50 	beq.w	8006426 <_printf_float+0xbe>
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678c:	3b01      	subs	r3, #1
 800678e:	4543      	cmp	r3, r8
 8006790:	dcf1      	bgt.n	8006776 <_printf_float+0x40e>
 8006792:	464b      	mov	r3, r9
 8006794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006798:	e6da      	b.n	8006550 <_printf_float+0x1e8>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	f104 0a1a 	add.w	sl, r4, #26
 80067a2:	e7f2      	b.n	800678a <_printf_float+0x422>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4642      	mov	r2, r8
 80067a8:	e7df      	b.n	800676a <_printf_float+0x402>
 80067aa:	2301      	movs	r3, #1
 80067ac:	464a      	mov	r2, r9
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae36 	beq.w	8006426 <_printf_float+0xbe>
 80067ba:	f108 0801 	add.w	r8, r8, #1
 80067be:	68e3      	ldr	r3, [r4, #12]
 80067c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067c2:	1a5b      	subs	r3, r3, r1
 80067c4:	4543      	cmp	r3, r8
 80067c6:	dcf0      	bgt.n	80067aa <_printf_float+0x442>
 80067c8:	e6f8      	b.n	80065bc <_printf_float+0x254>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	f104 0919 	add.w	r9, r4, #25
 80067d2:	e7f4      	b.n	80067be <_printf_float+0x456>

080067d4 <malloc>:
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <malloc+0xc>)
 80067d6:	4601      	mov	r1, r0
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	f000 b823 	b.w	8006824 <_malloc_r>
 80067de:	bf00      	nop
 80067e0:	200000dc 	.word	0x200000dc

080067e4 <sbrk_aligned>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4e0e      	ldr	r6, [pc, #56]	; (8006820 <sbrk_aligned+0x3c>)
 80067e8:	460c      	mov	r4, r1
 80067ea:	6831      	ldr	r1, [r6, #0]
 80067ec:	4605      	mov	r5, r0
 80067ee:	b911      	cbnz	r1, 80067f6 <sbrk_aligned+0x12>
 80067f0:	f000 fb70 	bl	8006ed4 <_sbrk_r>
 80067f4:	6030      	str	r0, [r6, #0]
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 fb6b 	bl	8006ed4 <_sbrk_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d00a      	beq.n	8006818 <sbrk_aligned+0x34>
 8006802:	1cc4      	adds	r4, r0, #3
 8006804:	f024 0403 	bic.w	r4, r4, #3
 8006808:	42a0      	cmp	r0, r4
 800680a:	d007      	beq.n	800681c <sbrk_aligned+0x38>
 800680c:	1a21      	subs	r1, r4, r0
 800680e:	4628      	mov	r0, r5
 8006810:	f000 fb60 	bl	8006ed4 <_sbrk_r>
 8006814:	3001      	adds	r0, #1
 8006816:	d101      	bne.n	800681c <sbrk_aligned+0x38>
 8006818:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800681c:	4620      	mov	r0, r4
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	200005d8 	.word	0x200005d8

08006824 <_malloc_r>:
 8006824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006828:	1ccd      	adds	r5, r1, #3
 800682a:	f025 0503 	bic.w	r5, r5, #3
 800682e:	3508      	adds	r5, #8
 8006830:	2d0c      	cmp	r5, #12
 8006832:	bf38      	it	cc
 8006834:	250c      	movcc	r5, #12
 8006836:	2d00      	cmp	r5, #0
 8006838:	4607      	mov	r7, r0
 800683a:	db01      	blt.n	8006840 <_malloc_r+0x1c>
 800683c:	42a9      	cmp	r1, r5
 800683e:	d905      	bls.n	800684c <_malloc_r+0x28>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	2600      	movs	r6, #0
 8006846:	4630      	mov	r0, r6
 8006848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006920 <_malloc_r+0xfc>
 8006850:	f000 f9f8 	bl	8006c44 <__malloc_lock>
 8006854:	f8d8 3000 	ldr.w	r3, [r8]
 8006858:	461c      	mov	r4, r3
 800685a:	bb5c      	cbnz	r4, 80068b4 <_malloc_r+0x90>
 800685c:	4629      	mov	r1, r5
 800685e:	4638      	mov	r0, r7
 8006860:	f7ff ffc0 	bl	80067e4 <sbrk_aligned>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	4604      	mov	r4, r0
 8006868:	d155      	bne.n	8006916 <_malloc_r+0xf2>
 800686a:	f8d8 4000 	ldr.w	r4, [r8]
 800686e:	4626      	mov	r6, r4
 8006870:	2e00      	cmp	r6, #0
 8006872:	d145      	bne.n	8006900 <_malloc_r+0xdc>
 8006874:	2c00      	cmp	r4, #0
 8006876:	d048      	beq.n	800690a <_malloc_r+0xe6>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4631      	mov	r1, r6
 800687c:	4638      	mov	r0, r7
 800687e:	eb04 0903 	add.w	r9, r4, r3
 8006882:	f000 fb27 	bl	8006ed4 <_sbrk_r>
 8006886:	4581      	cmp	r9, r0
 8006888:	d13f      	bne.n	800690a <_malloc_r+0xe6>
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	1a6d      	subs	r5, r5, r1
 800688e:	4629      	mov	r1, r5
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ffa7 	bl	80067e4 <sbrk_aligned>
 8006896:	3001      	adds	r0, #1
 8006898:	d037      	beq.n	800690a <_malloc_r+0xe6>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	442b      	add	r3, r5
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	f8d8 3000 	ldr.w	r3, [r8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d038      	beq.n	800691a <_malloc_r+0xf6>
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	42a2      	cmp	r2, r4
 80068ac:	d12b      	bne.n	8006906 <_malloc_r+0xe2>
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	e00f      	b.n	80068d4 <_malloc_r+0xb0>
 80068b4:	6822      	ldr	r2, [r4, #0]
 80068b6:	1b52      	subs	r2, r2, r5
 80068b8:	d41f      	bmi.n	80068fa <_malloc_r+0xd6>
 80068ba:	2a0b      	cmp	r2, #11
 80068bc:	d917      	bls.n	80068ee <_malloc_r+0xca>
 80068be:	1961      	adds	r1, r4, r5
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	6025      	str	r5, [r4, #0]
 80068c4:	bf18      	it	ne
 80068c6:	6059      	strne	r1, [r3, #4]
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	bf08      	it	eq
 80068cc:	f8c8 1000 	streq.w	r1, [r8]
 80068d0:	5162      	str	r2, [r4, r5]
 80068d2:	604b      	str	r3, [r1, #4]
 80068d4:	4638      	mov	r0, r7
 80068d6:	f104 060b 	add.w	r6, r4, #11
 80068da:	f000 f9b9 	bl	8006c50 <__malloc_unlock>
 80068de:	f026 0607 	bic.w	r6, r6, #7
 80068e2:	1d23      	adds	r3, r4, #4
 80068e4:	1af2      	subs	r2, r6, r3
 80068e6:	d0ae      	beq.n	8006846 <_malloc_r+0x22>
 80068e8:	1b9b      	subs	r3, r3, r6
 80068ea:	50a3      	str	r3, [r4, r2]
 80068ec:	e7ab      	b.n	8006846 <_malloc_r+0x22>
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	d1dd      	bne.n	80068b0 <_malloc_r+0x8c>
 80068f4:	f8c8 2000 	str.w	r2, [r8]
 80068f8:	e7ec      	b.n	80068d4 <_malloc_r+0xb0>
 80068fa:	4623      	mov	r3, r4
 80068fc:	6864      	ldr	r4, [r4, #4]
 80068fe:	e7ac      	b.n	800685a <_malloc_r+0x36>
 8006900:	4634      	mov	r4, r6
 8006902:	6876      	ldr	r6, [r6, #4]
 8006904:	e7b4      	b.n	8006870 <_malloc_r+0x4c>
 8006906:	4613      	mov	r3, r2
 8006908:	e7cc      	b.n	80068a4 <_malloc_r+0x80>
 800690a:	230c      	movs	r3, #12
 800690c:	603b      	str	r3, [r7, #0]
 800690e:	4638      	mov	r0, r7
 8006910:	f000 f99e 	bl	8006c50 <__malloc_unlock>
 8006914:	e797      	b.n	8006846 <_malloc_r+0x22>
 8006916:	6025      	str	r5, [r4, #0]
 8006918:	e7dc      	b.n	80068d4 <_malloc_r+0xb0>
 800691a:	605b      	str	r3, [r3, #4]
 800691c:	deff      	udf	#255	; 0xff
 800691e:	bf00      	nop
 8006920:	200005d4 	.word	0x200005d4

08006924 <_printf_common>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	4616      	mov	r6, r2
 800692a:	4699      	mov	r9, r3
 800692c:	688a      	ldr	r2, [r1, #8]
 800692e:	690b      	ldr	r3, [r1, #16]
 8006930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006934:	4293      	cmp	r3, r2
 8006936:	bfb8      	it	lt
 8006938:	4613      	movlt	r3, r2
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006940:	4607      	mov	r7, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b10a      	cbz	r2, 800694a <_printf_common+0x26>
 8006946:	3301      	adds	r3, #1
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	0699      	lsls	r1, r3, #26
 800694e:	bf42      	ittt	mi
 8006950:	6833      	ldrmi	r3, [r6, #0]
 8006952:	3302      	addmi	r3, #2
 8006954:	6033      	strmi	r3, [r6, #0]
 8006956:	6825      	ldr	r5, [r4, #0]
 8006958:	f015 0506 	ands.w	r5, r5, #6
 800695c:	d106      	bne.n	800696c <_printf_common+0x48>
 800695e:	f104 0a19 	add.w	sl, r4, #25
 8006962:	68e3      	ldr	r3, [r4, #12]
 8006964:	6832      	ldr	r2, [r6, #0]
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc26      	bgt.n	80069ba <_printf_common+0x96>
 800696c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006970:	1e13      	subs	r3, r2, #0
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	bf18      	it	ne
 8006976:	2301      	movne	r3, #1
 8006978:	0692      	lsls	r2, r2, #26
 800697a:	d42b      	bmi.n	80069d4 <_printf_common+0xb0>
 800697c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006980:	4649      	mov	r1, r9
 8006982:	4638      	mov	r0, r7
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d01e      	beq.n	80069c8 <_printf_common+0xa4>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	2b04      	cmp	r3, #4
 8006994:	bf02      	ittt	eq
 8006996:	68e5      	ldreq	r5, [r4, #12]
 8006998:	6833      	ldreq	r3, [r6, #0]
 800699a:	1aed      	subeq	r5, r5, r3
 800699c:	68a3      	ldr	r3, [r4, #8]
 800699e:	bf0c      	ite	eq
 80069a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a4:	2500      	movne	r5, #0
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bfc4      	itt	gt
 80069aa:	1a9b      	subgt	r3, r3, r2
 80069ac:	18ed      	addgt	r5, r5, r3
 80069ae:	2600      	movs	r6, #0
 80069b0:	341a      	adds	r4, #26
 80069b2:	42b5      	cmp	r5, r6
 80069b4:	d11a      	bne.n	80069ec <_printf_common+0xc8>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e008      	b.n	80069cc <_printf_common+0xa8>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4652      	mov	r2, sl
 80069be:	4649      	mov	r1, r9
 80069c0:	4638      	mov	r0, r7
 80069c2:	47c0      	blx	r8
 80069c4:	3001      	adds	r0, #1
 80069c6:	d103      	bne.n	80069d0 <_printf_common+0xac>
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d0:	3501      	adds	r5, #1
 80069d2:	e7c6      	b.n	8006962 <_printf_common+0x3e>
 80069d4:	18e1      	adds	r1, r4, r3
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	2030      	movs	r0, #48	; 0x30
 80069da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069de:	4422      	add	r2, r4
 80069e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069e8:	3302      	adds	r3, #2
 80069ea:	e7c7      	b.n	800697c <_printf_common+0x58>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4622      	mov	r2, r4
 80069f0:	4649      	mov	r1, r9
 80069f2:	4638      	mov	r0, r7
 80069f4:	47c0      	blx	r8
 80069f6:	3001      	adds	r0, #1
 80069f8:	d0e6      	beq.n	80069c8 <_printf_common+0xa4>
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7d9      	b.n	80069b2 <_printf_common+0x8e>
	...

08006a00 <_printf_i>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	7e0f      	ldrb	r7, [r1, #24]
 8006a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a08:	2f78      	cmp	r7, #120	; 0x78
 8006a0a:	4691      	mov	r9, r2
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	469a      	mov	sl, r3
 8006a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a16:	d807      	bhi.n	8006a28 <_printf_i+0x28>
 8006a18:	2f62      	cmp	r7, #98	; 0x62
 8006a1a:	d80a      	bhi.n	8006a32 <_printf_i+0x32>
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	f000 80d4 	beq.w	8006bca <_printf_i+0x1ca>
 8006a22:	2f58      	cmp	r7, #88	; 0x58
 8006a24:	f000 80c0 	beq.w	8006ba8 <_printf_i+0x1a8>
 8006a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a30:	e03a      	b.n	8006aa8 <_printf_i+0xa8>
 8006a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a36:	2b15      	cmp	r3, #21
 8006a38:	d8f6      	bhi.n	8006a28 <_printf_i+0x28>
 8006a3a:	a101      	add	r1, pc, #4	; (adr r1, 8006a40 <_printf_i+0x40>)
 8006a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aad 	.word	0x08006aad
 8006a48:	08006a29 	.word	0x08006a29
 8006a4c:	08006a29 	.word	0x08006a29
 8006a50:	08006a29 	.word	0x08006a29
 8006a54:	08006a29 	.word	0x08006a29
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006a29 	.word	0x08006a29
 8006a60:	08006a29 	.word	0x08006a29
 8006a64:	08006a29 	.word	0x08006a29
 8006a68:	08006a29 	.word	0x08006a29
 8006a6c:	08006bb1 	.word	0x08006bb1
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006b6b 	.word	0x08006b6b
 8006a78:	08006a29 	.word	0x08006a29
 8006a7c:	08006a29 	.word	0x08006a29
 8006a80:	08006bd3 	.word	0x08006bd3
 8006a84:	08006a29 	.word	0x08006a29
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006a29 	.word	0x08006a29
 8006a90:	08006a29 	.word	0x08006a29
 8006a94:	08006b73 	.word	0x08006b73
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	602a      	str	r2, [r5, #0]
 8006aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e09f      	b.n	8006bec <_printf_i+0x1ec>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	0607      	lsls	r7, r0, #24
 8006ab2:	f103 0104 	add.w	r1, r3, #4
 8006ab6:	6029      	str	r1, [r5, #0]
 8006ab8:	d501      	bpl.n	8006abe <_printf_i+0xbe>
 8006aba:	681e      	ldr	r6, [r3, #0]
 8006abc:	e003      	b.n	8006ac6 <_printf_i+0xc6>
 8006abe:	0646      	lsls	r6, r0, #25
 8006ac0:	d5fb      	bpl.n	8006aba <_printf_i+0xba>
 8006ac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	da03      	bge.n	8006ad2 <_printf_i+0xd2>
 8006aca:	232d      	movs	r3, #45	; 0x2d
 8006acc:	4276      	negs	r6, r6
 8006ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad2:	485a      	ldr	r0, [pc, #360]	; (8006c3c <_printf_i+0x23c>)
 8006ad4:	230a      	movs	r3, #10
 8006ad6:	e012      	b.n	8006afe <_printf_i+0xfe>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	1d19      	adds	r1, r3, #4
 8006ade:	6029      	str	r1, [r5, #0]
 8006ae0:	0605      	lsls	r5, r0, #24
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_i+0xe8>
 8006ae4:	681e      	ldr	r6, [r3, #0]
 8006ae6:	e002      	b.n	8006aee <_printf_i+0xee>
 8006ae8:	0641      	lsls	r1, r0, #25
 8006aea:	d5fb      	bpl.n	8006ae4 <_printf_i+0xe4>
 8006aec:	881e      	ldrh	r6, [r3, #0]
 8006aee:	4853      	ldr	r0, [pc, #332]	; (8006c3c <_printf_i+0x23c>)
 8006af0:	2f6f      	cmp	r7, #111	; 0x6f
 8006af2:	bf0c      	ite	eq
 8006af4:	2308      	moveq	r3, #8
 8006af6:	230a      	movne	r3, #10
 8006af8:	2100      	movs	r1, #0
 8006afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006afe:	6865      	ldr	r5, [r4, #4]
 8006b00:	60a5      	str	r5, [r4, #8]
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	bfa2      	ittt	ge
 8006b06:	6821      	ldrge	r1, [r4, #0]
 8006b08:	f021 0104 	bicge.w	r1, r1, #4
 8006b0c:	6021      	strge	r1, [r4, #0]
 8006b0e:	b90e      	cbnz	r6, 8006b14 <_printf_i+0x114>
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	d04b      	beq.n	8006bac <_printf_i+0x1ac>
 8006b14:	4615      	mov	r5, r2
 8006b16:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b1a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b1e:	5dc7      	ldrb	r7, [r0, r7]
 8006b20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b24:	4637      	mov	r7, r6
 8006b26:	42bb      	cmp	r3, r7
 8006b28:	460e      	mov	r6, r1
 8006b2a:	d9f4      	bls.n	8006b16 <_printf_i+0x116>
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d10b      	bne.n	8006b48 <_printf_i+0x148>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	07de      	lsls	r6, r3, #31
 8006b34:	d508      	bpl.n	8006b48 <_printf_i+0x148>
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	6861      	ldr	r1, [r4, #4]
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	bfde      	ittt	le
 8006b3e:	2330      	movle	r3, #48	; 0x30
 8006b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b48:	1b52      	subs	r2, r2, r5
 8006b4a:	6122      	str	r2, [r4, #16]
 8006b4c:	f8cd a000 	str.w	sl, [sp]
 8006b50:	464b      	mov	r3, r9
 8006b52:	aa03      	add	r2, sp, #12
 8006b54:	4621      	mov	r1, r4
 8006b56:	4640      	mov	r0, r8
 8006b58:	f7ff fee4 	bl	8006924 <_printf_common>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d14a      	bne.n	8006bf6 <_printf_i+0x1f6>
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b64:	b004      	add	sp, #16
 8006b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	f043 0320 	orr.w	r3, r3, #32
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	4833      	ldr	r0, [pc, #204]	; (8006c40 <_printf_i+0x240>)
 8006b74:	2778      	movs	r7, #120	; 0x78
 8006b76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	6829      	ldr	r1, [r5, #0]
 8006b7e:	061f      	lsls	r7, r3, #24
 8006b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b84:	d402      	bmi.n	8006b8c <_printf_i+0x18c>
 8006b86:	065f      	lsls	r7, r3, #25
 8006b88:	bf48      	it	mi
 8006b8a:	b2b6      	uxthmi	r6, r6
 8006b8c:	07df      	lsls	r7, r3, #31
 8006b8e:	bf48      	it	mi
 8006b90:	f043 0320 	orrmi.w	r3, r3, #32
 8006b94:	6029      	str	r1, [r5, #0]
 8006b96:	bf48      	it	mi
 8006b98:	6023      	strmi	r3, [r4, #0]
 8006b9a:	b91e      	cbnz	r6, 8006ba4 <_printf_i+0x1a4>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	f023 0320 	bic.w	r3, r3, #32
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	e7a7      	b.n	8006af8 <_printf_i+0xf8>
 8006ba8:	4824      	ldr	r0, [pc, #144]	; (8006c3c <_printf_i+0x23c>)
 8006baa:	e7e4      	b.n	8006b76 <_printf_i+0x176>
 8006bac:	4615      	mov	r5, r2
 8006bae:	e7bd      	b.n	8006b2c <_printf_i+0x12c>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	6826      	ldr	r6, [r4, #0]
 8006bb4:	6961      	ldr	r1, [r4, #20]
 8006bb6:	1d18      	adds	r0, r3, #4
 8006bb8:	6028      	str	r0, [r5, #0]
 8006bba:	0635      	lsls	r5, r6, #24
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_i+0x1c4>
 8006bc0:	6019      	str	r1, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <_printf_i+0x1ca>
 8006bc4:	0670      	lsls	r0, r6, #25
 8006bc6:	d5fb      	bpl.n	8006bc0 <_printf_i+0x1c0>
 8006bc8:	8019      	strh	r1, [r3, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	4615      	mov	r5, r2
 8006bd0:	e7bc      	b.n	8006b4c <_printf_i+0x14c>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	1d1a      	adds	r2, r3, #4
 8006bd6:	602a      	str	r2, [r5, #0]
 8006bd8:	681d      	ldr	r5, [r3, #0]
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4628      	mov	r0, r5
 8006be0:	f7f9 fb1e 	bl	8000220 <memchr>
 8006be4:	b108      	cbz	r0, 8006bea <_printf_i+0x1ea>
 8006be6:	1b40      	subs	r0, r0, r5
 8006be8:	6060      	str	r0, [r4, #4]
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	e7aa      	b.n	8006b4c <_printf_i+0x14c>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	47d0      	blx	sl
 8006c00:	3001      	adds	r0, #1
 8006c02:	d0ad      	beq.n	8006b60 <_printf_i+0x160>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	079b      	lsls	r3, r3, #30
 8006c08:	d413      	bmi.n	8006c32 <_printf_i+0x232>
 8006c0a:	68e0      	ldr	r0, [r4, #12]
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	bfb8      	it	lt
 8006c12:	4618      	movlt	r0, r3
 8006c14:	e7a6      	b.n	8006b64 <_printf_i+0x164>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	47d0      	blx	sl
 8006c20:	3001      	adds	r0, #1
 8006c22:	d09d      	beq.n	8006b60 <_printf_i+0x160>
 8006c24:	3501      	adds	r5, #1
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	9903      	ldr	r1, [sp, #12]
 8006c2a:	1a5b      	subs	r3, r3, r1
 8006c2c:	42ab      	cmp	r3, r5
 8006c2e:	dcf2      	bgt.n	8006c16 <_printf_i+0x216>
 8006c30:	e7eb      	b.n	8006c0a <_printf_i+0x20a>
 8006c32:	2500      	movs	r5, #0
 8006c34:	f104 0619 	add.w	r6, r4, #25
 8006c38:	e7f5      	b.n	8006c26 <_printf_i+0x226>
 8006c3a:	bf00      	nop
 8006c3c:	08008dde 	.word	0x08008dde
 8006c40:	08008def 	.word	0x08008def

08006c44 <__malloc_lock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__malloc_lock+0x8>)
 8006c46:	f000 b980 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	20000718 	.word	0x20000718

08006c50 <__malloc_unlock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__malloc_unlock+0x8>)
 8006c52:	f000 b97b 	b.w	8006f4c <__retarget_lock_release_recursive>
 8006c56:	bf00      	nop
 8006c58:	20000718 	.word	0x20000718

08006c5c <std>:
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	e9c0 3300 	strd	r3, r3, [r0]
 8006c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c6a:	6083      	str	r3, [r0, #8]
 8006c6c:	8181      	strh	r1, [r0, #12]
 8006c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c70:	81c2      	strh	r2, [r0, #14]
 8006c72:	6183      	str	r3, [r0, #24]
 8006c74:	4619      	mov	r1, r3
 8006c76:	2208      	movs	r2, #8
 8006c78:	305c      	adds	r0, #92	; 0x5c
 8006c7a:	f000 f91f 	bl	8006ebc <memset>
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <std+0x58>)
 8006c80:	6263      	str	r3, [r4, #36]	; 0x24
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <std+0x5c>)
 8006c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <std+0x60>)
 8006c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <std+0x64>)
 8006c8c:	6323      	str	r3, [r4, #48]	; 0x30
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <std+0x68>)
 8006c90:	6224      	str	r4, [r4, #32]
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d006      	beq.n	8006ca4 <std+0x48>
 8006c96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c9a:	4294      	cmp	r4, r2
 8006c9c:	d002      	beq.n	8006ca4 <std+0x48>
 8006c9e:	33d0      	adds	r3, #208	; 0xd0
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	d105      	bne.n	8006cb0 <std+0x54>
 8006ca4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cac:	f000 b94c 	b.w	8006f48 <__retarget_lock_init_recursive>
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	080087b9 	.word	0x080087b9
 8006cb8:	080087db 	.word	0x080087db
 8006cbc:	08008813 	.word	0x08008813
 8006cc0:	08008837 	.word	0x08008837
 8006cc4:	200005dc 	.word	0x200005dc

08006cc8 <stdio_exit_handler>:
 8006cc8:	4a02      	ldr	r2, [pc, #8]	; (8006cd4 <stdio_exit_handler+0xc>)
 8006cca:	4903      	ldr	r1, [pc, #12]	; (8006cd8 <stdio_exit_handler+0x10>)
 8006ccc:	4803      	ldr	r0, [pc, #12]	; (8006cdc <stdio_exit_handler+0x14>)
 8006cce:	f000 b869 	b.w	8006da4 <_fwalk_sglue>
 8006cd2:	bf00      	nop
 8006cd4:	20000084 	.word	0x20000084
 8006cd8:	08008071 	.word	0x08008071
 8006cdc:	20000090 	.word	0x20000090

08006ce0 <cleanup_stdio>:
 8006ce0:	6841      	ldr	r1, [r0, #4]
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <cleanup_stdio+0x34>)
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	4604      	mov	r4, r0
 8006cea:	d001      	beq.n	8006cf0 <cleanup_stdio+0x10>
 8006cec:	f001 f9c0 	bl	8008070 <_fflush_r>
 8006cf0:	68a1      	ldr	r1, [r4, #8]
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <cleanup_stdio+0x38>)
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <cleanup_stdio+0x1e>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f001 f9b9 	bl	8008070 <_fflush_r>
 8006cfe:	68e1      	ldr	r1, [r4, #12]
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <cleanup_stdio+0x3c>)
 8006d02:	4299      	cmp	r1, r3
 8006d04:	d004      	beq.n	8006d10 <cleanup_stdio+0x30>
 8006d06:	4620      	mov	r0, r4
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f001 b9b0 	b.w	8008070 <_fflush_r>
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop
 8006d14:	200005dc 	.word	0x200005dc
 8006d18:	20000644 	.word	0x20000644
 8006d1c:	200006ac 	.word	0x200006ac

08006d20 <global_stdio_init.part.0>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <global_stdio_init.part.0+0x30>)
 8006d24:	4c0b      	ldr	r4, [pc, #44]	; (8006d54 <global_stdio_init.part.0+0x34>)
 8006d26:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <global_stdio_init.part.0+0x38>)
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2104      	movs	r1, #4
 8006d30:	f7ff ff94 	bl	8006c5c <std>
 8006d34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2109      	movs	r1, #9
 8006d3c:	f7ff ff8e 	bl	8006c5c <std>
 8006d40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d44:	2202      	movs	r2, #2
 8006d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d4a:	2112      	movs	r1, #18
 8006d4c:	f7ff bf86 	b.w	8006c5c <std>
 8006d50:	20000714 	.word	0x20000714
 8006d54:	200005dc 	.word	0x200005dc
 8006d58:	08006cc9 	.word	0x08006cc9

08006d5c <__sfp_lock_acquire>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__sfp_lock_acquire+0x8>)
 8006d5e:	f000 b8f4 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000719 	.word	0x20000719

08006d68 <__sfp_lock_release>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_release+0x8>)
 8006d6a:	f000 b8ef 	b.w	8006f4c <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20000719 	.word	0x20000719

08006d74 <__sinit>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	f7ff fff0 	bl	8006d5c <__sfp_lock_acquire>
 8006d7c:	6a23      	ldr	r3, [r4, #32]
 8006d7e:	b11b      	cbz	r3, 8006d88 <__sinit+0x14>
 8006d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d84:	f7ff bff0 	b.w	8006d68 <__sfp_lock_release>
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <__sinit+0x28>)
 8006d8a:	6223      	str	r3, [r4, #32]
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <__sinit+0x2c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f5      	bne.n	8006d80 <__sinit+0xc>
 8006d94:	f7ff ffc4 	bl	8006d20 <global_stdio_init.part.0>
 8006d98:	e7f2      	b.n	8006d80 <__sinit+0xc>
 8006d9a:	bf00      	nop
 8006d9c:	08006ce1 	.word	0x08006ce1
 8006da0:	20000714 	.word	0x20000714

08006da4 <_fwalk_sglue>:
 8006da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da8:	4607      	mov	r7, r0
 8006daa:	4688      	mov	r8, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	2600      	movs	r6, #0
 8006db0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006db4:	f1b9 0901 	subs.w	r9, r9, #1
 8006db8:	d505      	bpl.n	8006dc6 <_fwalk_sglue+0x22>
 8006dba:	6824      	ldr	r4, [r4, #0]
 8006dbc:	2c00      	cmp	r4, #0
 8006dbe:	d1f7      	bne.n	8006db0 <_fwalk_sglue+0xc>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d907      	bls.n	8006ddc <_fwalk_sglue+0x38>
 8006dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	d003      	beq.n	8006ddc <_fwalk_sglue+0x38>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	4306      	orrs	r6, r0
 8006ddc:	3568      	adds	r5, #104	; 0x68
 8006dde:	e7e9      	b.n	8006db4 <_fwalk_sglue+0x10>

08006de0 <iprintf>:
 8006de0:	b40f      	push	{r0, r1, r2, r3}
 8006de2:	b507      	push	{r0, r1, r2, lr}
 8006de4:	4906      	ldr	r1, [pc, #24]	; (8006e00 <iprintf+0x20>)
 8006de6:	ab04      	add	r3, sp, #16
 8006de8:	6808      	ldr	r0, [r1, #0]
 8006dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dee:	6881      	ldr	r1, [r0, #8]
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	f000 ff9d 	bl	8007d30 <_vfiprintf_r>
 8006df6:	b003      	add	sp, #12
 8006df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dfc:	b004      	add	sp, #16
 8006dfe:	4770      	bx	lr
 8006e00:	200000dc 	.word	0x200000dc

08006e04 <_puts_r>:
 8006e04:	6a03      	ldr	r3, [r0, #32]
 8006e06:	b570      	push	{r4, r5, r6, lr}
 8006e08:	6884      	ldr	r4, [r0, #8]
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	b90b      	cbnz	r3, 8006e14 <_puts_r+0x10>
 8006e10:	f7ff ffb0 	bl	8006d74 <__sinit>
 8006e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e16:	07db      	lsls	r3, r3, #31
 8006e18:	d405      	bmi.n	8006e26 <_puts_r+0x22>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	0598      	lsls	r0, r3, #22
 8006e1e:	d402      	bmi.n	8006e26 <_puts_r+0x22>
 8006e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e22:	f000 f892 	bl	8006f4a <__retarget_lock_acquire_recursive>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	0719      	lsls	r1, r3, #28
 8006e2a:	d513      	bpl.n	8006e54 <_puts_r+0x50>
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	b18b      	cbz	r3, 8006e54 <_puts_r+0x50>
 8006e30:	3e01      	subs	r6, #1
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	b9e9      	cbnz	r1, 8006e7a <_puts_r+0x76>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da2e      	bge.n	8006ea0 <_puts_r+0x9c>
 8006e42:	4622      	mov	r2, r4
 8006e44:	210a      	movs	r1, #10
 8006e46:	4628      	mov	r0, r5
 8006e48:	f001 fcf9 	bl	800883e <__swbuf_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d007      	beq.n	8006e60 <_puts_r+0x5c>
 8006e50:	250a      	movs	r5, #10
 8006e52:	e007      	b.n	8006e64 <_puts_r+0x60>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f001 fd2e 	bl	80088b8 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0e7      	beq.n	8006e30 <_puts_r+0x2c>
 8006e60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d405      	bmi.n	8006e76 <_puts_r+0x72>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	d402      	bmi.n	8006e76 <_puts_r+0x72>
 8006e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e72:	f000 f86b 	bl	8006f4c <__retarget_lock_release_recursive>
 8006e76:	4628      	mov	r0, r5
 8006e78:	bd70      	pop	{r4, r5, r6, pc}
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da04      	bge.n	8006e88 <_puts_r+0x84>
 8006e7e:	69a2      	ldr	r2, [r4, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	dc06      	bgt.n	8006e92 <_puts_r+0x8e>
 8006e84:	290a      	cmp	r1, #10
 8006e86:	d004      	beq.n	8006e92 <_puts_r+0x8e>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	7019      	strb	r1, [r3, #0]
 8006e90:	e7cf      	b.n	8006e32 <_puts_r+0x2e>
 8006e92:	4622      	mov	r2, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f001 fcd2 	bl	800883e <__swbuf_r>
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d1c9      	bne.n	8006e32 <_puts_r+0x2e>
 8006e9e:	e7df      	b.n	8006e60 <_puts_r+0x5c>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	250a      	movs	r5, #10
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	6022      	str	r2, [r4, #0]
 8006ea8:	701d      	strb	r5, [r3, #0]
 8006eaa:	e7db      	b.n	8006e64 <_puts_r+0x60>

08006eac <puts>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <puts+0xc>)
 8006eae:	4601      	mov	r1, r0
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	f7ff bfa7 	b.w	8006e04 <_puts_r>
 8006eb6:	bf00      	nop
 8006eb8:	200000dc 	.word	0x200000dc

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <_localeconv_r>:
 8006ecc:	4800      	ldr	r0, [pc, #0]	; (8006ed0 <_localeconv_r+0x4>)
 8006ece:	4770      	bx	lr
 8006ed0:	200001d0 	.word	0x200001d0

08006ed4 <_sbrk_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d06      	ldr	r5, [pc, #24]	; (8006ef0 <_sbrk_r+0x1c>)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	602b      	str	r3, [r5, #0]
 8006ee0:	f7fb fbb8 	bl	8002654 <_sbrk>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_sbrk_r+0x1a>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_sbrk_r+0x1a>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	2000071c 	.word	0x2000071c

08006ef4 <__errno>:
 8006ef4:	4b01      	ldr	r3, [pc, #4]	; (8006efc <__errno+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	200000dc 	.word	0x200000dc

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	; (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	; (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	; (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	; (8006f44 <__libc_init_array+0x44>)
 8006f14:	f001 feb0 	bl	8008c78 <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	08009144 	.word	0x08009144
 8006f3c:	08009144 	.word	0x08009144
 8006f40:	08009144 	.word	0x08009144
 8006f44:	08009148 	.word	0x08009148

08006f48 <__retarget_lock_init_recursive>:
 8006f48:	4770      	bx	lr

08006f4a <__retarget_lock_acquire_recursive>:
 8006f4a:	4770      	bx	lr

08006f4c <__retarget_lock_release_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <quorem>:
 8006f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f52:	6903      	ldr	r3, [r0, #16]
 8006f54:	690c      	ldr	r4, [r1, #16]
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	4607      	mov	r7, r0
 8006f5a:	db7e      	blt.n	800705a <quorem+0x10c>
 8006f5c:	3c01      	subs	r4, #1
 8006f5e:	f101 0814 	add.w	r8, r1, #20
 8006f62:	f100 0514 	add.w	r5, r0, #20
 8006f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f74:	3301      	adds	r3, #1
 8006f76:	429a      	cmp	r2, r3
 8006f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f84:	d331      	bcc.n	8006fea <quorem+0x9c>
 8006f86:	f04f 0e00 	mov.w	lr, #0
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	46ac      	mov	ip, r5
 8006f8e:	46f2      	mov	sl, lr
 8006f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f94:	b293      	uxth	r3, r2
 8006f96:	fb06 e303 	mla	r3, r6, r3, lr
 8006f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f9e:	0c1a      	lsrs	r2, r3, #16
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8006fa6:	f8dc a000 	ldr.w	sl, [ip]
 8006faa:	fa13 f38a 	uxtah	r3, r3, sl
 8006fae:	fb06 220e 	mla	r2, r6, lr, r2
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	9b00      	ldr	r3, [sp, #0]
 8006fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fc8:	4581      	cmp	r9, r0
 8006fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fce:	f84c 3b04 	str.w	r3, [ip], #4
 8006fd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fd6:	d2db      	bcs.n	8006f90 <quorem+0x42>
 8006fd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fdc:	b92b      	cbnz	r3, 8006fea <quorem+0x9c>
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	d32c      	bcc.n	8007042 <quorem+0xf4>
 8006fe8:	613c      	str	r4, [r7, #16]
 8006fea:	4638      	mov	r0, r7
 8006fec:	f001 fae4 	bl	80085b8 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	db22      	blt.n	800703a <quorem+0xec>
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ffe:	f8d1 c000 	ldr.w	ip, [r1]
 8007002:	b293      	uxth	r3, r2
 8007004:	1ac3      	subs	r3, r0, r3
 8007006:	0c12      	lsrs	r2, r2, #16
 8007008:	fa13 f38c 	uxtah	r3, r3, ip
 800700c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007014:	b29b      	uxth	r3, r3
 8007016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701a:	45c1      	cmp	r9, r8
 800701c:	f841 3b04 	str.w	r3, [r1], #4
 8007020:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007024:	d2e9      	bcs.n	8006ffa <quorem+0xac>
 8007026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800702a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800702e:	b922      	cbnz	r2, 800703a <quorem+0xec>
 8007030:	3b04      	subs	r3, #4
 8007032:	429d      	cmp	r5, r3
 8007034:	461a      	mov	r2, r3
 8007036:	d30a      	bcc.n	800704e <quorem+0x100>
 8007038:	613c      	str	r4, [r7, #16]
 800703a:	4630      	mov	r0, r6
 800703c:	b003      	add	sp, #12
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	3b04      	subs	r3, #4
 8007046:	2a00      	cmp	r2, #0
 8007048:	d1ce      	bne.n	8006fe8 <quorem+0x9a>
 800704a:	3c01      	subs	r4, #1
 800704c:	e7c9      	b.n	8006fe2 <quorem+0x94>
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	3b04      	subs	r3, #4
 8007052:	2a00      	cmp	r2, #0
 8007054:	d1f0      	bne.n	8007038 <quorem+0xea>
 8007056:	3c01      	subs	r4, #1
 8007058:	e7eb      	b.n	8007032 <quorem+0xe4>
 800705a:	2000      	movs	r0, #0
 800705c:	e7ee      	b.n	800703c <quorem+0xee>
	...

08007060 <_dtoa_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	ed2d 8b04 	vpush	{d8-d9}
 8007068:	69c5      	ldr	r5, [r0, #28]
 800706a:	b093      	sub	sp, #76	; 0x4c
 800706c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007070:	ec57 6b10 	vmov	r6, r7, d0
 8007074:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007078:	9107      	str	r1, [sp, #28]
 800707a:	4604      	mov	r4, r0
 800707c:	920a      	str	r2, [sp, #40]	; 0x28
 800707e:	930d      	str	r3, [sp, #52]	; 0x34
 8007080:	b975      	cbnz	r5, 80070a0 <_dtoa_r+0x40>
 8007082:	2010      	movs	r0, #16
 8007084:	f7ff fba6 	bl	80067d4 <malloc>
 8007088:	4602      	mov	r2, r0
 800708a:	61e0      	str	r0, [r4, #28]
 800708c:	b920      	cbnz	r0, 8007098 <_dtoa_r+0x38>
 800708e:	4bae      	ldr	r3, [pc, #696]	; (8007348 <_dtoa_r+0x2e8>)
 8007090:	21ef      	movs	r1, #239	; 0xef
 8007092:	48ae      	ldr	r0, [pc, #696]	; (800734c <_dtoa_r+0x2ec>)
 8007094:	f001 fd40 	bl	8008b18 <__assert_func>
 8007098:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800709c:	6005      	str	r5, [r0, #0]
 800709e:	60c5      	str	r5, [r0, #12]
 80070a0:	69e3      	ldr	r3, [r4, #28]
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	b151      	cbz	r1, 80070bc <_dtoa_r+0x5c>
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	604a      	str	r2, [r1, #4]
 80070aa:	2301      	movs	r3, #1
 80070ac:	4093      	lsls	r3, r2
 80070ae:	608b      	str	r3, [r1, #8]
 80070b0:	4620      	mov	r0, r4
 80070b2:	f001 f845 	bl	8008140 <_Bfree>
 80070b6:	69e3      	ldr	r3, [r4, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	1e3b      	subs	r3, r7, #0
 80070be:	bfbb      	ittet	lt
 80070c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	9303      	strlt	r3, [sp, #12]
 80070c6:	2300      	movge	r3, #0
 80070c8:	2201      	movlt	r2, #1
 80070ca:	bfac      	ite	ge
 80070cc:	f8c8 3000 	strge.w	r3, [r8]
 80070d0:	f8c8 2000 	strlt.w	r2, [r8]
 80070d4:	4b9e      	ldr	r3, [pc, #632]	; (8007350 <_dtoa_r+0x2f0>)
 80070d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070da:	ea33 0308 	bics.w	r3, r3, r8
 80070de:	d11b      	bne.n	8007118 <_dtoa_r+0xb8>
 80070e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80070ec:	4333      	orrs	r3, r6
 80070ee:	f000 8593 	beq.w	8007c18 <_dtoa_r+0xbb8>
 80070f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f4:	b963      	cbnz	r3, 8007110 <_dtoa_r+0xb0>
 80070f6:	4b97      	ldr	r3, [pc, #604]	; (8007354 <_dtoa_r+0x2f4>)
 80070f8:	e027      	b.n	800714a <_dtoa_r+0xea>
 80070fa:	4b97      	ldr	r3, [pc, #604]	; (8007358 <_dtoa_r+0x2f8>)
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	9800      	ldr	r0, [sp, #0]
 8007106:	b013      	add	sp, #76	; 0x4c
 8007108:	ecbd 8b04 	vpop	{d8-d9}
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	4b90      	ldr	r3, [pc, #576]	; (8007354 <_dtoa_r+0x2f4>)
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	3303      	adds	r3, #3
 8007116:	e7f3      	b.n	8007100 <_dtoa_r+0xa0>
 8007118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	ec51 0b17 	vmov	r0, r1, d7
 8007122:	eeb0 8a47 	vmov.f32	s16, s14
 8007126:	eef0 8a67 	vmov.f32	s17, s15
 800712a:	2300      	movs	r3, #0
 800712c:	f7f9 fcf4 	bl	8000b18 <__aeabi_dcmpeq>
 8007130:	4681      	mov	r9, r0
 8007132:	b160      	cbz	r0, 800714e <_dtoa_r+0xee>
 8007134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007136:	2301      	movs	r3, #1
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8568 	beq.w	8007c12 <_dtoa_r+0xbb2>
 8007142:	4b86      	ldr	r3, [pc, #536]	; (800735c <_dtoa_r+0x2fc>)
 8007144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	3b01      	subs	r3, #1
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	e7da      	b.n	8007104 <_dtoa_r+0xa4>
 800714e:	aa10      	add	r2, sp, #64	; 0x40
 8007150:	a911      	add	r1, sp, #68	; 0x44
 8007152:	4620      	mov	r0, r4
 8007154:	eeb0 0a48 	vmov.f32	s0, s16
 8007158:	eef0 0a68 	vmov.f32	s1, s17
 800715c:	f001 fad2 	bl	8008704 <__d2b>
 8007160:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007164:	4682      	mov	sl, r0
 8007166:	2d00      	cmp	r5, #0
 8007168:	d07f      	beq.n	800726a <_dtoa_r+0x20a>
 800716a:	ee18 3a90 	vmov	r3, s17
 800716e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007172:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007176:	ec51 0b18 	vmov	r0, r1, d8
 800717a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800717e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007182:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007186:	4619      	mov	r1, r3
 8007188:	2200      	movs	r2, #0
 800718a:	4b75      	ldr	r3, [pc, #468]	; (8007360 <_dtoa_r+0x300>)
 800718c:	f7f9 f8a4 	bl	80002d8 <__aeabi_dsub>
 8007190:	a367      	add	r3, pc, #412	; (adr r3, 8007330 <_dtoa_r+0x2d0>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 fa57 	bl	8000648 <__aeabi_dmul>
 800719a:	a367      	add	r3, pc, #412	; (adr r3, 8007338 <_dtoa_r+0x2d8>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f9 f89c 	bl	80002dc <__adddf3>
 80071a4:	4606      	mov	r6, r0
 80071a6:	4628      	mov	r0, r5
 80071a8:	460f      	mov	r7, r1
 80071aa:	f7f9 f9e3 	bl	8000574 <__aeabi_i2d>
 80071ae:	a364      	add	r3, pc, #400	; (adr r3, 8007340 <_dtoa_r+0x2e0>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 fa48 	bl	8000648 <__aeabi_dmul>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 f88c 	bl	80002dc <__adddf3>
 80071c4:	4606      	mov	r6, r0
 80071c6:	460f      	mov	r7, r1
 80071c8:	f7f9 fcee 	bl	8000ba8 <__aeabi_d2iz>
 80071cc:	2200      	movs	r2, #0
 80071ce:	4683      	mov	fp, r0
 80071d0:	2300      	movs	r3, #0
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7f9 fca9 	bl	8000b2c <__aeabi_dcmplt>
 80071da:	b148      	cbz	r0, 80071f0 <_dtoa_r+0x190>
 80071dc:	4658      	mov	r0, fp
 80071de:	f7f9 f9c9 	bl	8000574 <__aeabi_i2d>
 80071e2:	4632      	mov	r2, r6
 80071e4:	463b      	mov	r3, r7
 80071e6:	f7f9 fc97 	bl	8000b18 <__aeabi_dcmpeq>
 80071ea:	b908      	cbnz	r0, 80071f0 <_dtoa_r+0x190>
 80071ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071f0:	f1bb 0f16 	cmp.w	fp, #22
 80071f4:	d857      	bhi.n	80072a6 <_dtoa_r+0x246>
 80071f6:	4b5b      	ldr	r3, [pc, #364]	; (8007364 <_dtoa_r+0x304>)
 80071f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	ec51 0b18 	vmov	r0, r1, d8
 8007204:	f7f9 fc92 	bl	8000b2c <__aeabi_dcmplt>
 8007208:	2800      	cmp	r0, #0
 800720a:	d04e      	beq.n	80072aa <_dtoa_r+0x24a>
 800720c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007210:	2300      	movs	r3, #0
 8007212:	930c      	str	r3, [sp, #48]	; 0x30
 8007214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007216:	1b5b      	subs	r3, r3, r5
 8007218:	1e5a      	subs	r2, r3, #1
 800721a:	bf45      	ittet	mi
 800721c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007220:	9305      	strmi	r3, [sp, #20]
 8007222:	2300      	movpl	r3, #0
 8007224:	2300      	movmi	r3, #0
 8007226:	9206      	str	r2, [sp, #24]
 8007228:	bf54      	ite	pl
 800722a:	9305      	strpl	r3, [sp, #20]
 800722c:	9306      	strmi	r3, [sp, #24]
 800722e:	f1bb 0f00 	cmp.w	fp, #0
 8007232:	db3c      	blt.n	80072ae <_dtoa_r+0x24e>
 8007234:	9b06      	ldr	r3, [sp, #24]
 8007236:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800723a:	445b      	add	r3, fp
 800723c:	9306      	str	r3, [sp, #24]
 800723e:	2300      	movs	r3, #0
 8007240:	9308      	str	r3, [sp, #32]
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	2b09      	cmp	r3, #9
 8007246:	d868      	bhi.n	800731a <_dtoa_r+0x2ba>
 8007248:	2b05      	cmp	r3, #5
 800724a:	bfc4      	itt	gt
 800724c:	3b04      	subgt	r3, #4
 800724e:	9307      	strgt	r3, [sp, #28]
 8007250:	9b07      	ldr	r3, [sp, #28]
 8007252:	f1a3 0302 	sub.w	r3, r3, #2
 8007256:	bfcc      	ite	gt
 8007258:	2500      	movgt	r5, #0
 800725a:	2501      	movle	r5, #1
 800725c:	2b03      	cmp	r3, #3
 800725e:	f200 8085 	bhi.w	800736c <_dtoa_r+0x30c>
 8007262:	e8df f003 	tbb	[pc, r3]
 8007266:	3b2e      	.short	0x3b2e
 8007268:	5839      	.short	0x5839
 800726a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800726e:	441d      	add	r5, r3
 8007270:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007274:	2b20      	cmp	r3, #32
 8007276:	bfc1      	itttt	gt
 8007278:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800727c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007280:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007284:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007288:	bfd6      	itet	le
 800728a:	f1c3 0320 	rsble	r3, r3, #32
 800728e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007292:	fa06 f003 	lslle.w	r0, r6, r3
 8007296:	f7f9 f95d 	bl	8000554 <__aeabi_ui2d>
 800729a:	2201      	movs	r2, #1
 800729c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072a0:	3d01      	subs	r5, #1
 80072a2:	920e      	str	r2, [sp, #56]	; 0x38
 80072a4:	e76f      	b.n	8007186 <_dtoa_r+0x126>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e7b3      	b.n	8007212 <_dtoa_r+0x1b2>
 80072aa:	900c      	str	r0, [sp, #48]	; 0x30
 80072ac:	e7b2      	b.n	8007214 <_dtoa_r+0x1b4>
 80072ae:	9b05      	ldr	r3, [sp, #20]
 80072b0:	eba3 030b 	sub.w	r3, r3, fp
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	f1cb 0300 	rsb	r3, fp, #0
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	2300      	movs	r3, #0
 80072be:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c0:	e7bf      	b.n	8007242 <_dtoa_r+0x1e2>
 80072c2:	2300      	movs	r3, #0
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dc52      	bgt.n	8007372 <_dtoa_r+0x312>
 80072cc:	2301      	movs	r3, #1
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	461a      	mov	r2, r3
 80072d4:	920a      	str	r2, [sp, #40]	; 0x28
 80072d6:	e00b      	b.n	80072f0 <_dtoa_r+0x290>
 80072d8:	2301      	movs	r3, #1
 80072da:	e7f3      	b.n	80072c4 <_dtoa_r+0x264>
 80072dc:	2300      	movs	r3, #0
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	445b      	add	r3, fp
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	3301      	adds	r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	bfb8      	it	lt
 80072ee:	2301      	movlt	r3, #1
 80072f0:	69e0      	ldr	r0, [r4, #28]
 80072f2:	2100      	movs	r1, #0
 80072f4:	2204      	movs	r2, #4
 80072f6:	f102 0614 	add.w	r6, r2, #20
 80072fa:	429e      	cmp	r6, r3
 80072fc:	d93d      	bls.n	800737a <_dtoa_r+0x31a>
 80072fe:	6041      	str	r1, [r0, #4]
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fedd 	bl	80080c0 <_Balloc>
 8007306:	9000      	str	r0, [sp, #0]
 8007308:	2800      	cmp	r0, #0
 800730a:	d139      	bne.n	8007380 <_dtoa_r+0x320>
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <_dtoa_r+0x308>)
 800730e:	4602      	mov	r2, r0
 8007310:	f240 11af 	movw	r1, #431	; 0x1af
 8007314:	e6bd      	b.n	8007092 <_dtoa_r+0x32>
 8007316:	2301      	movs	r3, #1
 8007318:	e7e1      	b.n	80072de <_dtoa_r+0x27e>
 800731a:	2501      	movs	r5, #1
 800731c:	2300      	movs	r3, #0
 800731e:	9307      	str	r3, [sp, #28]
 8007320:	9509      	str	r5, [sp, #36]	; 0x24
 8007322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	2200      	movs	r2, #0
 800732c:	2312      	movs	r3, #18
 800732e:	e7d1      	b.n	80072d4 <_dtoa_r+0x274>
 8007330:	636f4361 	.word	0x636f4361
 8007334:	3fd287a7 	.word	0x3fd287a7
 8007338:	8b60c8b3 	.word	0x8b60c8b3
 800733c:	3fc68a28 	.word	0x3fc68a28
 8007340:	509f79fb 	.word	0x509f79fb
 8007344:	3fd34413 	.word	0x3fd34413
 8007348:	08008e0d 	.word	0x08008e0d
 800734c:	08008e24 	.word	0x08008e24
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	08008e09 	.word	0x08008e09
 8007358:	08008e00 	.word	0x08008e00
 800735c:	08008ddd 	.word	0x08008ddd
 8007360:	3ff80000 	.word	0x3ff80000
 8007364:	08008f20 	.word	0x08008f20
 8007368:	08008e7c 	.word	0x08008e7c
 800736c:	2301      	movs	r3, #1
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	e7d7      	b.n	8007322 <_dtoa_r+0x2c2>
 8007372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	e7ba      	b.n	80072f0 <_dtoa_r+0x290>
 800737a:	3101      	adds	r1, #1
 800737c:	0052      	lsls	r2, r2, #1
 800737e:	e7ba      	b.n	80072f6 <_dtoa_r+0x296>
 8007380:	69e3      	ldr	r3, [r4, #28]
 8007382:	9a00      	ldr	r2, [sp, #0]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	2b0e      	cmp	r3, #14
 800738a:	f200 80a8 	bhi.w	80074de <_dtoa_r+0x47e>
 800738e:	2d00      	cmp	r5, #0
 8007390:	f000 80a5 	beq.w	80074de <_dtoa_r+0x47e>
 8007394:	f1bb 0f00 	cmp.w	fp, #0
 8007398:	dd38      	ble.n	800740c <_dtoa_r+0x3ac>
 800739a:	4bc0      	ldr	r3, [pc, #768]	; (800769c <_dtoa_r+0x63c>)
 800739c:	f00b 020f 	and.w	r2, fp, #15
 80073a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80073ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80073b0:	d019      	beq.n	80073e6 <_dtoa_r+0x386>
 80073b2:	4bbb      	ldr	r3, [pc, #748]	; (80076a0 <_dtoa_r+0x640>)
 80073b4:	ec51 0b18 	vmov	r0, r1, d8
 80073b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073bc:	f7f9 fa6e 	bl	800089c <__aeabi_ddiv>
 80073c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c4:	f008 080f 	and.w	r8, r8, #15
 80073c8:	2503      	movs	r5, #3
 80073ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80076a0 <_dtoa_r+0x640>
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	d10a      	bne.n	80073ea <_dtoa_r+0x38a>
 80073d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f9 fa5e 	bl	800089c <__aeabi_ddiv>
 80073e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e4:	e02b      	b.n	800743e <_dtoa_r+0x3de>
 80073e6:	2502      	movs	r5, #2
 80073e8:	e7ef      	b.n	80073ca <_dtoa_r+0x36a>
 80073ea:	f018 0f01 	tst.w	r8, #1
 80073ee:	d008      	beq.n	8007402 <_dtoa_r+0x3a2>
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073f8:	f7f9 f926 	bl	8000648 <__aeabi_dmul>
 80073fc:	3501      	adds	r5, #1
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007406:	f109 0908 	add.w	r9, r9, #8
 800740a:	e7e0      	b.n	80073ce <_dtoa_r+0x36e>
 800740c:	f000 809f 	beq.w	800754e <_dtoa_r+0x4ee>
 8007410:	f1cb 0600 	rsb	r6, fp, #0
 8007414:	4ba1      	ldr	r3, [pc, #644]	; (800769c <_dtoa_r+0x63c>)
 8007416:	4fa2      	ldr	r7, [pc, #648]	; (80076a0 <_dtoa_r+0x640>)
 8007418:	f006 020f 	and.w	r2, r6, #15
 800741c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	ec51 0b18 	vmov	r0, r1, d8
 8007428:	f7f9 f90e 	bl	8000648 <__aeabi_dmul>
 800742c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007430:	1136      	asrs	r6, r6, #4
 8007432:	2300      	movs	r3, #0
 8007434:	2502      	movs	r5, #2
 8007436:	2e00      	cmp	r6, #0
 8007438:	d17e      	bne.n	8007538 <_dtoa_r+0x4d8>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1d0      	bne.n	80073e0 <_dtoa_r+0x380>
 800743e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007440:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8084 	beq.w	8007552 <_dtoa_r+0x4f2>
 800744a:	4b96      	ldr	r3, [pc, #600]	; (80076a4 <_dtoa_r+0x644>)
 800744c:	2200      	movs	r2, #0
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	f7f9 fb6b 	bl	8000b2c <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d07b      	beq.n	8007552 <_dtoa_r+0x4f2>
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d078      	beq.n	8007552 <_dtoa_r+0x4f2>
 8007460:	9b01      	ldr	r3, [sp, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd39      	ble.n	80074da <_dtoa_r+0x47a>
 8007466:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <_dtoa_r+0x648>)
 8007468:	2200      	movs	r2, #0
 800746a:	4640      	mov	r0, r8
 800746c:	4649      	mov	r1, r9
 800746e:	f7f9 f8eb 	bl	8000648 <__aeabi_dmul>
 8007472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007476:	9e01      	ldr	r6, [sp, #4]
 8007478:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800747c:	3501      	adds	r5, #1
 800747e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007482:	4628      	mov	r0, r5
 8007484:	f7f9 f876 	bl	8000574 <__aeabi_i2d>
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	f7f9 f8dc 	bl	8000648 <__aeabi_dmul>
 8007490:	4b86      	ldr	r3, [pc, #536]	; (80076ac <_dtoa_r+0x64c>)
 8007492:	2200      	movs	r2, #0
 8007494:	f7f8 ff22 	bl	80002dc <__adddf3>
 8007498:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800749c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	d158      	bne.n	8007558 <_dtoa_r+0x4f8>
 80074a6:	4b82      	ldr	r3, [pc, #520]	; (80076b0 <_dtoa_r+0x650>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	4640      	mov	r0, r8
 80074ac:	4649      	mov	r1, r9
 80074ae:	f7f8 ff13 	bl	80002d8 <__aeabi_dsub>
 80074b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074b6:	4680      	mov	r8, r0
 80074b8:	4689      	mov	r9, r1
 80074ba:	f7f9 fb55 	bl	8000b68 <__aeabi_dcmpgt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	f040 8296 	bne.w	80079f0 <_dtoa_r+0x990>
 80074c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80074c8:	4640      	mov	r0, r8
 80074ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074ce:	4649      	mov	r1, r9
 80074d0:	f7f9 fb2c 	bl	8000b2c <__aeabi_dcmplt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f040 8289 	bne.w	80079ec <_dtoa_r+0x98c>
 80074da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80074de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f2c0 814e 	blt.w	8007782 <_dtoa_r+0x722>
 80074e6:	f1bb 0f0e 	cmp.w	fp, #14
 80074ea:	f300 814a 	bgt.w	8007782 <_dtoa_r+0x722>
 80074ee:	4b6b      	ldr	r3, [pc, #428]	; (800769c <_dtoa_r+0x63c>)
 80074f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f280 80dc 	bge.w	80076b8 <_dtoa_r+0x658>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f300 80d8 	bgt.w	80076b8 <_dtoa_r+0x658>
 8007508:	f040 826f 	bne.w	80079ea <_dtoa_r+0x98a>
 800750c:	4b68      	ldr	r3, [pc, #416]	; (80076b0 <_dtoa_r+0x650>)
 800750e:	2200      	movs	r2, #0
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7f9 f898 	bl	8000648 <__aeabi_dmul>
 8007518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800751c:	f7f9 fb1a 	bl	8000b54 <__aeabi_dcmpge>
 8007520:	9e04      	ldr	r6, [sp, #16]
 8007522:	4637      	mov	r7, r6
 8007524:	2800      	cmp	r0, #0
 8007526:	f040 8245 	bne.w	80079b4 <_dtoa_r+0x954>
 800752a:	9d00      	ldr	r5, [sp, #0]
 800752c:	2331      	movs	r3, #49	; 0x31
 800752e:	f805 3b01 	strb.w	r3, [r5], #1
 8007532:	f10b 0b01 	add.w	fp, fp, #1
 8007536:	e241      	b.n	80079bc <_dtoa_r+0x95c>
 8007538:	07f2      	lsls	r2, r6, #31
 800753a:	d505      	bpl.n	8007548 <_dtoa_r+0x4e8>
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f7f9 f882 	bl	8000648 <__aeabi_dmul>
 8007544:	3501      	adds	r5, #1
 8007546:	2301      	movs	r3, #1
 8007548:	1076      	asrs	r6, r6, #1
 800754a:	3708      	adds	r7, #8
 800754c:	e773      	b.n	8007436 <_dtoa_r+0x3d6>
 800754e:	2502      	movs	r5, #2
 8007550:	e775      	b.n	800743e <_dtoa_r+0x3de>
 8007552:	9e04      	ldr	r6, [sp, #16]
 8007554:	465f      	mov	r7, fp
 8007556:	e792      	b.n	800747e <_dtoa_r+0x41e>
 8007558:	9900      	ldr	r1, [sp, #0]
 800755a:	4b50      	ldr	r3, [pc, #320]	; (800769c <_dtoa_r+0x63c>)
 800755c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007560:	4431      	add	r1, r6
 8007562:	9102      	str	r1, [sp, #8]
 8007564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007566:	eeb0 9a47 	vmov.f32	s18, s14
 800756a:	eef0 9a67 	vmov.f32	s19, s15
 800756e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007576:	2900      	cmp	r1, #0
 8007578:	d044      	beq.n	8007604 <_dtoa_r+0x5a4>
 800757a:	494e      	ldr	r1, [pc, #312]	; (80076b4 <_dtoa_r+0x654>)
 800757c:	2000      	movs	r0, #0
 800757e:	f7f9 f98d 	bl	800089c <__aeabi_ddiv>
 8007582:	ec53 2b19 	vmov	r2, r3, d9
 8007586:	f7f8 fea7 	bl	80002d8 <__aeabi_dsub>
 800758a:	9d00      	ldr	r5, [sp, #0]
 800758c:	ec41 0b19 	vmov	d9, r0, r1
 8007590:	4649      	mov	r1, r9
 8007592:	4640      	mov	r0, r8
 8007594:	f7f9 fb08 	bl	8000ba8 <__aeabi_d2iz>
 8007598:	4606      	mov	r6, r0
 800759a:	f7f8 ffeb 	bl	8000574 <__aeabi_i2d>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f8 fe97 	bl	80002d8 <__aeabi_dsub>
 80075aa:	3630      	adds	r6, #48	; 0x30
 80075ac:	f805 6b01 	strb.w	r6, [r5], #1
 80075b0:	ec53 2b19 	vmov	r2, r3, d9
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	f7f9 fab8 	bl	8000b2c <__aeabi_dcmplt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d164      	bne.n	800768a <_dtoa_r+0x62a>
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	4937      	ldr	r1, [pc, #220]	; (80076a4 <_dtoa_r+0x644>)
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7f8 fe86 	bl	80002d8 <__aeabi_dsub>
 80075cc:	ec53 2b19 	vmov	r2, r3, d9
 80075d0:	f7f9 faac 	bl	8000b2c <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f040 80b6 	bne.w	8007746 <_dtoa_r+0x6e6>
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	429d      	cmp	r5, r3
 80075de:	f43f af7c 	beq.w	80074da <_dtoa_r+0x47a>
 80075e2:	4b31      	ldr	r3, [pc, #196]	; (80076a8 <_dtoa_r+0x648>)
 80075e4:	ec51 0b19 	vmov	r0, r1, d9
 80075e8:	2200      	movs	r2, #0
 80075ea:	f7f9 f82d 	bl	8000648 <__aeabi_dmul>
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <_dtoa_r+0x648>)
 80075f0:	ec41 0b19 	vmov	d9, r0, r1
 80075f4:	2200      	movs	r2, #0
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f9 f825 	bl	8000648 <__aeabi_dmul>
 80075fe:	4680      	mov	r8, r0
 8007600:	4689      	mov	r9, r1
 8007602:	e7c5      	b.n	8007590 <_dtoa_r+0x530>
 8007604:	ec51 0b17 	vmov	r0, r1, d7
 8007608:	f7f9 f81e 	bl	8000648 <__aeabi_dmul>
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	9d00      	ldr	r5, [sp, #0]
 8007610:	930f      	str	r3, [sp, #60]	; 0x3c
 8007612:	ec41 0b19 	vmov	d9, r0, r1
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	f7f9 fac5 	bl	8000ba8 <__aeabi_d2iz>
 800761e:	4606      	mov	r6, r0
 8007620:	f7f8 ffa8 	bl	8000574 <__aeabi_i2d>
 8007624:	3630      	adds	r6, #48	; 0x30
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4640      	mov	r0, r8
 800762c:	4649      	mov	r1, r9
 800762e:	f7f8 fe53 	bl	80002d8 <__aeabi_dsub>
 8007632:	f805 6b01 	strb.w	r6, [r5], #1
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	429d      	cmp	r5, r3
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	d124      	bne.n	800768e <_dtoa_r+0x62e>
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <_dtoa_r+0x654>)
 8007646:	ec51 0b19 	vmov	r0, r1, d9
 800764a:	f7f8 fe47 	bl	80002dc <__adddf3>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f9 fa87 	bl	8000b68 <__aeabi_dcmpgt>
 800765a:	2800      	cmp	r0, #0
 800765c:	d173      	bne.n	8007746 <_dtoa_r+0x6e6>
 800765e:	ec53 2b19 	vmov	r2, r3, d9
 8007662:	4914      	ldr	r1, [pc, #80]	; (80076b4 <_dtoa_r+0x654>)
 8007664:	2000      	movs	r0, #0
 8007666:	f7f8 fe37 	bl	80002d8 <__aeabi_dsub>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f9 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f af2f 	beq.w	80074da <_dtoa_r+0x47a>
 800767c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800767e:	1e6b      	subs	r3, r5, #1
 8007680:	930f      	str	r3, [sp, #60]	; 0x3c
 8007682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007686:	2b30      	cmp	r3, #48	; 0x30
 8007688:	d0f8      	beq.n	800767c <_dtoa_r+0x61c>
 800768a:	46bb      	mov	fp, r7
 800768c:	e04a      	b.n	8007724 <_dtoa_r+0x6c4>
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <_dtoa_r+0x648>)
 8007690:	f7f8 ffda 	bl	8000648 <__aeabi_dmul>
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	e7bd      	b.n	8007616 <_dtoa_r+0x5b6>
 800769a:	bf00      	nop
 800769c:	08008f20 	.word	0x08008f20
 80076a0:	08008ef8 	.word	0x08008ef8
 80076a4:	3ff00000 	.word	0x3ff00000
 80076a8:	40240000 	.word	0x40240000
 80076ac:	401c0000 	.word	0x401c0000
 80076b0:	40140000 	.word	0x40140000
 80076b4:	3fe00000 	.word	0x3fe00000
 80076b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076bc:	9d00      	ldr	r5, [sp, #0]
 80076be:	4642      	mov	r2, r8
 80076c0:	464b      	mov	r3, r9
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f9 f8e9 	bl	800089c <__aeabi_ddiv>
 80076ca:	f7f9 fa6d 	bl	8000ba8 <__aeabi_d2iz>
 80076ce:	9001      	str	r0, [sp, #4]
 80076d0:	f7f8 ff50 	bl	8000574 <__aeabi_i2d>
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	f7f8 ffb6 	bl	8000648 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f8 fdf8 	bl	80002d8 <__aeabi_dsub>
 80076e8:	9e01      	ldr	r6, [sp, #4]
 80076ea:	9f04      	ldr	r7, [sp, #16]
 80076ec:	3630      	adds	r6, #48	; 0x30
 80076ee:	f805 6b01 	strb.w	r6, [r5], #1
 80076f2:	9e00      	ldr	r6, [sp, #0]
 80076f4:	1bae      	subs	r6, r5, r6
 80076f6:	42b7      	cmp	r7, r6
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	d134      	bne.n	8007768 <_dtoa_r+0x708>
 80076fe:	f7f8 fded 	bl	80002dc <__adddf3>
 8007702:	4642      	mov	r2, r8
 8007704:	464b      	mov	r3, r9
 8007706:	4606      	mov	r6, r0
 8007708:	460f      	mov	r7, r1
 800770a:	f7f9 fa2d 	bl	8000b68 <__aeabi_dcmpgt>
 800770e:	b9c8      	cbnz	r0, 8007744 <_dtoa_r+0x6e4>
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	f7f9 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800771c:	b110      	cbz	r0, 8007724 <_dtoa_r+0x6c4>
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	07db      	lsls	r3, r3, #31
 8007722:	d40f      	bmi.n	8007744 <_dtoa_r+0x6e4>
 8007724:	4651      	mov	r1, sl
 8007726:	4620      	mov	r0, r4
 8007728:	f000 fd0a 	bl	8008140 <_Bfree>
 800772c:	2300      	movs	r3, #0
 800772e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007730:	702b      	strb	r3, [r5, #0]
 8007732:	f10b 0301 	add.w	r3, fp, #1
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800773a:	2b00      	cmp	r3, #0
 800773c:	f43f ace2 	beq.w	8007104 <_dtoa_r+0xa4>
 8007740:	601d      	str	r5, [r3, #0]
 8007742:	e4df      	b.n	8007104 <_dtoa_r+0xa4>
 8007744:	465f      	mov	r7, fp
 8007746:	462b      	mov	r3, r5
 8007748:	461d      	mov	r5, r3
 800774a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774e:	2a39      	cmp	r2, #57	; 0x39
 8007750:	d106      	bne.n	8007760 <_dtoa_r+0x700>
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d1f7      	bne.n	8007748 <_dtoa_r+0x6e8>
 8007758:	9900      	ldr	r1, [sp, #0]
 800775a:	2230      	movs	r2, #48	; 0x30
 800775c:	3701      	adds	r7, #1
 800775e:	700a      	strb	r2, [r1, #0]
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	3201      	adds	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e790      	b.n	800768a <_dtoa_r+0x62a>
 8007768:	4ba3      	ldr	r3, [pc, #652]	; (80079f8 <_dtoa_r+0x998>)
 800776a:	2200      	movs	r2, #0
 800776c:	f7f8 ff6c 	bl	8000648 <__aeabi_dmul>
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4606      	mov	r6, r0
 8007776:	460f      	mov	r7, r1
 8007778:	f7f9 f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800777c:	2800      	cmp	r0, #0
 800777e:	d09e      	beq.n	80076be <_dtoa_r+0x65e>
 8007780:	e7d0      	b.n	8007724 <_dtoa_r+0x6c4>
 8007782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007784:	2a00      	cmp	r2, #0
 8007786:	f000 80ca 	beq.w	800791e <_dtoa_r+0x8be>
 800778a:	9a07      	ldr	r2, [sp, #28]
 800778c:	2a01      	cmp	r2, #1
 800778e:	f300 80ad 	bgt.w	80078ec <_dtoa_r+0x88c>
 8007792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007794:	2a00      	cmp	r2, #0
 8007796:	f000 80a5 	beq.w	80078e4 <_dtoa_r+0x884>
 800779a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800779e:	9e08      	ldr	r6, [sp, #32]
 80077a0:	9d05      	ldr	r5, [sp, #20]
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	441a      	add	r2, r3
 80077a6:	9205      	str	r2, [sp, #20]
 80077a8:	9a06      	ldr	r2, [sp, #24]
 80077aa:	2101      	movs	r1, #1
 80077ac:	441a      	add	r2, r3
 80077ae:	4620      	mov	r0, r4
 80077b0:	9206      	str	r2, [sp, #24]
 80077b2:	f000 fd7b 	bl	80082ac <__i2b>
 80077b6:	4607      	mov	r7, r0
 80077b8:	b165      	cbz	r5, 80077d4 <_dtoa_r+0x774>
 80077ba:	9b06      	ldr	r3, [sp, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	dd09      	ble.n	80077d4 <_dtoa_r+0x774>
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	bfa8      	it	ge
 80077c6:	462b      	movge	r3, r5
 80077c8:	1ad2      	subs	r2, r2, r3
 80077ca:	9205      	str	r2, [sp, #20]
 80077cc:	9a06      	ldr	r2, [sp, #24]
 80077ce:	1aed      	subs	r5, r5, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	9306      	str	r3, [sp, #24]
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	b1f3      	cbz	r3, 8007816 <_dtoa_r+0x7b6>
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80a3 	beq.w	8007926 <_dtoa_r+0x8c6>
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	dd10      	ble.n	8007806 <_dtoa_r+0x7a6>
 80077e4:	4639      	mov	r1, r7
 80077e6:	4632      	mov	r2, r6
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fe1f 	bl	800842c <__pow5mult>
 80077ee:	4652      	mov	r2, sl
 80077f0:	4601      	mov	r1, r0
 80077f2:	4607      	mov	r7, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 fd6f 	bl	80082d8 <__multiply>
 80077fa:	4651      	mov	r1, sl
 80077fc:	4680      	mov	r8, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fc9e 	bl	8008140 <_Bfree>
 8007804:	46c2      	mov	sl, r8
 8007806:	9b08      	ldr	r3, [sp, #32]
 8007808:	1b9a      	subs	r2, r3, r6
 800780a:	d004      	beq.n	8007816 <_dtoa_r+0x7b6>
 800780c:	4651      	mov	r1, sl
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fe0c 	bl	800842c <__pow5mult>
 8007814:	4682      	mov	sl, r0
 8007816:	2101      	movs	r1, #1
 8007818:	4620      	mov	r0, r4
 800781a:	f000 fd47 	bl	80082ac <__i2b>
 800781e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	4606      	mov	r6, r0
 8007824:	f340 8081 	ble.w	800792a <_dtoa_r+0x8ca>
 8007828:	461a      	mov	r2, r3
 800782a:	4601      	mov	r1, r0
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fdfd 	bl	800842c <__pow5mult>
 8007832:	9b07      	ldr	r3, [sp, #28]
 8007834:	2b01      	cmp	r3, #1
 8007836:	4606      	mov	r6, r0
 8007838:	dd7a      	ble.n	8007930 <_dtoa_r+0x8d0>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	6933      	ldr	r3, [r6, #16]
 8007840:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007844:	6918      	ldr	r0, [r3, #16]
 8007846:	f000 fce3 	bl	8008210 <__hi0bits>
 800784a:	f1c0 0020 	rsb	r0, r0, #32
 800784e:	9b06      	ldr	r3, [sp, #24]
 8007850:	4418      	add	r0, r3
 8007852:	f010 001f 	ands.w	r0, r0, #31
 8007856:	f000 8094 	beq.w	8007982 <_dtoa_r+0x922>
 800785a:	f1c0 0320 	rsb	r3, r0, #32
 800785e:	2b04      	cmp	r3, #4
 8007860:	f340 8085 	ble.w	800796e <_dtoa_r+0x90e>
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	f1c0 001c 	rsb	r0, r0, #28
 800786a:	4403      	add	r3, r0
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	4403      	add	r3, r0
 8007872:	4405      	add	r5, r0
 8007874:	9306      	str	r3, [sp, #24]
 8007876:	9b05      	ldr	r3, [sp, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd05      	ble.n	8007888 <_dtoa_r+0x828>
 800787c:	4651      	mov	r1, sl
 800787e:	461a      	mov	r2, r3
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fe2d 	bl	80084e0 <__lshift>
 8007886:	4682      	mov	sl, r0
 8007888:	9b06      	ldr	r3, [sp, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	dd05      	ble.n	800789a <_dtoa_r+0x83a>
 800788e:	4631      	mov	r1, r6
 8007890:	461a      	mov	r2, r3
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fe24 	bl	80084e0 <__lshift>
 8007898:	4606      	mov	r6, r0
 800789a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800789c:	2b00      	cmp	r3, #0
 800789e:	d072      	beq.n	8007986 <_dtoa_r+0x926>
 80078a0:	4631      	mov	r1, r6
 80078a2:	4650      	mov	r0, sl
 80078a4:	f000 fe88 	bl	80085b8 <__mcmp>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	da6c      	bge.n	8007986 <_dtoa_r+0x926>
 80078ac:	2300      	movs	r3, #0
 80078ae:	4651      	mov	r1, sl
 80078b0:	220a      	movs	r2, #10
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 fc66 	bl	8008184 <__multadd>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80078be:	4682      	mov	sl, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 81b0 	beq.w	8007c26 <_dtoa_r+0xbc6>
 80078c6:	2300      	movs	r3, #0
 80078c8:	4639      	mov	r1, r7
 80078ca:	220a      	movs	r2, #10
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fc59 	bl	8008184 <__multadd>
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	4607      	mov	r7, r0
 80078d8:	f300 8096 	bgt.w	8007a08 <_dtoa_r+0x9a8>
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dc59      	bgt.n	8007996 <_dtoa_r+0x936>
 80078e2:	e091      	b.n	8007a08 <_dtoa_r+0x9a8>
 80078e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078ea:	e758      	b.n	800779e <_dtoa_r+0x73e>
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	1e5e      	subs	r6, r3, #1
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	42b3      	cmp	r3, r6
 80078f4:	bfbf      	itttt	lt
 80078f6:	9b08      	ldrlt	r3, [sp, #32]
 80078f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80078fa:	9608      	strlt	r6, [sp, #32]
 80078fc:	1af3      	sublt	r3, r6, r3
 80078fe:	bfb4      	ite	lt
 8007900:	18d2      	addlt	r2, r2, r3
 8007902:	1b9e      	subge	r6, r3, r6
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	bfbc      	itt	lt
 8007908:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800790a:	2600      	movlt	r6, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfb7      	itett	lt
 8007910:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007914:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007918:	1a9d      	sublt	r5, r3, r2
 800791a:	2300      	movlt	r3, #0
 800791c:	e741      	b.n	80077a2 <_dtoa_r+0x742>
 800791e:	9e08      	ldr	r6, [sp, #32]
 8007920:	9d05      	ldr	r5, [sp, #20]
 8007922:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007924:	e748      	b.n	80077b8 <_dtoa_r+0x758>
 8007926:	9a08      	ldr	r2, [sp, #32]
 8007928:	e770      	b.n	800780c <_dtoa_r+0x7ac>
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	2b01      	cmp	r3, #1
 800792e:	dc19      	bgt.n	8007964 <_dtoa_r+0x904>
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	b9bb      	cbnz	r3, 8007964 <_dtoa_r+0x904>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800793a:	b99b      	cbnz	r3, 8007964 <_dtoa_r+0x904>
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007942:	0d1b      	lsrs	r3, r3, #20
 8007944:	051b      	lsls	r3, r3, #20
 8007946:	b183      	cbz	r3, 800796a <_dtoa_r+0x90a>
 8007948:	9b05      	ldr	r3, [sp, #20]
 800794a:	3301      	adds	r3, #1
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	9b06      	ldr	r3, [sp, #24]
 8007950:	3301      	adds	r3, #1
 8007952:	9306      	str	r3, [sp, #24]
 8007954:	f04f 0801 	mov.w	r8, #1
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	f47f af6f 	bne.w	800783e <_dtoa_r+0x7de>
 8007960:	2001      	movs	r0, #1
 8007962:	e774      	b.n	800784e <_dtoa_r+0x7ee>
 8007964:	f04f 0800 	mov.w	r8, #0
 8007968:	e7f6      	b.n	8007958 <_dtoa_r+0x8f8>
 800796a:	4698      	mov	r8, r3
 800796c:	e7f4      	b.n	8007958 <_dtoa_r+0x8f8>
 800796e:	d082      	beq.n	8007876 <_dtoa_r+0x816>
 8007970:	9a05      	ldr	r2, [sp, #20]
 8007972:	331c      	adds	r3, #28
 8007974:	441a      	add	r2, r3
 8007976:	9205      	str	r2, [sp, #20]
 8007978:	9a06      	ldr	r2, [sp, #24]
 800797a:	441a      	add	r2, r3
 800797c:	441d      	add	r5, r3
 800797e:	9206      	str	r2, [sp, #24]
 8007980:	e779      	b.n	8007876 <_dtoa_r+0x816>
 8007982:	4603      	mov	r3, r0
 8007984:	e7f4      	b.n	8007970 <_dtoa_r+0x910>
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dc37      	bgt.n	80079fc <_dtoa_r+0x99c>
 800798c:	9b07      	ldr	r3, [sp, #28]
 800798e:	2b02      	cmp	r3, #2
 8007990:	dd34      	ble.n	80079fc <_dtoa_r+0x99c>
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	b963      	cbnz	r3, 80079b4 <_dtoa_r+0x954>
 800799a:	4631      	mov	r1, r6
 800799c:	2205      	movs	r2, #5
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 fbf0 	bl	8008184 <__multadd>
 80079a4:	4601      	mov	r1, r0
 80079a6:	4606      	mov	r6, r0
 80079a8:	4650      	mov	r0, sl
 80079aa:	f000 fe05 	bl	80085b8 <__mcmp>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f73f adbb 	bgt.w	800752a <_dtoa_r+0x4ca>
 80079b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b6:	9d00      	ldr	r5, [sp, #0]
 80079b8:	ea6f 0b03 	mvn.w	fp, r3
 80079bc:	f04f 0800 	mov.w	r8, #0
 80079c0:	4631      	mov	r1, r6
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fbbc 	bl	8008140 <_Bfree>
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	f43f aeab 	beq.w	8007724 <_dtoa_r+0x6c4>
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	d005      	beq.n	80079e0 <_dtoa_r+0x980>
 80079d4:	45b8      	cmp	r8, r7
 80079d6:	d003      	beq.n	80079e0 <_dtoa_r+0x980>
 80079d8:	4641      	mov	r1, r8
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fbb0 	bl	8008140 <_Bfree>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fbac 	bl	8008140 <_Bfree>
 80079e8:	e69c      	b.n	8007724 <_dtoa_r+0x6c4>
 80079ea:	2600      	movs	r6, #0
 80079ec:	4637      	mov	r7, r6
 80079ee:	e7e1      	b.n	80079b4 <_dtoa_r+0x954>
 80079f0:	46bb      	mov	fp, r7
 80079f2:	4637      	mov	r7, r6
 80079f4:	e599      	b.n	800752a <_dtoa_r+0x4ca>
 80079f6:	bf00      	nop
 80079f8:	40240000 	.word	0x40240000
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80c8 	beq.w	8007b94 <_dtoa_r+0xb34>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	dd05      	ble.n	8007a18 <_dtoa_r+0x9b8>
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	462a      	mov	r2, r5
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fd65 	bl	80084e0 <__lshift>
 8007a16:	4607      	mov	r7, r0
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	d05b      	beq.n	8007ad6 <_dtoa_r+0xa76>
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fb4d 	bl	80080c0 <_Balloc>
 8007a26:	4605      	mov	r5, r0
 8007a28:	b928      	cbnz	r0, 8007a36 <_dtoa_r+0x9d6>
 8007a2a:	4b83      	ldr	r3, [pc, #524]	; (8007c38 <_dtoa_r+0xbd8>)
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a32:	f7ff bb2e 	b.w	8007092 <_dtoa_r+0x32>
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	3202      	adds	r2, #2
 8007a3a:	0092      	lsls	r2, r2, #2
 8007a3c:	f107 010c 	add.w	r1, r7, #12
 8007a40:	300c      	adds	r0, #12
 8007a42:	f001 f85b 	bl	8008afc <memcpy>
 8007a46:	2201      	movs	r2, #1
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fd48 	bl	80084e0 <__lshift>
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	9b02      	ldr	r3, [sp, #8]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	46b8      	mov	r8, r7
 8007a66:	9306      	str	r3, [sp, #24]
 8007a68:	4607      	mov	r7, r0
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	4650      	mov	r0, sl
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	f7ff fa6b 	bl	8006f4e <quorem>
 8007a78:	4641      	mov	r1, r8
 8007a7a:	9002      	str	r0, [sp, #8]
 8007a7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a80:	4650      	mov	r0, sl
 8007a82:	f000 fd99 	bl	80085b8 <__mcmp>
 8007a86:	463a      	mov	r2, r7
 8007a88:	9005      	str	r0, [sp, #20]
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fdaf 	bl	80085f0 <__mdiff>
 8007a92:	68c2      	ldr	r2, [r0, #12]
 8007a94:	4605      	mov	r5, r0
 8007a96:	bb02      	cbnz	r2, 8007ada <_dtoa_r+0xa7a>
 8007a98:	4601      	mov	r1, r0
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	f000 fd8c 	bl	80085b8 <__mcmp>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa8:	f000 fb4a 	bl	8008140 <_Bfree>
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab0:	9d04      	ldr	r5, [sp, #16]
 8007ab2:	ea43 0102 	orr.w	r1, r3, r2
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	4319      	orrs	r1, r3
 8007aba:	d110      	bne.n	8007ade <_dtoa_r+0xa7e>
 8007abc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ac0:	d029      	beq.n	8007b16 <_dtoa_r+0xab6>
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd02      	ble.n	8007ace <_dtoa_r+0xa6e>
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	f883 9000 	strb.w	r9, [r3]
 8007ad4:	e774      	b.n	80079c0 <_dtoa_r+0x960>
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	e7ba      	b.n	8007a50 <_dtoa_r+0x9f0>
 8007ada:	2201      	movs	r2, #1
 8007adc:	e7e1      	b.n	8007aa2 <_dtoa_r+0xa42>
 8007ade:	9b05      	ldr	r3, [sp, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	db04      	blt.n	8007aee <_dtoa_r+0xa8e>
 8007ae4:	9907      	ldr	r1, [sp, #28]
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	9906      	ldr	r1, [sp, #24]
 8007aea:	430b      	orrs	r3, r1
 8007aec:	d120      	bne.n	8007b30 <_dtoa_r+0xad0>
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	dded      	ble.n	8007ace <_dtoa_r+0xa6e>
 8007af2:	4651      	mov	r1, sl
 8007af4:	2201      	movs	r2, #1
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 fcf2 	bl	80084e0 <__lshift>
 8007afc:	4631      	mov	r1, r6
 8007afe:	4682      	mov	sl, r0
 8007b00:	f000 fd5a 	bl	80085b8 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dc03      	bgt.n	8007b10 <_dtoa_r+0xab0>
 8007b08:	d1e1      	bne.n	8007ace <_dtoa_r+0xa6e>
 8007b0a:	f019 0f01 	tst.w	r9, #1
 8007b0e:	d0de      	beq.n	8007ace <_dtoa_r+0xa6e>
 8007b10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b14:	d1d8      	bne.n	8007ac8 <_dtoa_r+0xa68>
 8007b16:	9a01      	ldr	r2, [sp, #4]
 8007b18:	2339      	movs	r3, #57	; 0x39
 8007b1a:	7013      	strb	r3, [r2, #0]
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	461d      	mov	r5, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b26:	2a39      	cmp	r2, #57	; 0x39
 8007b28:	d06c      	beq.n	8007c04 <_dtoa_r+0xba4>
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e747      	b.n	80079c0 <_dtoa_r+0x960>
 8007b30:	2a00      	cmp	r2, #0
 8007b32:	dd07      	ble.n	8007b44 <_dtoa_r+0xae4>
 8007b34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b38:	d0ed      	beq.n	8007b16 <_dtoa_r+0xab6>
 8007b3a:	9a01      	ldr	r2, [sp, #4]
 8007b3c:	f109 0301 	add.w	r3, r9, #1
 8007b40:	7013      	strb	r3, [r2, #0]
 8007b42:	e73d      	b.n	80079c0 <_dtoa_r+0x960>
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	9a08      	ldr	r2, [sp, #32]
 8007b48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d043      	beq.n	8007bd8 <_dtoa_r+0xb78>
 8007b50:	4651      	mov	r1, sl
 8007b52:	2300      	movs	r3, #0
 8007b54:	220a      	movs	r2, #10
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fb14 	bl	8008184 <__multadd>
 8007b5c:	45b8      	cmp	r8, r7
 8007b5e:	4682      	mov	sl, r0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	f04f 020a 	mov.w	r2, #10
 8007b68:	4641      	mov	r1, r8
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	d107      	bne.n	8007b7e <_dtoa_r+0xb1e>
 8007b6e:	f000 fb09 	bl	8008184 <__multadd>
 8007b72:	4680      	mov	r8, r0
 8007b74:	4607      	mov	r7, r0
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	e775      	b.n	8007a6a <_dtoa_r+0xa0a>
 8007b7e:	f000 fb01 	bl	8008184 <__multadd>
 8007b82:	4639      	mov	r1, r7
 8007b84:	4680      	mov	r8, r0
 8007b86:	2300      	movs	r3, #0
 8007b88:	220a      	movs	r2, #10
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fafa 	bl	8008184 <__multadd>
 8007b90:	4607      	mov	r7, r0
 8007b92:	e7f0      	b.n	8007b76 <_dtoa_r+0xb16>
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	9d00      	ldr	r5, [sp, #0]
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	f7ff f9d6 	bl	8006f4e <quorem>
 8007ba2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	f805 9b01 	strb.w	r9, [r5], #1
 8007bac:	1aea      	subs	r2, r5, r3
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	dd07      	ble.n	8007bc4 <_dtoa_r+0xb64>
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fae2 	bl	8008184 <__multadd>
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	e7ea      	b.n	8007b9a <_dtoa_r+0xb3a>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfc8      	it	gt
 8007bca:	461d      	movgt	r5, r3
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	bfd8      	it	le
 8007bd0:	2501      	movle	r5, #1
 8007bd2:	441d      	add	r5, r3
 8007bd4:	f04f 0800 	mov.w	r8, #0
 8007bd8:	4651      	mov	r1, sl
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fc7f 	bl	80084e0 <__lshift>
 8007be2:	4631      	mov	r1, r6
 8007be4:	4682      	mov	sl, r0
 8007be6:	f000 fce7 	bl	80085b8 <__mcmp>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	dc96      	bgt.n	8007b1c <_dtoa_r+0xabc>
 8007bee:	d102      	bne.n	8007bf6 <_dtoa_r+0xb96>
 8007bf0:	f019 0f01 	tst.w	r9, #1
 8007bf4:	d192      	bne.n	8007b1c <_dtoa_r+0xabc>
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	461d      	mov	r5, r3
 8007bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bfe:	2a30      	cmp	r2, #48	; 0x30
 8007c00:	d0fa      	beq.n	8007bf8 <_dtoa_r+0xb98>
 8007c02:	e6dd      	b.n	80079c0 <_dtoa_r+0x960>
 8007c04:	9a00      	ldr	r2, [sp, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d189      	bne.n	8007b1e <_dtoa_r+0xabe>
 8007c0a:	f10b 0b01 	add.w	fp, fp, #1
 8007c0e:	2331      	movs	r3, #49	; 0x31
 8007c10:	e796      	b.n	8007b40 <_dtoa_r+0xae0>
 8007c12:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <_dtoa_r+0xbdc>)
 8007c14:	f7ff ba99 	b.w	800714a <_dtoa_r+0xea>
 8007c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f47f aa6d 	bne.w	80070fa <_dtoa_r+0x9a>
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <_dtoa_r+0xbe0>)
 8007c22:	f7ff ba92 	b.w	800714a <_dtoa_r+0xea>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dcb5      	bgt.n	8007b98 <_dtoa_r+0xb38>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	f73f aeb1 	bgt.w	8007996 <_dtoa_r+0x936>
 8007c34:	e7b0      	b.n	8007b98 <_dtoa_r+0xb38>
 8007c36:	bf00      	nop
 8007c38:	08008e7c 	.word	0x08008e7c
 8007c3c:	08008ddc 	.word	0x08008ddc
 8007c40:	08008e00 	.word	0x08008e00

08007c44 <_free_r>:
 8007c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c46:	2900      	cmp	r1, #0
 8007c48:	d044      	beq.n	8007cd4 <_free_r+0x90>
 8007c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4e:	9001      	str	r0, [sp, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f1a1 0404 	sub.w	r4, r1, #4
 8007c56:	bfb8      	it	lt
 8007c58:	18e4      	addlt	r4, r4, r3
 8007c5a:	f7fe fff3 	bl	8006c44 <__malloc_lock>
 8007c5e:	4a1e      	ldr	r2, [pc, #120]	; (8007cd8 <_free_r+0x94>)
 8007c60:	9801      	ldr	r0, [sp, #4]
 8007c62:	6813      	ldr	r3, [r2, #0]
 8007c64:	b933      	cbnz	r3, 8007c74 <_free_r+0x30>
 8007c66:	6063      	str	r3, [r4, #4]
 8007c68:	6014      	str	r4, [r2, #0]
 8007c6a:	b003      	add	sp, #12
 8007c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c70:	f7fe bfee 	b.w	8006c50 <__malloc_unlock>
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d908      	bls.n	8007c8a <_free_r+0x46>
 8007c78:	6825      	ldr	r5, [r4, #0]
 8007c7a:	1961      	adds	r1, r4, r5
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	bf01      	itttt	eq
 8007c80:	6819      	ldreq	r1, [r3, #0]
 8007c82:	685b      	ldreq	r3, [r3, #4]
 8007c84:	1949      	addeq	r1, r1, r5
 8007c86:	6021      	streq	r1, [r4, #0]
 8007c88:	e7ed      	b.n	8007c66 <_free_r+0x22>
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	b10b      	cbz	r3, 8007c94 <_free_r+0x50>
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	d9fa      	bls.n	8007c8a <_free_r+0x46>
 8007c94:	6811      	ldr	r1, [r2, #0]
 8007c96:	1855      	adds	r5, r2, r1
 8007c98:	42a5      	cmp	r5, r4
 8007c9a:	d10b      	bne.n	8007cb4 <_free_r+0x70>
 8007c9c:	6824      	ldr	r4, [r4, #0]
 8007c9e:	4421      	add	r1, r4
 8007ca0:	1854      	adds	r4, r2, r1
 8007ca2:	42a3      	cmp	r3, r4
 8007ca4:	6011      	str	r1, [r2, #0]
 8007ca6:	d1e0      	bne.n	8007c6a <_free_r+0x26>
 8007ca8:	681c      	ldr	r4, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	6053      	str	r3, [r2, #4]
 8007cae:	440c      	add	r4, r1
 8007cb0:	6014      	str	r4, [r2, #0]
 8007cb2:	e7da      	b.n	8007c6a <_free_r+0x26>
 8007cb4:	d902      	bls.n	8007cbc <_free_r+0x78>
 8007cb6:	230c      	movs	r3, #12
 8007cb8:	6003      	str	r3, [r0, #0]
 8007cba:	e7d6      	b.n	8007c6a <_free_r+0x26>
 8007cbc:	6825      	ldr	r5, [r4, #0]
 8007cbe:	1961      	adds	r1, r4, r5
 8007cc0:	428b      	cmp	r3, r1
 8007cc2:	bf04      	itt	eq
 8007cc4:	6819      	ldreq	r1, [r3, #0]
 8007cc6:	685b      	ldreq	r3, [r3, #4]
 8007cc8:	6063      	str	r3, [r4, #4]
 8007cca:	bf04      	itt	eq
 8007ccc:	1949      	addeq	r1, r1, r5
 8007cce:	6021      	streq	r1, [r4, #0]
 8007cd0:	6054      	str	r4, [r2, #4]
 8007cd2:	e7ca      	b.n	8007c6a <_free_r+0x26>
 8007cd4:	b003      	add	sp, #12
 8007cd6:	bd30      	pop	{r4, r5, pc}
 8007cd8:	200005d4 	.word	0x200005d4

08007cdc <__sfputc_r>:
 8007cdc:	6893      	ldr	r3, [r2, #8]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	b410      	push	{r4}
 8007ce4:	6093      	str	r3, [r2, #8]
 8007ce6:	da08      	bge.n	8007cfa <__sfputc_r+0x1e>
 8007ce8:	6994      	ldr	r4, [r2, #24]
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	db01      	blt.n	8007cf2 <__sfputc_r+0x16>
 8007cee:	290a      	cmp	r1, #10
 8007cf0:	d103      	bne.n	8007cfa <__sfputc_r+0x1e>
 8007cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf6:	f000 bda2 	b.w	800883e <__swbuf_r>
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	1c58      	adds	r0, r3, #1
 8007cfe:	6010      	str	r0, [r2, #0]
 8007d00:	7019      	strb	r1, [r3, #0]
 8007d02:	4608      	mov	r0, r1
 8007d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <__sfputs_r>:
 8007d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	460f      	mov	r7, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	18d5      	adds	r5, r2, r3
 8007d14:	42ac      	cmp	r4, r5
 8007d16:	d101      	bne.n	8007d1c <__sfputs_r+0x12>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e007      	b.n	8007d2c <__sfputs_r+0x22>
 8007d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d20:	463a      	mov	r2, r7
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ffda 	bl	8007cdc <__sfputc_r>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d1f3      	bne.n	8007d14 <__sfputs_r+0xa>
 8007d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d30 <_vfiprintf_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	460d      	mov	r5, r1
 8007d36:	b09d      	sub	sp, #116	; 0x74
 8007d38:	4614      	mov	r4, r2
 8007d3a:	4698      	mov	r8, r3
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	b118      	cbz	r0, 8007d48 <_vfiprintf_r+0x18>
 8007d40:	6a03      	ldr	r3, [r0, #32]
 8007d42:	b90b      	cbnz	r3, 8007d48 <_vfiprintf_r+0x18>
 8007d44:	f7ff f816 	bl	8006d74 <__sinit>
 8007d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4a:	07d9      	lsls	r1, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_vfiprintf_r+0x2a>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_vfiprintf_r+0x2a>
 8007d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d56:	f7ff f8f8 	bl	8006f4a <__retarget_lock_acquire_recursive>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	071b      	lsls	r3, r3, #28
 8007d5e:	d501      	bpl.n	8007d64 <_vfiprintf_r+0x34>
 8007d60:	692b      	ldr	r3, [r5, #16]
 8007d62:	b99b      	cbnz	r3, 8007d8c <_vfiprintf_r+0x5c>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 fda6 	bl	80088b8 <__swsetup_r>
 8007d6c:	b170      	cbz	r0, 8007d8c <_vfiprintf_r+0x5c>
 8007d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d70:	07dc      	lsls	r4, r3, #31
 8007d72:	d504      	bpl.n	8007d7e <_vfiprintf_r+0x4e>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	b01d      	add	sp, #116	; 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	0598      	lsls	r0, r3, #22
 8007d82:	d4f7      	bmi.n	8007d74 <_vfiprintf_r+0x44>
 8007d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d86:	f7ff f8e1 	bl	8006f4c <__retarget_lock_release_recursive>
 8007d8a:	e7f3      	b.n	8007d74 <_vfiprintf_r+0x44>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d90:	2320      	movs	r3, #32
 8007d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d9a:	2330      	movs	r3, #48	; 0x30
 8007d9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f50 <_vfiprintf_r+0x220>
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	f04f 0901 	mov.w	r9, #1
 8007da8:	4623      	mov	r3, r4
 8007daa:	469a      	mov	sl, r3
 8007dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db0:	b10a      	cbz	r2, 8007db6 <_vfiprintf_r+0x86>
 8007db2:	2a25      	cmp	r2, #37	; 0x25
 8007db4:	d1f9      	bne.n	8007daa <_vfiprintf_r+0x7a>
 8007db6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dba:	d00b      	beq.n	8007dd4 <_vfiprintf_r+0xa4>
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffa1 	bl	8007d0a <__sfputs_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f000 80a9 	beq.w	8007f20 <_vfiprintf_r+0x1f0>
 8007dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd0:	445a      	add	r2, fp
 8007dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80a1 	beq.w	8007f20 <_vfiprintf_r+0x1f0>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de8:	f10a 0a01 	add.w	sl, sl, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df4:	931a      	str	r3, [sp, #104]	; 0x68
 8007df6:	4654      	mov	r4, sl
 8007df8:	2205      	movs	r2, #5
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4854      	ldr	r0, [pc, #336]	; (8007f50 <_vfiprintf_r+0x220>)
 8007e00:	f7f8 fa0e 	bl	8000220 <memchr>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	b9d8      	cbnz	r0, 8007e40 <_vfiprintf_r+0x110>
 8007e08:	06d1      	lsls	r1, r2, #27
 8007e0a:	bf44      	itt	mi
 8007e0c:	2320      	movmi	r3, #32
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e12:	0713      	lsls	r3, r2, #28
 8007e14:	bf44      	itt	mi
 8007e16:	232b      	movmi	r3, #43	; 0x2b
 8007e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d015      	beq.n	8007e50 <_vfiprintf_r+0x120>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4654      	mov	r4, sl
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e34:	3b30      	subs	r3, #48	; 0x30
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d94d      	bls.n	8007ed6 <_vfiprintf_r+0x1a6>
 8007e3a:	b1b0      	cbz	r0, 8007e6a <_vfiprintf_r+0x13a>
 8007e3c:	9207      	str	r2, [sp, #28]
 8007e3e:	e014      	b.n	8007e6a <_vfiprintf_r+0x13a>
 8007e40:	eba0 0308 	sub.w	r3, r0, r8
 8007e44:	fa09 f303 	lsl.w	r3, r9, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	46a2      	mov	sl, r4
 8007e4e:	e7d2      	b.n	8007df6 <_vfiprintf_r+0xc6>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1d19      	adds	r1, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	9103      	str	r1, [sp, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	425b      	neglt	r3, r3
 8007e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e62:	9307      	strge	r3, [sp, #28]
 8007e64:	9307      	strlt	r3, [sp, #28]
 8007e66:	bfb8      	it	lt
 8007e68:	9204      	strlt	r2, [sp, #16]
 8007e6a:	7823      	ldrb	r3, [r4, #0]
 8007e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6e:	d10c      	bne.n	8007e8a <_vfiprintf_r+0x15a>
 8007e70:	7863      	ldrb	r3, [r4, #1]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d134      	bne.n	8007ee0 <_vfiprintf_r+0x1b0>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9203      	str	r2, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e86:	3402      	adds	r4, #2
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f60 <_vfiprintf_r+0x230>
 8007e8e:	7821      	ldrb	r1, [r4, #0]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7f8 f9c4 	bl	8000220 <memchr>
 8007e98:	b138      	cbz	r0, 8007eaa <_vfiprintf_r+0x17a>
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ea0:	2240      	movs	r2, #64	; 0x40
 8007ea2:	4082      	lsls	r2, r0
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	3401      	adds	r4, #1
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	4829      	ldr	r0, [pc, #164]	; (8007f54 <_vfiprintf_r+0x224>)
 8007eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb4:	2206      	movs	r2, #6
 8007eb6:	f7f8 f9b3 	bl	8000220 <memchr>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d03f      	beq.n	8007f3e <_vfiprintf_r+0x20e>
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <_vfiprintf_r+0x228>)
 8007ec0:	bb1b      	cbnz	r3, 8007f0a <_vfiprintf_r+0x1da>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	3307      	adds	r3, #7
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	3308      	adds	r3, #8
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	443b      	add	r3, r7
 8007ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed4:	e768      	b.n	8007da8 <_vfiprintf_r+0x78>
 8007ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eda:	460c      	mov	r4, r1
 8007edc:	2001      	movs	r0, #1
 8007ede:	e7a6      	b.n	8007e2e <_vfiprintf_r+0xfe>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	3401      	adds	r4, #1
 8007ee4:	9305      	str	r3, [sp, #20]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f04f 0c0a 	mov.w	ip, #10
 8007eec:	4620      	mov	r0, r4
 8007eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef2:	3a30      	subs	r2, #48	; 0x30
 8007ef4:	2a09      	cmp	r2, #9
 8007ef6:	d903      	bls.n	8007f00 <_vfiprintf_r+0x1d0>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0c6      	beq.n	8007e8a <_vfiprintf_r+0x15a>
 8007efc:	9105      	str	r1, [sp, #20]
 8007efe:	e7c4      	b.n	8007e8a <_vfiprintf_r+0x15a>
 8007f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f04:	4604      	mov	r4, r0
 8007f06:	2301      	movs	r3, #1
 8007f08:	e7f0      	b.n	8007eec <_vfiprintf_r+0x1bc>
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <_vfiprintf_r+0x22c>)
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7fe fa27 	bl	8006368 <_printf_float>
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	1c78      	adds	r0, r7, #1
 8007f1e:	d1d6      	bne.n	8007ece <_vfiprintf_r+0x19e>
 8007f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f22:	07d9      	lsls	r1, r3, #31
 8007f24:	d405      	bmi.n	8007f32 <_vfiprintf_r+0x202>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	059a      	lsls	r2, r3, #22
 8007f2a:	d402      	bmi.n	8007f32 <_vfiprintf_r+0x202>
 8007f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f2e:	f7ff f80d 	bl	8006f4c <__retarget_lock_release_recursive>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	065b      	lsls	r3, r3, #25
 8007f36:	f53f af1d 	bmi.w	8007d74 <_vfiprintf_r+0x44>
 8007f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3c:	e71c      	b.n	8007d78 <_vfiprintf_r+0x48>
 8007f3e:	ab03      	add	r3, sp, #12
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <_vfiprintf_r+0x22c>)
 8007f46:	a904      	add	r1, sp, #16
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7fe fd59 	bl	8006a00 <_printf_i>
 8007f4e:	e7e4      	b.n	8007f1a <_vfiprintf_r+0x1ea>
 8007f50:	08008e8d 	.word	0x08008e8d
 8007f54:	08008e97 	.word	0x08008e97
 8007f58:	08006369 	.word	0x08006369
 8007f5c:	08007d0b 	.word	0x08007d0b
 8007f60:	08008e93 	.word	0x08008e93

08007f64 <__sflush_r>:
 8007f64:	898a      	ldrh	r2, [r1, #12]
 8007f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	0710      	lsls	r0, r2, #28
 8007f6e:	460c      	mov	r4, r1
 8007f70:	d458      	bmi.n	8008024 <__sflush_r+0xc0>
 8007f72:	684b      	ldr	r3, [r1, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc05      	bgt.n	8007f84 <__sflush_r+0x20>
 8007f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dc02      	bgt.n	8007f84 <__sflush_r+0x20>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f86:	2e00      	cmp	r6, #0
 8007f88:	d0f9      	beq.n	8007f7e <__sflush_r+0x1a>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f90:	682f      	ldr	r7, [r5, #0]
 8007f92:	6a21      	ldr	r1, [r4, #32]
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	d032      	beq.n	8007ffe <__sflush_r+0x9a>
 8007f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	075a      	lsls	r2, r3, #29
 8007f9e:	d505      	bpl.n	8007fac <__sflush_r+0x48>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	1ac0      	subs	r0, r0, r3
 8007fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fa6:	b10b      	cbz	r3, 8007fac <__sflush_r+0x48>
 8007fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007faa:	1ac0      	subs	r0, r0, r3
 8007fac:	2300      	movs	r3, #0
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fb2:	6a21      	ldr	r1, [r4, #32]
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b0      	blx	r6
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	d106      	bne.n	8007fcc <__sflush_r+0x68>
 8007fbe:	6829      	ldr	r1, [r5, #0]
 8007fc0:	291d      	cmp	r1, #29
 8007fc2:	d82b      	bhi.n	800801c <__sflush_r+0xb8>
 8007fc4:	4a29      	ldr	r2, [pc, #164]	; (800806c <__sflush_r+0x108>)
 8007fc6:	410a      	asrs	r2, r1
 8007fc8:	07d6      	lsls	r6, r2, #31
 8007fca:	d427      	bmi.n	800801c <__sflush_r+0xb8>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	6062      	str	r2, [r4, #4]
 8007fd0:	04d9      	lsls	r1, r3, #19
 8007fd2:	6922      	ldr	r2, [r4, #16]
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	d504      	bpl.n	8007fe2 <__sflush_r+0x7e>
 8007fd8:	1c42      	adds	r2, r0, #1
 8007fda:	d101      	bne.n	8007fe0 <__sflush_r+0x7c>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b903      	cbnz	r3, 8007fe2 <__sflush_r+0x7e>
 8007fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8007fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fe4:	602f      	str	r7, [r5, #0]
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	d0c9      	beq.n	8007f7e <__sflush_r+0x1a>
 8007fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	d002      	beq.n	8007ff8 <__sflush_r+0x94>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f7ff fe26 	bl	8007c44 <_free_r>
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8007ffc:	e7c0      	b.n	8007f80 <__sflush_r+0x1c>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4628      	mov	r0, r5
 8008002:	47b0      	blx	r6
 8008004:	1c41      	adds	r1, r0, #1
 8008006:	d1c8      	bne.n	8007f9a <__sflush_r+0x36>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0c5      	beq.n	8007f9a <__sflush_r+0x36>
 800800e:	2b1d      	cmp	r3, #29
 8008010:	d001      	beq.n	8008016 <__sflush_r+0xb2>
 8008012:	2b16      	cmp	r3, #22
 8008014:	d101      	bne.n	800801a <__sflush_r+0xb6>
 8008016:	602f      	str	r7, [r5, #0]
 8008018:	e7b1      	b.n	8007f7e <__sflush_r+0x1a>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	e7ad      	b.n	8007f80 <__sflush_r+0x1c>
 8008024:	690f      	ldr	r7, [r1, #16]
 8008026:	2f00      	cmp	r7, #0
 8008028:	d0a9      	beq.n	8007f7e <__sflush_r+0x1a>
 800802a:	0793      	lsls	r3, r2, #30
 800802c:	680e      	ldr	r6, [r1, #0]
 800802e:	bf08      	it	eq
 8008030:	694b      	ldreq	r3, [r1, #20]
 8008032:	600f      	str	r7, [r1, #0]
 8008034:	bf18      	it	ne
 8008036:	2300      	movne	r3, #0
 8008038:	eba6 0807 	sub.w	r8, r6, r7
 800803c:	608b      	str	r3, [r1, #8]
 800803e:	f1b8 0f00 	cmp.w	r8, #0
 8008042:	dd9c      	ble.n	8007f7e <__sflush_r+0x1a>
 8008044:	6a21      	ldr	r1, [r4, #32]
 8008046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008048:	4643      	mov	r3, r8
 800804a:	463a      	mov	r2, r7
 800804c:	4628      	mov	r0, r5
 800804e:	47b0      	blx	r6
 8008050:	2800      	cmp	r0, #0
 8008052:	dc06      	bgt.n	8008062 <__sflush_r+0xfe>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008060:	e78e      	b.n	8007f80 <__sflush_r+0x1c>
 8008062:	4407      	add	r7, r0
 8008064:	eba8 0800 	sub.w	r8, r8, r0
 8008068:	e7e9      	b.n	800803e <__sflush_r+0xda>
 800806a:	bf00      	nop
 800806c:	dfbffffe 	.word	0xdfbffffe

08008070 <_fflush_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	690b      	ldr	r3, [r1, #16]
 8008074:	4605      	mov	r5, r0
 8008076:	460c      	mov	r4, r1
 8008078:	b913      	cbnz	r3, 8008080 <_fflush_r+0x10>
 800807a:	2500      	movs	r5, #0
 800807c:	4628      	mov	r0, r5
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	b118      	cbz	r0, 800808a <_fflush_r+0x1a>
 8008082:	6a03      	ldr	r3, [r0, #32]
 8008084:	b90b      	cbnz	r3, 800808a <_fflush_r+0x1a>
 8008086:	f7fe fe75 	bl	8006d74 <__sinit>
 800808a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f3      	beq.n	800807a <_fflush_r+0xa>
 8008092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008094:	07d0      	lsls	r0, r2, #31
 8008096:	d404      	bmi.n	80080a2 <_fflush_r+0x32>
 8008098:	0599      	lsls	r1, r3, #22
 800809a:	d402      	bmi.n	80080a2 <_fflush_r+0x32>
 800809c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800809e:	f7fe ff54 	bl	8006f4a <__retarget_lock_acquire_recursive>
 80080a2:	4628      	mov	r0, r5
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7ff ff5d 	bl	8007f64 <__sflush_r>
 80080aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ac:	07da      	lsls	r2, r3, #31
 80080ae:	4605      	mov	r5, r0
 80080b0:	d4e4      	bmi.n	800807c <_fflush_r+0xc>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	059b      	lsls	r3, r3, #22
 80080b6:	d4e1      	bmi.n	800807c <_fflush_r+0xc>
 80080b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ba:	f7fe ff47 	bl	8006f4c <__retarget_lock_release_recursive>
 80080be:	e7dd      	b.n	800807c <_fflush_r+0xc>

080080c0 <_Balloc>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	69c6      	ldr	r6, [r0, #28]
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	b976      	cbnz	r6, 80080e8 <_Balloc+0x28>
 80080ca:	2010      	movs	r0, #16
 80080cc:	f7fe fb82 	bl	80067d4 <malloc>
 80080d0:	4602      	mov	r2, r0
 80080d2:	61e0      	str	r0, [r4, #28]
 80080d4:	b920      	cbnz	r0, 80080e0 <_Balloc+0x20>
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <_Balloc+0x78>)
 80080d8:	4818      	ldr	r0, [pc, #96]	; (800813c <_Balloc+0x7c>)
 80080da:	216b      	movs	r1, #107	; 0x6b
 80080dc:	f000 fd1c 	bl	8008b18 <__assert_func>
 80080e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e4:	6006      	str	r6, [r0, #0]
 80080e6:	60c6      	str	r6, [r0, #12]
 80080e8:	69e6      	ldr	r6, [r4, #28]
 80080ea:	68f3      	ldr	r3, [r6, #12]
 80080ec:	b183      	cbz	r3, 8008110 <_Balloc+0x50>
 80080ee:	69e3      	ldr	r3, [r4, #28]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080f6:	b9b8      	cbnz	r0, 8008128 <_Balloc+0x68>
 80080f8:	2101      	movs	r1, #1
 80080fa:	fa01 f605 	lsl.w	r6, r1, r5
 80080fe:	1d72      	adds	r2, r6, #5
 8008100:	0092      	lsls	r2, r2, #2
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fd26 	bl	8008b54 <_calloc_r>
 8008108:	b160      	cbz	r0, 8008124 <_Balloc+0x64>
 800810a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800810e:	e00e      	b.n	800812e <_Balloc+0x6e>
 8008110:	2221      	movs	r2, #33	; 0x21
 8008112:	2104      	movs	r1, #4
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fd1d 	bl	8008b54 <_calloc_r>
 800811a:	69e3      	ldr	r3, [r4, #28]
 800811c:	60f0      	str	r0, [r6, #12]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e4      	bne.n	80080ee <_Balloc+0x2e>
 8008124:	2000      	movs	r0, #0
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	6802      	ldr	r2, [r0, #0]
 800812a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800812e:	2300      	movs	r3, #0
 8008130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008134:	e7f7      	b.n	8008126 <_Balloc+0x66>
 8008136:	bf00      	nop
 8008138:	08008e0d 	.word	0x08008e0d
 800813c:	08008e9e 	.word	0x08008e9e

08008140 <_Bfree>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	69c6      	ldr	r6, [r0, #28]
 8008144:	4605      	mov	r5, r0
 8008146:	460c      	mov	r4, r1
 8008148:	b976      	cbnz	r6, 8008168 <_Bfree+0x28>
 800814a:	2010      	movs	r0, #16
 800814c:	f7fe fb42 	bl	80067d4 <malloc>
 8008150:	4602      	mov	r2, r0
 8008152:	61e8      	str	r0, [r5, #28]
 8008154:	b920      	cbnz	r0, 8008160 <_Bfree+0x20>
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <_Bfree+0x3c>)
 8008158:	4809      	ldr	r0, [pc, #36]	; (8008180 <_Bfree+0x40>)
 800815a:	218f      	movs	r1, #143	; 0x8f
 800815c:	f000 fcdc 	bl	8008b18 <__assert_func>
 8008160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008164:	6006      	str	r6, [r0, #0]
 8008166:	60c6      	str	r6, [r0, #12]
 8008168:	b13c      	cbz	r4, 800817a <_Bfree+0x3a>
 800816a:	69eb      	ldr	r3, [r5, #28]
 800816c:	6862      	ldr	r2, [r4, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008174:	6021      	str	r1, [r4, #0]
 8008176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	08008e0d 	.word	0x08008e0d
 8008180:	08008e9e 	.word	0x08008e9e

08008184 <__multadd>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	690d      	ldr	r5, [r1, #16]
 800818a:	4607      	mov	r7, r0
 800818c:	460c      	mov	r4, r1
 800818e:	461e      	mov	r6, r3
 8008190:	f101 0c14 	add.w	ip, r1, #20
 8008194:	2000      	movs	r0, #0
 8008196:	f8dc 3000 	ldr.w	r3, [ip]
 800819a:	b299      	uxth	r1, r3
 800819c:	fb02 6101 	mla	r1, r2, r1, r6
 80081a0:	0c1e      	lsrs	r6, r3, #16
 80081a2:	0c0b      	lsrs	r3, r1, #16
 80081a4:	fb02 3306 	mla	r3, r2, r6, r3
 80081a8:	b289      	uxth	r1, r1
 80081aa:	3001      	adds	r0, #1
 80081ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081b0:	4285      	cmp	r5, r0
 80081b2:	f84c 1b04 	str.w	r1, [ip], #4
 80081b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081ba:	dcec      	bgt.n	8008196 <__multadd+0x12>
 80081bc:	b30e      	cbz	r6, 8008202 <__multadd+0x7e>
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	dc19      	bgt.n	80081f8 <__multadd+0x74>
 80081c4:	6861      	ldr	r1, [r4, #4]
 80081c6:	4638      	mov	r0, r7
 80081c8:	3101      	adds	r1, #1
 80081ca:	f7ff ff79 	bl	80080c0 <_Balloc>
 80081ce:	4680      	mov	r8, r0
 80081d0:	b928      	cbnz	r0, 80081de <__multadd+0x5a>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <__multadd+0x84>)
 80081d6:	480d      	ldr	r0, [pc, #52]	; (800820c <__multadd+0x88>)
 80081d8:	21ba      	movs	r1, #186	; 0xba
 80081da:	f000 fc9d 	bl	8008b18 <__assert_func>
 80081de:	6922      	ldr	r2, [r4, #16]
 80081e0:	3202      	adds	r2, #2
 80081e2:	f104 010c 	add.w	r1, r4, #12
 80081e6:	0092      	lsls	r2, r2, #2
 80081e8:	300c      	adds	r0, #12
 80081ea:	f000 fc87 	bl	8008afc <memcpy>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ffa5 	bl	8008140 <_Bfree>
 80081f6:	4644      	mov	r4, r8
 80081f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081fc:	3501      	adds	r5, #1
 80081fe:	615e      	str	r6, [r3, #20]
 8008200:	6125      	str	r5, [r4, #16]
 8008202:	4620      	mov	r0, r4
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	08008e7c 	.word	0x08008e7c
 800820c:	08008e9e 	.word	0x08008e9e

08008210 <__hi0bits>:
 8008210:	0c03      	lsrs	r3, r0, #16
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	b9d3      	cbnz	r3, 800824c <__hi0bits+0x3c>
 8008216:	0400      	lsls	r0, r0, #16
 8008218:	2310      	movs	r3, #16
 800821a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800821e:	bf04      	itt	eq
 8008220:	0200      	lsleq	r0, r0, #8
 8008222:	3308      	addeq	r3, #8
 8008224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008228:	bf04      	itt	eq
 800822a:	0100      	lsleq	r0, r0, #4
 800822c:	3304      	addeq	r3, #4
 800822e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008232:	bf04      	itt	eq
 8008234:	0080      	lsleq	r0, r0, #2
 8008236:	3302      	addeq	r3, #2
 8008238:	2800      	cmp	r0, #0
 800823a:	db05      	blt.n	8008248 <__hi0bits+0x38>
 800823c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008240:	f103 0301 	add.w	r3, r3, #1
 8008244:	bf08      	it	eq
 8008246:	2320      	moveq	r3, #32
 8008248:	4618      	mov	r0, r3
 800824a:	4770      	bx	lr
 800824c:	2300      	movs	r3, #0
 800824e:	e7e4      	b.n	800821a <__hi0bits+0xa>

08008250 <__lo0bits>:
 8008250:	6803      	ldr	r3, [r0, #0]
 8008252:	f013 0207 	ands.w	r2, r3, #7
 8008256:	d00c      	beq.n	8008272 <__lo0bits+0x22>
 8008258:	07d9      	lsls	r1, r3, #31
 800825a:	d422      	bmi.n	80082a2 <__lo0bits+0x52>
 800825c:	079a      	lsls	r2, r3, #30
 800825e:	bf49      	itett	mi
 8008260:	085b      	lsrmi	r3, r3, #1
 8008262:	089b      	lsrpl	r3, r3, #2
 8008264:	6003      	strmi	r3, [r0, #0]
 8008266:	2201      	movmi	r2, #1
 8008268:	bf5c      	itt	pl
 800826a:	6003      	strpl	r3, [r0, #0]
 800826c:	2202      	movpl	r2, #2
 800826e:	4610      	mov	r0, r2
 8008270:	4770      	bx	lr
 8008272:	b299      	uxth	r1, r3
 8008274:	b909      	cbnz	r1, 800827a <__lo0bits+0x2a>
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	2210      	movs	r2, #16
 800827a:	b2d9      	uxtb	r1, r3
 800827c:	b909      	cbnz	r1, 8008282 <__lo0bits+0x32>
 800827e:	3208      	adds	r2, #8
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	0719      	lsls	r1, r3, #28
 8008284:	bf04      	itt	eq
 8008286:	091b      	lsreq	r3, r3, #4
 8008288:	3204      	addeq	r2, #4
 800828a:	0799      	lsls	r1, r3, #30
 800828c:	bf04      	itt	eq
 800828e:	089b      	lsreq	r3, r3, #2
 8008290:	3202      	addeq	r2, #2
 8008292:	07d9      	lsls	r1, r3, #31
 8008294:	d403      	bmi.n	800829e <__lo0bits+0x4e>
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	f102 0201 	add.w	r2, r2, #1
 800829c:	d003      	beq.n	80082a6 <__lo0bits+0x56>
 800829e:	6003      	str	r3, [r0, #0]
 80082a0:	e7e5      	b.n	800826e <__lo0bits+0x1e>
 80082a2:	2200      	movs	r2, #0
 80082a4:	e7e3      	b.n	800826e <__lo0bits+0x1e>
 80082a6:	2220      	movs	r2, #32
 80082a8:	e7e1      	b.n	800826e <__lo0bits+0x1e>
	...

080082ac <__i2b>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	2101      	movs	r1, #1
 80082b2:	f7ff ff05 	bl	80080c0 <_Balloc>
 80082b6:	4602      	mov	r2, r0
 80082b8:	b928      	cbnz	r0, 80082c6 <__i2b+0x1a>
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <__i2b+0x24>)
 80082bc:	4805      	ldr	r0, [pc, #20]	; (80082d4 <__i2b+0x28>)
 80082be:	f240 1145 	movw	r1, #325	; 0x145
 80082c2:	f000 fc29 	bl	8008b18 <__assert_func>
 80082c6:	2301      	movs	r3, #1
 80082c8:	6144      	str	r4, [r0, #20]
 80082ca:	6103      	str	r3, [r0, #16]
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	bf00      	nop
 80082d0:	08008e7c 	.word	0x08008e7c
 80082d4:	08008e9e 	.word	0x08008e9e

080082d8 <__multiply>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4691      	mov	r9, r2
 80082de:	690a      	ldr	r2, [r1, #16]
 80082e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bfb8      	it	lt
 80082e8:	460b      	movlt	r3, r1
 80082ea:	460c      	mov	r4, r1
 80082ec:	bfbc      	itt	lt
 80082ee:	464c      	movlt	r4, r9
 80082f0:	4699      	movlt	r9, r3
 80082f2:	6927      	ldr	r7, [r4, #16]
 80082f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082f8:	68a3      	ldr	r3, [r4, #8]
 80082fa:	6861      	ldr	r1, [r4, #4]
 80082fc:	eb07 060a 	add.w	r6, r7, sl
 8008300:	42b3      	cmp	r3, r6
 8008302:	b085      	sub	sp, #20
 8008304:	bfb8      	it	lt
 8008306:	3101      	addlt	r1, #1
 8008308:	f7ff feda 	bl	80080c0 <_Balloc>
 800830c:	b930      	cbnz	r0, 800831c <__multiply+0x44>
 800830e:	4602      	mov	r2, r0
 8008310:	4b44      	ldr	r3, [pc, #272]	; (8008424 <__multiply+0x14c>)
 8008312:	4845      	ldr	r0, [pc, #276]	; (8008428 <__multiply+0x150>)
 8008314:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008318:	f000 fbfe 	bl	8008b18 <__assert_func>
 800831c:	f100 0514 	add.w	r5, r0, #20
 8008320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008324:	462b      	mov	r3, r5
 8008326:	2200      	movs	r2, #0
 8008328:	4543      	cmp	r3, r8
 800832a:	d321      	bcc.n	8008370 <__multiply+0x98>
 800832c:	f104 0314 	add.w	r3, r4, #20
 8008330:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008334:	f109 0314 	add.w	r3, r9, #20
 8008338:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800833c:	9202      	str	r2, [sp, #8]
 800833e:	1b3a      	subs	r2, r7, r4
 8008340:	3a15      	subs	r2, #21
 8008342:	f022 0203 	bic.w	r2, r2, #3
 8008346:	3204      	adds	r2, #4
 8008348:	f104 0115 	add.w	r1, r4, #21
 800834c:	428f      	cmp	r7, r1
 800834e:	bf38      	it	cc
 8008350:	2204      	movcc	r2, #4
 8008352:	9201      	str	r2, [sp, #4]
 8008354:	9a02      	ldr	r2, [sp, #8]
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	429a      	cmp	r2, r3
 800835a:	d80c      	bhi.n	8008376 <__multiply+0x9e>
 800835c:	2e00      	cmp	r6, #0
 800835e:	dd03      	ble.n	8008368 <__multiply+0x90>
 8008360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008364:	2b00      	cmp	r3, #0
 8008366:	d05b      	beq.n	8008420 <__multiply+0x148>
 8008368:	6106      	str	r6, [r0, #16]
 800836a:	b005      	add	sp, #20
 800836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008370:	f843 2b04 	str.w	r2, [r3], #4
 8008374:	e7d8      	b.n	8008328 <__multiply+0x50>
 8008376:	f8b3 a000 	ldrh.w	sl, [r3]
 800837a:	f1ba 0f00 	cmp.w	sl, #0
 800837e:	d024      	beq.n	80083ca <__multiply+0xf2>
 8008380:	f104 0e14 	add.w	lr, r4, #20
 8008384:	46a9      	mov	r9, r5
 8008386:	f04f 0c00 	mov.w	ip, #0
 800838a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800838e:	f8d9 1000 	ldr.w	r1, [r9]
 8008392:	fa1f fb82 	uxth.w	fp, r2
 8008396:	b289      	uxth	r1, r1
 8008398:	fb0a 110b 	mla	r1, sl, fp, r1
 800839c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083a0:	f8d9 2000 	ldr.w	r2, [r9]
 80083a4:	4461      	add	r1, ip
 80083a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80083ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083b2:	b289      	uxth	r1, r1
 80083b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083b8:	4577      	cmp	r7, lr
 80083ba:	f849 1b04 	str.w	r1, [r9], #4
 80083be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083c2:	d8e2      	bhi.n	800838a <__multiply+0xb2>
 80083c4:	9a01      	ldr	r2, [sp, #4]
 80083c6:	f845 c002 	str.w	ip, [r5, r2]
 80083ca:	9a03      	ldr	r2, [sp, #12]
 80083cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083d0:	3304      	adds	r3, #4
 80083d2:	f1b9 0f00 	cmp.w	r9, #0
 80083d6:	d021      	beq.n	800841c <__multiply+0x144>
 80083d8:	6829      	ldr	r1, [r5, #0]
 80083da:	f104 0c14 	add.w	ip, r4, #20
 80083de:	46ae      	mov	lr, r5
 80083e0:	f04f 0a00 	mov.w	sl, #0
 80083e4:	f8bc b000 	ldrh.w	fp, [ip]
 80083e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083ec:	fb09 220b 	mla	r2, r9, fp, r2
 80083f0:	4452      	add	r2, sl
 80083f2:	b289      	uxth	r1, r1
 80083f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083f8:	f84e 1b04 	str.w	r1, [lr], #4
 80083fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008404:	f8be 1000 	ldrh.w	r1, [lr]
 8008408:	fb09 110a 	mla	r1, r9, sl, r1
 800840c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008410:	4567      	cmp	r7, ip
 8008412:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008416:	d8e5      	bhi.n	80083e4 <__multiply+0x10c>
 8008418:	9a01      	ldr	r2, [sp, #4]
 800841a:	50a9      	str	r1, [r5, r2]
 800841c:	3504      	adds	r5, #4
 800841e:	e799      	b.n	8008354 <__multiply+0x7c>
 8008420:	3e01      	subs	r6, #1
 8008422:	e79b      	b.n	800835c <__multiply+0x84>
 8008424:	08008e7c 	.word	0x08008e7c
 8008428:	08008e9e 	.word	0x08008e9e

0800842c <__pow5mult>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	4615      	mov	r5, r2
 8008432:	f012 0203 	ands.w	r2, r2, #3
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	d007      	beq.n	800844c <__pow5mult+0x20>
 800843c:	4c25      	ldr	r4, [pc, #148]	; (80084d4 <__pow5mult+0xa8>)
 800843e:	3a01      	subs	r2, #1
 8008440:	2300      	movs	r3, #0
 8008442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008446:	f7ff fe9d 	bl	8008184 <__multadd>
 800844a:	4607      	mov	r7, r0
 800844c:	10ad      	asrs	r5, r5, #2
 800844e:	d03d      	beq.n	80084cc <__pow5mult+0xa0>
 8008450:	69f4      	ldr	r4, [r6, #28]
 8008452:	b97c      	cbnz	r4, 8008474 <__pow5mult+0x48>
 8008454:	2010      	movs	r0, #16
 8008456:	f7fe f9bd 	bl	80067d4 <malloc>
 800845a:	4602      	mov	r2, r0
 800845c:	61f0      	str	r0, [r6, #28]
 800845e:	b928      	cbnz	r0, 800846c <__pow5mult+0x40>
 8008460:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <__pow5mult+0xac>)
 8008462:	481e      	ldr	r0, [pc, #120]	; (80084dc <__pow5mult+0xb0>)
 8008464:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008468:	f000 fb56 	bl	8008b18 <__assert_func>
 800846c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008470:	6004      	str	r4, [r0, #0]
 8008472:	60c4      	str	r4, [r0, #12]
 8008474:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800847c:	b94c      	cbnz	r4, 8008492 <__pow5mult+0x66>
 800847e:	f240 2171 	movw	r1, #625	; 0x271
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ff12 	bl	80082ac <__i2b>
 8008488:	2300      	movs	r3, #0
 800848a:	f8c8 0008 	str.w	r0, [r8, #8]
 800848e:	4604      	mov	r4, r0
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	07eb      	lsls	r3, r5, #31
 8008498:	d50a      	bpl.n	80084b0 <__pow5mult+0x84>
 800849a:	4639      	mov	r1, r7
 800849c:	4622      	mov	r2, r4
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ff1a 	bl	80082d8 <__multiply>
 80084a4:	4639      	mov	r1, r7
 80084a6:	4680      	mov	r8, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fe49 	bl	8008140 <_Bfree>
 80084ae:	4647      	mov	r7, r8
 80084b0:	106d      	asrs	r5, r5, #1
 80084b2:	d00b      	beq.n	80084cc <__pow5mult+0xa0>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	b938      	cbnz	r0, 80084c8 <__pow5mult+0x9c>
 80084b8:	4622      	mov	r2, r4
 80084ba:	4621      	mov	r1, r4
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ff0b 	bl	80082d8 <__multiply>
 80084c2:	6020      	str	r0, [r4, #0]
 80084c4:	f8c0 9000 	str.w	r9, [r0]
 80084c8:	4604      	mov	r4, r0
 80084ca:	e7e4      	b.n	8008496 <__pow5mult+0x6a>
 80084cc:	4638      	mov	r0, r7
 80084ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d2:	bf00      	nop
 80084d4:	08008fe8 	.word	0x08008fe8
 80084d8:	08008e0d 	.word	0x08008e0d
 80084dc:	08008e9e 	.word	0x08008e9e

080084e0 <__lshift>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	6849      	ldr	r1, [r1, #4]
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	4607      	mov	r7, r0
 80084f2:	4691      	mov	r9, r2
 80084f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084f8:	f108 0601 	add.w	r6, r8, #1
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	db0b      	blt.n	8008518 <__lshift+0x38>
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff fddd 	bl	80080c0 <_Balloc>
 8008506:	4605      	mov	r5, r0
 8008508:	b948      	cbnz	r0, 800851e <__lshift+0x3e>
 800850a:	4602      	mov	r2, r0
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <__lshift+0xd0>)
 800850e:	4829      	ldr	r0, [pc, #164]	; (80085b4 <__lshift+0xd4>)
 8008510:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008514:	f000 fb00 	bl	8008b18 <__assert_func>
 8008518:	3101      	adds	r1, #1
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	e7ee      	b.n	80084fc <__lshift+0x1c>
 800851e:	2300      	movs	r3, #0
 8008520:	f100 0114 	add.w	r1, r0, #20
 8008524:	f100 0210 	add.w	r2, r0, #16
 8008528:	4618      	mov	r0, r3
 800852a:	4553      	cmp	r3, sl
 800852c:	db33      	blt.n	8008596 <__lshift+0xb6>
 800852e:	6920      	ldr	r0, [r4, #16]
 8008530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008534:	f104 0314 	add.w	r3, r4, #20
 8008538:	f019 091f 	ands.w	r9, r9, #31
 800853c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008544:	d02b      	beq.n	800859e <__lshift+0xbe>
 8008546:	f1c9 0e20 	rsb	lr, r9, #32
 800854a:	468a      	mov	sl, r1
 800854c:	2200      	movs	r2, #0
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	fa00 f009 	lsl.w	r0, r0, r9
 8008554:	4310      	orrs	r0, r2
 8008556:	f84a 0b04 	str.w	r0, [sl], #4
 800855a:	f853 2b04 	ldr.w	r2, [r3], #4
 800855e:	459c      	cmp	ip, r3
 8008560:	fa22 f20e 	lsr.w	r2, r2, lr
 8008564:	d8f3      	bhi.n	800854e <__lshift+0x6e>
 8008566:	ebac 0304 	sub.w	r3, ip, r4
 800856a:	3b15      	subs	r3, #21
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3304      	adds	r3, #4
 8008572:	f104 0015 	add.w	r0, r4, #21
 8008576:	4584      	cmp	ip, r0
 8008578:	bf38      	it	cc
 800857a:	2304      	movcc	r3, #4
 800857c:	50ca      	str	r2, [r1, r3]
 800857e:	b10a      	cbz	r2, 8008584 <__lshift+0xa4>
 8008580:	f108 0602 	add.w	r6, r8, #2
 8008584:	3e01      	subs	r6, #1
 8008586:	4638      	mov	r0, r7
 8008588:	612e      	str	r6, [r5, #16]
 800858a:	4621      	mov	r1, r4
 800858c:	f7ff fdd8 	bl	8008140 <_Bfree>
 8008590:	4628      	mov	r0, r5
 8008592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008596:	f842 0f04 	str.w	r0, [r2, #4]!
 800859a:	3301      	adds	r3, #1
 800859c:	e7c5      	b.n	800852a <__lshift+0x4a>
 800859e:	3904      	subs	r1, #4
 80085a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085a8:	459c      	cmp	ip, r3
 80085aa:	d8f9      	bhi.n	80085a0 <__lshift+0xc0>
 80085ac:	e7ea      	b.n	8008584 <__lshift+0xa4>
 80085ae:	bf00      	nop
 80085b0:	08008e7c 	.word	0x08008e7c
 80085b4:	08008e9e 	.word	0x08008e9e

080085b8 <__mcmp>:
 80085b8:	b530      	push	{r4, r5, lr}
 80085ba:	6902      	ldr	r2, [r0, #16]
 80085bc:	690c      	ldr	r4, [r1, #16]
 80085be:	1b12      	subs	r2, r2, r4
 80085c0:	d10e      	bne.n	80085e0 <__mcmp+0x28>
 80085c2:	f100 0314 	add.w	r3, r0, #20
 80085c6:	3114      	adds	r1, #20
 80085c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085d8:	42a5      	cmp	r5, r4
 80085da:	d003      	beq.n	80085e4 <__mcmp+0x2c>
 80085dc:	d305      	bcc.n	80085ea <__mcmp+0x32>
 80085de:	2201      	movs	r2, #1
 80085e0:	4610      	mov	r0, r2
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	4283      	cmp	r3, r0
 80085e6:	d3f3      	bcc.n	80085d0 <__mcmp+0x18>
 80085e8:	e7fa      	b.n	80085e0 <__mcmp+0x28>
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ee:	e7f7      	b.n	80085e0 <__mcmp+0x28>

080085f0 <__mdiff>:
 80085f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	460c      	mov	r4, r1
 80085f6:	4606      	mov	r6, r0
 80085f8:	4611      	mov	r1, r2
 80085fa:	4620      	mov	r0, r4
 80085fc:	4690      	mov	r8, r2
 80085fe:	f7ff ffdb 	bl	80085b8 <__mcmp>
 8008602:	1e05      	subs	r5, r0, #0
 8008604:	d110      	bne.n	8008628 <__mdiff+0x38>
 8008606:	4629      	mov	r1, r5
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff fd59 	bl	80080c0 <_Balloc>
 800860e:	b930      	cbnz	r0, 800861e <__mdiff+0x2e>
 8008610:	4b3a      	ldr	r3, [pc, #232]	; (80086fc <__mdiff+0x10c>)
 8008612:	4602      	mov	r2, r0
 8008614:	f240 2137 	movw	r1, #567	; 0x237
 8008618:	4839      	ldr	r0, [pc, #228]	; (8008700 <__mdiff+0x110>)
 800861a:	f000 fa7d 	bl	8008b18 <__assert_func>
 800861e:	2301      	movs	r3, #1
 8008620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	bfa4      	itt	ge
 800862a:	4643      	movge	r3, r8
 800862c:	46a0      	movge	r8, r4
 800862e:	4630      	mov	r0, r6
 8008630:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008634:	bfa6      	itte	ge
 8008636:	461c      	movge	r4, r3
 8008638:	2500      	movge	r5, #0
 800863a:	2501      	movlt	r5, #1
 800863c:	f7ff fd40 	bl	80080c0 <_Balloc>
 8008640:	b920      	cbnz	r0, 800864c <__mdiff+0x5c>
 8008642:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <__mdiff+0x10c>)
 8008644:	4602      	mov	r2, r0
 8008646:	f240 2145 	movw	r1, #581	; 0x245
 800864a:	e7e5      	b.n	8008618 <__mdiff+0x28>
 800864c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008650:	6926      	ldr	r6, [r4, #16]
 8008652:	60c5      	str	r5, [r0, #12]
 8008654:	f104 0914 	add.w	r9, r4, #20
 8008658:	f108 0514 	add.w	r5, r8, #20
 800865c:	f100 0e14 	add.w	lr, r0, #20
 8008660:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008668:	f108 0210 	add.w	r2, r8, #16
 800866c:	46f2      	mov	sl, lr
 800866e:	2100      	movs	r1, #0
 8008670:	f859 3b04 	ldr.w	r3, [r9], #4
 8008674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008678:	fa11 f88b 	uxtah	r8, r1, fp
 800867c:	b299      	uxth	r1, r3
 800867e:	0c1b      	lsrs	r3, r3, #16
 8008680:	eba8 0801 	sub.w	r8, r8, r1
 8008684:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008688:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800868c:	fa1f f888 	uxth.w	r8, r8
 8008690:	1419      	asrs	r1, r3, #16
 8008692:	454e      	cmp	r6, r9
 8008694:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008698:	f84a 3b04 	str.w	r3, [sl], #4
 800869c:	d8e8      	bhi.n	8008670 <__mdiff+0x80>
 800869e:	1b33      	subs	r3, r6, r4
 80086a0:	3b15      	subs	r3, #21
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	3304      	adds	r3, #4
 80086a8:	3415      	adds	r4, #21
 80086aa:	42a6      	cmp	r6, r4
 80086ac:	bf38      	it	cc
 80086ae:	2304      	movcc	r3, #4
 80086b0:	441d      	add	r5, r3
 80086b2:	4473      	add	r3, lr
 80086b4:	469e      	mov	lr, r3
 80086b6:	462e      	mov	r6, r5
 80086b8:	4566      	cmp	r6, ip
 80086ba:	d30e      	bcc.n	80086da <__mdiff+0xea>
 80086bc:	f10c 0203 	add.w	r2, ip, #3
 80086c0:	1b52      	subs	r2, r2, r5
 80086c2:	f022 0203 	bic.w	r2, r2, #3
 80086c6:	3d03      	subs	r5, #3
 80086c8:	45ac      	cmp	ip, r5
 80086ca:	bf38      	it	cc
 80086cc:	2200      	movcc	r2, #0
 80086ce:	4413      	add	r3, r2
 80086d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80086d4:	b17a      	cbz	r2, 80086f6 <__mdiff+0x106>
 80086d6:	6107      	str	r7, [r0, #16]
 80086d8:	e7a4      	b.n	8008624 <__mdiff+0x34>
 80086da:	f856 8b04 	ldr.w	r8, [r6], #4
 80086de:	fa11 f288 	uxtah	r2, r1, r8
 80086e2:	1414      	asrs	r4, r2, #16
 80086e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086e8:	b292      	uxth	r2, r2
 80086ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086ee:	f84e 2b04 	str.w	r2, [lr], #4
 80086f2:	1421      	asrs	r1, r4, #16
 80086f4:	e7e0      	b.n	80086b8 <__mdiff+0xc8>
 80086f6:	3f01      	subs	r7, #1
 80086f8:	e7ea      	b.n	80086d0 <__mdiff+0xe0>
 80086fa:	bf00      	nop
 80086fc:	08008e7c 	.word	0x08008e7c
 8008700:	08008e9e 	.word	0x08008e9e

08008704 <__d2b>:
 8008704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008708:	460f      	mov	r7, r1
 800870a:	2101      	movs	r1, #1
 800870c:	ec59 8b10 	vmov	r8, r9, d0
 8008710:	4616      	mov	r6, r2
 8008712:	f7ff fcd5 	bl	80080c0 <_Balloc>
 8008716:	4604      	mov	r4, r0
 8008718:	b930      	cbnz	r0, 8008728 <__d2b+0x24>
 800871a:	4602      	mov	r2, r0
 800871c:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <__d2b+0xac>)
 800871e:	4825      	ldr	r0, [pc, #148]	; (80087b4 <__d2b+0xb0>)
 8008720:	f240 310f 	movw	r1, #783	; 0x30f
 8008724:	f000 f9f8 	bl	8008b18 <__assert_func>
 8008728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800872c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008730:	bb2d      	cbnz	r5, 800877e <__d2b+0x7a>
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f1b8 0300 	subs.w	r3, r8, #0
 8008738:	d026      	beq.n	8008788 <__d2b+0x84>
 800873a:	4668      	mov	r0, sp
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	f7ff fd87 	bl	8008250 <__lo0bits>
 8008742:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008746:	b1e8      	cbz	r0, 8008784 <__d2b+0x80>
 8008748:	f1c0 0320 	rsb	r3, r0, #32
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	430b      	orrs	r3, r1
 8008752:	40c2      	lsrs	r2, r0
 8008754:	6163      	str	r3, [r4, #20]
 8008756:	9201      	str	r2, [sp, #4]
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2202      	movne	r2, #2
 8008762:	2201      	moveq	r2, #1
 8008764:	6122      	str	r2, [r4, #16]
 8008766:	b1bd      	cbz	r5, 8008798 <__d2b+0x94>
 8008768:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800876c:	4405      	add	r5, r0
 800876e:	603d      	str	r5, [r7, #0]
 8008770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	4620      	mov	r0, r4
 8008778:	b003      	add	sp, #12
 800877a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008782:	e7d6      	b.n	8008732 <__d2b+0x2e>
 8008784:	6161      	str	r1, [r4, #20]
 8008786:	e7e7      	b.n	8008758 <__d2b+0x54>
 8008788:	a801      	add	r0, sp, #4
 800878a:	f7ff fd61 	bl	8008250 <__lo0bits>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	6163      	str	r3, [r4, #20]
 8008792:	3020      	adds	r0, #32
 8008794:	2201      	movs	r2, #1
 8008796:	e7e5      	b.n	8008764 <__d2b+0x60>
 8008798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800879c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087a0:	6038      	str	r0, [r7, #0]
 80087a2:	6918      	ldr	r0, [r3, #16]
 80087a4:	f7ff fd34 	bl	8008210 <__hi0bits>
 80087a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087ac:	e7e2      	b.n	8008774 <__d2b+0x70>
 80087ae:	bf00      	nop
 80087b0:	08008e7c 	.word	0x08008e7c
 80087b4:	08008e9e 	.word	0x08008e9e

080087b8 <__sread>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	460c      	mov	r4, r1
 80087bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c0:	f000 f978 	bl	8008ab4 <_read_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	bfab      	itete	ge
 80087c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ca:	89a3      	ldrhlt	r3, [r4, #12]
 80087cc:	181b      	addge	r3, r3, r0
 80087ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087d2:	bfac      	ite	ge
 80087d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087d6:	81a3      	strhlt	r3, [r4, #12]
 80087d8:	bd10      	pop	{r4, pc}

080087da <__swrite>:
 80087da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	461f      	mov	r7, r3
 80087e0:	898b      	ldrh	r3, [r1, #12]
 80087e2:	05db      	lsls	r3, r3, #23
 80087e4:	4605      	mov	r5, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	4616      	mov	r6, r2
 80087ea:	d505      	bpl.n	80087f8 <__swrite+0x1e>
 80087ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f0:	2302      	movs	r3, #2
 80087f2:	2200      	movs	r2, #0
 80087f4:	f000 f94c 	bl	8008a90 <_lseek_r>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	4628      	mov	r0, r5
 800880a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800880e:	f000 b963 	b.w	8008ad8 <_write_r>

08008812 <__sseek>:
 8008812:	b510      	push	{r4, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881a:	f000 f939 	bl	8008a90 <_lseek_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	bf15      	itete	ne
 8008824:	6560      	strne	r0, [r4, #84]	; 0x54
 8008826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800882a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800882e:	81a3      	strheq	r3, [r4, #12]
 8008830:	bf18      	it	ne
 8008832:	81a3      	strhne	r3, [r4, #12]
 8008834:	bd10      	pop	{r4, pc}

08008836 <__sclose>:
 8008836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883a:	f000 b8f7 	b.w	8008a2c <_close_r>

0800883e <__swbuf_r>:
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008840:	460e      	mov	r6, r1
 8008842:	4614      	mov	r4, r2
 8008844:	4605      	mov	r5, r0
 8008846:	b118      	cbz	r0, 8008850 <__swbuf_r+0x12>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <__swbuf_r+0x12>
 800884c:	f7fe fa92 	bl	8006d74 <__sinit>
 8008850:	69a3      	ldr	r3, [r4, #24]
 8008852:	60a3      	str	r3, [r4, #8]
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	071a      	lsls	r2, r3, #28
 8008858:	d525      	bpl.n	80088a6 <__swbuf_r+0x68>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	b31b      	cbz	r3, 80088a6 <__swbuf_r+0x68>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	1a98      	subs	r0, r3, r2
 8008864:	6963      	ldr	r3, [r4, #20]
 8008866:	b2f6      	uxtb	r6, r6
 8008868:	4283      	cmp	r3, r0
 800886a:	4637      	mov	r7, r6
 800886c:	dc04      	bgt.n	8008878 <__swbuf_r+0x3a>
 800886e:	4621      	mov	r1, r4
 8008870:	4628      	mov	r0, r5
 8008872:	f7ff fbfd 	bl	8008070 <_fflush_r>
 8008876:	b9e0      	cbnz	r0, 80088b2 <__swbuf_r+0x74>
 8008878:	68a3      	ldr	r3, [r4, #8]
 800887a:	3b01      	subs	r3, #1
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	6022      	str	r2, [r4, #0]
 8008884:	701e      	strb	r6, [r3, #0]
 8008886:	6962      	ldr	r2, [r4, #20]
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	429a      	cmp	r2, r3
 800888c:	d004      	beq.n	8008898 <__swbuf_r+0x5a>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	07db      	lsls	r3, r3, #31
 8008892:	d506      	bpl.n	80088a2 <__swbuf_r+0x64>
 8008894:	2e0a      	cmp	r6, #10
 8008896:	d104      	bne.n	80088a2 <__swbuf_r+0x64>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f7ff fbe8 	bl	8008070 <_fflush_r>
 80088a0:	b938      	cbnz	r0, 80088b2 <__swbuf_r+0x74>
 80088a2:	4638      	mov	r0, r7
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	f000 f805 	bl	80088b8 <__swsetup_r>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0d5      	beq.n	800885e <__swbuf_r+0x20>
 80088b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088b6:	e7f4      	b.n	80088a2 <__swbuf_r+0x64>

080088b8 <__swsetup_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <__swsetup_r+0xac>)
 80088bc:	4605      	mov	r5, r0
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	460c      	mov	r4, r1
 80088c2:	b118      	cbz	r0, 80088cc <__swsetup_r+0x14>
 80088c4:	6a03      	ldr	r3, [r0, #32]
 80088c6:	b90b      	cbnz	r3, 80088cc <__swsetup_r+0x14>
 80088c8:	f7fe fa54 	bl	8006d74 <__sinit>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d2:	0718      	lsls	r0, r3, #28
 80088d4:	d422      	bmi.n	800891c <__swsetup_r+0x64>
 80088d6:	06d9      	lsls	r1, r3, #27
 80088d8:	d407      	bmi.n	80088ea <__swsetup_r+0x32>
 80088da:	2309      	movs	r3, #9
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e8:	e034      	b.n	8008954 <__swsetup_r+0x9c>
 80088ea:	0758      	lsls	r0, r3, #29
 80088ec:	d512      	bpl.n	8008914 <__swsetup_r+0x5c>
 80088ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f0:	b141      	cbz	r1, 8008904 <__swsetup_r+0x4c>
 80088f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f6:	4299      	cmp	r1, r3
 80088f8:	d002      	beq.n	8008900 <__swsetup_r+0x48>
 80088fa:	4628      	mov	r0, r5
 80088fc:	f7ff f9a2 	bl	8007c44 <_free_r>
 8008900:	2300      	movs	r3, #0
 8008902:	6363      	str	r3, [r4, #52]	; 0x34
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	2300      	movs	r3, #0
 800890e:	6063      	str	r3, [r4, #4]
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f043 0308 	orr.w	r3, r3, #8
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	b94b      	cbnz	r3, 8008934 <__swsetup_r+0x7c>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892a:	d003      	beq.n	8008934 <__swsetup_r+0x7c>
 800892c:	4621      	mov	r1, r4
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f840 	bl	80089b4 <__smakebuf_r>
 8008934:	89a0      	ldrh	r0, [r4, #12]
 8008936:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800893a:	f010 0301 	ands.w	r3, r0, #1
 800893e:	d00a      	beq.n	8008956 <__swsetup_r+0x9e>
 8008940:	2300      	movs	r3, #0
 8008942:	60a3      	str	r3, [r4, #8]
 8008944:	6963      	ldr	r3, [r4, #20]
 8008946:	425b      	negs	r3, r3
 8008948:	61a3      	str	r3, [r4, #24]
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	b943      	cbnz	r3, 8008960 <__swsetup_r+0xa8>
 800894e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008952:	d1c4      	bne.n	80088de <__swsetup_r+0x26>
 8008954:	bd38      	pop	{r3, r4, r5, pc}
 8008956:	0781      	lsls	r1, r0, #30
 8008958:	bf58      	it	pl
 800895a:	6963      	ldrpl	r3, [r4, #20]
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	e7f4      	b.n	800894a <__swsetup_r+0x92>
 8008960:	2000      	movs	r0, #0
 8008962:	e7f7      	b.n	8008954 <__swsetup_r+0x9c>
 8008964:	200000dc 	.word	0x200000dc

08008968 <__swhatbuf_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	2900      	cmp	r1, #0
 8008972:	b096      	sub	sp, #88	; 0x58
 8008974:	4615      	mov	r5, r2
 8008976:	461e      	mov	r6, r3
 8008978:	da0d      	bge.n	8008996 <__swhatbuf_r+0x2e>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008980:	f04f 0100 	mov.w	r1, #0
 8008984:	bf0c      	ite	eq
 8008986:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800898a:	2340      	movne	r3, #64	; 0x40
 800898c:	2000      	movs	r0, #0
 800898e:	6031      	str	r1, [r6, #0]
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	b016      	add	sp, #88	; 0x58
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	466a      	mov	r2, sp
 8008998:	f000 f858 	bl	8008a4c <_fstat_r>
 800899c:	2800      	cmp	r0, #0
 800899e:	dbec      	blt.n	800897a <__swhatbuf_r+0x12>
 80089a0:	9901      	ldr	r1, [sp, #4]
 80089a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089aa:	4259      	negs	r1, r3
 80089ac:	4159      	adcs	r1, r3
 80089ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b2:	e7eb      	b.n	800898c <__swhatbuf_r+0x24>

080089b4 <__smakebuf_r>:
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b8:	079d      	lsls	r5, r3, #30
 80089ba:	4606      	mov	r6, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	d507      	bpl.n	80089d0 <__smakebuf_r+0x1c>
 80089c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	2301      	movs	r3, #1
 80089ca:	6163      	str	r3, [r4, #20]
 80089cc:	b002      	add	sp, #8
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	ab01      	add	r3, sp, #4
 80089d2:	466a      	mov	r2, sp
 80089d4:	f7ff ffc8 	bl	8008968 <__swhatbuf_r>
 80089d8:	9900      	ldr	r1, [sp, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	4630      	mov	r0, r6
 80089de:	f7fd ff21 	bl	8006824 <_malloc_r>
 80089e2:	b948      	cbnz	r0, 80089f8 <__smakebuf_r+0x44>
 80089e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e8:	059a      	lsls	r2, r3, #22
 80089ea:	d4ef      	bmi.n	80089cc <__smakebuf_r+0x18>
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	e7e3      	b.n	80089c0 <__smakebuf_r+0xc>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	6163      	str	r3, [r4, #20]
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	6120      	str	r0, [r4, #16]
 8008a0a:	b15b      	cbz	r3, 8008a24 <__smakebuf_r+0x70>
 8008a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 f82d 	bl	8008a70 <_isatty_r>
 8008a16:	b128      	cbz	r0, 8008a24 <__smakebuf_r+0x70>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	431d      	orrs	r5, r3
 8008a28:	81a5      	strh	r5, [r4, #12]
 8008a2a:	e7cf      	b.n	80089cc <__smakebuf_r+0x18>

08008a2c <_close_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_close_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f9 fdd7 	bl	80025ea <_close>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_close_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_close_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	2000071c 	.word	0x2000071c

08008a4c <_fstat_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d07      	ldr	r5, [pc, #28]	; (8008a6c <_fstat_r+0x20>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	f7f9 fdd2 	bl	8002602 <_fstat>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d102      	bne.n	8008a68 <_fstat_r+0x1c>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b103      	cbz	r3, 8008a68 <_fstat_r+0x1c>
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	2000071c 	.word	0x2000071c

08008a70 <_isatty_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	; (8008a8c <_isatty_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f9 fdd1 	bl	8002622 <_isatty>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_isatty_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_isatty_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	2000071c 	.word	0x2000071c

08008a90 <_lseek_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d07      	ldr	r5, [pc, #28]	; (8008ab0 <_lseek_r+0x20>)
 8008a94:	4604      	mov	r4, r0
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	602a      	str	r2, [r5, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7f9 fdca 	bl	8002638 <_lseek>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_lseek_r+0x1e>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_lseek_r+0x1e>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	2000071c 	.word	0x2000071c

08008ab4 <_read_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d07      	ldr	r5, [pc, #28]	; (8008ad4 <_read_r+0x20>)
 8008ab8:	4604      	mov	r4, r0
 8008aba:	4608      	mov	r0, r1
 8008abc:	4611      	mov	r1, r2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	602a      	str	r2, [r5, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f7f9 fd74 	bl	80025b0 <_read>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_read_r+0x1e>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_read_r+0x1e>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	2000071c 	.word	0x2000071c

08008ad8 <_write_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d07      	ldr	r5, [pc, #28]	; (8008af8 <_write_r+0x20>)
 8008adc:	4604      	mov	r4, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	602a      	str	r2, [r5, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7f8 ffc8 	bl	8001a7c <_write>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_write_r+0x1e>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_write_r+0x1e>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	2000071c 	.word	0x2000071c

08008afc <memcpy>:
 8008afc:	440a      	add	r2, r1
 8008afe:	4291      	cmp	r1, r2
 8008b00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b04:	d100      	bne.n	8008b08 <memcpy+0xc>
 8008b06:	4770      	bx	lr
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b12:	4291      	cmp	r1, r2
 8008b14:	d1f9      	bne.n	8008b0a <memcpy+0xe>
 8008b16:	bd10      	pop	{r4, pc}

08008b18 <__assert_func>:
 8008b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b1a:	4614      	mov	r4, r2
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <__assert_func+0x2c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4605      	mov	r5, r0
 8008b24:	68d8      	ldr	r0, [r3, #12]
 8008b26:	b14c      	cbz	r4, 8008b3c <__assert_func+0x24>
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <__assert_func+0x30>)
 8008b2a:	9100      	str	r1, [sp, #0]
 8008b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b30:	4906      	ldr	r1, [pc, #24]	; (8008b4c <__assert_func+0x34>)
 8008b32:	462b      	mov	r3, r5
 8008b34:	f000 f836 	bl	8008ba4 <fiprintf>
 8008b38:	f000 f853 	bl	8008be2 <abort>
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <__assert_func+0x38>)
 8008b3e:	461c      	mov	r4, r3
 8008b40:	e7f3      	b.n	8008b2a <__assert_func+0x12>
 8008b42:	bf00      	nop
 8008b44:	200000dc 	.word	0x200000dc
 8008b48:	080090ff 	.word	0x080090ff
 8008b4c:	0800910c 	.word	0x0800910c
 8008b50:	0800913a 	.word	0x0800913a

08008b54 <_calloc_r>:
 8008b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b56:	fba1 2402 	umull	r2, r4, r1, r2
 8008b5a:	b94c      	cbnz	r4, 8008b70 <_calloc_r+0x1c>
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	9201      	str	r2, [sp, #4]
 8008b60:	f7fd fe60 	bl	8006824 <_malloc_r>
 8008b64:	9a01      	ldr	r2, [sp, #4]
 8008b66:	4605      	mov	r5, r0
 8008b68:	b930      	cbnz	r0, 8008b78 <_calloc_r+0x24>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	b003      	add	sp, #12
 8008b6e:	bd30      	pop	{r4, r5, pc}
 8008b70:	220c      	movs	r2, #12
 8008b72:	6002      	str	r2, [r0, #0]
 8008b74:	2500      	movs	r5, #0
 8008b76:	e7f8      	b.n	8008b6a <_calloc_r+0x16>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7fe f99f 	bl	8006ebc <memset>
 8008b7e:	e7f4      	b.n	8008b6a <_calloc_r+0x16>

08008b80 <__ascii_mbtowc>:
 8008b80:	b082      	sub	sp, #8
 8008b82:	b901      	cbnz	r1, 8008b86 <__ascii_mbtowc+0x6>
 8008b84:	a901      	add	r1, sp, #4
 8008b86:	b142      	cbz	r2, 8008b9a <__ascii_mbtowc+0x1a>
 8008b88:	b14b      	cbz	r3, 8008b9e <__ascii_mbtowc+0x1e>
 8008b8a:	7813      	ldrb	r3, [r2, #0]
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	1e10      	subs	r0, r2, #0
 8008b92:	bf18      	it	ne
 8008b94:	2001      	movne	r0, #1
 8008b96:	b002      	add	sp, #8
 8008b98:	4770      	bx	lr
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	e7fb      	b.n	8008b96 <__ascii_mbtowc+0x16>
 8008b9e:	f06f 0001 	mvn.w	r0, #1
 8008ba2:	e7f8      	b.n	8008b96 <__ascii_mbtowc+0x16>

08008ba4 <fiprintf>:
 8008ba4:	b40e      	push	{r1, r2, r3}
 8008ba6:	b503      	push	{r0, r1, lr}
 8008ba8:	4601      	mov	r1, r0
 8008baa:	ab03      	add	r3, sp, #12
 8008bac:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <fiprintf+0x20>)
 8008bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb2:	6800      	ldr	r0, [r0, #0]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f7ff f8bb 	bl	8007d30 <_vfiprintf_r>
 8008bba:	b002      	add	sp, #8
 8008bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc0:	b003      	add	sp, #12
 8008bc2:	4770      	bx	lr
 8008bc4:	200000dc 	.word	0x200000dc

08008bc8 <__ascii_wctomb>:
 8008bc8:	b149      	cbz	r1, 8008bde <__ascii_wctomb+0x16>
 8008bca:	2aff      	cmp	r2, #255	; 0xff
 8008bcc:	bf85      	ittet	hi
 8008bce:	238a      	movhi	r3, #138	; 0x8a
 8008bd0:	6003      	strhi	r3, [r0, #0]
 8008bd2:	700a      	strbls	r2, [r1, #0]
 8008bd4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008bd8:	bf98      	it	ls
 8008bda:	2001      	movls	r0, #1
 8008bdc:	4770      	bx	lr
 8008bde:	4608      	mov	r0, r1
 8008be0:	4770      	bx	lr

08008be2 <abort>:
 8008be2:	b508      	push	{r3, lr}
 8008be4:	2006      	movs	r0, #6
 8008be6:	f000 f82b 	bl	8008c40 <raise>
 8008bea:	2001      	movs	r0, #1
 8008bec:	f7f9 fcd6 	bl	800259c <_exit>

08008bf0 <_raise_r>:
 8008bf0:	291f      	cmp	r1, #31
 8008bf2:	b538      	push	{r3, r4, r5, lr}
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	d904      	bls.n	8008c04 <_raise_r+0x14>
 8008bfa:	2316      	movs	r3, #22
 8008bfc:	6003      	str	r3, [r0, #0]
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c06:	b112      	cbz	r2, 8008c0e <_raise_r+0x1e>
 8008c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c0c:	b94b      	cbnz	r3, 8008c22 <_raise_r+0x32>
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 f830 	bl	8008c74 <_getpid_r>
 8008c14:	462a      	mov	r2, r5
 8008c16:	4601      	mov	r1, r0
 8008c18:	4620      	mov	r0, r4
 8008c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c1e:	f000 b817 	b.w	8008c50 <_kill_r>
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d00a      	beq.n	8008c3c <_raise_r+0x4c>
 8008c26:	1c59      	adds	r1, r3, #1
 8008c28:	d103      	bne.n	8008c32 <_raise_r+0x42>
 8008c2a:	2316      	movs	r3, #22
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	2001      	movs	r0, #1
 8008c30:	e7e7      	b.n	8008c02 <_raise_r+0x12>
 8008c32:	2400      	movs	r4, #0
 8008c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c38:	4628      	mov	r0, r5
 8008c3a:	4798      	blx	r3
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e7e0      	b.n	8008c02 <_raise_r+0x12>

08008c40 <raise>:
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <raise+0xc>)
 8008c42:	4601      	mov	r1, r0
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f7ff bfd3 	b.w	8008bf0 <_raise_r>
 8008c4a:	bf00      	nop
 8008c4c:	200000dc 	.word	0x200000dc

08008c50 <_kill_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d07      	ldr	r5, [pc, #28]	; (8008c70 <_kill_r+0x20>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	f7f9 fc8d 	bl	800257c <_kill>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d102      	bne.n	8008c6c <_kill_r+0x1c>
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	b103      	cbz	r3, 8008c6c <_kill_r+0x1c>
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	bd38      	pop	{r3, r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	2000071c 	.word	0x2000071c

08008c74 <_getpid_r>:
 8008c74:	f7f9 bc7a 	b.w	800256c <_getpid>

08008c78 <_init>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr

08008c84 <_fini>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr
